
(function(l, r) { if (l.getElementById('livereloadscript')) return; r = l.createElement('script'); r.async = 1; r.src = '//' + (window.location.host || 'localhost').split(':')[0] + ':35729/livereload.js?snipver=1'; r.id = 'livereloadscript'; l.getElementsByTagName('head')[0].appendChild(r) })(window.document);
function noop() { }
const identity = x => x;
function assign(tar, src) {
    // @ts-ignore
    for (const k in src)
        tar[k] = src[k];
    return tar;
}
function add_location(element, file, line, column, char) {
    element.__svelte_meta = {
        loc: { file, line, column, char }
    };
}
function run(fn) {
    return fn();
}
function blank_object() {
    return Object.create(null);
}
function run_all(fns) {
    fns.forEach(run);
}
function is_function(thing) {
    return typeof thing === 'function';
}
function safe_not_equal(a, b) {
    return a != a ? b == b : a !== b || ((a && typeof a === 'object') || typeof a === 'function');
}
function is_empty(obj) {
    return Object.keys(obj).length === 0;
}
function validate_store(store, name) {
    if (store != null && typeof store.subscribe !== 'function') {
        throw new Error(`'${name}' is not a store with a 'subscribe' method`);
    }
}
function subscribe(store, ...callbacks) {
    if (store == null) {
        return noop;
    }
    const unsub = store.subscribe(...callbacks);
    return unsub.unsubscribe ? () => unsub.unsubscribe() : unsub;
}
function component_subscribe(component, store, callback) {
    component.$$.on_destroy.push(subscribe(store, callback));
}
function create_slot(definition, ctx, $$scope, fn) {
    if (definition) {
        const slot_ctx = get_slot_context(definition, ctx, $$scope, fn);
        return definition[0](slot_ctx);
    }
}
function get_slot_context(definition, ctx, $$scope, fn) {
    return definition[1] && fn
        ? assign($$scope.ctx.slice(), definition[1](fn(ctx)))
        : $$scope.ctx;
}
function get_slot_changes(definition, $$scope, dirty, fn) {
    if (definition[2] && fn) {
        const lets = definition[2](fn(dirty));
        if ($$scope.dirty === undefined) {
            return lets;
        }
        if (typeof lets === 'object') {
            const merged = [];
            const len = Math.max($$scope.dirty.length, lets.length);
            for (let i = 0; i < len; i += 1) {
                merged[i] = $$scope.dirty[i] | lets[i];
            }
            return merged;
        }
        return $$scope.dirty | lets;
    }
    return $$scope.dirty;
}
function update_slot_base(slot, slot_definition, ctx, $$scope, slot_changes, get_slot_context_fn) {
    if (slot_changes) {
        const slot_context = get_slot_context(slot_definition, ctx, $$scope, get_slot_context_fn);
        slot.p(slot_context, slot_changes);
    }
}
function get_all_dirty_from_scope($$scope) {
    if ($$scope.ctx.length > 32) {
        const dirty = [];
        const length = $$scope.ctx.length / 32;
        for (let i = 0; i < length; i++) {
            dirty[i] = -1;
        }
        return dirty;
    }
    return -1;
}
function exclude_internal_props(props) {
    const result = {};
    for (const k in props)
        if (k[0] !== '$')
            result[k] = props[k];
    return result;
}
function compute_rest_props(props, keys) {
    const rest = {};
    keys = new Set(keys);
    for (const k in props)
        if (!keys.has(k) && k[0] !== '$')
            rest[k] = props[k];
    return rest;
}
function compute_slots(slots) {
    const result = {};
    for (const key in slots) {
        result[key] = true;
    }
    return result;
}
function set_store_value(store, ret, value) {
    store.set(value);
    return ret;
}

const is_client = typeof window !== 'undefined';
let now = is_client
    ? () => window.performance.now()
    : () => Date.now();
let raf = is_client ? cb => requestAnimationFrame(cb) : noop;

const tasks = new Set();
function run_tasks(now) {
    tasks.forEach(task => {
        if (!task.c(now)) {
            tasks.delete(task);
            task.f();
        }
    });
    if (tasks.size !== 0)
        raf(run_tasks);
}
/**
 * Creates a new task that runs on each raf frame
 * until it returns a falsy value or is aborted
 */
function loop(callback) {
    let task;
    if (tasks.size === 0)
        raf(run_tasks);
    return {
        promise: new Promise(fulfill => {
            tasks.add(task = { c: callback, f: fulfill });
        }),
        abort() {
            tasks.delete(task);
        }
    };
}
function append(target, node) {
    target.appendChild(node);
}
function insert(target, node, anchor) {
    target.insertBefore(node, anchor || null);
}
function detach(node) {
    node.parentNode.removeChild(node);
}
function destroy_each(iterations, detaching) {
    for (let i = 0; i < iterations.length; i += 1) {
        if (iterations[i])
            iterations[i].d(detaching);
    }
}
function element(name) {
    return document.createElement(name);
}
function svg_element(name) {
    return document.createElementNS('http://www.w3.org/2000/svg', name);
}
function text(data) {
    return document.createTextNode(data);
}
function space() {
    return text(' ');
}
function empty() {
    return text('');
}
function listen(node, event, handler, options) {
    node.addEventListener(event, handler, options);
    return () => node.removeEventListener(event, handler, options);
}
function prevent_default(fn) {
    return function (event) {
        event.preventDefault();
        // @ts-ignore
        return fn.call(this, event);
    };
}
function attr(node, attribute, value) {
    if (value == null)
        node.removeAttribute(attribute);
    else if (node.getAttribute(attribute) !== value)
        node.setAttribute(attribute, value);
}
function set_attributes(node, attributes) {
    // @ts-ignore
    const descriptors = Object.getOwnPropertyDescriptors(node.__proto__);
    for (const key in attributes) {
        if (attributes[key] == null) {
            node.removeAttribute(key);
        }
        else if (key === 'style') {
            node.style.cssText = attributes[key];
        }
        else if (key === '__value') {
            node.value = node[key] = attributes[key];
        }
        else if (descriptors[key] && descriptors[key].set) {
            node[key] = attributes[key];
        }
        else {
            attr(node, key, attributes[key]);
        }
    }
}
function set_svg_attributes(node, attributes) {
    for (const key in attributes) {
        attr(node, key, attributes[key]);
    }
}
function children(element) {
    return Array.from(element.childNodes);
}
function set_style(node, key, value, important) {
    if (value === null) {
        node.style.removeProperty(key);
    }
    else {
        node.style.setProperty(key, value, important ? 'important' : '');
    }
}
function toggle_class(element, name, toggle) {
    element.classList[toggle ? 'add' : 'remove'](name);
}
function custom_event(type, detail, { bubbles = false, cancelable = false } = {}) {
    const e = document.createEvent('CustomEvent');
    e.initCustomEvent(type, bubbles, cancelable, detail);
    return e;
}

let current_component;
function set_current_component(component) {
    current_component = component;
}
function get_current_component() {
    if (!current_component)
        throw new Error('Function called outside component initialization');
    return current_component;
}
function onMount(fn) {
    get_current_component().$$.on_mount.push(fn);
}
function afterUpdate(fn) {
    get_current_component().$$.after_update.push(fn);
}
function onDestroy(fn) {
    get_current_component().$$.on_destroy.push(fn);
}
function createEventDispatcher() {
    const component = get_current_component();
    return (type, detail, { cancelable = false } = {}) => {
        const callbacks = component.$$.callbacks[type];
        if (callbacks) {
            // TODO are there situations where events could be dispatched
            // in a server (non-DOM) environment?
            const event = custom_event(type, detail, { cancelable });
            callbacks.slice().forEach(fn => {
                fn.call(component, event);
            });
            return !event.defaultPrevented;
        }
        return true;
    };
}
function setContext(key, context) {
    get_current_component().$$.context.set(key, context);
    return context;
}
function getContext(key) {
    return get_current_component().$$.context.get(key);
}
// TODO figure out if we still want to support
// shorthand events, or if we want to implement
// a real bubbling mechanism
function bubble(component, event) {
    const callbacks = component.$$.callbacks[event.type];
    if (callbacks) {
        // @ts-ignore
        callbacks.slice().forEach(fn => fn.call(this, event));
    }
}

const dirty_components = [];
const binding_callbacks = [];
const render_callbacks = [];
const flush_callbacks = [];
const resolved_promise = Promise.resolve();
let update_scheduled = false;
function schedule_update() {
    if (!update_scheduled) {
        update_scheduled = true;
        resolved_promise.then(flush);
    }
}
function add_render_callback(fn) {
    render_callbacks.push(fn);
}
function add_flush_callback(fn) {
    flush_callbacks.push(fn);
}
// flush() calls callbacks in this order:
// 1. All beforeUpdate callbacks, in order: parents before children
// 2. All bind:this callbacks, in reverse order: children before parents.
// 3. All afterUpdate callbacks, in order: parents before children. EXCEPT
//    for afterUpdates called during the initial onMount, which are called in
//    reverse order: children before parents.
// Since callbacks might update component values, which could trigger another
// call to flush(), the following steps guard against this:
// 1. During beforeUpdate, any updated components will be added to the
//    dirty_components array and will cause a reentrant call to flush(). Because
//    the flush index is kept outside the function, the reentrant call will pick
//    up where the earlier call left off and go through all dirty components. The
//    current_component value is saved and restored so that the reentrant call will
//    not interfere with the "parent" flush() call.
// 2. bind:this callbacks cannot trigger new flush() calls.
// 3. During afterUpdate, any updated components will NOT have their afterUpdate
//    callback called a second time; the seen_callbacks set, outside the flush()
//    function, guarantees this behavior.
const seen_callbacks = new Set();
let flushidx = 0; // Do *not* move this inside the flush() function
function flush() {
    const saved_component = current_component;
    do {
        // first, call beforeUpdate functions
        // and update components
        while (flushidx < dirty_components.length) {
            const component = dirty_components[flushidx];
            flushidx++;
            set_current_component(component);
            update(component.$$);
        }
        set_current_component(null);
        dirty_components.length = 0;
        flushidx = 0;
        while (binding_callbacks.length)
            binding_callbacks.pop()();
        // then, once components are updated, call
        // afterUpdate functions. This may cause
        // subsequent updates...
        for (let i = 0; i < render_callbacks.length; i += 1) {
            const callback = render_callbacks[i];
            if (!seen_callbacks.has(callback)) {
                // ...so guard against infinite loops
                seen_callbacks.add(callback);
                callback();
            }
        }
        render_callbacks.length = 0;
    } while (dirty_components.length);
    while (flush_callbacks.length) {
        flush_callbacks.pop()();
    }
    update_scheduled = false;
    seen_callbacks.clear();
    set_current_component(saved_component);
}
function update($$) {
    if ($$.fragment !== null) {
        $$.update();
        run_all($$.before_update);
        const dirty = $$.dirty;
        $$.dirty = [-1];
        $$.fragment && $$.fragment.p($$.ctx, dirty);
        $$.after_update.forEach(add_render_callback);
    }
}
const outroing = new Set();
let outros;
function group_outros() {
    outros = {
        r: 0,
        c: [],
        p: outros // parent group
    };
}
function check_outros() {
    if (!outros.r) {
        run_all(outros.c);
    }
    outros = outros.p;
}
function transition_in(block, local) {
    if (block && block.i) {
        outroing.delete(block);
        block.i(local);
    }
}
function transition_out(block, local, detach, callback) {
    if (block && block.o) {
        if (outroing.has(block))
            return;
        outroing.add(block);
        outros.c.push(() => {
            outroing.delete(block);
            if (callback) {
                if (detach)
                    block.d(1);
                callback();
            }
        });
        block.o(local);
    }
    else if (callback) {
        callback();
    }
}

const globals = (typeof window !== 'undefined'
    ? window
    : typeof globalThis !== 'undefined'
        ? globalThis
        : global);
function outro_and_destroy_block(block, lookup) {
    transition_out(block, 1, 1, () => {
        lookup.delete(block.key);
    });
}
function update_keyed_each(old_blocks, dirty, get_key, dynamic, ctx, list, lookup, node, destroy, create_each_block, next, get_context) {
    let o = old_blocks.length;
    let n = list.length;
    let i = o;
    const old_indexes = {};
    while (i--)
        old_indexes[old_blocks[i].key] = i;
    const new_blocks = [];
    const new_lookup = new Map();
    const deltas = new Map();
    i = n;
    while (i--) {
        const child_ctx = get_context(ctx, list, i);
        const key = get_key(child_ctx);
        let block = lookup.get(key);
        if (!block) {
            block = create_each_block(key, child_ctx);
            block.c();
        }
        else if (dynamic) {
            block.p(child_ctx, dirty);
        }
        new_lookup.set(key, new_blocks[i] = block);
        if (key in old_indexes)
            deltas.set(key, Math.abs(i - old_indexes[key]));
    }
    const will_move = new Set();
    const did_move = new Set();
    function insert(block) {
        transition_in(block, 1);
        block.m(node, next);
        lookup.set(block.key, block);
        next = block.first;
        n--;
    }
    while (o && n) {
        const new_block = new_blocks[n - 1];
        const old_block = old_blocks[o - 1];
        const new_key = new_block.key;
        const old_key = old_block.key;
        if (new_block === old_block) {
            // do nothing
            next = new_block.first;
            o--;
            n--;
        }
        else if (!new_lookup.has(old_key)) {
            // remove old block
            destroy(old_block, lookup);
            o--;
        }
        else if (!lookup.has(new_key) || will_move.has(new_key)) {
            insert(new_block);
        }
        else if (did_move.has(old_key)) {
            o--;
        }
        else if (deltas.get(new_key) > deltas.get(old_key)) {
            did_move.add(new_key);
            insert(new_block);
        }
        else {
            will_move.add(old_key);
            o--;
        }
    }
    while (o--) {
        const old_block = old_blocks[o];
        if (!new_lookup.has(old_block.key))
            destroy(old_block, lookup);
    }
    while (n)
        insert(new_blocks[n - 1]);
    return new_blocks;
}
function validate_each_keys(ctx, list, get_context, get_key) {
    const keys = new Set();
    for (let i = 0; i < list.length; i++) {
        const key = get_key(get_context(ctx, list, i));
        if (keys.has(key)) {
            throw new Error('Cannot have duplicate keys in a keyed each');
        }
        keys.add(key);
    }
}

function get_spread_update(levels, updates) {
    const update = {};
    const to_null_out = {};
    const accounted_for = { $$scope: 1 };
    let i = levels.length;
    while (i--) {
        const o = levels[i];
        const n = updates[i];
        if (n) {
            for (const key in o) {
                if (!(key in n))
                    to_null_out[key] = 1;
            }
            for (const key in n) {
                if (!accounted_for[key]) {
                    update[key] = n[key];
                    accounted_for[key] = 1;
                }
            }
            levels[i] = n;
        }
        else {
            for (const key in o) {
                accounted_for[key] = 1;
            }
        }
    }
    for (const key in to_null_out) {
        if (!(key in update))
            update[key] = undefined;
    }
    return update;
}
function get_spread_object(spread_props) {
    return typeof spread_props === 'object' && spread_props !== null ? spread_props : {};
}

function bind(component, name, callback) {
    const index = component.$$.props[name];
    if (index !== undefined) {
        component.$$.bound[index] = callback;
        callback(component.$$.ctx[index]);
    }
}
function create_component(block) {
    block && block.c();
}
function mount_component(component, target, anchor, customElement) {
    const { fragment, on_mount, on_destroy, after_update } = component.$$;
    fragment && fragment.m(target, anchor);
    if (!customElement) {
        // onMount happens before the initial afterUpdate
        add_render_callback(() => {
            const new_on_destroy = on_mount.map(run).filter(is_function);
            if (on_destroy) {
                on_destroy.push(...new_on_destroy);
            }
            else {
                // Edge case - component was destroyed immediately,
                // most likely as a result of a binding initialising
                run_all(new_on_destroy);
            }
            component.$$.on_mount = [];
        });
    }
    after_update.forEach(add_render_callback);
}
function destroy_component(component, detaching) {
    const $$ = component.$$;
    if ($$.fragment !== null) {
        run_all($$.on_destroy);
        $$.fragment && $$.fragment.d(detaching);
        // TODO null out other refs, including component.$$ (but need to
        // preserve final state?)
        $$.on_destroy = $$.fragment = null;
        $$.ctx = [];
    }
}
function make_dirty(component, i) {
    if (component.$$.dirty[0] === -1) {
        dirty_components.push(component);
        schedule_update();
        component.$$.dirty.fill(0);
    }
    component.$$.dirty[(i / 31) | 0] |= (1 << (i % 31));
}
function init(component, options, instance, create_fragment, not_equal, props, append_styles, dirty = [-1]) {
    const parent_component = current_component;
    set_current_component(component);
    const $$ = component.$$ = {
        fragment: null,
        ctx: null,
        // state
        props,
        update: noop,
        not_equal,
        bound: blank_object(),
        // lifecycle
        on_mount: [],
        on_destroy: [],
        on_disconnect: [],
        before_update: [],
        after_update: [],
        context: new Map(options.context || (parent_component ? parent_component.$$.context : [])),
        // everything else
        callbacks: blank_object(),
        dirty,
        skip_bound: false,
        root: options.target || parent_component.$$.root
    };
    append_styles && append_styles($$.root);
    let ready = false;
    $$.ctx = instance
        ? instance(component, options.props || {}, (i, ret, ...rest) => {
            const value = rest.length ? rest[0] : ret;
            if ($$.ctx && not_equal($$.ctx[i], $$.ctx[i] = value)) {
                if (!$$.skip_bound && $$.bound[i])
                    $$.bound[i](value);
                if (ready)
                    make_dirty(component, i);
            }
            return ret;
        })
        : [];
    $$.update();
    ready = true;
    run_all($$.before_update);
    // `false` as a special case of no DOM component
    $$.fragment = create_fragment ? create_fragment($$.ctx) : false;
    if (options.target) {
        if (options.hydrate) {
            const nodes = children(options.target);
            // eslint-disable-next-line @typescript-eslint/no-non-null-assertion
            $$.fragment && $$.fragment.l(nodes);
            nodes.forEach(detach);
        }
        else {
            // eslint-disable-next-line @typescript-eslint/no-non-null-assertion
            $$.fragment && $$.fragment.c();
        }
        if (options.intro)
            transition_in(component.$$.fragment);
        mount_component(component, options.target, options.anchor, options.customElement);
        flush();
    }
    set_current_component(parent_component);
}
/**
 * Base class for Svelte components. Used when dev=false.
 */
class SvelteComponent {
    $destroy() {
        destroy_component(this, 1);
        this.$destroy = noop;
    }
    $on(type, callback) {
        const callbacks = (this.$$.callbacks[type] || (this.$$.callbacks[type] = []));
        callbacks.push(callback);
        return () => {
            const index = callbacks.indexOf(callback);
            if (index !== -1)
                callbacks.splice(index, 1);
        };
    }
    $set($$props) {
        if (this.$$set && !is_empty($$props)) {
            this.$$.skip_bound = true;
            this.$$set($$props);
            this.$$.skip_bound = false;
        }
    }
}

function dispatch_dev(type, detail) {
    document.dispatchEvent(custom_event(type, Object.assign({ version: '3.49.0' }, detail), { bubbles: true }));
}
function append_dev(target, node) {
    dispatch_dev('SvelteDOMInsert', { target, node });
    append(target, node);
}
function insert_dev(target, node, anchor) {
    dispatch_dev('SvelteDOMInsert', { target, node, anchor });
    insert(target, node, anchor);
}
function detach_dev(node) {
    dispatch_dev('SvelteDOMRemove', { node });
    detach(node);
}
function listen_dev(node, event, handler, options, has_prevent_default, has_stop_propagation) {
    const modifiers = options === true ? ['capture'] : options ? Array.from(Object.keys(options)) : [];
    if (has_prevent_default)
        modifiers.push('preventDefault');
    if (has_stop_propagation)
        modifiers.push('stopPropagation');
    dispatch_dev('SvelteDOMAddEventListener', { node, event, handler, modifiers });
    const dispose = listen(node, event, handler, options);
    return () => {
        dispatch_dev('SvelteDOMRemoveEventListener', { node, event, handler, modifiers });
        dispose();
    };
}
function attr_dev(node, attribute, value) {
    attr(node, attribute, value);
    if (value == null)
        dispatch_dev('SvelteDOMRemoveAttribute', { node, attribute });
    else
        dispatch_dev('SvelteDOMSetAttribute', { node, attribute, value });
}
function prop_dev(node, property, value) {
    node[property] = value;
    dispatch_dev('SvelteDOMSetProperty', { node, property, value });
}
function set_data_dev(text, data) {
    data = '' + data;
    if (text.wholeText === data)
        return;
    dispatch_dev('SvelteDOMSetData', { node: text, data });
    text.data = data;
}
function validate_each_argument(arg) {
    if (typeof arg !== 'string' && !(arg && typeof arg === 'object' && 'length' in arg)) {
        let msg = '{#each} only iterates over array-like objects.';
        if (typeof Symbol === 'function' && arg && Symbol.iterator in arg) {
            msg += ' You can use a spread to convert this iterable into an array.';
        }
        throw new Error(msg);
    }
}
function validate_slots(name, slot, keys) {
    for (const slot_key of Object.keys(slot)) {
        if (!~keys.indexOf(slot_key)) {
            console.warn(`<${name}> received an unexpected slot "${slot_key}".`);
        }
    }
}
/**
 * Base class for Svelte components with some minor dev-enhancements. Used when dev=true.
 */
class SvelteComponentDev extends SvelteComponent {
    constructor(options) {
        if (!options || (!options.target && !options.$$inline)) {
            throw new Error("'target' is a required option");
        }
        super();
    }
    $destroy() {
        super.$destroy();
        this.$destroy = () => {
            console.warn('Component was already destroyed'); // eslint-disable-line no-console
        };
    }
    $capture_state() { }
    $inject_state() { }
}

const subscriber_queue = [];
/**
 * Create a `Writable` store that allows both updating and reading by subscription.
 * @param {*=}value initial value
 * @param {StartStopNotifier=}start start and stop notifications for subscriptions
 */
function writable(value, start = noop) {
    let stop;
    const subscribers = new Set();
    function set(new_value) {
        if (safe_not_equal(value, new_value)) {
            value = new_value;
            if (stop) { // store is ready
                const run_queue = !subscriber_queue.length;
                for (const subscriber of subscribers) {
                    subscriber[1]();
                    subscriber_queue.push(subscriber, value);
                }
                if (run_queue) {
                    for (let i = 0; i < subscriber_queue.length; i += 2) {
                        subscriber_queue[i][0](subscriber_queue[i + 1]);
                    }
                    subscriber_queue.length = 0;
                }
            }
        }
    }
    function update(fn) {
        set(fn(value));
    }
    function subscribe(run, invalidate = noop) {
        const subscriber = [run, invalidate];
        subscribers.add(subscriber);
        if (subscribers.size === 1) {
            stop = start(set) || noop;
        }
        run(value);
        return () => {
            subscribers.delete(subscriber);
            if (subscribers.size === 0) {
                stop();
                stop = null;
            }
        };
    }
    return { set, update, subscribe };
}

const globalplugin = writable();

const WorkoutsArray = [
    { 'id': 31, 'woname': 'plank', 'displayname': 'plank', 'wodirection': 'right', 'duration': 30, 'targetarea': 'core' },
    { 'id': 37, 'woname': 'pushups', 'displayname': 'pushups', 'wodirection': 'right', 'duration': 30, 'targetarea': 'upper' },
    { 'id': 41.1, 'woname': 'sideplank', 'displayname': 'sideplank-right', 'wodirection': 'right', 'duration': 30, 'targetarea': 'core' },
    { 'id': 41.2, 'woname': 'sideplank', 'displayname': 'sideplank-left', 'wodirection': 'left', 'duration': 30, 'targetarea': 'core' },
    { 'id': 12, 'woname': 'agilitycircles', 'displayname': 'agilitycircles', 'wodirection': 'right', 'duration': 30, 'targetarea': 'full' },
    { 'id': 13, 'woname': 'alternatingsupermans', 'displayname': 'alternatingsupermans', 'wodirection': 'right', 'duration': 30, 'targetarea': 'core' },
    { 'id': 14.1, 'woname': 'balancereaches', 'displayname': 'balancereaches-right', 'wodirection': 'right', 'duration': 30, 'targetarea': 'lower' },
    { 'id': 14.2, 'woname': 'balancereaches', 'displayname': 'balancereaches-left', 'wodirection': 'left', 'duration': 30, 'targetarea': 'lower' },
    { 'id': 15, 'woname': 'bicycles', 'displayname': 'bicycles', 'wodirection': 'right', 'duration': 30, 'targetarea': 'core' },
    { 'id': 16, 'woname': 'burpees', 'displayname': 'burpees', 'wodirection': 'right', 'duration': 30, 'targetarea': 'full' },
    { 'id': 17, 'woname': 'crossbodyv', 'displayname': 'crossbody-v', 'wodirection': 'right', 'duration': 30, 'targetarea': 'core' },
    { 'id': 18, 'woname': 'crunches', 'displayname': 'crunches', 'wodirection': 'right', 'duration': 30, 'targetarea': 'core' },
    { 'id': 19, 'woname': 'curtsylunges', 'displayname': 'curtsylunges', 'wodirection': 'right', 'duration': 30, 'targetarea': 'lower' },
    { 'id': 20, 'woname': 'diagonallunges', 'displayname': 'diagonallunges', 'wodirection': 'right', 'duration': 30, 'targetarea': 'lower' },
    { 'id': 21, 'woname': 'divebomberpushup', 'displayname': 'divebomberpushup', 'wodirection': 'right', 'duration': 30, 'targetarea': 'upper' },
    { 'id': 22, 'woname': 'doublecrunches', 'displayname': 'doublecrunches', 'wodirection': 'right', 'duration': 30, 'targetarea': 'core' },
    { 'id': 23, 'woname': 'hellodollies', 'displayname': 'hellodollies', 'wodirection': 'right', 'duration': 30, 'targetarea': 'core' },
    { 'id': 24, 'woname': 'hightailpushups', 'displayname': 'hightailpushups', 'wodirection': 'right', 'duration': 30, 'targetarea': 'upper' },
    { 'id': 27, 'woname': 'jumpingjacks', 'displayname': 'jumpingjacks', 'wodirection': 'right', 'duration': 30, 'targetarea': 'full' },
    { 'id': 28, 'woname': 'laterallunges', 'displayname': 'laterallunges', 'wodirection': 'right', 'duration': 30, 'targetarea': 'lower' },
    { 'id': 29, 'woname': 'lunges', 'displayname': 'lunges', 'wodirection': 'right', 'duration': 30, 'targetarea': 'lower' },
    { 'id': 34, 'woname': 'prisoners', 'displayname': 'prisoners', 'wodirection': 'right', 'duration': 30, 'targetarea': 'upper' },
    { 'id': 35, 'woname': 'pushuprotate', 'displayname': 'pushuprotate', 'wodirection': 'right', 'duration': 30, 'targetarea': 'upper' },
    { 'id': 36, 'woname': 'pushupspider', 'displayname': 'pushupspider', 'wodirection': 'right', 'duration': 30, 'targetarea': 'upper' },
    { 'id': 0, 'woname': 'rest', 'displayname': 'rest', 'wodirection': 'right', 'duration': 10, 'targetarea': 'rest' },
    { 'id': 38, 'woname': 'reverselungerotate', 'displayname': 'reverselungerotate', 'wodirection': 'right', 'duration': 30, 'targetarea': 'lower' },
    { 'id': 39, 'woname': 'reverselunges', 'displayname': 'reverselunges', 'wodirection': 'right', 'duration': 30, 'targetarea': 'lower' },
    { 'id': 40, 'woname': 'shadowboxing', 'displayname': 'shadowboxing', 'wodirection': 'right', 'duration': 30, 'targetarea': 'full' },
    { 'id': 42, 'woname': 'skater', 'displayname': 'skater', 'wodirection': 'right', 'duration': 30, 'targetarea': 'lower' },
    { 'id': 43, 'woname': 'sprints', 'displayname': 'sprints', 'wodirection': 'right', 'duration': 30, 'targetarea': 'full' },
    { 'id': 44, 'woname': 'squats', 'displayname': 'squats', 'wodirection': 'right', 'duration': 30, 'targetarea': 'lower' },
    { 'id': 45, 'woname': 'stepupsquats', 'displayname': 'stepupsquats', 'wodirection': 'right', 'duration': 30, 'targetarea': 'lower' },
    { 'id': 46, 'woname': 'surfers', 'displayname': 'surfers', 'wodirection': 'right', 'duration': 30, 'targetarea': 'full' },
    { 'id': 47, 'woname': 'swimmers', 'displayname': 'swimmers', 'wodirection': 'right', 'duration': 30, 'targetarea': 'upper' },
    { 'id': 11, 'woname': 'tensandtwos', 'displayname': 'tensandtwos', 'wodirection': 'right', 'duration': 30, 'targetarea': 'core' },
    { 'id': 48, 'woname': 'toetouches', 'displayname': 'toetouches', 'wodirection': 'right', 'duration': 30, 'targetarea': 'core' },
    { 'id': 49, 'woname': 'tricepsdipandreach', 'displayname': 'tricepsdipandreach', 'wodirection': 'right', 'duration': 30, 'targetarea': 'upper' },
    { 'id': 50, 'woname': 'tricepsdips', 'displayname': 'tricepsdips', 'wodirection': 'right', 'duration': 30, 'targetarea': 'upper' },
    { 'id': 51, 'woname': 'wormwalkouts', 'displayname': 'wormwalkouts', 'wodirection': 'right', 'duration': 30, 'targetarea': 'full' },
];

const ProgramArray = [
    {
        id: 58,
        target: 'full',
        routine: [
            42, 0, 18, 0, 30, 0, 24, 0, 16, 0, 39, 0, 40, 0, 43, 0, 45, 0, 13,
        ],
    },
    {
        id: 60,
        target: 'full',
        routine: [
            43, 0, 44, 0, 18, 0, 51, 0, 37, 0, 13, 0, 40, 0, 42, 0, 32, 0, 45,
        ],
    },
    {
        id: 62,
        target: 'full',
        routine: [43, 0, 20, 0, 33, 0, 15, 0, 12, 0, 6, 0, 46, 0, 25, 0, 45, 0, 35],
    },
    {
        id: 64,
        target: 'full',
        routine: [
            47, 0, 28, 0, 16, 0, 45, 0, 17, 0, 35, 0, 29, 0, 43, 0, 13, 0, 51,
        ],
    },
    {
        id: 66,
        target: 'full',
        routine: [
            40, 0, 30, 0, 37, 0, 43, 0, 45, 0, 38, 0, 31, 0, 16, 0, 27, 0, 32,
        ],
    },
    {
        id: 67,
        target: 'full',
        routine: [
            16, 0, 26, 0, 17, 0, 45, 0, 35, 0, 15, 0, 27, 0, 19, 0, 47, 0, 33,
        ],
    },
    {
        id: 70,
        target: 'full',
        routine: [
            44, 0, 17, 0, 46, 0, 36, 0, 12, 0, 42, 0, 35, 0, 40, 0, 33, 0, 15,
        ],
    },
    {
        id: 72,
        target: 'full',
        routine: [
            12, 0, 42, 0, 45, 0, 13, 0, 16, 0, 34, 0, 30, 0, 39, 0, 27, 0, 40,
        ],
    },
    {
        id: 74,
        target: 'full',
        routine: [
            32, 0, 20, 0, 12, 0, 33, 0, 18, 0, 37, 0, 25, 0, 16, 0, 23, 0, 44,
        ],
    },
    {
        id: 76,
        target: 'full',
        routine: [
            27, 0, 46, 0, 49, 0, 16, 0, 12, 0, 28, 0, 11, 0, 43, 0, 33, 0, 47,
        ],
    },
    {
        id: 78,
        target: 'full',
        routine: [
            12, 0, 29, 0, 11, 0, 33, 0, 50, 0, 48, 0, 46, 0, 38, 0, 36, 0, 27,
        ],
    },
    {
        id: 80,
        target: 'full',
        routine: [
            26, 0, 31, 0, 12, 0, 32, 0, 30, 0, 19, 0, 47, 0, 46, 0, 27, 0, 48,
        ],
    },
    {
        id: 82,
        target: 'full',
        routine: [
            46, 0, 44, 0, 51, 0, 23, 0, 43, 0, 32, 0, 45, 0, 42, 0, 30, 0, 49,
        ],
    },
    {
        id: 84,
        target: 'full',
        routine: [
            34, 0, 42, 0, 46, 0, 27, 0, 22, 0, 49, 0, 39, 0, 12, 0, 11, 0, 33,
        ],
    },
    {
        id: 86,
        target: 'full',
        routine: [
            33, 0, 12, 0, 50, 0, 40, 0, 30, 0, 20, 0, 23, 0, 16, 0, 27, 0, 36,
        ],
    },
    {
        id: 88,
        target: 'full',
        routine: [
            30, 0, 25, 0, 31, 0, 27, 0, 21, 0, 22, 0, 45, 0, 28, 0, 37, 0, 40,
        ],
    },
    {
        id: 90,
        target: 'full',
        routine: [
            29, 0, 11, 0, 16, 0, 34, 0, 51, 0, 38, 0, 35, 0, 30, 0, 40, 0, 22,
        ],
    },
    {
        id: 92,
        target: 'full',
        routine: [
            27, 0, 26, 0, 30, 0, 11, 0, 16, 0, 21, 0, 40, 0, 19, 0, 46, 0, 47,
        ],
    },
    {
        id: 94,
        target: 'full',
        routine: [
            47, 0, 44, 0, 30, 0, 40, 0, 48, 0, 24, 0, 42, 0, 46, 0, 31, 0, 27,
        ],
    },
    {
        id: 96,
        target: 'full',
        routine: [
            45, 0, 16, 0, 21, 0, 27, 0, 46, 0, 42, 0, 13, 0, 12, 0, 40, 0, 37,
        ],
    },
    {
        id: 98,
        target: 'full',
        routine: [
            46, 0, 39, 0, 23, 0, 40, 0, 34, 0, 18, 0, 51, 0, 20, 0, 49, 0, 43,
        ],
    },
    {
        id: 100,
        target: 'full',
        routine: [
            25, 0, 23, 0, 43, 0, 21, 0, 45, 0, 28, 0, 50, 0, 51, 0, 27, 0, 48,
        ],
    },
    {
        id: 102,
        target: 'full',
        routine: [
            16, 0, 29, 0, 46, 0, 31, 0, 12, 0, 50, 0, 33, 0, 38, 0, 40, 0, 20,
        ],
    },
    {
        id: 104,
        target: 'full',
        routine: [
            36, 0, 26, 0, 51, 0, 27, 0, 15, 0, 49, 0, 19, 0, 30, 0, 17, 0, 40,
        ],
    },
    {
        id: 106,
        target: 'full',
        routine: [
            51, 0, 43, 0, 34, 0, 33, 0, 12, 0, 44, 0, 15, 0, 46, 0, 27, 0, 49,
        ],
    },
    {
        id: 108,
        target: 'upper',
        routine: [
            37, 0, 44, 0, 32, 0, 43, 0, 18, 0, 49, 0, 39, 0, 51, 0, 15, 0, 21,
        ],
    },
    {
        id: 110,
        target: 'upper',
        routine: [
            37, 0, 32, 0, 43, 0, 18, 0, 20, 0, 47, 0, 50, 0, 13, 0, 51, 0, 39,
        ],
    },
    {
        id: 112,
        target: 'upper',
        routine: [
            35, 0, 26, 0, 47, 0, 16, 0, 17, 0, 37, 0, 42, 0, 45, 0, 48, 0, 34,
        ],
    },
    {
        id: 114,
        target: 'upper',
        routine: [
            35, 0, 47, 0, 16, 0, 17, 0, 28, 0, 24, 0, 49, 0, 15, 0, 45, 0, 25,
        ],
    },
    {
        id: 116,
        target: 'upper',
        routine: [
            50, 0, 29, 0, 36, 0, 12, 0, 31, 0, 35, 0, 19, 0, 33, 0, 22, 0, 34,
        ],
    },
    {
        id: 118,
        target: 'upper',
        routine: [
            50, 0, 36, 0, 12, 0, 31, 0, 38, 0, 34, 0, 21, 0, 48, 0, 33, 0, 29,
        ],
    },
    {
        id: 120,
        target: 'upper',
        routine: [
            21, 0, 25, 0, 49, 0, 46, 0, 23, 0, 34, 0, 38, 0, 27, 0, 11, 0, 36,
        ],
    },
    {
        id: 122,
        target: 'upper',
        routine: [
            21, 0, 49, 0, 46, 0, 11, 0, 19, 0, 47, 0, 34, 0, 22, 0, 27, 0, 26,
        ],
    },
    {
        id: 124,
        target: 'upper',
        routine: [
            34, 0, 39, 0, 24, 0, 30, 0, 13, 0, 50, 0, 28, 0, 40, 0, 48, 0, 32,
        ],
    },
    {
        id: 126,
        target: 'upper',
        routine: [
            34, 0, 24, 0, 30, 0, 23, 0, 42, 0, 37, 0, 32, 0, 48, 0, 40, 0, 44,
        ],
    },
    {
        id: 128,
        target: 'lower',
        routine: [
            26, 0, 43, 0, 37, 0, 22, 0, 39, 0, 51, 0, 29, 0, 34, 0, 23, 0, 28,
        ],
    },
    {
        id: 130,
        target: 'lower',
        routine: [
            14.1, 0, 14.2, 0, 43, 0, 22, 0, 24, 0, 25, 0, 28, 0, 11, 0, 51, 0, 47,
        ],
    },
    {
        id: 132,
        target: 'lower',
        routine: [
            29, 0, 16, 0, 35, 0, 18, 0, 25, 0, 45, 0, 20, 0, 47, 0, 13, 0, 44,
        ],
    },
    {
        id: 134,
        target: 'lower',
        routine: [
            20, 0, 44, 0, 16, 0, 48, 0, 36, 0, 42, 0, 39, 0, 31, 0, 45, 0, 34,
        ],
    },
    {
        id: 136,
        target: 'lower',
        routine: [
            25, 0, 12, 0, 50, 0, 17, 0, 44, 0, 33, 0, 28, 0, 36, 0, 15, 0, 20,
        ],
    },
    {
        id: 138,
        target: 'lower',
        routine: [
            26, 0, 28, 0, 12, 0, 15, 0, 47, 0, 14.1, 0, 14.2, 0, 17, 0, 33, 0, 50,
        ],
    },
    {
        id: 140,
        target: 'lower',
        routine: [
            39, 0, 46, 0, 21, 0, 31, 0, 26, 0, 27, 0, 38, 0, 32, 0, 48, 0, 19,
        ],
    },
    {
        id: 142,
        target: 'lower',
        routine: [
            25, 0, 19, 0, 46, 0, 13, 0, 32, 0, 44, 0, 42, 0, 18, 0, 27, 0, 47,
        ],
    },
    {
        id: 144,
        target: 'lower',
        routine: [
            19, 0, 18, 0, 34, 0, 11, 0, 25, 0, 40, 0, 39, 0, 49, 0, 22, 0, 26,
        ],
    },
    {
        id: 146,
        target: 'lower',
        routine: [
            39, 0, 20, 0, 30, 0, 23, 0, 34, 0, 26, 0, 28, 0, 17, 0, 40, 0, 49,
        ],
    },
    {
        id: 148,
        target: 'core',
        routine: [
            41.1, 0, 41.2, 0, 47, 0, 43, 0, 44, 0, 11, 0, 22, 0, 42, 0, 16, 0, 18,
        ],
    },
    {
        id: 150,
        target: 'core',
        routine: [
            18, 0, 15, 0, 50, 0, 16, 0, 26, 0, 48, 0, 31, 0, 19, 0, 12, 0, 17,
        ],
    },
    {
        id: 152,
        target: 'core',
        routine: [
            11, 0, 22, 0, 35, 0, 12, 0, 29, 0, 41.1, 0, 41.2, 0, 38, 0, 46, 0, 31,
        ],
    },
    {
        id: 154,
        target: 'core',
        routine: [
            13, 0, 48, 0, 21, 0, 46, 0, 25, 0, 18, 0, 23, 0, 28, 0, 30, 0, 11,
        ],
    },
    {
        id: 156,
        target: 'full',
        routine: [
            41.1, 0, 41.2, 0, 36, 0, 30, 0, 39, 0, 23, 0, 17, 0, 20, 0, 51, 0, 22,
        ],
    },
];

/* node_modules/carbon-components-svelte/src/Button/ButtonSkeleton.svelte generated by Svelte v3.49.0 */

const file$1a = "node_modules/carbon-components-svelte/src/Button/ButtonSkeleton.svelte";

// (35:0) {:else}
function create_else_block$7(ctx) {
	let div;
	let mounted;
	let dispose;
	let div_levels = [/*$$restProps*/ ctx[2]];
	let div_data = {};

	for (let i = 0; i < div_levels.length; i += 1) {
		div_data = assign(div_data, div_levels[i]);
	}

	const block = {
		c: function create() {
			div = element("div");
			set_attributes(div, div_data);
			toggle_class(div, "bx--skeleton", true);
			toggle_class(div, "bx--btn", true);
			toggle_class(div, "bx--btn--field", /*size*/ ctx[1] === 'field');
			toggle_class(div, "bx--btn--sm", /*size*/ ctx[1] === 'small');
			toggle_class(div, "bx--btn--lg", /*size*/ ctx[1] === 'lg');
			toggle_class(div, "bx--btn--xl", /*size*/ ctx[1] === 'xl');
			add_location(div, file$1a, 35, 2, 801);
		},
		m: function mount(target, anchor) {
			insert_dev(target, div, anchor);

			if (!mounted) {
				dispose = [
					listen_dev(div, "click", /*click_handler_1*/ ctx[7], false, false, false),
					listen_dev(div, "mouseover", /*mouseover_handler_1*/ ctx[8], false, false, false),
					listen_dev(div, "mouseenter", /*mouseenter_handler_1*/ ctx[9], false, false, false),
					listen_dev(div, "mouseleave", /*mouseleave_handler_1*/ ctx[10], false, false, false)
				];

				mounted = true;
			}
		},
		p: function update(ctx, dirty) {
			set_attributes(div, div_data = get_spread_update(div_levels, [dirty & /*$$restProps*/ 4 && /*$$restProps*/ ctx[2]]));
			toggle_class(div, "bx--skeleton", true);
			toggle_class(div, "bx--btn", true);
			toggle_class(div, "bx--btn--field", /*size*/ ctx[1] === 'field');
			toggle_class(div, "bx--btn--sm", /*size*/ ctx[1] === 'small');
			toggle_class(div, "bx--btn--lg", /*size*/ ctx[1] === 'lg');
			toggle_class(div, "bx--btn--xl", /*size*/ ctx[1] === 'xl');
		},
		d: function destroy(detaching) {
			if (detaching) detach_dev(div);
			mounted = false;
			run_all(dispose);
		}
	};

	dispatch_dev("SvelteRegisterBlock", {
		block,
		id: create_else_block$7.name,
		type: "else",
		source: "(35:0) {:else}",
		ctx
	});

	return block;
}

// (16:0) {#if href}
function create_if_block$Z(ctx) {
	let a;
	let t_value = "" + "";
	let t;
	let a_rel_value;
	let mounted;
	let dispose;

	let a_levels = [
		{ href: /*href*/ ctx[0] },
		{
			rel: a_rel_value = /*$$restProps*/ ctx[2].target === '_blank'
			? 'noopener noreferrer'
			: undefined
		},
		{ role: "button" },
		/*$$restProps*/ ctx[2]
	];

	let a_data = {};

	for (let i = 0; i < a_levels.length; i += 1) {
		a_data = assign(a_data, a_levels[i]);
	}

	const block = {
		c: function create() {
			a = element("a");
			t = text(t_value);
			set_attributes(a, a_data);
			toggle_class(a, "bx--skeleton", true);
			toggle_class(a, "bx--btn", true);
			toggle_class(a, "bx--btn--field", /*size*/ ctx[1] === 'field');
			toggle_class(a, "bx--btn--sm", /*size*/ ctx[1] === 'small');
			toggle_class(a, "bx--btn--lg", /*size*/ ctx[1] === 'lg');
			toggle_class(a, "bx--btn--xl", /*size*/ ctx[1] === 'xl');
			add_location(a, file$1a, 16, 2, 337);
		},
		m: function mount(target, anchor) {
			insert_dev(target, a, anchor);
			append_dev(a, t);

			if (!mounted) {
				dispose = [
					listen_dev(a, "click", /*click_handler*/ ctx[3], false, false, false),
					listen_dev(a, "mouseover", /*mouseover_handler*/ ctx[4], false, false, false),
					listen_dev(a, "mouseenter", /*mouseenter_handler*/ ctx[5], false, false, false),
					listen_dev(a, "mouseleave", /*mouseleave_handler*/ ctx[6], false, false, false)
				];

				mounted = true;
			}
		},
		p: function update(ctx, dirty) {
			set_attributes(a, a_data = get_spread_update(a_levels, [
				dirty & /*href*/ 1 && { href: /*href*/ ctx[0] },
				dirty & /*$$restProps*/ 4 && a_rel_value !== (a_rel_value = /*$$restProps*/ ctx[2].target === '_blank'
				? 'noopener noreferrer'
				: undefined) && { rel: a_rel_value },
				{ role: "button" },
				dirty & /*$$restProps*/ 4 && /*$$restProps*/ ctx[2]
			]));

			toggle_class(a, "bx--skeleton", true);
			toggle_class(a, "bx--btn", true);
			toggle_class(a, "bx--btn--field", /*size*/ ctx[1] === 'field');
			toggle_class(a, "bx--btn--sm", /*size*/ ctx[1] === 'small');
			toggle_class(a, "bx--btn--lg", /*size*/ ctx[1] === 'lg');
			toggle_class(a, "bx--btn--xl", /*size*/ ctx[1] === 'xl');
		},
		d: function destroy(detaching) {
			if (detaching) detach_dev(a);
			mounted = false;
			run_all(dispose);
		}
	};

	dispatch_dev("SvelteRegisterBlock", {
		block,
		id: create_if_block$Z.name,
		type: "if",
		source: "(16:0) {#if href}",
		ctx
	});

	return block;
}

function create_fragment$1c(ctx) {
	let if_block_anchor;

	function select_block_type(ctx, dirty) {
		if (/*href*/ ctx[0]) return create_if_block$Z;
		return create_else_block$7;
	}

	let current_block_type = select_block_type(ctx);
	let if_block = current_block_type(ctx);

	const block = {
		c: function create() {
			if_block.c();
			if_block_anchor = empty();
		},
		l: function claim(nodes) {
			throw new Error("options.hydrate only works if the component was compiled with the `hydratable: true` option");
		},
		m: function mount(target, anchor) {
			if_block.m(target, anchor);
			insert_dev(target, if_block_anchor, anchor);
		},
		p: function update(ctx, [dirty]) {
			if (current_block_type === (current_block_type = select_block_type(ctx)) && if_block) {
				if_block.p(ctx, dirty);
			} else {
				if_block.d(1);
				if_block = current_block_type(ctx);

				if (if_block) {
					if_block.c();
					if_block.m(if_block_anchor.parentNode, if_block_anchor);
				}
			}
		},
		i: noop,
		o: noop,
		d: function destroy(detaching) {
			if_block.d(detaching);
			if (detaching) detach_dev(if_block_anchor);
		}
	};

	dispatch_dev("SvelteRegisterBlock", {
		block,
		id: create_fragment$1c.name,
		type: "component",
		source: "",
		ctx
	});

	return block;
}

function instance$1c($$self, $$props, $$invalidate) {
	const omit_props_names = ["href","size"];
	let $$restProps = compute_rest_props($$props, omit_props_names);
	let { $$slots: slots = {}, $$scope } = $$props;
	validate_slots('ButtonSkeleton', slots, []);
	let { href = undefined } = $$props;
	let { size = "default" } = $$props;

	function click_handler(event) {
		bubble.call(this, $$self, event);
	}

	function mouseover_handler(event) {
		bubble.call(this, $$self, event);
	}

	function mouseenter_handler(event) {
		bubble.call(this, $$self, event);
	}

	function mouseleave_handler(event) {
		bubble.call(this, $$self, event);
	}

	function click_handler_1(event) {
		bubble.call(this, $$self, event);
	}

	function mouseover_handler_1(event) {
		bubble.call(this, $$self, event);
	}

	function mouseenter_handler_1(event) {
		bubble.call(this, $$self, event);
	}

	function mouseleave_handler_1(event) {
		bubble.call(this, $$self, event);
	}

	$$self.$$set = $$new_props => {
		$$props = assign(assign({}, $$props), exclude_internal_props($$new_props));
		$$invalidate(2, $$restProps = compute_rest_props($$props, omit_props_names));
		if ('href' in $$new_props) $$invalidate(0, href = $$new_props.href);
		if ('size' in $$new_props) $$invalidate(1, size = $$new_props.size);
	};

	$$self.$capture_state = () => ({ href, size });

	$$self.$inject_state = $$new_props => {
		if ('href' in $$props) $$invalidate(0, href = $$new_props.href);
		if ('size' in $$props) $$invalidate(1, size = $$new_props.size);
	};

	if ($$props && "$$inject" in $$props) {
		$$self.$inject_state($$props.$$inject);
	}

	return [
		href,
		size,
		$$restProps,
		click_handler,
		mouseover_handler,
		mouseenter_handler,
		mouseleave_handler,
		click_handler_1,
		mouseover_handler_1,
		mouseenter_handler_1,
		mouseleave_handler_1
	];
}

class ButtonSkeleton extends SvelteComponentDev {
	constructor(options) {
		super(options);
		init(this, options, instance$1c, create_fragment$1c, safe_not_equal, { href: 0, size: 1 });

		dispatch_dev("SvelteRegisterComponent", {
			component: this,
			tagName: "ButtonSkeleton",
			options,
			id: create_fragment$1c.name
		});
	}

	get href() {
		throw new Error("<ButtonSkeleton>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
	}

	set href(value) {
		throw new Error("<ButtonSkeleton>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
	}

	get size() {
		throw new Error("<ButtonSkeleton>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
	}

	set size(value) {
		throw new Error("<ButtonSkeleton>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
	}
}

/* node_modules/carbon-components-svelte/src/Button/Button.svelte generated by Svelte v3.49.0 */
const file$19 = "node_modules/carbon-components-svelte/src/Button/Button.svelte";
const get_default_slot_changes$4 = dirty => ({ props: dirty[0] & /*buttonProps*/ 512 });
const get_default_slot_context$4 = ctx => ({ props: /*buttonProps*/ ctx[9] });

// (163:0) {:else}
function create_else_block$6(ctx) {
	let button;
	let t;
	let switch_instance;
	let current;
	let mounted;
	let dispose;
	let if_block = /*hasIconOnly*/ ctx[8] && create_if_block_4$2(ctx);
	const default_slot_template = /*#slots*/ ctx[19].default;
	const default_slot = create_slot(default_slot_template, ctx, /*$$scope*/ ctx[18], null);
	var switch_value = /*icon*/ ctx[2];

	function switch_props(ctx) {
		return {
			props: {
				"aria-hidden": "true",
				class: "bx--btn__icon",
				"aria-label": /*iconDescription*/ ctx[3]
			},
			$$inline: true
		};
	}

	if (switch_value) {
		switch_instance = new switch_value(switch_props(ctx));
	}

	let button_levels = [/*buttonProps*/ ctx[9]];
	let button_data = {};

	for (let i = 0; i < button_levels.length; i += 1) {
		button_data = assign(button_data, button_levels[i]);
	}

	const block = {
		c: function create() {
			button = element("button");
			if (if_block) if_block.c();
			t = space();
			if (default_slot) default_slot.c();
			if (switch_instance) create_component(switch_instance.$$.fragment);
			set_attributes(button, button_data);
			add_location(button, file$19, 163, 2, 4429);
		},
		m: function mount(target, anchor) {
			insert_dev(target, button, anchor);
			if (if_block) if_block.m(button, null);
			append_dev(button, t);

			if (default_slot) {
				default_slot.m(button, null);
			}

			if (switch_instance) {
				mount_component(switch_instance, button, null);
			}

			if (button.autofocus) button.focus();
			/*button_binding*/ ctx[33](button);
			current = true;

			if (!mounted) {
				dispose = [
					listen_dev(button, "click", /*click_handler_2*/ ctx[24], false, false, false),
					listen_dev(button, "mouseover", /*mouseover_handler_2*/ ctx[25], false, false, false),
					listen_dev(button, "mouseenter", /*mouseenter_handler_2*/ ctx[26], false, false, false),
					listen_dev(button, "mouseleave", /*mouseleave_handler_2*/ ctx[27], false, false, false)
				];

				mounted = true;
			}
		},
		p: function update(ctx, dirty) {
			if (/*hasIconOnly*/ ctx[8]) {
				if (if_block) {
					if_block.p(ctx, dirty);
				} else {
					if_block = create_if_block_4$2(ctx);
					if_block.c();
					if_block.m(button, t);
				}
			} else if (if_block) {
				if_block.d(1);
				if_block = null;
			}

			if (default_slot) {
				if (default_slot.p && (!current || dirty[0] & /*$$scope*/ 262144)) {
					update_slot_base(
						default_slot,
						default_slot_template,
						ctx,
						/*$$scope*/ ctx[18],
						!current
						? get_all_dirty_from_scope(/*$$scope*/ ctx[18])
						: get_slot_changes(default_slot_template, /*$$scope*/ ctx[18], dirty, null),
						null
					);
				}
			}

			const switch_instance_changes = {};
			if (dirty[0] & /*iconDescription*/ 8) switch_instance_changes["aria-label"] = /*iconDescription*/ ctx[3];

			if (switch_value !== (switch_value = /*icon*/ ctx[2])) {
				if (switch_instance) {
					group_outros();
					const old_component = switch_instance;

					transition_out(old_component.$$.fragment, 1, 0, () => {
						destroy_component(old_component, 1);
					});

					check_outros();
				}

				if (switch_value) {
					switch_instance = new switch_value(switch_props(ctx));
					create_component(switch_instance.$$.fragment);
					transition_in(switch_instance.$$.fragment, 1);
					mount_component(switch_instance, button, null);
				} else {
					switch_instance = null;
				}
			} else if (switch_value) {
				switch_instance.$set(switch_instance_changes);
			}

			set_attributes(button, button_data = get_spread_update(button_levels, [dirty[0] & /*buttonProps*/ 512 && /*buttonProps*/ ctx[9]]));
		},
		i: function intro(local) {
			if (current) return;
			transition_in(default_slot, local);
			if (switch_instance) transition_in(switch_instance.$$.fragment, local);
			current = true;
		},
		o: function outro(local) {
			transition_out(default_slot, local);
			if (switch_instance) transition_out(switch_instance.$$.fragment, local);
			current = false;
		},
		d: function destroy(detaching) {
			if (detaching) detach_dev(button);
			if (if_block) if_block.d();
			if (default_slot) default_slot.d(detaching);
			if (switch_instance) destroy_component(switch_instance);
			/*button_binding*/ ctx[33](null);
			mounted = false;
			run_all(dispose);
		}
	};

	dispatch_dev("SvelteRegisterBlock", {
		block,
		id: create_else_block$6.name,
		type: "else",
		source: "(163:0) {:else}",
		ctx
	});

	return block;
}

// (143:28) 
function create_if_block_2$5(ctx) {
	let a;
	let t;
	let switch_instance;
	let current;
	let mounted;
	let dispose;
	let if_block = /*hasIconOnly*/ ctx[8] && create_if_block_3$2(ctx);
	const default_slot_template = /*#slots*/ ctx[19].default;
	const default_slot = create_slot(default_slot_template, ctx, /*$$scope*/ ctx[18], null);
	var switch_value = /*icon*/ ctx[2];

	function switch_props(ctx) {
		return {
			props: {
				"aria-hidden": "true",
				class: "bx--btn__icon",
				"aria-label": /*iconDescription*/ ctx[3]
			},
			$$inline: true
		};
	}

	if (switch_value) {
		switch_instance = new switch_value(switch_props(ctx));
	}

	let a_levels = [/*buttonProps*/ ctx[9]];
	let a_data = {};

	for (let i = 0; i < a_levels.length; i += 1) {
		a_data = assign(a_data, a_levels[i]);
	}

	const block = {
		c: function create() {
			a = element("a");
			if (if_block) if_block.c();
			t = space();
			if (default_slot) default_slot.c();
			if (switch_instance) create_component(switch_instance.$$.fragment);
			set_attributes(a, a_data);
			add_location(a, file$19, 144, 2, 4046);
		},
		m: function mount(target, anchor) {
			insert_dev(target, a, anchor);
			if (if_block) if_block.m(a, null);
			append_dev(a, t);

			if (default_slot) {
				default_slot.m(a, null);
			}

			if (switch_instance) {
				mount_component(switch_instance, a, null);
			}

			/*a_binding*/ ctx[32](a);
			current = true;

			if (!mounted) {
				dispose = [
					listen_dev(a, "click", /*click_handler_1*/ ctx[20], false, false, false),
					listen_dev(a, "mouseover", /*mouseover_handler_1*/ ctx[21], false, false, false),
					listen_dev(a, "mouseenter", /*mouseenter_handler_1*/ ctx[22], false, false, false),
					listen_dev(a, "mouseleave", /*mouseleave_handler_1*/ ctx[23], false, false, false)
				];

				mounted = true;
			}
		},
		p: function update(ctx, dirty) {
			if (/*hasIconOnly*/ ctx[8]) {
				if (if_block) {
					if_block.p(ctx, dirty);
				} else {
					if_block = create_if_block_3$2(ctx);
					if_block.c();
					if_block.m(a, t);
				}
			} else if (if_block) {
				if_block.d(1);
				if_block = null;
			}

			if (default_slot) {
				if (default_slot.p && (!current || dirty[0] & /*$$scope*/ 262144)) {
					update_slot_base(
						default_slot,
						default_slot_template,
						ctx,
						/*$$scope*/ ctx[18],
						!current
						? get_all_dirty_from_scope(/*$$scope*/ ctx[18])
						: get_slot_changes(default_slot_template, /*$$scope*/ ctx[18], dirty, null),
						null
					);
				}
			}

			const switch_instance_changes = {};
			if (dirty[0] & /*iconDescription*/ 8) switch_instance_changes["aria-label"] = /*iconDescription*/ ctx[3];

			if (switch_value !== (switch_value = /*icon*/ ctx[2])) {
				if (switch_instance) {
					group_outros();
					const old_component = switch_instance;

					transition_out(old_component.$$.fragment, 1, 0, () => {
						destroy_component(old_component, 1);
					});

					check_outros();
				}

				if (switch_value) {
					switch_instance = new switch_value(switch_props(ctx));
					create_component(switch_instance.$$.fragment);
					transition_in(switch_instance.$$.fragment, 1);
					mount_component(switch_instance, a, null);
				} else {
					switch_instance = null;
				}
			} else if (switch_value) {
				switch_instance.$set(switch_instance_changes);
			}

			set_attributes(a, a_data = get_spread_update(a_levels, [dirty[0] & /*buttonProps*/ 512 && /*buttonProps*/ ctx[9]]));
		},
		i: function intro(local) {
			if (current) return;
			transition_in(default_slot, local);
			if (switch_instance) transition_in(switch_instance.$$.fragment, local);
			current = true;
		},
		o: function outro(local) {
			transition_out(default_slot, local);
			if (switch_instance) transition_out(switch_instance.$$.fragment, local);
			current = false;
		},
		d: function destroy(detaching) {
			if (detaching) detach_dev(a);
			if (if_block) if_block.d();
			if (default_slot) default_slot.d(detaching);
			if (switch_instance) destroy_component(switch_instance);
			/*a_binding*/ ctx[32](null);
			mounted = false;
			run_all(dispose);
		}
	};

	dispatch_dev("SvelteRegisterBlock", {
		block,
		id: create_if_block_2$5.name,
		type: "if",
		source: "(143:28) ",
		ctx
	});

	return block;
}

// (141:13) 
function create_if_block_1$6(ctx) {
	let current;
	const default_slot_template = /*#slots*/ ctx[19].default;
	const default_slot = create_slot(default_slot_template, ctx, /*$$scope*/ ctx[18], get_default_slot_context$4);

	const block = {
		c: function create() {
			if (default_slot) default_slot.c();
		},
		m: function mount(target, anchor) {
			if (default_slot) {
				default_slot.m(target, anchor);
			}

			current = true;
		},
		p: function update(ctx, dirty) {
			if (default_slot) {
				if (default_slot.p && (!current || dirty[0] & /*$$scope, buttonProps*/ 262656)) {
					update_slot_base(
						default_slot,
						default_slot_template,
						ctx,
						/*$$scope*/ ctx[18],
						!current
						? get_all_dirty_from_scope(/*$$scope*/ ctx[18])
						: get_slot_changes(default_slot_template, /*$$scope*/ ctx[18], dirty, get_default_slot_changes$4),
						get_default_slot_context$4
					);
				}
			}
		},
		i: function intro(local) {
			if (current) return;
			transition_in(default_slot, local);
			current = true;
		},
		o: function outro(local) {
			transition_out(default_slot, local);
			current = false;
		},
		d: function destroy(detaching) {
			if (default_slot) default_slot.d(detaching);
		}
	};

	dispatch_dev("SvelteRegisterBlock", {
		block,
		id: create_if_block_1$6.name,
		type: "if",
		source: "(141:13) ",
		ctx
	});

	return block;
}

// (130:0) {#if skeleton}
function create_if_block$Y(ctx) {
	let buttonskeleton;
	let current;

	const buttonskeleton_spread_levels = [
		{ href: /*href*/ ctx[7] },
		{ size: /*size*/ ctx[1] },
		/*$$restProps*/ ctx[10],
		{
			style: /*hasIconOnly*/ ctx[8] && 'width: 3rem;'
		}
	];

	let buttonskeleton_props = {};

	for (let i = 0; i < buttonskeleton_spread_levels.length; i += 1) {
		buttonskeleton_props = assign(buttonskeleton_props, buttonskeleton_spread_levels[i]);
	}

	buttonskeleton = new ButtonSkeleton({
			props: buttonskeleton_props,
			$$inline: true
		});

	buttonskeleton.$on("click", /*click_handler*/ ctx[28]);
	buttonskeleton.$on("mouseover", /*mouseover_handler*/ ctx[29]);
	buttonskeleton.$on("mouseenter", /*mouseenter_handler*/ ctx[30]);
	buttonskeleton.$on("mouseleave", /*mouseleave_handler*/ ctx[31]);

	const block = {
		c: function create() {
			create_component(buttonskeleton.$$.fragment);
		},
		m: function mount(target, anchor) {
			mount_component(buttonskeleton, target, anchor);
			current = true;
		},
		p: function update(ctx, dirty) {
			const buttonskeleton_changes = (dirty[0] & /*href, size, $$restProps, hasIconOnly*/ 1410)
			? get_spread_update(buttonskeleton_spread_levels, [
					dirty[0] & /*href*/ 128 && { href: /*href*/ ctx[7] },
					dirty[0] & /*size*/ 2 && { size: /*size*/ ctx[1] },
					dirty[0] & /*$$restProps*/ 1024 && get_spread_object(/*$$restProps*/ ctx[10]),
					dirty[0] & /*hasIconOnly*/ 256 && {
						style: /*hasIconOnly*/ ctx[8] && 'width: 3rem;'
					}
				])
			: {};

			buttonskeleton.$set(buttonskeleton_changes);
		},
		i: function intro(local) {
			if (current) return;
			transition_in(buttonskeleton.$$.fragment, local);
			current = true;
		},
		o: function outro(local) {
			transition_out(buttonskeleton.$$.fragment, local);
			current = false;
		},
		d: function destroy(detaching) {
			destroy_component(buttonskeleton, detaching);
		}
	};

	dispatch_dev("SvelteRegisterBlock", {
		block,
		id: create_if_block$Y.name,
		type: "if",
		source: "(130:0) {#if skeleton}",
		ctx
	});

	return block;
}

// (172:4) {#if hasIconOnly}
function create_if_block_4$2(ctx) {
	let span;
	let t;

	const block = {
		c: function create() {
			span = element("span");
			t = text(/*iconDescription*/ ctx[3]);
			toggle_class(span, "bx--assistive-text", true);
			add_location(span, file$19, 172, 6, 4578);
		},
		m: function mount(target, anchor) {
			insert_dev(target, span, anchor);
			append_dev(span, t);
		},
		p: function update(ctx, dirty) {
			if (dirty[0] & /*iconDescription*/ 8) set_data_dev(t, /*iconDescription*/ ctx[3]);
		},
		d: function destroy(detaching) {
			if (detaching) detach_dev(span);
		}
	};

	dispatch_dev("SvelteRegisterBlock", {
		block,
		id: create_if_block_4$2.name,
		type: "if",
		source: "(172:4) {#if hasIconOnly}",
		ctx
	});

	return block;
}

// (153:4) {#if hasIconOnly}
function create_if_block_3$2(ctx) {
	let span;
	let t;

	const block = {
		c: function create() {
			span = element("span");
			t = text(/*iconDescription*/ ctx[3]);
			toggle_class(span, "bx--assistive-text", true);
			add_location(span, file$19, 153, 6, 4190);
		},
		m: function mount(target, anchor) {
			insert_dev(target, span, anchor);
			append_dev(span, t);
		},
		p: function update(ctx, dirty) {
			if (dirty[0] & /*iconDescription*/ 8) set_data_dev(t, /*iconDescription*/ ctx[3]);
		},
		d: function destroy(detaching) {
			if (detaching) detach_dev(span);
		}
	};

	dispatch_dev("SvelteRegisterBlock", {
		block,
		id: create_if_block_3$2.name,
		type: "if",
		source: "(153:4) {#if hasIconOnly}",
		ctx
	});

	return block;
}

function create_fragment$1b(ctx) {
	let current_block_type_index;
	let if_block;
	let if_block_anchor;
	let current;
	const if_block_creators = [create_if_block$Y, create_if_block_1$6, create_if_block_2$5, create_else_block$6];
	const if_blocks = [];

	function select_block_type(ctx, dirty) {
		if (/*skeleton*/ ctx[5]) return 0;
		if (/*as*/ ctx[4]) return 1;
		if (/*href*/ ctx[7] && !/*disabled*/ ctx[6]) return 2;
		return 3;
	}

	current_block_type_index = select_block_type(ctx);
	if_block = if_blocks[current_block_type_index] = if_block_creators[current_block_type_index](ctx);

	const block = {
		c: function create() {
			if_block.c();
			if_block_anchor = empty();
		},
		l: function claim(nodes) {
			throw new Error("options.hydrate only works if the component was compiled with the `hydratable: true` option");
		},
		m: function mount(target, anchor) {
			if_blocks[current_block_type_index].m(target, anchor);
			insert_dev(target, if_block_anchor, anchor);
			current = true;
		},
		p: function update(ctx, dirty) {
			let previous_block_index = current_block_type_index;
			current_block_type_index = select_block_type(ctx);

			if (current_block_type_index === previous_block_index) {
				if_blocks[current_block_type_index].p(ctx, dirty);
			} else {
				group_outros();

				transition_out(if_blocks[previous_block_index], 1, 1, () => {
					if_blocks[previous_block_index] = null;
				});

				check_outros();
				if_block = if_blocks[current_block_type_index];

				if (!if_block) {
					if_block = if_blocks[current_block_type_index] = if_block_creators[current_block_type_index](ctx);
					if_block.c();
				} else {
					if_block.p(ctx, dirty);
				}

				transition_in(if_block, 1);
				if_block.m(if_block_anchor.parentNode, if_block_anchor);
			}
		},
		i: function intro(local) {
			if (current) return;
			transition_in(if_block);
			current = true;
		},
		o: function outro(local) {
			transition_out(if_block);
			current = false;
		},
		d: function destroy(detaching) {
			if_blocks[current_block_type_index].d(detaching);
			if (detaching) detach_dev(if_block_anchor);
		}
	};

	dispatch_dev("SvelteRegisterBlock", {
		block,
		id: create_fragment$1b.name,
		type: "component",
		source: "",
		ctx
	});

	return block;
}

function instance$1b($$self, $$props, $$invalidate) {
	let hasIconOnly;
	let buttonProps;

	const omit_props_names = [
		"kind","size","expressive","isSelected","icon","iconDescription","tooltipAlignment","tooltipPosition","as","skeleton","disabled","href","tabindex","type","ref"
	];

	let $$restProps = compute_rest_props($$props, omit_props_names);
	let { $$slots: slots = {}, $$scope } = $$props;
	validate_slots('Button', slots, ['default']);
	const $$slots = compute_slots(slots);
	let { kind = "primary" } = $$props;
	let { size = "default" } = $$props;
	let { expressive = false } = $$props;
	let { isSelected = false } = $$props;
	let { icon = undefined } = $$props;
	let { iconDescription = undefined } = $$props;
	let { tooltipAlignment = "center" } = $$props;
	let { tooltipPosition = "bottom" } = $$props;
	let { as = false } = $$props;
	let { skeleton = false } = $$props;
	let { disabled = false } = $$props;
	let { href = undefined } = $$props;
	let { tabindex = "0" } = $$props;
	let { type = "button" } = $$props;
	let { ref = null } = $$props;
	const ctx = getContext("ComposedModal");

	function click_handler_1(event) {
		bubble.call(this, $$self, event);
	}

	function mouseover_handler_1(event) {
		bubble.call(this, $$self, event);
	}

	function mouseenter_handler_1(event) {
		bubble.call(this, $$self, event);
	}

	function mouseleave_handler_1(event) {
		bubble.call(this, $$self, event);
	}

	function click_handler_2(event) {
		bubble.call(this, $$self, event);
	}

	function mouseover_handler_2(event) {
		bubble.call(this, $$self, event);
	}

	function mouseenter_handler_2(event) {
		bubble.call(this, $$self, event);
	}

	function mouseleave_handler_2(event) {
		bubble.call(this, $$self, event);
	}

	function click_handler(event) {
		bubble.call(this, $$self, event);
	}

	function mouseover_handler(event) {
		bubble.call(this, $$self, event);
	}

	function mouseenter_handler(event) {
		bubble.call(this, $$self, event);
	}

	function mouseleave_handler(event) {
		bubble.call(this, $$self, event);
	}

	function a_binding($$value) {
		binding_callbacks[$$value ? 'unshift' : 'push'](() => {
			ref = $$value;
			$$invalidate(0, ref);
		});
	}

	function button_binding($$value) {
		binding_callbacks[$$value ? 'unshift' : 'push'](() => {
			ref = $$value;
			$$invalidate(0, ref);
		});
	}

	$$self.$$set = $$new_props => {
		$$props = assign(assign({}, $$props), exclude_internal_props($$new_props));
		$$invalidate(10, $$restProps = compute_rest_props($$props, omit_props_names));
		if ('kind' in $$new_props) $$invalidate(11, kind = $$new_props.kind);
		if ('size' in $$new_props) $$invalidate(1, size = $$new_props.size);
		if ('expressive' in $$new_props) $$invalidate(12, expressive = $$new_props.expressive);
		if ('isSelected' in $$new_props) $$invalidate(13, isSelected = $$new_props.isSelected);
		if ('icon' in $$new_props) $$invalidate(2, icon = $$new_props.icon);
		if ('iconDescription' in $$new_props) $$invalidate(3, iconDescription = $$new_props.iconDescription);
		if ('tooltipAlignment' in $$new_props) $$invalidate(14, tooltipAlignment = $$new_props.tooltipAlignment);
		if ('tooltipPosition' in $$new_props) $$invalidate(15, tooltipPosition = $$new_props.tooltipPosition);
		if ('as' in $$new_props) $$invalidate(4, as = $$new_props.as);
		if ('skeleton' in $$new_props) $$invalidate(5, skeleton = $$new_props.skeleton);
		if ('disabled' in $$new_props) $$invalidate(6, disabled = $$new_props.disabled);
		if ('href' in $$new_props) $$invalidate(7, href = $$new_props.href);
		if ('tabindex' in $$new_props) $$invalidate(16, tabindex = $$new_props.tabindex);
		if ('type' in $$new_props) $$invalidate(17, type = $$new_props.type);
		if ('ref' in $$new_props) $$invalidate(0, ref = $$new_props.ref);
		if ('$$scope' in $$new_props) $$invalidate(18, $$scope = $$new_props.$$scope);
	};

	$$self.$capture_state = () => ({
		kind,
		size,
		expressive,
		isSelected,
		icon,
		iconDescription,
		tooltipAlignment,
		tooltipPosition,
		as,
		skeleton,
		disabled,
		href,
		tabindex,
		type,
		ref,
		getContext,
		ButtonSkeleton,
		ctx,
		hasIconOnly,
		buttonProps
	});

	$$self.$inject_state = $$new_props => {
		if ('kind' in $$props) $$invalidate(11, kind = $$new_props.kind);
		if ('size' in $$props) $$invalidate(1, size = $$new_props.size);
		if ('expressive' in $$props) $$invalidate(12, expressive = $$new_props.expressive);
		if ('isSelected' in $$props) $$invalidate(13, isSelected = $$new_props.isSelected);
		if ('icon' in $$props) $$invalidate(2, icon = $$new_props.icon);
		if ('iconDescription' in $$props) $$invalidate(3, iconDescription = $$new_props.iconDescription);
		if ('tooltipAlignment' in $$props) $$invalidate(14, tooltipAlignment = $$new_props.tooltipAlignment);
		if ('tooltipPosition' in $$props) $$invalidate(15, tooltipPosition = $$new_props.tooltipPosition);
		if ('as' in $$props) $$invalidate(4, as = $$new_props.as);
		if ('skeleton' in $$props) $$invalidate(5, skeleton = $$new_props.skeleton);
		if ('disabled' in $$props) $$invalidate(6, disabled = $$new_props.disabled);
		if ('href' in $$props) $$invalidate(7, href = $$new_props.href);
		if ('tabindex' in $$props) $$invalidate(16, tabindex = $$new_props.tabindex);
		if ('type' in $$props) $$invalidate(17, type = $$new_props.type);
		if ('ref' in $$props) $$invalidate(0, ref = $$new_props.ref);
		if ('hasIconOnly' in $$props) $$invalidate(8, hasIconOnly = $$new_props.hasIconOnly);
		if ('buttonProps' in $$props) $$invalidate(9, buttonProps = $$new_props.buttonProps);
	};

	if ($$props && "$$inject" in $$props) {
		$$self.$inject_state($$props.$$inject);
	}

	$$self.$$.update = () => {
		if ($$self.$$.dirty[0] & /*ref*/ 1) {
			if (ctx && ref) {
				ctx.declareRef(ref);
			}
		}

		if ($$self.$$.dirty[0] & /*icon*/ 4) {
			$$invalidate(8, hasIconOnly = icon && !$$slots.default);
		}

		$$invalidate(9, buttonProps = {
			type: href && !disabled ? undefined : type,
			tabindex,
			disabled: disabled === true ? true : undefined,
			href,
			"aria-pressed": hasIconOnly && kind === "ghost" && !href
			? isSelected
			: undefined,
			...$$restProps,
			class: [
				"bx--btn",
				expressive && "bx--btn--expressive",
				(size === "small" && !expressive || size === "sm" && !expressive || size === "small" && !expressive) && "bx--btn--sm",
				size === "field" && !expressive || size === "md" && !expressive && "bx--btn--md",
				size === "field" && "bx--btn--field",
				size === "small" && "bx--btn--sm",
				size === "lg" && "bx--btn--lg",
				size === "xl" && "bx--btn--xl",
				kind && `bx--btn--${kind}`,
				disabled && "bx--btn--disabled",
				hasIconOnly && "bx--btn--icon-only",
				hasIconOnly && "bx--tooltip__trigger",
				hasIconOnly && "bx--tooltip--a11y",
				hasIconOnly && tooltipPosition && `bx--btn--icon-only--${tooltipPosition}`,
				hasIconOnly && tooltipAlignment && `bx--tooltip--align-${tooltipAlignment}`,
				hasIconOnly && isSelected && kind === "ghost" && "bx--btn--selected",
				$$restProps.class
			].filter(Boolean).join(" ")
		});
	};

	return [
		ref,
		size,
		icon,
		iconDescription,
		as,
		skeleton,
		disabled,
		href,
		hasIconOnly,
		buttonProps,
		$$restProps,
		kind,
		expressive,
		isSelected,
		tooltipAlignment,
		tooltipPosition,
		tabindex,
		type,
		$$scope,
		slots,
		click_handler_1,
		mouseover_handler_1,
		mouseenter_handler_1,
		mouseleave_handler_1,
		click_handler_2,
		mouseover_handler_2,
		mouseenter_handler_2,
		mouseleave_handler_2,
		click_handler,
		mouseover_handler,
		mouseenter_handler,
		mouseleave_handler,
		a_binding,
		button_binding
	];
}

class Button extends SvelteComponentDev {
	constructor(options) {
		super(options);

		init(
			this,
			options,
			instance$1b,
			create_fragment$1b,
			safe_not_equal,
			{
				kind: 11,
				size: 1,
				expressive: 12,
				isSelected: 13,
				icon: 2,
				iconDescription: 3,
				tooltipAlignment: 14,
				tooltipPosition: 15,
				as: 4,
				skeleton: 5,
				disabled: 6,
				href: 7,
				tabindex: 16,
				type: 17,
				ref: 0
			},
			null,
			[-1, -1]
		);

		dispatch_dev("SvelteRegisterComponent", {
			component: this,
			tagName: "Button",
			options,
			id: create_fragment$1b.name
		});
	}

	get kind() {
		throw new Error("<Button>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
	}

	set kind(value) {
		throw new Error("<Button>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
	}

	get size() {
		throw new Error("<Button>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
	}

	set size(value) {
		throw new Error("<Button>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
	}

	get expressive() {
		throw new Error("<Button>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
	}

	set expressive(value) {
		throw new Error("<Button>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
	}

	get isSelected() {
		throw new Error("<Button>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
	}

	set isSelected(value) {
		throw new Error("<Button>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
	}

	get icon() {
		throw new Error("<Button>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
	}

	set icon(value) {
		throw new Error("<Button>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
	}

	get iconDescription() {
		throw new Error("<Button>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
	}

	set iconDescription(value) {
		throw new Error("<Button>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
	}

	get tooltipAlignment() {
		throw new Error("<Button>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
	}

	set tooltipAlignment(value) {
		throw new Error("<Button>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
	}

	get tooltipPosition() {
		throw new Error("<Button>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
	}

	set tooltipPosition(value) {
		throw new Error("<Button>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
	}

	get as() {
		throw new Error("<Button>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
	}

	set as(value) {
		throw new Error("<Button>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
	}

	get skeleton() {
		throw new Error("<Button>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
	}

	set skeleton(value) {
		throw new Error("<Button>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
	}

	get disabled() {
		throw new Error("<Button>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
	}

	set disabled(value) {
		throw new Error("<Button>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
	}

	get href() {
		throw new Error("<Button>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
	}

	set href(value) {
		throw new Error("<Button>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
	}

	get tabindex() {
		throw new Error("<Button>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
	}

	set tabindex(value) {
		throw new Error("<Button>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
	}

	get type() {
		throw new Error("<Button>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
	}

	set type(value) {
		throw new Error("<Button>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
	}

	get ref() {
		throw new Error("<Button>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
	}

	set ref(value) {
		throw new Error("<Button>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
	}
}

/* node_modules/carbon-components-svelte/src/ContentSwitcher/ContentSwitcher.svelte generated by Svelte v3.49.0 */
const file$18 = "node_modules/carbon-components-svelte/src/ContentSwitcher/ContentSwitcher.svelte";

function create_fragment$1a(ctx) {
	let div;
	let current;
	let mounted;
	let dispose;
	const default_slot_template = /*#slots*/ ctx[6].default;
	const default_slot = create_slot(default_slot_template, ctx, /*$$scope*/ ctx[5], null);
	let div_levels = [{ role: "tablist" }, /*$$restProps*/ ctx[1]];
	let div_data = {};

	for (let i = 0; i < div_levels.length; i += 1) {
		div_data = assign(div_data, div_levels[i]);
	}

	const block = {
		c: function create() {
			div = element("div");
			if (default_slot) default_slot.c();
			set_attributes(div, div_data);
			toggle_class(div, "bx--content-switcher", true);
			toggle_class(div, "bx--content-switcher--sm", /*size*/ ctx[0] === 'sm');
			toggle_class(div, "bx--content-switcher--xl", /*size*/ ctx[0] === 'xl');
			add_location(div, file$18, 60, 0, 1363);
		},
		l: function claim(nodes) {
			throw new Error("options.hydrate only works if the component was compiled with the `hydratable: true` option");
		},
		m: function mount(target, anchor) {
			insert_dev(target, div, anchor);

			if (default_slot) {
				default_slot.m(div, null);
			}

			current = true;

			if (!mounted) {
				dispose = [
					listen_dev(div, "click", /*click_handler*/ ctx[7], false, false, false),
					listen_dev(div, "mouseover", /*mouseover_handler*/ ctx[8], false, false, false),
					listen_dev(div, "mouseenter", /*mouseenter_handler*/ ctx[9], false, false, false),
					listen_dev(div, "mouseleave", /*mouseleave_handler*/ ctx[10], false, false, false)
				];

				mounted = true;
			}
		},
		p: function update(ctx, [dirty]) {
			if (default_slot) {
				if (default_slot.p && (!current || dirty & /*$$scope*/ 32)) {
					update_slot_base(
						default_slot,
						default_slot_template,
						ctx,
						/*$$scope*/ ctx[5],
						!current
						? get_all_dirty_from_scope(/*$$scope*/ ctx[5])
						: get_slot_changes(default_slot_template, /*$$scope*/ ctx[5], dirty, null),
						null
					);
				}
			}

			set_attributes(div, div_data = get_spread_update(div_levels, [{ role: "tablist" }, dirty & /*$$restProps*/ 2 && /*$$restProps*/ ctx[1]]));
			toggle_class(div, "bx--content-switcher", true);
			toggle_class(div, "bx--content-switcher--sm", /*size*/ ctx[0] === 'sm');
			toggle_class(div, "bx--content-switcher--xl", /*size*/ ctx[0] === 'xl');
		},
		i: function intro(local) {
			if (current) return;
			transition_in(default_slot, local);
			current = true;
		},
		o: function outro(local) {
			transition_out(default_slot, local);
			current = false;
		},
		d: function destroy(detaching) {
			if (detaching) detach_dev(div);
			if (default_slot) default_slot.d(detaching);
			mounted = false;
			run_all(dispose);
		}
	};

	dispatch_dev("SvelteRegisterBlock", {
		block,
		id: create_fragment$1a.name,
		type: "component",
		source: "",
		ctx
	});

	return block;
}

function instance$1a($$self, $$props, $$invalidate) {
	let currentIndex;
	let switches;
	const omit_props_names = ["selectedIndex","size"];
	let $$restProps = compute_rest_props($$props, omit_props_names);
	let { $$slots: slots = {}, $$scope } = $$props;
	validate_slots('ContentSwitcher', slots, ['default']);
	let { selectedIndex = 0 } = $$props;
	let { size = undefined } = $$props;
	const dispatch = createEventDispatcher();
	const currentId = writable(null);

	setContext("ContentSwitcher", {
		currentId,
		add: ({ id, text, selected }) => {
			if (selected) {
				$$invalidate(2, selectedIndex = switches.length);
			}

			$$invalidate(4, switches = [...switches, { id, text, selected }]);
		},
		update: id => {
			$$invalidate(2, selectedIndex = switches.map(({ id }) => id).indexOf(id));
		},
		change: direction => {
			let index = currentIndex + direction;

			if (index < 0) {
				index = switches.length - 1;
			} else if (index >= switches.length) {
				index = 0;
			}

			$$invalidate(2, selectedIndex = index);
		}
	});

	afterUpdate(() => {
		if (selectedIndex !== currentIndex) {
			$$invalidate(3, currentIndex = selectedIndex);
		}
	});

	function click_handler(event) {
		bubble.call(this, $$self, event);
	}

	function mouseover_handler(event) {
		bubble.call(this, $$self, event);
	}

	function mouseenter_handler(event) {
		bubble.call(this, $$self, event);
	}

	function mouseleave_handler(event) {
		bubble.call(this, $$self, event);
	}

	$$self.$$set = $$new_props => {
		$$props = assign(assign({}, $$props), exclude_internal_props($$new_props));
		$$invalidate(1, $$restProps = compute_rest_props($$props, omit_props_names));
		if ('selectedIndex' in $$new_props) $$invalidate(2, selectedIndex = $$new_props.selectedIndex);
		if ('size' in $$new_props) $$invalidate(0, size = $$new_props.size);
		if ('$$scope' in $$new_props) $$invalidate(5, $$scope = $$new_props.$$scope);
	};

	$$self.$capture_state = () => ({
		selectedIndex,
		size,
		afterUpdate,
		createEventDispatcher,
		setContext,
		writable,
		dispatch,
		currentId,
		currentIndex,
		switches
	});

	$$self.$inject_state = $$new_props => {
		if ('selectedIndex' in $$props) $$invalidate(2, selectedIndex = $$new_props.selectedIndex);
		if ('size' in $$props) $$invalidate(0, size = $$new_props.size);
		if ('currentIndex' in $$props) $$invalidate(3, currentIndex = $$new_props.currentIndex);
		if ('switches' in $$props) $$invalidate(4, switches = $$new_props.switches);
	};

	if ($$props && "$$inject" in $$props) {
		$$self.$inject_state($$props.$$inject);
	}

	$$self.$$.update = () => {
		if ($$self.$$.dirty & /*switches, currentIndex*/ 24) {
			if (switches[currentIndex]) {
				dispatch("change", currentIndex);
				currentId.set(switches[currentIndex].id);
			}
		}
	};

	$$invalidate(3, currentIndex = -1);
	$$invalidate(4, switches = []);

	return [
		size,
		$$restProps,
		selectedIndex,
		currentIndex,
		switches,
		$$scope,
		slots,
		click_handler,
		mouseover_handler,
		mouseenter_handler,
		mouseleave_handler
	];
}

class ContentSwitcher extends SvelteComponentDev {
	constructor(options) {
		super(options);
		init(this, options, instance$1a, create_fragment$1a, safe_not_equal, { selectedIndex: 2, size: 0 });

		dispatch_dev("SvelteRegisterComponent", {
			component: this,
			tagName: "ContentSwitcher",
			options,
			id: create_fragment$1a.name
		});
	}

	get selectedIndex() {
		throw new Error("<ContentSwitcher>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
	}

	set selectedIndex(value) {
		throw new Error("<ContentSwitcher>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
	}

	get size() {
		throw new Error("<ContentSwitcher>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
	}

	set size(value) {
		throw new Error("<ContentSwitcher>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
	}
}

/* node_modules/carbon-components-svelte/src/ContentSwitcher/Switch.svelte generated by Svelte v3.49.0 */
const file$17 = "node_modules/carbon-components-svelte/src/ContentSwitcher/Switch.svelte";

// (70:10) {text}
function fallback_block$5(ctx) {
	let t;

	const block = {
		c: function create() {
			t = text(/*text*/ ctx[2]);
		},
		m: function mount(target, anchor) {
			insert_dev(target, t, anchor);
		},
		p: function update(ctx, dirty) {
			if (dirty & /*text*/ 4) set_data_dev(t, /*text*/ ctx[2]);
		},
		d: function destroy(detaching) {
			if (detaching) detach_dev(t);
		}
	};

	dispatch_dev("SvelteRegisterBlock", {
		block,
		id: fallback_block$5.name,
		type: "fallback",
		source: "(70:10) {text}",
		ctx
	});

	return block;
}

function create_fragment$19(ctx) {
	let button;
	let span;
	let button_tabindex_value;
	let current;
	let mounted;
	let dispose;
	const default_slot_template = /*#slots*/ ctx[8].default;
	const default_slot = create_slot(default_slot_template, ctx, /*$$scope*/ ctx[7], null);
	const default_slot_or_fallback = default_slot || fallback_block$5(ctx);

	let button_levels = [
		{ type: "button" },
		{ role: "tab" },
		{
			tabindex: button_tabindex_value = /*selected*/ ctx[0] ? '0' : '-1'
		},
		{ "aria-selected": /*selected*/ ctx[0] },
		{ disabled: /*disabled*/ ctx[3] },
		{ id: /*id*/ ctx[4] },
		/*$$restProps*/ ctx[6]
	];

	let button_data = {};

	for (let i = 0; i < button_levels.length; i += 1) {
		button_data = assign(button_data, button_levels[i]);
	}

	const block = {
		c: function create() {
			button = element("button");
			span = element("span");
			if (default_slot_or_fallback) default_slot_or_fallback.c();
			toggle_class(span, "bx--content-switcher__label", true);
			add_location(span, file$17, 68, 2, 1499);
			set_attributes(button, button_data);
			toggle_class(button, "bx--content-switcher-btn", true);
			toggle_class(button, "bx--content-switcher--selected", /*selected*/ ctx[0]);
			add_location(button, file$17, 41, 0, 935);
		},
		l: function claim(nodes) {
			throw new Error("options.hydrate only works if the component was compiled with the `hydratable: true` option");
		},
		m: function mount(target, anchor) {
			insert_dev(target, button, anchor);
			append_dev(button, span);

			if (default_slot_or_fallback) {
				default_slot_or_fallback.m(span, null);
			}

			if (button.autofocus) button.focus();
			/*button_binding*/ ctx[14](button);
			current = true;

			if (!mounted) {
				dispose = [
					listen_dev(button, "click", /*click_handler*/ ctx[9], false, false, false),
					listen_dev(button, "click", prevent_default(/*click_handler_1*/ ctx[15]), false, true, false),
					listen_dev(button, "mouseover", /*mouseover_handler*/ ctx[10], false, false, false),
					listen_dev(button, "mouseenter", /*mouseenter_handler*/ ctx[11], false, false, false),
					listen_dev(button, "mouseleave", /*mouseleave_handler*/ ctx[12], false, false, false),
					listen_dev(button, "keydown", /*keydown_handler*/ ctx[13], false, false, false),
					listen_dev(button, "keydown", /*keydown_handler_1*/ ctx[16], false, false, false)
				];

				mounted = true;
			}
		},
		p: function update(ctx, [dirty]) {
			if (default_slot) {
				if (default_slot.p && (!current || dirty & /*$$scope*/ 128)) {
					update_slot_base(
						default_slot,
						default_slot_template,
						ctx,
						/*$$scope*/ ctx[7],
						!current
						? get_all_dirty_from_scope(/*$$scope*/ ctx[7])
						: get_slot_changes(default_slot_template, /*$$scope*/ ctx[7], dirty, null),
						null
					);
				}
			} else {
				if (default_slot_or_fallback && default_slot_or_fallback.p && (!current || dirty & /*text*/ 4)) {
					default_slot_or_fallback.p(ctx, !current ? -1 : dirty);
				}
			}

			set_attributes(button, button_data = get_spread_update(button_levels, [
				{ type: "button" },
				{ role: "tab" },
				(!current || dirty & /*selected*/ 1 && button_tabindex_value !== (button_tabindex_value = /*selected*/ ctx[0] ? '0' : '-1')) && { tabindex: button_tabindex_value },
				(!current || dirty & /*selected*/ 1) && { "aria-selected": /*selected*/ ctx[0] },
				(!current || dirty & /*disabled*/ 8) && { disabled: /*disabled*/ ctx[3] },
				(!current || dirty & /*id*/ 16) && { id: /*id*/ ctx[4] },
				dirty & /*$$restProps*/ 64 && /*$$restProps*/ ctx[6]
			]));

			toggle_class(button, "bx--content-switcher-btn", true);
			toggle_class(button, "bx--content-switcher--selected", /*selected*/ ctx[0]);
		},
		i: function intro(local) {
			if (current) return;
			transition_in(default_slot_or_fallback, local);
			current = true;
		},
		o: function outro(local) {
			transition_out(default_slot_or_fallback, local);
			current = false;
		},
		d: function destroy(detaching) {
			if (detaching) detach_dev(button);
			if (default_slot_or_fallback) default_slot_or_fallback.d(detaching);
			/*button_binding*/ ctx[14](null);
			mounted = false;
			run_all(dispose);
		}
	};

	dispatch_dev("SvelteRegisterBlock", {
		block,
		id: create_fragment$19.name,
		type: "component",
		source: "",
		ctx
	});

	return block;
}

function instance$19($$self, $$props, $$invalidate) {
	const omit_props_names = ["text","selected","disabled","id","ref"];
	let $$restProps = compute_rest_props($$props, omit_props_names);
	let { $$slots: slots = {}, $$scope } = $$props;
	validate_slots('Switch', slots, ['default']);
	let { text = "Provide text" } = $$props;
	let { selected = false } = $$props;
	let { disabled = false } = $$props;
	let { id = "ccs-" + Math.random().toString(36) } = $$props;
	let { ref = null } = $$props;
	const ctx = getContext("ContentSwitcher");
	ctx.add({ id, text, selected });

	const unsubscribe = ctx.currentId.subscribe($ => {
		$$invalidate(0, selected = $ === id);
	});

	afterUpdate(() => {
		if (selected) {
			ref.focus();
		}
	});

	onMount(() => {
		return () => unsubscribe();
	});

	function click_handler(event) {
		bubble.call(this, $$self, event);
	}

	function mouseover_handler(event) {
		bubble.call(this, $$self, event);
	}

	function mouseenter_handler(event) {
		bubble.call(this, $$self, event);
	}

	function mouseleave_handler(event) {
		bubble.call(this, $$self, event);
	}

	function keydown_handler(event) {
		bubble.call(this, $$self, event);
	}

	function button_binding($$value) {
		binding_callbacks[$$value ? 'unshift' : 'push'](() => {
			ref = $$value;
			$$invalidate(1, ref);
		});
	}

	const click_handler_1 = () => {
		ctx.update(id);
	};

	const keydown_handler_1 = ({ key }) => {
		if (key === 'ArrowRight') {
			ctx.change(1);
		} else if (key === 'ArrowLeft') {
			ctx.change(-1);
		}
	};

	$$self.$$set = $$new_props => {
		$$props = assign(assign({}, $$props), exclude_internal_props($$new_props));
		$$invalidate(6, $$restProps = compute_rest_props($$props, omit_props_names));
		if ('text' in $$new_props) $$invalidate(2, text = $$new_props.text);
		if ('selected' in $$new_props) $$invalidate(0, selected = $$new_props.selected);
		if ('disabled' in $$new_props) $$invalidate(3, disabled = $$new_props.disabled);
		if ('id' in $$new_props) $$invalidate(4, id = $$new_props.id);
		if ('ref' in $$new_props) $$invalidate(1, ref = $$new_props.ref);
		if ('$$scope' in $$new_props) $$invalidate(7, $$scope = $$new_props.$$scope);
	};

	$$self.$capture_state = () => ({
		text,
		selected,
		disabled,
		id,
		ref,
		afterUpdate,
		getContext,
		onMount,
		ctx,
		unsubscribe
	});

	$$self.$inject_state = $$new_props => {
		if ('text' in $$props) $$invalidate(2, text = $$new_props.text);
		if ('selected' in $$props) $$invalidate(0, selected = $$new_props.selected);
		if ('disabled' in $$props) $$invalidate(3, disabled = $$new_props.disabled);
		if ('id' in $$props) $$invalidate(4, id = $$new_props.id);
		if ('ref' in $$props) $$invalidate(1, ref = $$new_props.ref);
	};

	if ($$props && "$$inject" in $$props) {
		$$self.$inject_state($$props.$$inject);
	}

	return [
		selected,
		ref,
		text,
		disabled,
		id,
		ctx,
		$$restProps,
		$$scope,
		slots,
		click_handler,
		mouseover_handler,
		mouseenter_handler,
		mouseleave_handler,
		keydown_handler,
		button_binding,
		click_handler_1,
		keydown_handler_1
	];
}

class Switch extends SvelteComponentDev {
	constructor(options) {
		super(options);

		init(this, options, instance$19, create_fragment$19, safe_not_equal, {
			text: 2,
			selected: 0,
			disabled: 3,
			id: 4,
			ref: 1
		});

		dispatch_dev("SvelteRegisterComponent", {
			component: this,
			tagName: "Switch",
			options,
			id: create_fragment$19.name
		});
	}

	get text() {
		throw new Error("<Switch>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
	}

	set text(value) {
		throw new Error("<Switch>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
	}

	get selected() {
		throw new Error("<Switch>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
	}

	set selected(value) {
		throw new Error("<Switch>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
	}

	get disabled() {
		throw new Error("<Switch>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
	}

	set disabled(value) {
		throw new Error("<Switch>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
	}

	get id() {
		throw new Error("<Switch>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
	}

	set id(value) {
		throw new Error("<Switch>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
	}

	get ref() {
		throw new Error("<Switch>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
	}

	set ref(value) {
		throw new Error("<Switch>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
	}
}

/* node_modules/carbon-components-svelte/src/icons/WarningFilled.svelte generated by Svelte v3.49.0 */

const file$16 = "node_modules/carbon-components-svelte/src/icons/WarningFilled.svelte";

// (24:2) {#if title}
function create_if_block$X(ctx) {
	let title_1;
	let t;

	const block = {
		c: function create() {
			title_1 = svg_element("title");
			t = text(/*title*/ ctx[1]);
			add_location(title_1, file$16, 23, 13, 549);
		},
		m: function mount(target, anchor) {
			insert_dev(target, title_1, anchor);
			append_dev(title_1, t);
		},
		p: function update(ctx, dirty) {
			if (dirty & /*title*/ 2) set_data_dev(t, /*title*/ ctx[1]);
		},
		d: function destroy(detaching) {
			if (detaching) detach_dev(title_1);
		}
	};

	dispatch_dev("SvelteRegisterBlock", {
		block,
		id: create_if_block$X.name,
		type: "if",
		source: "(24:2) {#if title}",
		ctx
	});

	return block;
}

function create_fragment$18(ctx) {
	let svg;
	let path0;
	let path1;
	let if_block = /*title*/ ctx[1] && create_if_block$X(ctx);

	let svg_levels = [
		{ xmlns: "http://www.w3.org/2000/svg" },
		{ viewBox: "0 0 32 32" },
		{ fill: "currentColor" },
		{ preserveAspectRatio: "xMidYMid meet" },
		{ width: /*size*/ ctx[0] },
		{ height: /*size*/ ctx[0] },
		/*attributes*/ ctx[2],
		/*$$restProps*/ ctx[3]
	];

	let svg_data = {};

	for (let i = 0; i < svg_levels.length; i += 1) {
		svg_data = assign(svg_data, svg_levels[i]);
	}

	const block = {
		c: function create() {
			svg = svg_element("svg");
			if (if_block) if_block.c();
			path0 = svg_element("path");
			path1 = svg_element("path");
			attr_dev(path0, "d", "M16,2C8.3,2,2,8.3,2,16s6.3,14,14,14s14-6.3,14-14C30,8.3,23.7,2,16,2z M14.9,8h2.2v11h-2.2V8z M16,25\tc-0.8,0-1.5-0.7-1.5-1.5S15.2,22,16,22c0.8,0,1.5,0.7,1.5,1.5S16.8,25,16,25z");
			add_location(path0, file$16, 24, 2, 579);
			attr_dev(path1, "fill", "none");
			attr_dev(path1, "d", "M17.5,23.5c0,0.8-0.7,1.5-1.5,1.5c-0.8,0-1.5-0.7-1.5-1.5S15.2,22,16,22\tC16.8,22,17.5,22.7,17.5,23.5z M17.1,8h-2.2v11h2.2V8z");
			attr_dev(path1, "data-icon-path", "inner-path");
			attr_dev(path1, "opacity", "0");
			add_location(path1, file$16, 26, 10, 777);
			set_svg_attributes(svg, svg_data);
			add_location(svg, file$16, 13, 0, 338);
		},
		l: function claim(nodes) {
			throw new Error("options.hydrate only works if the component was compiled with the `hydratable: true` option");
		},
		m: function mount(target, anchor) {
			insert_dev(target, svg, anchor);
			if (if_block) if_block.m(svg, null);
			append_dev(svg, path0);
			append_dev(svg, path1);
		},
		p: function update(ctx, [dirty]) {
			if (/*title*/ ctx[1]) {
				if (if_block) {
					if_block.p(ctx, dirty);
				} else {
					if_block = create_if_block$X(ctx);
					if_block.c();
					if_block.m(svg, path0);
				}
			} else if (if_block) {
				if_block.d(1);
				if_block = null;
			}

			set_svg_attributes(svg, svg_data = get_spread_update(svg_levels, [
				{ xmlns: "http://www.w3.org/2000/svg" },
				{ viewBox: "0 0 32 32" },
				{ fill: "currentColor" },
				{ preserveAspectRatio: "xMidYMid meet" },
				dirty & /*size*/ 1 && { width: /*size*/ ctx[0] },
				dirty & /*size*/ 1 && { height: /*size*/ ctx[0] },
				dirty & /*attributes*/ 4 && /*attributes*/ ctx[2],
				dirty & /*$$restProps*/ 8 && /*$$restProps*/ ctx[3]
			]));
		},
		i: noop,
		o: noop,
		d: function destroy(detaching) {
			if (detaching) detach_dev(svg);
			if (if_block) if_block.d();
		}
	};

	dispatch_dev("SvelteRegisterBlock", {
		block,
		id: create_fragment$18.name,
		type: "component",
		source: "",
		ctx
	});

	return block;
}

function instance$18($$self, $$props, $$invalidate) {
	let labelled;
	let attributes;
	const omit_props_names = ["size","title"];
	let $$restProps = compute_rest_props($$props, omit_props_names);
	let { $$slots: slots = {}, $$scope } = $$props;
	validate_slots('WarningFilled', slots, []);
	let { size = 16 } = $$props;
	let { title = undefined } = $$props;

	$$self.$$set = $$new_props => {
		$$invalidate(5, $$props = assign(assign({}, $$props), exclude_internal_props($$new_props)));
		$$invalidate(3, $$restProps = compute_rest_props($$props, omit_props_names));
		if ('size' in $$new_props) $$invalidate(0, size = $$new_props.size);
		if ('title' in $$new_props) $$invalidate(1, title = $$new_props.title);
	};

	$$self.$capture_state = () => ({ size, title, labelled, attributes });

	$$self.$inject_state = $$new_props => {
		$$invalidate(5, $$props = assign(assign({}, $$props), $$new_props));
		if ('size' in $$props) $$invalidate(0, size = $$new_props.size);
		if ('title' in $$props) $$invalidate(1, title = $$new_props.title);
		if ('labelled' in $$props) $$invalidate(4, labelled = $$new_props.labelled);
		if ('attributes' in $$props) $$invalidate(2, attributes = $$new_props.attributes);
	};

	if ($$props && "$$inject" in $$props) {
		$$self.$inject_state($$props.$$inject);
	}

	$$self.$$.update = () => {
		$$invalidate(4, labelled = $$props["aria-label"] || $$props["aria-labelledby"] || title);

		$$invalidate(2, attributes = {
			"aria-hidden": labelled ? undefined : true,
			role: labelled ? "img" : undefined,
			focusable: Number($$props["tabindex"]) === 0 ? true : undefined
		});
	};

	$$props = exclude_internal_props($$props);
	return [size, title, attributes, $$restProps, labelled];
}

class WarningFilled extends SvelteComponentDev {
	constructor(options) {
		super(options);
		init(this, options, instance$18, create_fragment$18, safe_not_equal, { size: 0, title: 1 });

		dispatch_dev("SvelteRegisterComponent", {
			component: this,
			tagName: "WarningFilled",
			options,
			id: create_fragment$18.name
		});
	}

	get size() {
		throw new Error("<WarningFilled>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
	}

	set size(value) {
		throw new Error("<WarningFilled>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
	}

	get title() {
		throw new Error("<WarningFilled>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
	}

	set title(value) {
		throw new Error("<WarningFilled>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
	}
}

/* node_modules/carbon-components-svelte/src/icons/WarningAltFilled.svelte generated by Svelte v3.49.0 */

const file$15 = "node_modules/carbon-components-svelte/src/icons/WarningAltFilled.svelte";

// (24:2) {#if title}
function create_if_block$W(ctx) {
	let title_1;
	let t;

	const block = {
		c: function create() {
			title_1 = svg_element("title");
			t = text(/*title*/ ctx[1]);
			add_location(title_1, file$15, 23, 13, 549);
		},
		m: function mount(target, anchor) {
			insert_dev(target, title_1, anchor);
			append_dev(title_1, t);
		},
		p: function update(ctx, dirty) {
			if (dirty & /*title*/ 2) set_data_dev(t, /*title*/ ctx[1]);
		},
		d: function destroy(detaching) {
			if (detaching) detach_dev(title_1);
		}
	};

	dispatch_dev("SvelteRegisterBlock", {
		block,
		id: create_if_block$W.name,
		type: "if",
		source: "(24:2) {#if title}",
		ctx
	});

	return block;
}

function create_fragment$17(ctx) {
	let svg;
	let path0;
	let path1;
	let path2;
	let if_block = /*title*/ ctx[1] && create_if_block$W(ctx);

	let svg_levels = [
		{ xmlns: "http://www.w3.org/2000/svg" },
		{ viewBox: "0 0 32 32" },
		{ fill: "currentColor" },
		{ preserveAspectRatio: "xMidYMid meet" },
		{ width: /*size*/ ctx[0] },
		{ height: /*size*/ ctx[0] },
		/*attributes*/ ctx[2],
		/*$$restProps*/ ctx[3]
	];

	let svg_data = {};

	for (let i = 0; i < svg_levels.length; i += 1) {
		svg_data = assign(svg_data, svg_levels[i]);
	}

	const block = {
		c: function create() {
			svg = svg_element("svg");
			if (if_block) if_block.c();
			path0 = svg_element("path");
			path1 = svg_element("path");
			path2 = svg_element("path");
			attr_dev(path0, "fill", "none");
			attr_dev(path0, "d", "M16,26a1.5,1.5,0,1,1,1.5-1.5A1.5,1.5,0,0,1,16,26Zm-1.125-5h2.25V12h-2.25Z");
			attr_dev(path0, "data-icon-path", "inner-path");
			add_location(path0, file$15, 24, 2, 579);
			attr_dev(path1, "d", "M16.002,6.1714h-.004L4.6487,27.9966,4.6506,28H27.3494l.0019-.0034ZM14.875,12h2.25v9h-2.25ZM16,26a1.5,1.5,0,1,1,1.5-1.5A1.5,1.5,0,0,1,16,26Z");
			add_location(path1, file$15, 27, 39, 722);
			attr_dev(path2, "d", "M29,30H3a1,1,0,0,1-.8872-1.4614l13-25a1,1,0,0,1,1.7744,0l13,25A1,1,0,0,1,29,30ZM4.6507,28H27.3493l.002-.0033L16.002,6.1714h-.004L4.6487,27.9967Z");
			add_location(path2, file$15, 29, 10, 886);
			set_svg_attributes(svg, svg_data);
			add_location(svg, file$15, 13, 0, 338);
		},
		l: function claim(nodes) {
			throw new Error("options.hydrate only works if the component was compiled with the `hydratable: true` option");
		},
		m: function mount(target, anchor) {
			insert_dev(target, svg, anchor);
			if (if_block) if_block.m(svg, null);
			append_dev(svg, path0);
			append_dev(svg, path1);
			append_dev(svg, path2);
		},
		p: function update(ctx, [dirty]) {
			if (/*title*/ ctx[1]) {
				if (if_block) {
					if_block.p(ctx, dirty);
				} else {
					if_block = create_if_block$W(ctx);
					if_block.c();
					if_block.m(svg, path0);
				}
			} else if (if_block) {
				if_block.d(1);
				if_block = null;
			}

			set_svg_attributes(svg, svg_data = get_spread_update(svg_levels, [
				{ xmlns: "http://www.w3.org/2000/svg" },
				{ viewBox: "0 0 32 32" },
				{ fill: "currentColor" },
				{ preserveAspectRatio: "xMidYMid meet" },
				dirty & /*size*/ 1 && { width: /*size*/ ctx[0] },
				dirty & /*size*/ 1 && { height: /*size*/ ctx[0] },
				dirty & /*attributes*/ 4 && /*attributes*/ ctx[2],
				dirty & /*$$restProps*/ 8 && /*$$restProps*/ ctx[3]
			]));
		},
		i: noop,
		o: noop,
		d: function destroy(detaching) {
			if (detaching) detach_dev(svg);
			if (if_block) if_block.d();
		}
	};

	dispatch_dev("SvelteRegisterBlock", {
		block,
		id: create_fragment$17.name,
		type: "component",
		source: "",
		ctx
	});

	return block;
}

function instance$17($$self, $$props, $$invalidate) {
	let labelled;
	let attributes;
	const omit_props_names = ["size","title"];
	let $$restProps = compute_rest_props($$props, omit_props_names);
	let { $$slots: slots = {}, $$scope } = $$props;
	validate_slots('WarningAltFilled', slots, []);
	let { size = 16 } = $$props;
	let { title = undefined } = $$props;

	$$self.$$set = $$new_props => {
		$$invalidate(5, $$props = assign(assign({}, $$props), exclude_internal_props($$new_props)));
		$$invalidate(3, $$restProps = compute_rest_props($$props, omit_props_names));
		if ('size' in $$new_props) $$invalidate(0, size = $$new_props.size);
		if ('title' in $$new_props) $$invalidate(1, title = $$new_props.title);
	};

	$$self.$capture_state = () => ({ size, title, labelled, attributes });

	$$self.$inject_state = $$new_props => {
		$$invalidate(5, $$props = assign(assign({}, $$props), $$new_props));
		if ('size' in $$props) $$invalidate(0, size = $$new_props.size);
		if ('title' in $$props) $$invalidate(1, title = $$new_props.title);
		if ('labelled' in $$props) $$invalidate(4, labelled = $$new_props.labelled);
		if ('attributes' in $$props) $$invalidate(2, attributes = $$new_props.attributes);
	};

	if ($$props && "$$inject" in $$props) {
		$$self.$inject_state($$props.$$inject);
	}

	$$self.$$.update = () => {
		$$invalidate(4, labelled = $$props["aria-label"] || $$props["aria-labelledby"] || title);

		$$invalidate(2, attributes = {
			"aria-hidden": labelled ? undefined : true,
			role: labelled ? "img" : undefined,
			focusable: Number($$props["tabindex"]) === 0 ? true : undefined
		});
	};

	$$props = exclude_internal_props($$props);
	return [size, title, attributes, $$restProps, labelled];
}

class WarningAltFilled extends SvelteComponentDev {
	constructor(options) {
		super(options);
		init(this, options, instance$17, create_fragment$17, safe_not_equal, { size: 0, title: 1 });

		dispatch_dev("SvelteRegisterComponent", {
			component: this,
			tagName: "WarningAltFilled",
			options,
			id: create_fragment$17.name
		});
	}

	get size() {
		throw new Error("<WarningAltFilled>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
	}

	set size(value) {
		throw new Error("<WarningAltFilled>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
	}

	get title() {
		throw new Error("<WarningAltFilled>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
	}

	set title(value) {
		throw new Error("<WarningAltFilled>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
	}
}

/* node_modules/carbon-components-svelte/src/icons/ChevronDown.svelte generated by Svelte v3.49.0 */

const file$14 = "node_modules/carbon-components-svelte/src/icons/ChevronDown.svelte";

// (24:2) {#if title}
function create_if_block$V(ctx) {
	let title_1;
	let t;

	const block = {
		c: function create() {
			title_1 = svg_element("title");
			t = text(/*title*/ ctx[1]);
			add_location(title_1, file$14, 23, 13, 549);
		},
		m: function mount(target, anchor) {
			insert_dev(target, title_1, anchor);
			append_dev(title_1, t);
		},
		p: function update(ctx, dirty) {
			if (dirty & /*title*/ 2) set_data_dev(t, /*title*/ ctx[1]);
		},
		d: function destroy(detaching) {
			if (detaching) detach_dev(title_1);
		}
	};

	dispatch_dev("SvelteRegisterBlock", {
		block,
		id: create_if_block$V.name,
		type: "if",
		source: "(24:2) {#if title}",
		ctx
	});

	return block;
}

function create_fragment$16(ctx) {
	let svg;
	let path;
	let if_block = /*title*/ ctx[1] && create_if_block$V(ctx);

	let svg_levels = [
		{ xmlns: "http://www.w3.org/2000/svg" },
		{ viewBox: "0 0 32 32" },
		{ fill: "currentColor" },
		{ preserveAspectRatio: "xMidYMid meet" },
		{ width: /*size*/ ctx[0] },
		{ height: /*size*/ ctx[0] },
		/*attributes*/ ctx[2],
		/*$$restProps*/ ctx[3]
	];

	let svg_data = {};

	for (let i = 0; i < svg_levels.length; i += 1) {
		svg_data = assign(svg_data, svg_levels[i]);
	}

	const block = {
		c: function create() {
			svg = svg_element("svg");
			if (if_block) if_block.c();
			path = svg_element("path");
			attr_dev(path, "d", "M16 22L6 12 7.4 10.6 16 19.2 24.6 10.6 26 12z");
			add_location(path, file$14, 24, 2, 579);
			set_svg_attributes(svg, svg_data);
			add_location(svg, file$14, 13, 0, 338);
		},
		l: function claim(nodes) {
			throw new Error("options.hydrate only works if the component was compiled with the `hydratable: true` option");
		},
		m: function mount(target, anchor) {
			insert_dev(target, svg, anchor);
			if (if_block) if_block.m(svg, null);
			append_dev(svg, path);
		},
		p: function update(ctx, [dirty]) {
			if (/*title*/ ctx[1]) {
				if (if_block) {
					if_block.p(ctx, dirty);
				} else {
					if_block = create_if_block$V(ctx);
					if_block.c();
					if_block.m(svg, path);
				}
			} else if (if_block) {
				if_block.d(1);
				if_block = null;
			}

			set_svg_attributes(svg, svg_data = get_spread_update(svg_levels, [
				{ xmlns: "http://www.w3.org/2000/svg" },
				{ viewBox: "0 0 32 32" },
				{ fill: "currentColor" },
				{ preserveAspectRatio: "xMidYMid meet" },
				dirty & /*size*/ 1 && { width: /*size*/ ctx[0] },
				dirty & /*size*/ 1 && { height: /*size*/ ctx[0] },
				dirty & /*attributes*/ 4 && /*attributes*/ ctx[2],
				dirty & /*$$restProps*/ 8 && /*$$restProps*/ ctx[3]
			]));
		},
		i: noop,
		o: noop,
		d: function destroy(detaching) {
			if (detaching) detach_dev(svg);
			if (if_block) if_block.d();
		}
	};

	dispatch_dev("SvelteRegisterBlock", {
		block,
		id: create_fragment$16.name,
		type: "component",
		source: "",
		ctx
	});

	return block;
}

function instance$16($$self, $$props, $$invalidate) {
	let labelled;
	let attributes;
	const omit_props_names = ["size","title"];
	let $$restProps = compute_rest_props($$props, omit_props_names);
	let { $$slots: slots = {}, $$scope } = $$props;
	validate_slots('ChevronDown', slots, []);
	let { size = 16 } = $$props;
	let { title = undefined } = $$props;

	$$self.$$set = $$new_props => {
		$$invalidate(5, $$props = assign(assign({}, $$props), exclude_internal_props($$new_props)));
		$$invalidate(3, $$restProps = compute_rest_props($$props, omit_props_names));
		if ('size' in $$new_props) $$invalidate(0, size = $$new_props.size);
		if ('title' in $$new_props) $$invalidate(1, title = $$new_props.title);
	};

	$$self.$capture_state = () => ({ size, title, labelled, attributes });

	$$self.$inject_state = $$new_props => {
		$$invalidate(5, $$props = assign(assign({}, $$props), $$new_props));
		if ('size' in $$props) $$invalidate(0, size = $$new_props.size);
		if ('title' in $$props) $$invalidate(1, title = $$new_props.title);
		if ('labelled' in $$props) $$invalidate(4, labelled = $$new_props.labelled);
		if ('attributes' in $$props) $$invalidate(2, attributes = $$new_props.attributes);
	};

	if ($$props && "$$inject" in $$props) {
		$$self.$inject_state($$props.$$inject);
	}

	$$self.$$.update = () => {
		$$invalidate(4, labelled = $$props["aria-label"] || $$props["aria-labelledby"] || title);

		$$invalidate(2, attributes = {
			"aria-hidden": labelled ? undefined : true,
			role: labelled ? "img" : undefined,
			focusable: Number($$props["tabindex"]) === 0 ? true : undefined
		});
	};

	$$props = exclude_internal_props($$props);
	return [size, title, attributes, $$restProps, labelled];
}

class ChevronDown extends SvelteComponentDev {
	constructor(options) {
		super(options);
		init(this, options, instance$16, create_fragment$16, safe_not_equal, { size: 0, title: 1 });

		dispatch_dev("SvelteRegisterComponent", {
			component: this,
			tagName: "ChevronDown",
			options,
			id: create_fragment$16.name
		});
	}

	get size() {
		throw new Error("<ChevronDown>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
	}

	set size(value) {
		throw new Error("<ChevronDown>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
	}

	get title() {
		throw new Error("<ChevronDown>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
	}

	set title(value) {
		throw new Error("<ChevronDown>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
	}
}

/* node_modules/carbon-components-svelte/src/icons/Close.svelte generated by Svelte v3.49.0 */

const file$13 = "node_modules/carbon-components-svelte/src/icons/Close.svelte";

// (24:2) {#if title}
function create_if_block$U(ctx) {
	let title_1;
	let t;

	const block = {
		c: function create() {
			title_1 = svg_element("title");
			t = text(/*title*/ ctx[1]);
			add_location(title_1, file$13, 23, 13, 549);
		},
		m: function mount(target, anchor) {
			insert_dev(target, title_1, anchor);
			append_dev(title_1, t);
		},
		p: function update(ctx, dirty) {
			if (dirty & /*title*/ 2) set_data_dev(t, /*title*/ ctx[1]);
		},
		d: function destroy(detaching) {
			if (detaching) detach_dev(title_1);
		}
	};

	dispatch_dev("SvelteRegisterBlock", {
		block,
		id: create_if_block$U.name,
		type: "if",
		source: "(24:2) {#if title}",
		ctx
	});

	return block;
}

function create_fragment$15(ctx) {
	let svg;
	let path;
	let if_block = /*title*/ ctx[1] && create_if_block$U(ctx);

	let svg_levels = [
		{ xmlns: "http://www.w3.org/2000/svg" },
		{ viewBox: "0 0 32 32" },
		{ fill: "currentColor" },
		{ preserveAspectRatio: "xMidYMid meet" },
		{ width: /*size*/ ctx[0] },
		{ height: /*size*/ ctx[0] },
		/*attributes*/ ctx[2],
		/*$$restProps*/ ctx[3]
	];

	let svg_data = {};

	for (let i = 0; i < svg_levels.length; i += 1) {
		svg_data = assign(svg_data, svg_levels[i]);
	}

	const block = {
		c: function create() {
			svg = svg_element("svg");
			if (if_block) if_block.c();
			path = svg_element("path");
			attr_dev(path, "d", "M24 9.4L22.6 8 16 14.6 9.4 8 8 9.4 14.6 16 8 22.6 9.4 24 16 17.4 22.6 24 24 22.6 17.4 16 24 9.4z");
			add_location(path, file$13, 24, 2, 579);
			set_svg_attributes(svg, svg_data);
			add_location(svg, file$13, 13, 0, 338);
		},
		l: function claim(nodes) {
			throw new Error("options.hydrate only works if the component was compiled with the `hydratable: true` option");
		},
		m: function mount(target, anchor) {
			insert_dev(target, svg, anchor);
			if (if_block) if_block.m(svg, null);
			append_dev(svg, path);
		},
		p: function update(ctx, [dirty]) {
			if (/*title*/ ctx[1]) {
				if (if_block) {
					if_block.p(ctx, dirty);
				} else {
					if_block = create_if_block$U(ctx);
					if_block.c();
					if_block.m(svg, path);
				}
			} else if (if_block) {
				if_block.d(1);
				if_block = null;
			}

			set_svg_attributes(svg, svg_data = get_spread_update(svg_levels, [
				{ xmlns: "http://www.w3.org/2000/svg" },
				{ viewBox: "0 0 32 32" },
				{ fill: "currentColor" },
				{ preserveAspectRatio: "xMidYMid meet" },
				dirty & /*size*/ 1 && { width: /*size*/ ctx[0] },
				dirty & /*size*/ 1 && { height: /*size*/ ctx[0] },
				dirty & /*attributes*/ 4 && /*attributes*/ ctx[2],
				dirty & /*$$restProps*/ 8 && /*$$restProps*/ ctx[3]
			]));
		},
		i: noop,
		o: noop,
		d: function destroy(detaching) {
			if (detaching) detach_dev(svg);
			if (if_block) if_block.d();
		}
	};

	dispatch_dev("SvelteRegisterBlock", {
		block,
		id: create_fragment$15.name,
		type: "component",
		source: "",
		ctx
	});

	return block;
}

function instance$15($$self, $$props, $$invalidate) {
	let labelled;
	let attributes;
	const omit_props_names = ["size","title"];
	let $$restProps = compute_rest_props($$props, omit_props_names);
	let { $$slots: slots = {}, $$scope } = $$props;
	validate_slots('Close', slots, []);
	let { size = 16 } = $$props;
	let { title = undefined } = $$props;

	$$self.$$set = $$new_props => {
		$$invalidate(5, $$props = assign(assign({}, $$props), exclude_internal_props($$new_props)));
		$$invalidate(3, $$restProps = compute_rest_props($$props, omit_props_names));
		if ('size' in $$new_props) $$invalidate(0, size = $$new_props.size);
		if ('title' in $$new_props) $$invalidate(1, title = $$new_props.title);
	};

	$$self.$capture_state = () => ({ size, title, labelled, attributes });

	$$self.$inject_state = $$new_props => {
		$$invalidate(5, $$props = assign(assign({}, $$props), $$new_props));
		if ('size' in $$props) $$invalidate(0, size = $$new_props.size);
		if ('title' in $$props) $$invalidate(1, title = $$new_props.title);
		if ('labelled' in $$props) $$invalidate(4, labelled = $$new_props.labelled);
		if ('attributes' in $$props) $$invalidate(2, attributes = $$new_props.attributes);
	};

	if ($$props && "$$inject" in $$props) {
		$$self.$inject_state($$props.$$inject);
	}

	$$self.$$.update = () => {
		$$invalidate(4, labelled = $$props["aria-label"] || $$props["aria-labelledby"] || title);

		$$invalidate(2, attributes = {
			"aria-hidden": labelled ? undefined : true,
			role: labelled ? "img" : undefined,
			focusable: Number($$props["tabindex"]) === 0 ? true : undefined
		});
	};

	$$props = exclude_internal_props($$props);
	return [size, title, attributes, $$restProps, labelled];
}

class Close extends SvelteComponentDev {
	constructor(options) {
		super(options);
		init(this, options, instance$15, create_fragment$15, safe_not_equal, { size: 0, title: 1 });

		dispatch_dev("SvelteRegisterComponent", {
			component: this,
			tagName: "Close",
			options,
			id: create_fragment$15.name
		});
	}

	get size() {
		throw new Error("<Close>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
	}

	set size(value) {
		throw new Error("<Close>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
	}

	get title() {
		throw new Error("<Close>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
	}

	set title(value) {
		throw new Error("<Close>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
	}
}

/* node_modules/carbon-components-svelte/src/Grid/Grid.svelte generated by Svelte v3.49.0 */

const file$12 = "node_modules/carbon-components-svelte/src/Grid/Grid.svelte";
const get_default_slot_changes$3 = dirty => ({ props: dirty & /*props*/ 2 });
const get_default_slot_context$3 = ctx => ({ props: /*props*/ ctx[1] });

// (54:0) {:else}
function create_else_block$5(ctx) {
	let div;
	let current;
	const default_slot_template = /*#slots*/ ctx[10].default;
	const default_slot = create_slot(default_slot_template, ctx, /*$$scope*/ ctx[9], null);
	let div_levels = [/*props*/ ctx[1]];
	let div_data = {};

	for (let i = 0; i < div_levels.length; i += 1) {
		div_data = assign(div_data, div_levels[i]);
	}

	const block = {
		c: function create() {
			div = element("div");
			if (default_slot) default_slot.c();
			set_attributes(div, div_data);
			add_location(div, file$12, 54, 2, 1398);
		},
		m: function mount(target, anchor) {
			insert_dev(target, div, anchor);

			if (default_slot) {
				default_slot.m(div, null);
			}

			current = true;
		},
		p: function update(ctx, dirty) {
			if (default_slot) {
				if (default_slot.p && (!current || dirty & /*$$scope*/ 512)) {
					update_slot_base(
						default_slot,
						default_slot_template,
						ctx,
						/*$$scope*/ ctx[9],
						!current
						? get_all_dirty_from_scope(/*$$scope*/ ctx[9])
						: get_slot_changes(default_slot_template, /*$$scope*/ ctx[9], dirty, null),
						null
					);
				}
			}

			set_attributes(div, div_data = get_spread_update(div_levels, [dirty & /*props*/ 2 && /*props*/ ctx[1]]));
		},
		i: function intro(local) {
			if (current) return;
			transition_in(default_slot, local);
			current = true;
		},
		o: function outro(local) {
			transition_out(default_slot, local);
			current = false;
		},
		d: function destroy(detaching) {
			if (detaching) detach_dev(div);
			if (default_slot) default_slot.d(detaching);
		}
	};

	dispatch_dev("SvelteRegisterBlock", {
		block,
		id: create_else_block$5.name,
		type: "else",
		source: "(54:0) {:else}",
		ctx
	});

	return block;
}

// (52:0) {#if as}
function create_if_block$T(ctx) {
	let current;
	const default_slot_template = /*#slots*/ ctx[10].default;
	const default_slot = create_slot(default_slot_template, ctx, /*$$scope*/ ctx[9], get_default_slot_context$3);

	const block = {
		c: function create() {
			if (default_slot) default_slot.c();
		},
		m: function mount(target, anchor) {
			if (default_slot) {
				default_slot.m(target, anchor);
			}

			current = true;
		},
		p: function update(ctx, dirty) {
			if (default_slot) {
				if (default_slot.p && (!current || dirty & /*$$scope, props*/ 514)) {
					update_slot_base(
						default_slot,
						default_slot_template,
						ctx,
						/*$$scope*/ ctx[9],
						!current
						? get_all_dirty_from_scope(/*$$scope*/ ctx[9])
						: get_slot_changes(default_slot_template, /*$$scope*/ ctx[9], dirty, get_default_slot_changes$3),
						get_default_slot_context$3
					);
				}
			}
		},
		i: function intro(local) {
			if (current) return;
			transition_in(default_slot, local);
			current = true;
		},
		o: function outro(local) {
			transition_out(default_slot, local);
			current = false;
		},
		d: function destroy(detaching) {
			if (default_slot) default_slot.d(detaching);
		}
	};

	dispatch_dev("SvelteRegisterBlock", {
		block,
		id: create_if_block$T.name,
		type: "if",
		source: "(52:0) {#if as}",
		ctx
	});

	return block;
}

function create_fragment$14(ctx) {
	let current_block_type_index;
	let if_block;
	let if_block_anchor;
	let current;
	const if_block_creators = [create_if_block$T, create_else_block$5];
	const if_blocks = [];

	function select_block_type(ctx, dirty) {
		if (/*as*/ ctx[0]) return 0;
		return 1;
	}

	current_block_type_index = select_block_type(ctx);
	if_block = if_blocks[current_block_type_index] = if_block_creators[current_block_type_index](ctx);

	const block = {
		c: function create() {
			if_block.c();
			if_block_anchor = empty();
		},
		l: function claim(nodes) {
			throw new Error("options.hydrate only works if the component was compiled with the `hydratable: true` option");
		},
		m: function mount(target, anchor) {
			if_blocks[current_block_type_index].m(target, anchor);
			insert_dev(target, if_block_anchor, anchor);
			current = true;
		},
		p: function update(ctx, [dirty]) {
			let previous_block_index = current_block_type_index;
			current_block_type_index = select_block_type(ctx);

			if (current_block_type_index === previous_block_index) {
				if_blocks[current_block_type_index].p(ctx, dirty);
			} else {
				group_outros();

				transition_out(if_blocks[previous_block_index], 1, 1, () => {
					if_blocks[previous_block_index] = null;
				});

				check_outros();
				if_block = if_blocks[current_block_type_index];

				if (!if_block) {
					if_block = if_blocks[current_block_type_index] = if_block_creators[current_block_type_index](ctx);
					if_block.c();
				} else {
					if_block.p(ctx, dirty);
				}

				transition_in(if_block, 1);
				if_block.m(if_block_anchor.parentNode, if_block_anchor);
			}
		},
		i: function intro(local) {
			if (current) return;
			transition_in(if_block);
			current = true;
		},
		o: function outro(local) {
			transition_out(if_block);
			current = false;
		},
		d: function destroy(detaching) {
			if_blocks[current_block_type_index].d(detaching);
			if (detaching) detach_dev(if_block_anchor);
		}
	};

	dispatch_dev("SvelteRegisterBlock", {
		block,
		id: create_fragment$14.name,
		type: "component",
		source: "",
		ctx
	});

	return block;
}

function instance$14($$self, $$props, $$invalidate) {
	let props;

	const omit_props_names = [
		"as","condensed","narrow","fullWidth","noGutter","noGutterLeft","noGutterRight","padding"
	];

	let $$restProps = compute_rest_props($$props, omit_props_names);
	let { $$slots: slots = {}, $$scope } = $$props;
	validate_slots('Grid', slots, ['default']);
	let { as = false } = $$props;
	let { condensed = false } = $$props;
	let { narrow = false } = $$props;
	let { fullWidth = false } = $$props;
	let { noGutter = false } = $$props;
	let { noGutterLeft = false } = $$props;
	let { noGutterRight = false } = $$props;
	let { padding = false } = $$props;

	$$self.$$set = $$new_props => {
		$$props = assign(assign({}, $$props), exclude_internal_props($$new_props));
		$$invalidate(11, $$restProps = compute_rest_props($$props, omit_props_names));
		if ('as' in $$new_props) $$invalidate(0, as = $$new_props.as);
		if ('condensed' in $$new_props) $$invalidate(2, condensed = $$new_props.condensed);
		if ('narrow' in $$new_props) $$invalidate(3, narrow = $$new_props.narrow);
		if ('fullWidth' in $$new_props) $$invalidate(4, fullWidth = $$new_props.fullWidth);
		if ('noGutter' in $$new_props) $$invalidate(5, noGutter = $$new_props.noGutter);
		if ('noGutterLeft' in $$new_props) $$invalidate(6, noGutterLeft = $$new_props.noGutterLeft);
		if ('noGutterRight' in $$new_props) $$invalidate(7, noGutterRight = $$new_props.noGutterRight);
		if ('padding' in $$new_props) $$invalidate(8, padding = $$new_props.padding);
		if ('$$scope' in $$new_props) $$invalidate(9, $$scope = $$new_props.$$scope);
	};

	$$self.$capture_state = () => ({
		as,
		condensed,
		narrow,
		fullWidth,
		noGutter,
		noGutterLeft,
		noGutterRight,
		padding,
		props
	});

	$$self.$inject_state = $$new_props => {
		if ('as' in $$props) $$invalidate(0, as = $$new_props.as);
		if ('condensed' in $$props) $$invalidate(2, condensed = $$new_props.condensed);
		if ('narrow' in $$props) $$invalidate(3, narrow = $$new_props.narrow);
		if ('fullWidth' in $$props) $$invalidate(4, fullWidth = $$new_props.fullWidth);
		if ('noGutter' in $$props) $$invalidate(5, noGutter = $$new_props.noGutter);
		if ('noGutterLeft' in $$props) $$invalidate(6, noGutterLeft = $$new_props.noGutterLeft);
		if ('noGutterRight' in $$props) $$invalidate(7, noGutterRight = $$new_props.noGutterRight);
		if ('padding' in $$props) $$invalidate(8, padding = $$new_props.padding);
		if ('props' in $$props) $$invalidate(1, props = $$new_props.props);
	};

	if ($$props && "$$inject" in $$props) {
		$$self.$inject_state($$props.$$inject);
	}

	$$self.$$.update = () => {
		$$invalidate(1, props = {
			...$$restProps,
			class: [
				$$restProps.class,
				"bx--grid",
				condensed && "bx--grid--condensed",
				narrow && "bx--grid--narrow",
				fullWidth && "bx--grid--full-width",
				noGutter && "bx--no-gutter",
				noGutterLeft && "bx--no-gutter--left",
				noGutterRight && "bx--no-gutter--right",
				padding && "bx--row-padding"
			].filter(Boolean).join(" ")
		});
	};

	return [
		as,
		props,
		condensed,
		narrow,
		fullWidth,
		noGutter,
		noGutterLeft,
		noGutterRight,
		padding,
		$$scope,
		slots
	];
}

class Grid extends SvelteComponentDev {
	constructor(options) {
		super(options);

		init(this, options, instance$14, create_fragment$14, safe_not_equal, {
			as: 0,
			condensed: 2,
			narrow: 3,
			fullWidth: 4,
			noGutter: 5,
			noGutterLeft: 6,
			noGutterRight: 7,
			padding: 8
		});

		dispatch_dev("SvelteRegisterComponent", {
			component: this,
			tagName: "Grid",
			options,
			id: create_fragment$14.name
		});
	}

	get as() {
		throw new Error("<Grid>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
	}

	set as(value) {
		throw new Error("<Grid>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
	}

	get condensed() {
		throw new Error("<Grid>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
	}

	set condensed(value) {
		throw new Error("<Grid>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
	}

	get narrow() {
		throw new Error("<Grid>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
	}

	set narrow(value) {
		throw new Error("<Grid>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
	}

	get fullWidth() {
		throw new Error("<Grid>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
	}

	set fullWidth(value) {
		throw new Error("<Grid>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
	}

	get noGutter() {
		throw new Error("<Grid>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
	}

	set noGutter(value) {
		throw new Error("<Grid>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
	}

	get noGutterLeft() {
		throw new Error("<Grid>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
	}

	set noGutterLeft(value) {
		throw new Error("<Grid>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
	}

	get noGutterRight() {
		throw new Error("<Grid>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
	}

	set noGutterRight(value) {
		throw new Error("<Grid>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
	}

	get padding() {
		throw new Error("<Grid>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
	}

	set padding(value) {
		throw new Error("<Grid>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
	}
}

/* node_modules/carbon-components-svelte/src/Grid/Row.svelte generated by Svelte v3.49.0 */

const file$11 = "node_modules/carbon-components-svelte/src/Grid/Row.svelte";
const get_default_slot_changes$2 = dirty => ({ props: dirty & /*props*/ 2 });
const get_default_slot_context$2 = ctx => ({ props: /*props*/ ctx[1] });

// (50:0) {:else}
function create_else_block$4(ctx) {
	let div;
	let current;
	const default_slot_template = /*#slots*/ ctx[9].default;
	const default_slot = create_slot(default_slot_template, ctx, /*$$scope*/ ctx[8], null);
	let div_levels = [/*props*/ ctx[1]];
	let div_data = {};

	for (let i = 0; i < div_levels.length; i += 1) {
		div_data = assign(div_data, div_levels[i]);
	}

	const block = {
		c: function create() {
			div = element("div");
			if (default_slot) default_slot.c();
			set_attributes(div, div_data);
			add_location(div, file$11, 50, 2, 1267);
		},
		m: function mount(target, anchor) {
			insert_dev(target, div, anchor);

			if (default_slot) {
				default_slot.m(div, null);
			}

			current = true;
		},
		p: function update(ctx, dirty) {
			if (default_slot) {
				if (default_slot.p && (!current || dirty & /*$$scope*/ 256)) {
					update_slot_base(
						default_slot,
						default_slot_template,
						ctx,
						/*$$scope*/ ctx[8],
						!current
						? get_all_dirty_from_scope(/*$$scope*/ ctx[8])
						: get_slot_changes(default_slot_template, /*$$scope*/ ctx[8], dirty, null),
						null
					);
				}
			}

			set_attributes(div, div_data = get_spread_update(div_levels, [dirty & /*props*/ 2 && /*props*/ ctx[1]]));
		},
		i: function intro(local) {
			if (current) return;
			transition_in(default_slot, local);
			current = true;
		},
		o: function outro(local) {
			transition_out(default_slot, local);
			current = false;
		},
		d: function destroy(detaching) {
			if (detaching) detach_dev(div);
			if (default_slot) default_slot.d(detaching);
		}
	};

	dispatch_dev("SvelteRegisterBlock", {
		block,
		id: create_else_block$4.name,
		type: "else",
		source: "(50:0) {:else}",
		ctx
	});

	return block;
}

// (48:0) {#if as}
function create_if_block$S(ctx) {
	let current;
	const default_slot_template = /*#slots*/ ctx[9].default;
	const default_slot = create_slot(default_slot_template, ctx, /*$$scope*/ ctx[8], get_default_slot_context$2);

	const block = {
		c: function create() {
			if (default_slot) default_slot.c();
		},
		m: function mount(target, anchor) {
			if (default_slot) {
				default_slot.m(target, anchor);
			}

			current = true;
		},
		p: function update(ctx, dirty) {
			if (default_slot) {
				if (default_slot.p && (!current || dirty & /*$$scope, props*/ 258)) {
					update_slot_base(
						default_slot,
						default_slot_template,
						ctx,
						/*$$scope*/ ctx[8],
						!current
						? get_all_dirty_from_scope(/*$$scope*/ ctx[8])
						: get_slot_changes(default_slot_template, /*$$scope*/ ctx[8], dirty, get_default_slot_changes$2),
						get_default_slot_context$2
					);
				}
			}
		},
		i: function intro(local) {
			if (current) return;
			transition_in(default_slot, local);
			current = true;
		},
		o: function outro(local) {
			transition_out(default_slot, local);
			current = false;
		},
		d: function destroy(detaching) {
			if (default_slot) default_slot.d(detaching);
		}
	};

	dispatch_dev("SvelteRegisterBlock", {
		block,
		id: create_if_block$S.name,
		type: "if",
		source: "(48:0) {#if as}",
		ctx
	});

	return block;
}

function create_fragment$13(ctx) {
	let current_block_type_index;
	let if_block;
	let if_block_anchor;
	let current;
	const if_block_creators = [create_if_block$S, create_else_block$4];
	const if_blocks = [];

	function select_block_type(ctx, dirty) {
		if (/*as*/ ctx[0]) return 0;
		return 1;
	}

	current_block_type_index = select_block_type(ctx);
	if_block = if_blocks[current_block_type_index] = if_block_creators[current_block_type_index](ctx);

	const block = {
		c: function create() {
			if_block.c();
			if_block_anchor = empty();
		},
		l: function claim(nodes) {
			throw new Error("options.hydrate only works if the component was compiled with the `hydratable: true` option");
		},
		m: function mount(target, anchor) {
			if_blocks[current_block_type_index].m(target, anchor);
			insert_dev(target, if_block_anchor, anchor);
			current = true;
		},
		p: function update(ctx, [dirty]) {
			let previous_block_index = current_block_type_index;
			current_block_type_index = select_block_type(ctx);

			if (current_block_type_index === previous_block_index) {
				if_blocks[current_block_type_index].p(ctx, dirty);
			} else {
				group_outros();

				transition_out(if_blocks[previous_block_index], 1, 1, () => {
					if_blocks[previous_block_index] = null;
				});

				check_outros();
				if_block = if_blocks[current_block_type_index];

				if (!if_block) {
					if_block = if_blocks[current_block_type_index] = if_block_creators[current_block_type_index](ctx);
					if_block.c();
				} else {
					if_block.p(ctx, dirty);
				}

				transition_in(if_block, 1);
				if_block.m(if_block_anchor.parentNode, if_block_anchor);
			}
		},
		i: function intro(local) {
			if (current) return;
			transition_in(if_block);
			current = true;
		},
		o: function outro(local) {
			transition_out(if_block);
			current = false;
		},
		d: function destroy(detaching) {
			if_blocks[current_block_type_index].d(detaching);
			if (detaching) detach_dev(if_block_anchor);
		}
	};

	dispatch_dev("SvelteRegisterBlock", {
		block,
		id: create_fragment$13.name,
		type: "component",
		source: "",
		ctx
	});

	return block;
}

function instance$13($$self, $$props, $$invalidate) {
	let props;
	const omit_props_names = ["as","condensed","narrow","noGutter","noGutterLeft","noGutterRight","padding"];
	let $$restProps = compute_rest_props($$props, omit_props_names);
	let { $$slots: slots = {}, $$scope } = $$props;
	validate_slots('Row', slots, ['default']);
	let { as = false } = $$props;
	let { condensed = false } = $$props;
	let { narrow = false } = $$props;
	let { noGutter = false } = $$props;
	let { noGutterLeft = false } = $$props;
	let { noGutterRight = false } = $$props;
	let { padding = false } = $$props;

	$$self.$$set = $$new_props => {
		$$props = assign(assign({}, $$props), exclude_internal_props($$new_props));
		$$invalidate(10, $$restProps = compute_rest_props($$props, omit_props_names));
		if ('as' in $$new_props) $$invalidate(0, as = $$new_props.as);
		if ('condensed' in $$new_props) $$invalidate(2, condensed = $$new_props.condensed);
		if ('narrow' in $$new_props) $$invalidate(3, narrow = $$new_props.narrow);
		if ('noGutter' in $$new_props) $$invalidate(4, noGutter = $$new_props.noGutter);
		if ('noGutterLeft' in $$new_props) $$invalidate(5, noGutterLeft = $$new_props.noGutterLeft);
		if ('noGutterRight' in $$new_props) $$invalidate(6, noGutterRight = $$new_props.noGutterRight);
		if ('padding' in $$new_props) $$invalidate(7, padding = $$new_props.padding);
		if ('$$scope' in $$new_props) $$invalidate(8, $$scope = $$new_props.$$scope);
	};

	$$self.$capture_state = () => ({
		as,
		condensed,
		narrow,
		noGutter,
		noGutterLeft,
		noGutterRight,
		padding,
		props
	});

	$$self.$inject_state = $$new_props => {
		if ('as' in $$props) $$invalidate(0, as = $$new_props.as);
		if ('condensed' in $$props) $$invalidate(2, condensed = $$new_props.condensed);
		if ('narrow' in $$props) $$invalidate(3, narrow = $$new_props.narrow);
		if ('noGutter' in $$props) $$invalidate(4, noGutter = $$new_props.noGutter);
		if ('noGutterLeft' in $$props) $$invalidate(5, noGutterLeft = $$new_props.noGutterLeft);
		if ('noGutterRight' in $$props) $$invalidate(6, noGutterRight = $$new_props.noGutterRight);
		if ('padding' in $$props) $$invalidate(7, padding = $$new_props.padding);
		if ('props' in $$props) $$invalidate(1, props = $$new_props.props);
	};

	if ($$props && "$$inject" in $$props) {
		$$self.$inject_state($$props.$$inject);
	}

	$$self.$$.update = () => {
		$$invalidate(1, props = {
			...$$restProps,
			class: [
				$$restProps.class,
				"bx--row",
				condensed && "bx--row--condensed",
				narrow && "bx--row--narrow",
				noGutter && "bx--no-gutter",
				noGutterLeft && "bx--no-gutter--left",
				noGutterRight && "bx--no-gutter--right",
				padding && "bx--row-padding"
			].filter(Boolean).join(" ")
		});
	};

	return [
		as,
		props,
		condensed,
		narrow,
		noGutter,
		noGutterLeft,
		noGutterRight,
		padding,
		$$scope,
		slots
	];
}

class Row extends SvelteComponentDev {
	constructor(options) {
		super(options);

		init(this, options, instance$13, create_fragment$13, safe_not_equal, {
			as: 0,
			condensed: 2,
			narrow: 3,
			noGutter: 4,
			noGutterLeft: 5,
			noGutterRight: 6,
			padding: 7
		});

		dispatch_dev("SvelteRegisterComponent", {
			component: this,
			tagName: "Row",
			options,
			id: create_fragment$13.name
		});
	}

	get as() {
		throw new Error("<Row>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
	}

	set as(value) {
		throw new Error("<Row>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
	}

	get condensed() {
		throw new Error("<Row>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
	}

	set condensed(value) {
		throw new Error("<Row>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
	}

	get narrow() {
		throw new Error("<Row>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
	}

	set narrow(value) {
		throw new Error("<Row>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
	}

	get noGutter() {
		throw new Error("<Row>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
	}

	set noGutter(value) {
		throw new Error("<Row>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
	}

	get noGutterLeft() {
		throw new Error("<Row>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
	}

	set noGutterLeft(value) {
		throw new Error("<Row>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
	}

	get noGutterRight() {
		throw new Error("<Row>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
	}

	set noGutterRight(value) {
		throw new Error("<Row>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
	}

	get padding() {
		throw new Error("<Row>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
	}

	set padding(value) {
		throw new Error("<Row>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
	}
}

/* node_modules/carbon-components-svelte/src/Grid/Column.svelte generated by Svelte v3.49.0 */

const file$10 = "node_modules/carbon-components-svelte/src/Grid/Column.svelte";
const get_default_slot_changes$1 = dirty => ({ props: dirty & /*props*/ 2 });
const get_default_slot_context$1 = ctx => ({ props: /*props*/ ctx[1] });

// (115:0) {:else}
function create_else_block$3(ctx) {
	let div;
	let current;
	const default_slot_template = /*#slots*/ ctx[14].default;
	const default_slot = create_slot(default_slot_template, ctx, /*$$scope*/ ctx[13], null);
	let div_levels = [/*props*/ ctx[1]];
	let div_data = {};

	for (let i = 0; i < div_levels.length; i += 1) {
		div_data = assign(div_data, div_levels[i]);
	}

	const block = {
		c: function create() {
			div = element("div");
			if (default_slot) default_slot.c();
			set_attributes(div, div_data);
			add_location(div, file$10, 115, 2, 2896);
		},
		m: function mount(target, anchor) {
			insert_dev(target, div, anchor);

			if (default_slot) {
				default_slot.m(div, null);
			}

			current = true;
		},
		p: function update(ctx, dirty) {
			if (default_slot) {
				if (default_slot.p && (!current || dirty & /*$$scope*/ 8192)) {
					update_slot_base(
						default_slot,
						default_slot_template,
						ctx,
						/*$$scope*/ ctx[13],
						!current
						? get_all_dirty_from_scope(/*$$scope*/ ctx[13])
						: get_slot_changes(default_slot_template, /*$$scope*/ ctx[13], dirty, null),
						null
					);
				}
			}

			set_attributes(div, div_data = get_spread_update(div_levels, [dirty & /*props*/ 2 && /*props*/ ctx[1]]));
		},
		i: function intro(local) {
			if (current) return;
			transition_in(default_slot, local);
			current = true;
		},
		o: function outro(local) {
			transition_out(default_slot, local);
			current = false;
		},
		d: function destroy(detaching) {
			if (detaching) detach_dev(div);
			if (default_slot) default_slot.d(detaching);
		}
	};

	dispatch_dev("SvelteRegisterBlock", {
		block,
		id: create_else_block$3.name,
		type: "else",
		source: "(115:0) {:else}",
		ctx
	});

	return block;
}

// (113:0) {#if as}
function create_if_block$R(ctx) {
	let current;
	const default_slot_template = /*#slots*/ ctx[14].default;
	const default_slot = create_slot(default_slot_template, ctx, /*$$scope*/ ctx[13], get_default_slot_context$1);

	const block = {
		c: function create() {
			if (default_slot) default_slot.c();
		},
		m: function mount(target, anchor) {
			if (default_slot) {
				default_slot.m(target, anchor);
			}

			current = true;
		},
		p: function update(ctx, dirty) {
			if (default_slot) {
				if (default_slot.p && (!current || dirty & /*$$scope, props*/ 8194)) {
					update_slot_base(
						default_slot,
						default_slot_template,
						ctx,
						/*$$scope*/ ctx[13],
						!current
						? get_all_dirty_from_scope(/*$$scope*/ ctx[13])
						: get_slot_changes(default_slot_template, /*$$scope*/ ctx[13], dirty, get_default_slot_changes$1),
						get_default_slot_context$1
					);
				}
			}
		},
		i: function intro(local) {
			if (current) return;
			transition_in(default_slot, local);
			current = true;
		},
		o: function outro(local) {
			transition_out(default_slot, local);
			current = false;
		},
		d: function destroy(detaching) {
			if (default_slot) default_slot.d(detaching);
		}
	};

	dispatch_dev("SvelteRegisterBlock", {
		block,
		id: create_if_block$R.name,
		type: "if",
		source: "(113:0) {#if as}",
		ctx
	});

	return block;
}

function create_fragment$12(ctx) {
	let current_block_type_index;
	let if_block;
	let if_block_anchor;
	let current;
	const if_block_creators = [create_if_block$R, create_else_block$3];
	const if_blocks = [];

	function select_block_type(ctx, dirty) {
		if (/*as*/ ctx[0]) return 0;
		return 1;
	}

	current_block_type_index = select_block_type(ctx);
	if_block = if_blocks[current_block_type_index] = if_block_creators[current_block_type_index](ctx);

	const block = {
		c: function create() {
			if_block.c();
			if_block_anchor = empty();
		},
		l: function claim(nodes) {
			throw new Error("options.hydrate only works if the component was compiled with the `hydratable: true` option");
		},
		m: function mount(target, anchor) {
			if_blocks[current_block_type_index].m(target, anchor);
			insert_dev(target, if_block_anchor, anchor);
			current = true;
		},
		p: function update(ctx, [dirty]) {
			let previous_block_index = current_block_type_index;
			current_block_type_index = select_block_type(ctx);

			if (current_block_type_index === previous_block_index) {
				if_blocks[current_block_type_index].p(ctx, dirty);
			} else {
				group_outros();

				transition_out(if_blocks[previous_block_index], 1, 1, () => {
					if_blocks[previous_block_index] = null;
				});

				check_outros();
				if_block = if_blocks[current_block_type_index];

				if (!if_block) {
					if_block = if_blocks[current_block_type_index] = if_block_creators[current_block_type_index](ctx);
					if_block.c();
				} else {
					if_block.p(ctx, dirty);
				}

				transition_in(if_block, 1);
				if_block.m(if_block_anchor.parentNode, if_block_anchor);
			}
		},
		i: function intro(local) {
			if (current) return;
			transition_in(if_block);
			current = true;
		},
		o: function outro(local) {
			transition_out(if_block);
			current = false;
		},
		d: function destroy(detaching) {
			if_blocks[current_block_type_index].d(detaching);
			if (detaching) detach_dev(if_block_anchor);
		}
	};

	dispatch_dev("SvelteRegisterBlock", {
		block,
		id: create_fragment$12.name,
		type: "component",
		source: "",
		ctx
	});

	return block;
}

function instance$12($$self, $$props, $$invalidate) {
	let columnClass;
	let props;

	const omit_props_names = [
		"as","noGutter","noGutterLeft","noGutterRight","padding","aspectRatio","sm","md","lg","xlg","max"
	];

	let $$restProps = compute_rest_props($$props, omit_props_names);
	let { $$slots: slots = {}, $$scope } = $$props;
	validate_slots('Column', slots, ['default']);
	let { as = false } = $$props;
	let { noGutter = false } = $$props;
	let { noGutterLeft = false } = $$props;
	let { noGutterRight = false } = $$props;
	let { padding = false } = $$props;
	let { aspectRatio = undefined } = $$props;
	let { sm = undefined } = $$props;
	let { md = undefined } = $$props;
	let { lg = undefined } = $$props;
	let { xlg = undefined } = $$props;
	let { max = undefined } = $$props;
	const breakpoints = ["sm", "md", "lg", "xlg", "max"];

	$$self.$$set = $$new_props => {
		$$props = assign(assign({}, $$props), exclude_internal_props($$new_props));
		$$invalidate(16, $$restProps = compute_rest_props($$props, omit_props_names));
		if ('as' in $$new_props) $$invalidate(0, as = $$new_props.as);
		if ('noGutter' in $$new_props) $$invalidate(2, noGutter = $$new_props.noGutter);
		if ('noGutterLeft' in $$new_props) $$invalidate(3, noGutterLeft = $$new_props.noGutterLeft);
		if ('noGutterRight' in $$new_props) $$invalidate(4, noGutterRight = $$new_props.noGutterRight);
		if ('padding' in $$new_props) $$invalidate(5, padding = $$new_props.padding);
		if ('aspectRatio' in $$new_props) $$invalidate(6, aspectRatio = $$new_props.aspectRatio);
		if ('sm' in $$new_props) $$invalidate(7, sm = $$new_props.sm);
		if ('md' in $$new_props) $$invalidate(8, md = $$new_props.md);
		if ('lg' in $$new_props) $$invalidate(9, lg = $$new_props.lg);
		if ('xlg' in $$new_props) $$invalidate(10, xlg = $$new_props.xlg);
		if ('max' in $$new_props) $$invalidate(11, max = $$new_props.max);
		if ('$$scope' in $$new_props) $$invalidate(13, $$scope = $$new_props.$$scope);
	};

	$$self.$capture_state = () => ({
		as,
		noGutter,
		noGutterLeft,
		noGutterRight,
		padding,
		aspectRatio,
		sm,
		md,
		lg,
		xlg,
		max,
		breakpoints,
		columnClass,
		props
	});

	$$self.$inject_state = $$new_props => {
		if ('as' in $$props) $$invalidate(0, as = $$new_props.as);
		if ('noGutter' in $$props) $$invalidate(2, noGutter = $$new_props.noGutter);
		if ('noGutterLeft' in $$props) $$invalidate(3, noGutterLeft = $$new_props.noGutterLeft);
		if ('noGutterRight' in $$props) $$invalidate(4, noGutterRight = $$new_props.noGutterRight);
		if ('padding' in $$props) $$invalidate(5, padding = $$new_props.padding);
		if ('aspectRatio' in $$props) $$invalidate(6, aspectRatio = $$new_props.aspectRatio);
		if ('sm' in $$props) $$invalidate(7, sm = $$new_props.sm);
		if ('md' in $$props) $$invalidate(8, md = $$new_props.md);
		if ('lg' in $$props) $$invalidate(9, lg = $$new_props.lg);
		if ('xlg' in $$props) $$invalidate(10, xlg = $$new_props.xlg);
		if ('max' in $$props) $$invalidate(11, max = $$new_props.max);
		if ('columnClass' in $$props) $$invalidate(12, columnClass = $$new_props.columnClass);
		if ('props' in $$props) $$invalidate(1, props = $$new_props.props);
	};

	if ($$props && "$$inject" in $$props) {
		$$self.$inject_state($$props.$$inject);
	}

	$$self.$$.update = () => {
		if ($$self.$$.dirty & /*sm, md, lg, xlg, max*/ 3968) {
			$$invalidate(12, columnClass = [sm, md, lg, xlg, max].map((breakpoint, i) => {
				const name = breakpoints[i];

				if (breakpoint === true) {
					return `bx--col-${name}`;
				} else if (typeof breakpoint === "number") {
					return `bx--col-${name}-${breakpoint}`;
				} else if (typeof breakpoint === "object") {
					let bp = [];

					if (typeof breakpoint.span === "number") {
						bp = [...bp, `bx--col-${name}-${breakpoint.span}`];
					} else if (breakpoint.span === true) {
						bp = [...bp, `bx--col-${name}`];
					}

					if (typeof breakpoint.offset === "number") {
						bp = [...bp, `bx--offset-${name}-${breakpoint.offset}`];
					}

					return bp.join(" ");
				}
			}).filter(Boolean).join(" "));
		}

		$$invalidate(1, props = {
			...$$restProps,
			class: [
				$$restProps.class,
				columnClass,
				!columnClass && "bx--col",
				noGutter && "bx--no-gutter",
				noGutterLeft && "bx--no-gutter--left",
				noGutterRight && "bx--no-gutter--right",
				aspectRatio && `bx--aspect-ratio bx--aspect-ratio--${aspectRatio}`,
				padding && "bx--col-padding"
			].filter(Boolean).join(" ")
		});
	};

	return [
		as,
		props,
		noGutter,
		noGutterLeft,
		noGutterRight,
		padding,
		aspectRatio,
		sm,
		md,
		lg,
		xlg,
		max,
		columnClass,
		$$scope,
		slots
	];
}

class Column extends SvelteComponentDev {
	constructor(options) {
		super(options);

		init(this, options, instance$12, create_fragment$12, safe_not_equal, {
			as: 0,
			noGutter: 2,
			noGutterLeft: 3,
			noGutterRight: 4,
			padding: 5,
			aspectRatio: 6,
			sm: 7,
			md: 8,
			lg: 9,
			xlg: 10,
			max: 11
		});

		dispatch_dev("SvelteRegisterComponent", {
			component: this,
			tagName: "Column",
			options,
			id: create_fragment$12.name
		});
	}

	get as() {
		throw new Error("<Column>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
	}

	set as(value) {
		throw new Error("<Column>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
	}

	get noGutter() {
		throw new Error("<Column>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
	}

	set noGutter(value) {
		throw new Error("<Column>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
	}

	get noGutterLeft() {
		throw new Error("<Column>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
	}

	set noGutterLeft(value) {
		throw new Error("<Column>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
	}

	get noGutterRight() {
		throw new Error("<Column>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
	}

	set noGutterRight(value) {
		throw new Error("<Column>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
	}

	get padding() {
		throw new Error("<Column>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
	}

	set padding(value) {
		throw new Error("<Column>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
	}

	get aspectRatio() {
		throw new Error("<Column>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
	}

	set aspectRatio(value) {
		throw new Error("<Column>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
	}

	get sm() {
		throw new Error("<Column>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
	}

	set sm(value) {
		throw new Error("<Column>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
	}

	get md() {
		throw new Error("<Column>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
	}

	set md(value) {
		throw new Error("<Column>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
	}

	get lg() {
		throw new Error("<Column>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
	}

	set lg(value) {
		throw new Error("<Column>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
	}

	get xlg() {
		throw new Error("<Column>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
	}

	set xlg(value) {
		throw new Error("<Column>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
	}

	get max() {
		throw new Error("<Column>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
	}

	set max(value) {
		throw new Error("<Column>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
	}
}

/* node_modules/carbon-components-svelte/src/LocalStorage/LocalStorage.svelte generated by Svelte v3.49.0 */

function create_fragment$11(ctx) {
	const block = {
		c: noop,
		l: function claim(nodes) {
			throw new Error("options.hydrate only works if the component was compiled with the `hydratable: true` option");
		},
		m: noop,
		p: noop,
		i: noop,
		o: noop,
		d: noop
	};

	dispatch_dev("SvelteRegisterBlock", {
		block,
		id: create_fragment$11.name,
		type: "component",
		source: "",
		ctx
	});

	return block;
}

function clearAll() {
	localStorage.clear();
}

function instance$11($$self, $$props, $$invalidate) {
	let { $$slots: slots = {}, $$scope } = $$props;
	validate_slots('LocalStorage', slots, []);
	let { key = "local-storage-key" } = $$props;
	let { value = "" } = $$props;

	function clearItem() {
		localStorage.removeItem(key);
	}

	const dispatch = createEventDispatcher();
	let prevValue = value;

	function setItem() {
		if (typeof value === "object") {
			localStorage.setItem(key, JSON.stringify(value));
		} else {
			localStorage.setItem(key, value);
		}
	}

	onMount(() => {
		const item = localStorage.getItem(key);

		if (item != null) {
			try {
				$$invalidate(0, value = JSON.parse(item));
			} catch(e) {
				$$invalidate(0, value = item);
			}
		} else {
			setItem();
			dispatch("save");
		}
	});

	afterUpdate(() => {
		if (prevValue !== value) {
			setItem();
			dispatch("update", { prevValue, value });
		}

		prevValue = value;
	});

	const writable_props = ['key', 'value'];

	Object.keys($$props).forEach(key => {
		if (!~writable_props.indexOf(key) && key.slice(0, 2) !== '$$' && key !== 'slot') console.warn(`<LocalStorage> was created with unknown prop '${key}'`);
	});

	$$self.$$set = $$props => {
		if ('key' in $$props) $$invalidate(1, key = $$props.key);
		if ('value' in $$props) $$invalidate(0, value = $$props.value);
	};

	$$self.$capture_state = () => ({
		key,
		value,
		clearItem,
		clearAll,
		onMount,
		afterUpdate,
		createEventDispatcher,
		dispatch,
		prevValue,
		setItem
	});

	$$self.$inject_state = $$props => {
		if ('key' in $$props) $$invalidate(1, key = $$props.key);
		if ('value' in $$props) $$invalidate(0, value = $$props.value);
		if ('prevValue' in $$props) prevValue = $$props.prevValue;
	};

	if ($$props && "$$inject" in $$props) {
		$$self.$inject_state($$props.$$inject);
	}

	return [value, key, clearItem, clearAll];
}

class LocalStorage extends SvelteComponentDev {
	constructor(options) {
		super(options);

		init(this, options, instance$11, create_fragment$11, safe_not_equal, {
			key: 1,
			value: 0,
			clearItem: 2,
			clearAll: 3
		});

		dispatch_dev("SvelteRegisterComponent", {
			component: this,
			tagName: "LocalStorage",
			options,
			id: create_fragment$11.name
		});
	}

	get key() {
		throw new Error("<LocalStorage>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
	}

	set key(value) {
		throw new Error("<LocalStorage>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
	}

	get value() {
		throw new Error("<LocalStorage>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
	}

	set value(value) {
		throw new Error("<LocalStorage>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
	}

	get clearItem() {
		return this.$$.ctx[2];
	}

	set clearItem(value) {
		throw new Error("<LocalStorage>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
	}

	get clearAll() {
		return clearAll;
	}

	set clearAll(value) {
		throw new Error("<LocalStorage>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
	}
}

/* node_modules/carbon-components-svelte/src/Select/Select.svelte generated by Svelte v3.49.0 */
const file$$ = "node_modules/carbon-components-svelte/src/Select/Select.svelte";
const get_labelText_slot_changes$1 = dirty => ({});
const get_labelText_slot_context$1 = ctx => ({});

// (136:4) {#if !noLabel}
function create_if_block_10(ctx) {
	let label;
	let current;
	const labelText_slot_template = /*#slots*/ ctx[26].labelText;
	const labelText_slot = create_slot(labelText_slot_template, ctx, /*$$scope*/ ctx[25], get_labelText_slot_context$1);
	const labelText_slot_or_fallback = labelText_slot || fallback_block$4(ctx);

	const block = {
		c: function create() {
			label = element("label");
			if (labelText_slot_or_fallback) labelText_slot_or_fallback.c();
			attr_dev(label, "for", /*id*/ ctx[5]);
			toggle_class(label, "bx--label", true);
			toggle_class(label, "bx--visually-hidden", /*hideLabel*/ ctx[14]);
			toggle_class(label, "bx--label--disabled", /*disabled*/ ctx[4]);
			add_location(label, file$$, 136, 6, 3392);
		},
		m: function mount(target, anchor) {
			insert_dev(target, label, anchor);

			if (labelText_slot_or_fallback) {
				labelText_slot_or_fallback.m(label, null);
			}

			current = true;
		},
		p: function update(ctx, dirty) {
			if (labelText_slot) {
				if (labelText_slot.p && (!current || dirty[0] & /*$$scope*/ 33554432)) {
					update_slot_base(
						labelText_slot,
						labelText_slot_template,
						ctx,
						/*$$scope*/ ctx[25],
						!current
						? get_all_dirty_from_scope(/*$$scope*/ ctx[25])
						: get_slot_changes(labelText_slot_template, /*$$scope*/ ctx[25], dirty, get_labelText_slot_changes$1),
						get_labelText_slot_context$1
					);
				}
			} else {
				if (labelText_slot_or_fallback && labelText_slot_or_fallback.p && (!current || dirty[0] & /*labelText*/ 8192)) {
					labelText_slot_or_fallback.p(ctx, !current ? [-1, -1] : dirty);
				}
			}

			if (!current || dirty[0] & /*id*/ 32) {
				attr_dev(label, "for", /*id*/ ctx[5]);
			}

			if (dirty[0] & /*hideLabel*/ 16384) {
				toggle_class(label, "bx--visually-hidden", /*hideLabel*/ ctx[14]);
			}

			if (dirty[0] & /*disabled*/ 16) {
				toggle_class(label, "bx--label--disabled", /*disabled*/ ctx[4]);
			}
		},
		i: function intro(local) {
			if (current) return;
			transition_in(labelText_slot_or_fallback, local);
			current = true;
		},
		o: function outro(local) {
			transition_out(labelText_slot_or_fallback, local);
			current = false;
		},
		d: function destroy(detaching) {
			if (detaching) detach_dev(label);
			if (labelText_slot_or_fallback) labelText_slot_or_fallback.d(detaching);
		}
	};

	dispatch_dev("SvelteRegisterBlock", {
		block,
		id: create_if_block_10.name,
		type: "if",
		source: "(136:4) {#if !noLabel}",
		ctx
	});

	return block;
}

// (143:31)            
function fallback_block$4(ctx) {
	let t;

	const block = {
		c: function create() {
			t = text(/*labelText*/ ctx[13]);
		},
		m: function mount(target, anchor) {
			insert_dev(target, t, anchor);
		},
		p: function update(ctx, dirty) {
			if (dirty[0] & /*labelText*/ 8192) set_data_dev(t, /*labelText*/ ctx[13]);
		},
		d: function destroy(detaching) {
			if (detaching) detach_dev(t);
		}
	};

	dispatch_dev("SvelteRegisterBlock", {
		block,
		id: fallback_block$4.name,
		type: "fallback",
		source: "(143:31)            ",
		ctx
	});

	return block;
}

// (148:4) {#if inline}
function create_if_block_6$1(ctx) {
	let div1;
	let div0;
	let select;
	let select_aria_describedby_value;
	let select_aria_invalid_value;
	let select_disabled_value;
	let select_required_value;
	let t0;
	let chevrondown;
	let t1;
	let div0_data_invalid_value;
	let t2;
	let t3;
	let if_block2_anchor;
	let current;
	let mounted;
	let dispose;
	const default_slot_template = /*#slots*/ ctx[26].default;
	const default_slot = create_slot(default_slot_template, ctx, /*$$scope*/ ctx[25], null);

	chevrondown = new ChevronDown({
			props: { class: "bx--select__arrow" },
			$$inline: true
		});

	let if_block0 = /*invalid*/ ctx[7] && create_if_block_9$1(ctx);
	let if_block1 = /*invalid*/ ctx[7] && create_if_block_8$1(ctx);
	let if_block2 = /*helperText*/ ctx[11] && create_if_block_7$1(ctx);

	const block = {
		c: function create() {
			div1 = element("div");
			div0 = element("div");
			select = element("select");
			if (default_slot) default_slot.c();
			t0 = space();
			create_component(chevrondown.$$.fragment);
			t1 = space();
			if (if_block0) if_block0.c();
			t2 = space();
			if (if_block1) if_block1.c();
			t3 = space();
			if (if_block2) if_block2.c();
			if_block2_anchor = empty();
			attr_dev(select, "aria-describedby", select_aria_describedby_value = /*invalid*/ ctx[7] ? /*errorId*/ ctx[16] : undefined);
			attr_dev(select, "aria-invalid", select_aria_invalid_value = /*invalid*/ ctx[7] || undefined);
			select.disabled = select_disabled_value = /*disabled*/ ctx[4] || undefined;
			select.required = select_required_value = /*required*/ ctx[15] || undefined;
			attr_dev(select, "id", /*id*/ ctx[5]);
			attr_dev(select, "name", /*name*/ ctx[6]);
			toggle_class(select, "bx--select-input", true);
			toggle_class(select, "bx--select-input--sm", /*size*/ ctx[1] === 'sm');
			toggle_class(select, "bx--select-input--xl", /*size*/ ctx[1] === 'xl');
			add_location(select, file$$, 153, 10, 3859);
			attr_dev(div0, "data-invalid", div0_data_invalid_value = /*invalid*/ ctx[7] || undefined);
			toggle_class(div0, "bx--select-input__wrapper", true);
			add_location(div0, file$$, 149, 8, 3735);
			toggle_class(div1, "bx--select-input--inline__wrapper", true);
			add_location(div1, file$$, 148, 6, 3672);
		},
		m: function mount(target, anchor) {
			insert_dev(target, div1, anchor);
			append_dev(div1, div0);
			append_dev(div0, select);

			if (default_slot) {
				default_slot.m(select, null);
			}

			/*select_binding*/ ctx[33](select);
			append_dev(div0, t0);
			mount_component(chevrondown, div0, null);
			append_dev(div0, t1);
			if (if_block0) if_block0.m(div0, null);
			append_dev(div1, t2);
			if (if_block1) if_block1.m(div1, null);
			insert_dev(target, t3, anchor);
			if (if_block2) if_block2.m(target, anchor);
			insert_dev(target, if_block2_anchor, anchor);
			current = true;

			if (!mounted) {
				dispose = [
					listen_dev(select, "change", /*handleChange*/ ctx[21], false, false, false),
					listen_dev(select, "input", /*input_handler*/ ctx[30], false, false, false),
					listen_dev(select, "focus", /*focus_handler*/ ctx[31], false, false, false),
					listen_dev(select, "blur", /*blur_handler*/ ctx[32], false, false, false)
				];

				mounted = true;
			}
		},
		p: function update(ctx, dirty) {
			if (default_slot) {
				if (default_slot.p && (!current || dirty[0] & /*$$scope*/ 33554432)) {
					update_slot_base(
						default_slot,
						default_slot_template,
						ctx,
						/*$$scope*/ ctx[25],
						!current
						? get_all_dirty_from_scope(/*$$scope*/ ctx[25])
						: get_slot_changes(default_slot_template, /*$$scope*/ ctx[25], dirty, null),
						null
					);
				}
			}

			if (!current || dirty[0] & /*invalid, errorId*/ 65664 && select_aria_describedby_value !== (select_aria_describedby_value = /*invalid*/ ctx[7] ? /*errorId*/ ctx[16] : undefined)) {
				attr_dev(select, "aria-describedby", select_aria_describedby_value);
			}

			if (!current || dirty[0] & /*invalid*/ 128 && select_aria_invalid_value !== (select_aria_invalid_value = /*invalid*/ ctx[7] || undefined)) {
				attr_dev(select, "aria-invalid", select_aria_invalid_value);
			}

			if (!current || dirty[0] & /*disabled*/ 16 && select_disabled_value !== (select_disabled_value = /*disabled*/ ctx[4] || undefined)) {
				prop_dev(select, "disabled", select_disabled_value);
			}

			if (!current || dirty[0] & /*required*/ 32768 && select_required_value !== (select_required_value = /*required*/ ctx[15] || undefined)) {
				prop_dev(select, "required", select_required_value);
			}

			if (!current || dirty[0] & /*id*/ 32) {
				attr_dev(select, "id", /*id*/ ctx[5]);
			}

			if (!current || dirty[0] & /*name*/ 64) {
				attr_dev(select, "name", /*name*/ ctx[6]);
			}

			if (dirty[0] & /*size*/ 2) {
				toggle_class(select, "bx--select-input--sm", /*size*/ ctx[1] === 'sm');
			}

			if (dirty[0] & /*size*/ 2) {
				toggle_class(select, "bx--select-input--xl", /*size*/ ctx[1] === 'xl');
			}

			if (/*invalid*/ ctx[7]) {
				if (if_block0) {
					if (dirty[0] & /*invalid*/ 128) {
						transition_in(if_block0, 1);
					}
				} else {
					if_block0 = create_if_block_9$1(ctx);
					if_block0.c();
					transition_in(if_block0, 1);
					if_block0.m(div0, null);
				}
			} else if (if_block0) {
				group_outros();

				transition_out(if_block0, 1, 1, () => {
					if_block0 = null;
				});

				check_outros();
			}

			if (!current || dirty[0] & /*invalid*/ 128 && div0_data_invalid_value !== (div0_data_invalid_value = /*invalid*/ ctx[7] || undefined)) {
				attr_dev(div0, "data-invalid", div0_data_invalid_value);
			}

			if (/*invalid*/ ctx[7]) {
				if (if_block1) {
					if_block1.p(ctx, dirty);
				} else {
					if_block1 = create_if_block_8$1(ctx);
					if_block1.c();
					if_block1.m(div1, null);
				}
			} else if (if_block1) {
				if_block1.d(1);
				if_block1 = null;
			}

			if (/*helperText*/ ctx[11]) {
				if (if_block2) {
					if_block2.p(ctx, dirty);
				} else {
					if_block2 = create_if_block_7$1(ctx);
					if_block2.c();
					if_block2.m(if_block2_anchor.parentNode, if_block2_anchor);
				}
			} else if (if_block2) {
				if_block2.d(1);
				if_block2 = null;
			}
		},
		i: function intro(local) {
			if (current) return;
			transition_in(default_slot, local);
			transition_in(chevrondown.$$.fragment, local);
			transition_in(if_block0);
			current = true;
		},
		o: function outro(local) {
			transition_out(default_slot, local);
			transition_out(chevrondown.$$.fragment, local);
			transition_out(if_block0);
			current = false;
		},
		d: function destroy(detaching) {
			if (detaching) detach_dev(div1);
			if (default_slot) default_slot.d(detaching);
			/*select_binding*/ ctx[33](null);
			destroy_component(chevrondown);
			if (if_block0) if_block0.d();
			if (if_block1) if_block1.d();
			if (detaching) detach_dev(t3);
			if (if_block2) if_block2.d(detaching);
			if (detaching) detach_dev(if_block2_anchor);
			mounted = false;
			run_all(dispose);
		}
	};

	dispatch_dev("SvelteRegisterBlock", {
		block,
		id: create_if_block_6$1.name,
		type: "if",
		source: "(148:4) {#if inline}",
		ctx
	});

	return block;
}

// (173:10) {#if invalid}
function create_if_block_9$1(ctx) {
	let warningfilled;
	let current;

	warningfilled = new WarningFilled({
			props: { class: "bx--select__invalid-icon" },
			$$inline: true
		});

	const block = {
		c: function create() {
			create_component(warningfilled.$$.fragment);
		},
		m: function mount(target, anchor) {
			mount_component(warningfilled, target, anchor);
			current = true;
		},
		i: function intro(local) {
			if (current) return;
			transition_in(warningfilled.$$.fragment, local);
			current = true;
		},
		o: function outro(local) {
			transition_out(warningfilled.$$.fragment, local);
			current = false;
		},
		d: function destroy(detaching) {
			destroy_component(warningfilled, detaching);
		}
	};

	dispatch_dev("SvelteRegisterBlock", {
		block,
		id: create_if_block_9$1.name,
		type: "if",
		source: "(173:10) {#if invalid}",
		ctx
	});

	return block;
}

// (177:8) {#if invalid}
function create_if_block_8$1(ctx) {
	let div;
	let t;

	const block = {
		c: function create() {
			div = element("div");
			t = text(/*invalidText*/ ctx[8]);
			attr_dev(div, "id", /*errorId*/ ctx[16]);
			toggle_class(div, "bx--form-requirement", true);
			add_location(div, file$$, 177, 10, 4666);
		},
		m: function mount(target, anchor) {
			insert_dev(target, div, anchor);
			append_dev(div, t);
		},
		p: function update(ctx, dirty) {
			if (dirty[0] & /*invalidText*/ 256) set_data_dev(t, /*invalidText*/ ctx[8]);

			if (dirty[0] & /*errorId*/ 65536) {
				attr_dev(div, "id", /*errorId*/ ctx[16]);
			}
		},
		d: function destroy(detaching) {
			if (detaching) detach_dev(div);
		}
	};

	dispatch_dev("SvelteRegisterBlock", {
		block,
		id: create_if_block_8$1.name,
		type: "if",
		source: "(177:8) {#if invalid}",
		ctx
	});

	return block;
}

// (183:6) {#if helperText}
function create_if_block_7$1(ctx) {
	let div;
	let t;

	const block = {
		c: function create() {
			div = element("div");
			t = text(/*helperText*/ ctx[11]);
			toggle_class(div, "bx--form__helper-text", true);
			toggle_class(div, "bx--form__helper-text--disabled", /*disabled*/ ctx[4]);
			add_location(div, file$$, 183, 8, 4824);
		},
		m: function mount(target, anchor) {
			insert_dev(target, div, anchor);
			append_dev(div, t);
		},
		p: function update(ctx, dirty) {
			if (dirty[0] & /*helperText*/ 2048) set_data_dev(t, /*helperText*/ ctx[11]);

			if (dirty[0] & /*disabled*/ 16) {
				toggle_class(div, "bx--form__helper-text--disabled", /*disabled*/ ctx[4]);
			}
		},
		d: function destroy(detaching) {
			if (detaching) detach_dev(div);
		}
	};

	dispatch_dev("SvelteRegisterBlock", {
		block,
		id: create_if_block_7$1.name,
		type: "if",
		source: "(183:6) {#if helperText}",
		ctx
	});

	return block;
}

// (192:4) {#if !inline}
function create_if_block$Q(ctx) {
	let div;
	let select;
	let select_aria_describedby_value;
	let select_disabled_value;
	let select_required_value;
	let select_aria_invalid_value;
	let t0;
	let chevrondown;
	let t1;
	let t2;
	let div_data_invalid_value;
	let t3;
	let t4;
	let t5;
	let if_block4_anchor;
	let current;
	let mounted;
	let dispose;
	const default_slot_template = /*#slots*/ ctx[26].default;
	const default_slot = create_slot(default_slot_template, ctx, /*$$scope*/ ctx[25], null);

	chevrondown = new ChevronDown({
			props: { class: "bx--select__arrow" },
			$$inline: true
		});

	let if_block0 = /*invalid*/ ctx[7] && create_if_block_5$1(ctx);
	let if_block1 = !/*invalid*/ ctx[7] && /*warn*/ ctx[9] && create_if_block_4$1(ctx);
	let if_block2 = !/*invalid*/ ctx[7] && /*helperText*/ ctx[11] && create_if_block_3$1(ctx);
	let if_block3 = /*invalid*/ ctx[7] && create_if_block_2$4(ctx);
	let if_block4 = !/*invalid*/ ctx[7] && /*warn*/ ctx[9] && create_if_block_1$5(ctx);

	const block = {
		c: function create() {
			div = element("div");
			select = element("select");
			if (default_slot) default_slot.c();
			t0 = space();
			create_component(chevrondown.$$.fragment);
			t1 = space();
			if (if_block0) if_block0.c();
			t2 = space();
			if (if_block1) if_block1.c();
			t3 = space();
			if (if_block2) if_block2.c();
			t4 = space();
			if (if_block3) if_block3.c();
			t5 = space();
			if (if_block4) if_block4.c();
			if_block4_anchor = empty();
			attr_dev(select, "id", /*id*/ ctx[5]);
			attr_dev(select, "name", /*name*/ ctx[6]);
			attr_dev(select, "aria-describedby", select_aria_describedby_value = /*invalid*/ ctx[7] ? /*errorId*/ ctx[16] : undefined);
			select.disabled = select_disabled_value = /*disabled*/ ctx[4] || undefined;
			select.required = select_required_value = /*required*/ ctx[15] || undefined;
			attr_dev(select, "aria-invalid", select_aria_invalid_value = /*invalid*/ ctx[7] || undefined);
			toggle_class(select, "bx--select-input", true);
			toggle_class(select, "bx--select-input--sm", /*size*/ ctx[1] === 'sm');
			toggle_class(select, "bx--select-input--xl", /*size*/ ctx[1] === 'xl');
			add_location(select, file$$, 196, 8, 5147);
			attr_dev(div, "data-invalid", div_data_invalid_value = /*invalid*/ ctx[7] || undefined);
			toggle_class(div, "bx--select-input__wrapper", true);
			add_location(div, file$$, 192, 6, 5031);
		},
		m: function mount(target, anchor) {
			insert_dev(target, div, anchor);
			append_dev(div, select);

			if (default_slot) {
				default_slot.m(select, null);
			}

			/*select_binding_1*/ ctx[34](select);
			append_dev(div, t0);
			mount_component(chevrondown, div, null);
			append_dev(div, t1);
			if (if_block0) if_block0.m(div, null);
			append_dev(div, t2);
			if (if_block1) if_block1.m(div, null);
			insert_dev(target, t3, anchor);
			if (if_block2) if_block2.m(target, anchor);
			insert_dev(target, t4, anchor);
			if (if_block3) if_block3.m(target, anchor);
			insert_dev(target, t5, anchor);
			if (if_block4) if_block4.m(target, anchor);
			insert_dev(target, if_block4_anchor, anchor);
			current = true;

			if (!mounted) {
				dispose = [
					listen_dev(select, "change", /*handleChange*/ ctx[21], false, false, false),
					listen_dev(select, "input", /*input_handler_1*/ ctx[27], false, false, false),
					listen_dev(select, "focus", /*focus_handler_1*/ ctx[28], false, false, false),
					listen_dev(select, "blur", /*blur_handler_1*/ ctx[29], false, false, false)
				];

				mounted = true;
			}
		},
		p: function update(ctx, dirty) {
			if (default_slot) {
				if (default_slot.p && (!current || dirty[0] & /*$$scope*/ 33554432)) {
					update_slot_base(
						default_slot,
						default_slot_template,
						ctx,
						/*$$scope*/ ctx[25],
						!current
						? get_all_dirty_from_scope(/*$$scope*/ ctx[25])
						: get_slot_changes(default_slot_template, /*$$scope*/ ctx[25], dirty, null),
						null
					);
				}
			}

			if (!current || dirty[0] & /*id*/ 32) {
				attr_dev(select, "id", /*id*/ ctx[5]);
			}

			if (!current || dirty[0] & /*name*/ 64) {
				attr_dev(select, "name", /*name*/ ctx[6]);
			}

			if (!current || dirty[0] & /*invalid, errorId*/ 65664 && select_aria_describedby_value !== (select_aria_describedby_value = /*invalid*/ ctx[7] ? /*errorId*/ ctx[16] : undefined)) {
				attr_dev(select, "aria-describedby", select_aria_describedby_value);
			}

			if (!current || dirty[0] & /*disabled*/ 16 && select_disabled_value !== (select_disabled_value = /*disabled*/ ctx[4] || undefined)) {
				prop_dev(select, "disabled", select_disabled_value);
			}

			if (!current || dirty[0] & /*required*/ 32768 && select_required_value !== (select_required_value = /*required*/ ctx[15] || undefined)) {
				prop_dev(select, "required", select_required_value);
			}

			if (!current || dirty[0] & /*invalid*/ 128 && select_aria_invalid_value !== (select_aria_invalid_value = /*invalid*/ ctx[7] || undefined)) {
				attr_dev(select, "aria-invalid", select_aria_invalid_value);
			}

			if (dirty[0] & /*size*/ 2) {
				toggle_class(select, "bx--select-input--sm", /*size*/ ctx[1] === 'sm');
			}

			if (dirty[0] & /*size*/ 2) {
				toggle_class(select, "bx--select-input--xl", /*size*/ ctx[1] === 'xl');
			}

			if (/*invalid*/ ctx[7]) {
				if (if_block0) {
					if (dirty[0] & /*invalid*/ 128) {
						transition_in(if_block0, 1);
					}
				} else {
					if_block0 = create_if_block_5$1(ctx);
					if_block0.c();
					transition_in(if_block0, 1);
					if_block0.m(div, t2);
				}
			} else if (if_block0) {
				group_outros();

				transition_out(if_block0, 1, 1, () => {
					if_block0 = null;
				});

				check_outros();
			}

			if (!/*invalid*/ ctx[7] && /*warn*/ ctx[9]) {
				if (if_block1) {
					if (dirty[0] & /*invalid, warn*/ 640) {
						transition_in(if_block1, 1);
					}
				} else {
					if_block1 = create_if_block_4$1(ctx);
					if_block1.c();
					transition_in(if_block1, 1);
					if_block1.m(div, null);
				}
			} else if (if_block1) {
				group_outros();

				transition_out(if_block1, 1, 1, () => {
					if_block1 = null;
				});

				check_outros();
			}

			if (!current || dirty[0] & /*invalid*/ 128 && div_data_invalid_value !== (div_data_invalid_value = /*invalid*/ ctx[7] || undefined)) {
				attr_dev(div, "data-invalid", div_data_invalid_value);
			}

			if (!/*invalid*/ ctx[7] && /*helperText*/ ctx[11]) {
				if (if_block2) {
					if_block2.p(ctx, dirty);
				} else {
					if_block2 = create_if_block_3$1(ctx);
					if_block2.c();
					if_block2.m(t4.parentNode, t4);
				}
			} else if (if_block2) {
				if_block2.d(1);
				if_block2 = null;
			}

			if (/*invalid*/ ctx[7]) {
				if (if_block3) {
					if_block3.p(ctx, dirty);
				} else {
					if_block3 = create_if_block_2$4(ctx);
					if_block3.c();
					if_block3.m(t5.parentNode, t5);
				}
			} else if (if_block3) {
				if_block3.d(1);
				if_block3 = null;
			}

			if (!/*invalid*/ ctx[7] && /*warn*/ ctx[9]) {
				if (if_block4) {
					if_block4.p(ctx, dirty);
				} else {
					if_block4 = create_if_block_1$5(ctx);
					if_block4.c();
					if_block4.m(if_block4_anchor.parentNode, if_block4_anchor);
				}
			} else if (if_block4) {
				if_block4.d(1);
				if_block4 = null;
			}
		},
		i: function intro(local) {
			if (current) return;
			transition_in(default_slot, local);
			transition_in(chevrondown.$$.fragment, local);
			transition_in(if_block0);
			transition_in(if_block1);
			current = true;
		},
		o: function outro(local) {
			transition_out(default_slot, local);
			transition_out(chevrondown.$$.fragment, local);
			transition_out(if_block0);
			transition_out(if_block1);
			current = false;
		},
		d: function destroy(detaching) {
			if (detaching) detach_dev(div);
			if (default_slot) default_slot.d(detaching);
			/*select_binding_1*/ ctx[34](null);
			destroy_component(chevrondown);
			if (if_block0) if_block0.d();
			if (if_block1) if_block1.d();
			if (detaching) detach_dev(t3);
			if (if_block2) if_block2.d(detaching);
			if (detaching) detach_dev(t4);
			if (if_block3) if_block3.d(detaching);
			if (detaching) detach_dev(t5);
			if (if_block4) if_block4.d(detaching);
			if (detaching) detach_dev(if_block4_anchor);
			mounted = false;
			run_all(dispose);
		}
	};

	dispatch_dev("SvelteRegisterBlock", {
		block,
		id: create_if_block$Q.name,
		type: "if",
		source: "(192:4) {#if !inline}",
		ctx
	});

	return block;
}

// (216:8) {#if invalid}
function create_if_block_5$1(ctx) {
	let warningfilled;
	let current;

	warningfilled = new WarningFilled({
			props: { class: "bx--select__invalid-icon" },
			$$inline: true
		});

	const block = {
		c: function create() {
			create_component(warningfilled.$$.fragment);
		},
		m: function mount(target, anchor) {
			mount_component(warningfilled, target, anchor);
			current = true;
		},
		i: function intro(local) {
			if (current) return;
			transition_in(warningfilled.$$.fragment, local);
			current = true;
		},
		o: function outro(local) {
			transition_out(warningfilled.$$.fragment, local);
			current = false;
		},
		d: function destroy(detaching) {
			destroy_component(warningfilled, detaching);
		}
	};

	dispatch_dev("SvelteRegisterBlock", {
		block,
		id: create_if_block_5$1.name,
		type: "if",
		source: "(216:8) {#if invalid}",
		ctx
	});

	return block;
}

// (219:8) {#if !invalid && warn}
function create_if_block_4$1(ctx) {
	let warningaltfilled;
	let current;

	warningaltfilled = new WarningAltFilled({
			props: {
				class: "bx--select__invalid-icon bx--select__invalid-icon--warning"
			},
			$$inline: true
		});

	const block = {
		c: function create() {
			create_component(warningaltfilled.$$.fragment);
		},
		m: function mount(target, anchor) {
			mount_component(warningaltfilled, target, anchor);
			current = true;
		},
		i: function intro(local) {
			if (current) return;
			transition_in(warningaltfilled.$$.fragment, local);
			current = true;
		},
		o: function outro(local) {
			transition_out(warningaltfilled.$$.fragment, local);
			current = false;
		},
		d: function destroy(detaching) {
			destroy_component(warningaltfilled, detaching);
		}
	};

	dispatch_dev("SvelteRegisterBlock", {
		block,
		id: create_if_block_4$1.name,
		type: "if",
		source: "(219:8) {#if !invalid && warn}",
		ctx
	});

	return block;
}

// (225:6) {#if !invalid && helperText}
function create_if_block_3$1(ctx) {
	let div;
	let t;

	const block = {
		c: function create() {
			div = element("div");
			t = text(/*helperText*/ ctx[11]);
			toggle_class(div, "bx--form__helper-text", true);
			toggle_class(div, "bx--form__helper-text--disabled", /*disabled*/ ctx[4]);
			add_location(div, file$$, 225, 8, 6086);
		},
		m: function mount(target, anchor) {
			insert_dev(target, div, anchor);
			append_dev(div, t);
		},
		p: function update(ctx, dirty) {
			if (dirty[0] & /*helperText*/ 2048) set_data_dev(t, /*helperText*/ ctx[11]);

			if (dirty[0] & /*disabled*/ 16) {
				toggle_class(div, "bx--form__helper-text--disabled", /*disabled*/ ctx[4]);
			}
		},
		d: function destroy(detaching) {
			if (detaching) detach_dev(div);
		}
	};

	dispatch_dev("SvelteRegisterBlock", {
		block,
		id: create_if_block_3$1.name,
		type: "if",
		source: "(225:6) {#if !invalid && helperText}",
		ctx
	});

	return block;
}

// (233:6) {#if invalid}
function create_if_block_2$4(ctx) {
	let div;
	let t;

	const block = {
		c: function create() {
			div = element("div");
			t = text(/*invalidText*/ ctx[8]);
			attr_dev(div, "id", /*errorId*/ ctx[16]);
			toggle_class(div, "bx--form-requirement", true);
			add_location(div, file$$, 233, 8, 6287);
		},
		m: function mount(target, anchor) {
			insert_dev(target, div, anchor);
			append_dev(div, t);
		},
		p: function update(ctx, dirty) {
			if (dirty[0] & /*invalidText*/ 256) set_data_dev(t, /*invalidText*/ ctx[8]);

			if (dirty[0] & /*errorId*/ 65536) {
				attr_dev(div, "id", /*errorId*/ ctx[16]);
			}
		},
		d: function destroy(detaching) {
			if (detaching) detach_dev(div);
		}
	};

	dispatch_dev("SvelteRegisterBlock", {
		block,
		id: create_if_block_2$4.name,
		type: "if",
		source: "(233:6) {#if invalid}",
		ctx
	});

	return block;
}

// (238:6) {#if !invalid && warn}
function create_if_block_1$5(ctx) {
	let div;
	let t;

	const block = {
		c: function create() {
			div = element("div");
			t = text(/*warnText*/ ctx[10]);
			attr_dev(div, "id", /*errorId*/ ctx[16]);
			toggle_class(div, "bx--form-requirement", true);
			add_location(div, file$$, 238, 8, 6432);
		},
		m: function mount(target, anchor) {
			insert_dev(target, div, anchor);
			append_dev(div, t);
		},
		p: function update(ctx, dirty) {
			if (dirty[0] & /*warnText*/ 1024) set_data_dev(t, /*warnText*/ ctx[10]);

			if (dirty[0] & /*errorId*/ 65536) {
				attr_dev(div, "id", /*errorId*/ ctx[16]);
			}
		},
		d: function destroy(detaching) {
			if (detaching) detach_dev(div);
		}
	};

	dispatch_dev("SvelteRegisterBlock", {
		block,
		id: create_if_block_1$5.name,
		type: "if",
		source: "(238:6) {#if !invalid && warn}",
		ctx
	});

	return block;
}

function create_fragment$10(ctx) {
	let div1;
	let div0;
	let t0;
	let t1;
	let current;
	let if_block0 = !/*noLabel*/ ctx[12] && create_if_block_10(ctx);
	let if_block1 = /*inline*/ ctx[2] && create_if_block_6$1(ctx);
	let if_block2 = !/*inline*/ ctx[2] && create_if_block$Q(ctx);
	let div1_levels = [/*$$restProps*/ ctx[22]];
	let div1_data = {};

	for (let i = 0; i < div1_levels.length; i += 1) {
		div1_data = assign(div1_data, div1_levels[i]);
	}

	const block = {
		c: function create() {
			div1 = element("div");
			div0 = element("div");
			if (if_block0) if_block0.c();
			t0 = space();
			if (if_block1) if_block1.c();
			t1 = space();
			if (if_block2) if_block2.c();
			toggle_class(div0, "bx--select", true);
			toggle_class(div0, "bx--select--inline", /*inline*/ ctx[2]);
			toggle_class(div0, "bx--select--light", /*light*/ ctx[3]);
			toggle_class(div0, "bx--select--invalid", /*invalid*/ ctx[7]);
			toggle_class(div0, "bx--select--disabled", /*disabled*/ ctx[4]);
			toggle_class(div0, "bx--select--warning", /*warn*/ ctx[9]);
			add_location(div0, file$$, 127, 2, 3125);
			set_attributes(div1, div1_data);
			toggle_class(div1, "bx--form-item", true);
			add_location(div1, file$$, 126, 0, 3071);
		},
		l: function claim(nodes) {
			throw new Error("options.hydrate only works if the component was compiled with the `hydratable: true` option");
		},
		m: function mount(target, anchor) {
			insert_dev(target, div1, anchor);
			append_dev(div1, div0);
			if (if_block0) if_block0.m(div0, null);
			append_dev(div0, t0);
			if (if_block1) if_block1.m(div0, null);
			append_dev(div0, t1);
			if (if_block2) if_block2.m(div0, null);
			current = true;
		},
		p: function update(ctx, dirty) {
			if (!/*noLabel*/ ctx[12]) {
				if (if_block0) {
					if_block0.p(ctx, dirty);

					if (dirty[0] & /*noLabel*/ 4096) {
						transition_in(if_block0, 1);
					}
				} else {
					if_block0 = create_if_block_10(ctx);
					if_block0.c();
					transition_in(if_block0, 1);
					if_block0.m(div0, t0);
				}
			} else if (if_block0) {
				group_outros();

				transition_out(if_block0, 1, 1, () => {
					if_block0 = null;
				});

				check_outros();
			}

			if (/*inline*/ ctx[2]) {
				if (if_block1) {
					if_block1.p(ctx, dirty);

					if (dirty[0] & /*inline*/ 4) {
						transition_in(if_block1, 1);
					}
				} else {
					if_block1 = create_if_block_6$1(ctx);
					if_block1.c();
					transition_in(if_block1, 1);
					if_block1.m(div0, t1);
				}
			} else if (if_block1) {
				group_outros();

				transition_out(if_block1, 1, 1, () => {
					if_block1 = null;
				});

				check_outros();
			}

			if (!/*inline*/ ctx[2]) {
				if (if_block2) {
					if_block2.p(ctx, dirty);

					if (dirty[0] & /*inline*/ 4) {
						transition_in(if_block2, 1);
					}
				} else {
					if_block2 = create_if_block$Q(ctx);
					if_block2.c();
					transition_in(if_block2, 1);
					if_block2.m(div0, null);
				}
			} else if (if_block2) {
				group_outros();

				transition_out(if_block2, 1, 1, () => {
					if_block2 = null;
				});

				check_outros();
			}

			if (dirty[0] & /*inline*/ 4) {
				toggle_class(div0, "bx--select--inline", /*inline*/ ctx[2]);
			}

			if (dirty[0] & /*light*/ 8) {
				toggle_class(div0, "bx--select--light", /*light*/ ctx[3]);
			}

			if (dirty[0] & /*invalid*/ 128) {
				toggle_class(div0, "bx--select--invalid", /*invalid*/ ctx[7]);
			}

			if (dirty[0] & /*disabled*/ 16) {
				toggle_class(div0, "bx--select--disabled", /*disabled*/ ctx[4]);
			}

			if (dirty[0] & /*warn*/ 512) {
				toggle_class(div0, "bx--select--warning", /*warn*/ ctx[9]);
			}

			set_attributes(div1, div1_data = get_spread_update(div1_levels, [dirty[0] & /*$$restProps*/ 4194304 && /*$$restProps*/ ctx[22]]));
			toggle_class(div1, "bx--form-item", true);
		},
		i: function intro(local) {
			if (current) return;
			transition_in(if_block0);
			transition_in(if_block1);
			transition_in(if_block2);
			current = true;
		},
		o: function outro(local) {
			transition_out(if_block0);
			transition_out(if_block1);
			transition_out(if_block2);
			current = false;
		},
		d: function destroy(detaching) {
			if (detaching) detach_dev(div1);
			if (if_block0) if_block0.d();
			if (if_block1) if_block1.d();
			if (if_block2) if_block2.d();
		}
	};

	dispatch_dev("SvelteRegisterBlock", {
		block,
		id: create_fragment$10.name,
		type: "component",
		source: "",
		ctx
	});

	return block;
}

function instance$10($$self, $$props, $$invalidate) {
	let errorId;

	const omit_props_names = [
		"selected","size","inline","light","disabled","id","name","invalid","invalidText","warn","warnText","helperText","noLabel","labelText","hideLabel","ref","required"
	];

	let $$restProps = compute_rest_props($$props, omit_props_names);
	let $defaultValue;
	let $selectedValue;
	let $itemTypesByValue;
	let $defaultSelectId;
	let { $$slots: slots = {}, $$scope } = $$props;
	validate_slots('Select', slots, ['labelText','default']);
	let { selected = undefined } = $$props;
	let { size = undefined } = $$props;
	let { inline = false } = $$props;
	let { light = false } = $$props;
	let { disabled = false } = $$props;
	let { id = "ccs-" + Math.random().toString(36) } = $$props;
	let { name = undefined } = $$props;
	let { invalid = false } = $$props;
	let { invalidText = "" } = $$props;
	let { warn = false } = $$props;
	let { warnText = "" } = $$props;
	let { helperText = "" } = $$props;
	let { noLabel = false } = $$props;
	let { labelText = "" } = $$props;
	let { hideLabel = false } = $$props;
	let { ref = null } = $$props;
	let { required = false } = $$props;
	const dispatch = createEventDispatcher();
	const selectedValue = writable(selected);
	validate_store(selectedValue, 'selectedValue');
	component_subscribe($$self, selectedValue, value => $$invalidate(36, $selectedValue = value));
	const defaultSelectId = writable(null);
	validate_store(defaultSelectId, 'defaultSelectId');
	component_subscribe($$self, defaultSelectId, value => $$invalidate(38, $defaultSelectId = value));
	const defaultValue = writable(null);
	validate_store(defaultValue, 'defaultValue');
	component_subscribe($$self, defaultValue, value => $$invalidate(24, $defaultValue = value));
	const itemTypesByValue = writable({});
	validate_store(itemTypesByValue, 'itemTypesByValue');
	component_subscribe($$self, itemTypesByValue, value => $$invalidate(37, $itemTypesByValue = value));

	setContext("Select", {
		selectedValue,
		setDefaultValue: (id, value) => {
			/**
 * Use the first `SelectItem` value as the
 * default value if `selected` is `undefined`.
 */
			if ($defaultValue === null) {
				defaultSelectId.set(id);
				defaultValue.set(value);
			} else {
				if ($defaultSelectId === id) {
					selectedValue.set(value);
				}
			}

			itemTypesByValue.update(types => ({ ...types, [value]: typeof value }));
		}
	});

	const handleChange = ({ target }) => {
		let value = target.value;

		if ($itemTypesByValue[value] === "number") {
			value = Number(value);
		}

		selectedValue.set(value);
	};

	let prevSelected = undefined;

	afterUpdate(() => {
		$$invalidate(23, selected = $selectedValue);

		if (prevSelected !== undefined && selected !== prevSelected) {
			dispatch("change", $selectedValue);
		}

		prevSelected = selected;
	});

	function input_handler_1(event) {
		bubble.call(this, $$self, event);
	}

	function focus_handler_1(event) {
		bubble.call(this, $$self, event);
	}

	function blur_handler_1(event) {
		bubble.call(this, $$self, event);
	}

	function input_handler(event) {
		bubble.call(this, $$self, event);
	}

	function focus_handler(event) {
		bubble.call(this, $$self, event);
	}

	function blur_handler(event) {
		bubble.call(this, $$self, event);
	}

	function select_binding($$value) {
		binding_callbacks[$$value ? 'unshift' : 'push'](() => {
			ref = $$value;
			$$invalidate(0, ref);
		});
	}

	function select_binding_1($$value) {
		binding_callbacks[$$value ? 'unshift' : 'push'](() => {
			ref = $$value;
			$$invalidate(0, ref);
		});
	}

	$$self.$$set = $$new_props => {
		$$props = assign(assign({}, $$props), exclude_internal_props($$new_props));
		$$invalidate(22, $$restProps = compute_rest_props($$props, omit_props_names));
		if ('selected' in $$new_props) $$invalidate(23, selected = $$new_props.selected);
		if ('size' in $$new_props) $$invalidate(1, size = $$new_props.size);
		if ('inline' in $$new_props) $$invalidate(2, inline = $$new_props.inline);
		if ('light' in $$new_props) $$invalidate(3, light = $$new_props.light);
		if ('disabled' in $$new_props) $$invalidate(4, disabled = $$new_props.disabled);
		if ('id' in $$new_props) $$invalidate(5, id = $$new_props.id);
		if ('name' in $$new_props) $$invalidate(6, name = $$new_props.name);
		if ('invalid' in $$new_props) $$invalidate(7, invalid = $$new_props.invalid);
		if ('invalidText' in $$new_props) $$invalidate(8, invalidText = $$new_props.invalidText);
		if ('warn' in $$new_props) $$invalidate(9, warn = $$new_props.warn);
		if ('warnText' in $$new_props) $$invalidate(10, warnText = $$new_props.warnText);
		if ('helperText' in $$new_props) $$invalidate(11, helperText = $$new_props.helperText);
		if ('noLabel' in $$new_props) $$invalidate(12, noLabel = $$new_props.noLabel);
		if ('labelText' in $$new_props) $$invalidate(13, labelText = $$new_props.labelText);
		if ('hideLabel' in $$new_props) $$invalidate(14, hideLabel = $$new_props.hideLabel);
		if ('ref' in $$new_props) $$invalidate(0, ref = $$new_props.ref);
		if ('required' in $$new_props) $$invalidate(15, required = $$new_props.required);
		if ('$$scope' in $$new_props) $$invalidate(25, $$scope = $$new_props.$$scope);
	};

	$$self.$capture_state = () => ({
		selected,
		size,
		inline,
		light,
		disabled,
		id,
		name,
		invalid,
		invalidText,
		warn,
		warnText,
		helperText,
		noLabel,
		labelText,
		hideLabel,
		ref,
		required,
		createEventDispatcher,
		setContext,
		afterUpdate,
		writable,
		ChevronDown,
		WarningFilled,
		WarningAltFilled,
		dispatch,
		selectedValue,
		defaultSelectId,
		defaultValue,
		itemTypesByValue,
		handleChange,
		prevSelected,
		errorId,
		$defaultValue,
		$selectedValue,
		$itemTypesByValue,
		$defaultSelectId
	});

	$$self.$inject_state = $$new_props => {
		if ('selected' in $$props) $$invalidate(23, selected = $$new_props.selected);
		if ('size' in $$props) $$invalidate(1, size = $$new_props.size);
		if ('inline' in $$props) $$invalidate(2, inline = $$new_props.inline);
		if ('light' in $$props) $$invalidate(3, light = $$new_props.light);
		if ('disabled' in $$props) $$invalidate(4, disabled = $$new_props.disabled);
		if ('id' in $$props) $$invalidate(5, id = $$new_props.id);
		if ('name' in $$props) $$invalidate(6, name = $$new_props.name);
		if ('invalid' in $$props) $$invalidate(7, invalid = $$new_props.invalid);
		if ('invalidText' in $$props) $$invalidate(8, invalidText = $$new_props.invalidText);
		if ('warn' in $$props) $$invalidate(9, warn = $$new_props.warn);
		if ('warnText' in $$props) $$invalidate(10, warnText = $$new_props.warnText);
		if ('helperText' in $$props) $$invalidate(11, helperText = $$new_props.helperText);
		if ('noLabel' in $$props) $$invalidate(12, noLabel = $$new_props.noLabel);
		if ('labelText' in $$props) $$invalidate(13, labelText = $$new_props.labelText);
		if ('hideLabel' in $$props) $$invalidate(14, hideLabel = $$new_props.hideLabel);
		if ('ref' in $$props) $$invalidate(0, ref = $$new_props.ref);
		if ('required' in $$props) $$invalidate(15, required = $$new_props.required);
		if ('prevSelected' in $$props) prevSelected = $$new_props.prevSelected;
		if ('errorId' in $$props) $$invalidate(16, errorId = $$new_props.errorId);
	};

	if ($$props && "$$inject" in $$props) {
		$$self.$inject_state($$props.$$inject);
	}

	$$self.$$.update = () => {
		if ($$self.$$.dirty[0] & /*id*/ 32) {
			$$invalidate(16, errorId = `error-${id}`);
		}

		if ($$self.$$.dirty[0] & /*selected, $defaultValue*/ 25165824) {
			selectedValue.set(selected ?? $defaultValue);
		}
	};

	return [
		ref,
		size,
		inline,
		light,
		disabled,
		id,
		name,
		invalid,
		invalidText,
		warn,
		warnText,
		helperText,
		noLabel,
		labelText,
		hideLabel,
		required,
		errorId,
		selectedValue,
		defaultSelectId,
		defaultValue,
		itemTypesByValue,
		handleChange,
		$$restProps,
		selected,
		$defaultValue,
		$$scope,
		slots,
		input_handler_1,
		focus_handler_1,
		blur_handler_1,
		input_handler,
		focus_handler,
		blur_handler,
		select_binding,
		select_binding_1
	];
}

class Select extends SvelteComponentDev {
	constructor(options) {
		super(options);

		init(
			this,
			options,
			instance$10,
			create_fragment$10,
			safe_not_equal,
			{
				selected: 23,
				size: 1,
				inline: 2,
				light: 3,
				disabled: 4,
				id: 5,
				name: 6,
				invalid: 7,
				invalidText: 8,
				warn: 9,
				warnText: 10,
				helperText: 11,
				noLabel: 12,
				labelText: 13,
				hideLabel: 14,
				ref: 0,
				required: 15
			},
			null,
			[-1, -1]
		);

		dispatch_dev("SvelteRegisterComponent", {
			component: this,
			tagName: "Select",
			options,
			id: create_fragment$10.name
		});
	}

	get selected() {
		throw new Error("<Select>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
	}

	set selected(value) {
		throw new Error("<Select>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
	}

	get size() {
		throw new Error("<Select>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
	}

	set size(value) {
		throw new Error("<Select>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
	}

	get inline() {
		throw new Error("<Select>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
	}

	set inline(value) {
		throw new Error("<Select>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
	}

	get light() {
		throw new Error("<Select>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
	}

	set light(value) {
		throw new Error("<Select>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
	}

	get disabled() {
		throw new Error("<Select>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
	}

	set disabled(value) {
		throw new Error("<Select>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
	}

	get id() {
		throw new Error("<Select>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
	}

	set id(value) {
		throw new Error("<Select>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
	}

	get name() {
		throw new Error("<Select>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
	}

	set name(value) {
		throw new Error("<Select>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
	}

	get invalid() {
		throw new Error("<Select>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
	}

	set invalid(value) {
		throw new Error("<Select>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
	}

	get invalidText() {
		throw new Error("<Select>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
	}

	set invalidText(value) {
		throw new Error("<Select>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
	}

	get warn() {
		throw new Error("<Select>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
	}

	set warn(value) {
		throw new Error("<Select>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
	}

	get warnText() {
		throw new Error("<Select>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
	}

	set warnText(value) {
		throw new Error("<Select>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
	}

	get helperText() {
		throw new Error("<Select>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
	}

	set helperText(value) {
		throw new Error("<Select>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
	}

	get noLabel() {
		throw new Error("<Select>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
	}

	set noLabel(value) {
		throw new Error("<Select>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
	}

	get labelText() {
		throw new Error("<Select>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
	}

	set labelText(value) {
		throw new Error("<Select>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
	}

	get hideLabel() {
		throw new Error("<Select>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
	}

	set hideLabel(value) {
		throw new Error("<Select>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
	}

	get ref() {
		throw new Error("<Select>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
	}

	set ref(value) {
		throw new Error("<Select>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
	}

	get required() {
		throw new Error("<Select>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
	}

	set required(value) {
		throw new Error("<Select>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
	}
}

/* node_modules/carbon-components-svelte/src/Select/SelectItem.svelte generated by Svelte v3.49.0 */
const file$_ = "node_modules/carbon-components-svelte/src/Select/SelectItem.svelte";

function create_fragment$$(ctx) {
	let option;
	let t_value = (/*text*/ ctx[1] || /*value*/ ctx[0]) + "";
	let t;
	let option_class_value;
	let option_style_value;

	const block = {
		c: function create() {
			option = element("option");
			t = text(t_value);
			option.__value = /*value*/ ctx[0];
			option.value = option.__value;
			option.disabled = /*disabled*/ ctx[3];
			option.hidden = /*hidden*/ ctx[2];
			option.selected = /*selected*/ ctx[4];
			attr_dev(option, "class", option_class_value = /*$$restProps*/ ctx[5].class);
			attr_dev(option, "style", option_style_value = /*$$restProps*/ ctx[5].style);
			toggle_class(option, "bx--select-option", true);
			add_location(option, file$_, 34, 0, 732);
		},
		l: function claim(nodes) {
			throw new Error("options.hydrate only works if the component was compiled with the `hydratable: true` option");
		},
		m: function mount(target, anchor) {
			insert_dev(target, option, anchor);
			append_dev(option, t);
		},
		p: function update(ctx, [dirty]) {
			if (dirty & /*text, value*/ 3 && t_value !== (t_value = (/*text*/ ctx[1] || /*value*/ ctx[0]) + "")) set_data_dev(t, t_value);

			if (dirty & /*value*/ 1) {
				prop_dev(option, "__value", /*value*/ ctx[0]);
				option.value = option.__value;
			}

			if (dirty & /*disabled*/ 8) {
				prop_dev(option, "disabled", /*disabled*/ ctx[3]);
			}

			if (dirty & /*hidden*/ 4) {
				prop_dev(option, "hidden", /*hidden*/ ctx[2]);
			}

			if (dirty & /*selected*/ 16) {
				prop_dev(option, "selected", /*selected*/ ctx[4]);
			}

			if (dirty & /*$$restProps*/ 32 && option_class_value !== (option_class_value = /*$$restProps*/ ctx[5].class)) {
				attr_dev(option, "class", option_class_value);
			}

			if (dirty & /*$$restProps*/ 32 && option_style_value !== (option_style_value = /*$$restProps*/ ctx[5].style)) {
				attr_dev(option, "style", option_style_value);
			}

			if (dirty & /*$$restProps*/ 32) {
				toggle_class(option, "bx--select-option", true);
			}
		},
		i: noop,
		o: noop,
		d: function destroy(detaching) {
			if (detaching) detach_dev(option);
		}
	};

	dispatch_dev("SvelteRegisterBlock", {
		block,
		id: create_fragment$$.name,
		type: "component",
		source: "",
		ctx
	});

	return block;
}

function instance$$($$self, $$props, $$invalidate) {
	const omit_props_names = ["value","text","hidden","disabled"];
	let $$restProps = compute_rest_props($$props, omit_props_names);
	let { $$slots: slots = {}, $$scope } = $$props;
	validate_slots('SelectItem', slots, []);
	let { value = "" } = $$props;
	let { text = "" } = $$props;
	let { hidden = false } = $$props;
	let { disabled = false } = $$props;
	const id = "ccs-" + Math.random().toString(36);
	const ctx = getContext("Select") || getContext("TimePickerSelect");
	let selected = false;

	const unsubscribe = ctx.selectedValue.subscribe(currentValue => {
		$$invalidate(4, selected = currentValue === value);
	});

	onMount(() => {
		return () => unsubscribe();
	});

	$$self.$$set = $$new_props => {
		$$props = assign(assign({}, $$props), exclude_internal_props($$new_props));
		$$invalidate(5, $$restProps = compute_rest_props($$props, omit_props_names));
		if ('value' in $$new_props) $$invalidate(0, value = $$new_props.value);
		if ('text' in $$new_props) $$invalidate(1, text = $$new_props.text);
		if ('hidden' in $$new_props) $$invalidate(2, hidden = $$new_props.hidden);
		if ('disabled' in $$new_props) $$invalidate(3, disabled = $$new_props.disabled);
	};

	$$self.$capture_state = () => ({
		value,
		text,
		hidden,
		disabled,
		getContext,
		onMount,
		id,
		ctx,
		selected,
		unsubscribe
	});

	$$self.$inject_state = $$new_props => {
		if ('value' in $$props) $$invalidate(0, value = $$new_props.value);
		if ('text' in $$props) $$invalidate(1, text = $$new_props.text);
		if ('hidden' in $$props) $$invalidate(2, hidden = $$new_props.hidden);
		if ('disabled' in $$props) $$invalidate(3, disabled = $$new_props.disabled);
		if ('selected' in $$props) $$invalidate(4, selected = $$new_props.selected);
	};

	if ($$props && "$$inject" in $$props) {
		$$self.$inject_state($$props.$$inject);
	}

	$$self.$$.update = () => {
		if ($$self.$$.dirty & /*value*/ 1) {
			ctx?.setDefaultValue?.(id, value);
		}
	};

	return [value, text, hidden, disabled, selected, $$restProps];
}

class SelectItem extends SvelteComponentDev {
	constructor(options) {
		super(options);

		init(this, options, instance$$, create_fragment$$, safe_not_equal, {
			value: 0,
			text: 1,
			hidden: 2,
			disabled: 3
		});

		dispatch_dev("SvelteRegisterComponent", {
			component: this,
			tagName: "SelectItem",
			options,
			id: create_fragment$$.name
		});
	}

	get value() {
		throw new Error("<SelectItem>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
	}

	set value(value) {
		throw new Error("<SelectItem>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
	}

	get text() {
		throw new Error("<SelectItem>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
	}

	set text(value) {
		throw new Error("<SelectItem>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
	}

	get hidden() {
		throw new Error("<SelectItem>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
	}

	set hidden(value) {
		throw new Error("<SelectItem>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
	}

	get disabled() {
		throw new Error("<SelectItem>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
	}

	set disabled(value) {
		throw new Error("<SelectItem>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
	}
}

/* node_modules/carbon-components-svelte/src/Toggle/Toggle.svelte generated by Svelte v3.49.0 */
const file$Z = "node_modules/carbon-components-svelte/src/Toggle/Toggle.svelte";
const get_labelB_slot_changes = dirty => ({});
const get_labelB_slot_context = ctx => ({});
const get_labelA_slot_changes = dirty => ({});
const get_labelA_slot_context = ctx => ({});
const get_labelText_slot_changes = dirty => ({});
const get_labelText_slot_context = ctx => ({});

// (85:29)          
function fallback_block_2(ctx) {
	let t;

	const block = {
		c: function create() {
			t = text(/*labelText*/ ctx[5]);
		},
		m: function mount(target, anchor) {
			insert_dev(target, t, anchor);
		},
		p: function update(ctx, dirty) {
			if (dirty & /*labelText*/ 32) set_data_dev(t, /*labelText*/ ctx[5]);
		},
		d: function destroy(detaching) {
			if (detaching) detach_dev(t);
		}
	};

	dispatch_dev("SvelteRegisterBlock", {
		block,
		id: fallback_block_2.name,
		type: "fallback",
		source: "(85:29)          ",
		ctx
	});

	return block;
}

// (94:28)            
function fallback_block_1(ctx) {
	let t;

	const block = {
		c: function create() {
			t = text(/*labelA*/ ctx[3]);
		},
		m: function mount(target, anchor) {
			insert_dev(target, t, anchor);
		},
		p: function update(ctx, dirty) {
			if (dirty & /*labelA*/ 8) set_data_dev(t, /*labelA*/ ctx[3]);
		},
		d: function destroy(detaching) {
			if (detaching) detach_dev(t);
		}
	};

	dispatch_dev("SvelteRegisterBlock", {
		block,
		id: fallback_block_1.name,
		type: "fallback",
		source: "(94:28)            ",
		ctx
	});

	return block;
}

// (99:28)            
function fallback_block$3(ctx) {
	let t;

	const block = {
		c: function create() {
			t = text(/*labelB*/ ctx[4]);
		},
		m: function mount(target, anchor) {
			insert_dev(target, t, anchor);
		},
		p: function update(ctx, dirty) {
			if (dirty & /*labelB*/ 16) set_data_dev(t, /*labelB*/ ctx[4]);
		},
		d: function destroy(detaching) {
			if (detaching) detach_dev(t);
		}
	};

	dispatch_dev("SvelteRegisterBlock", {
		block,
		id: fallback_block$3.name,
		type: "fallback",
		source: "(99:28)            ",
		ctx
	});

	return block;
}

function create_fragment$_(ctx) {
	let div;
	let input;
	let t0;
	let label;
	let span0;
	let t1;
	let span3;
	let span1;
	let t2;
	let span2;
	let span3_style_value;
	let label_aria_label_value;
	let div_style_value;
	let current;
	let mounted;
	let dispose;
	const labelText_slot_template = /*#slots*/ ctx[12].labelText;
	const labelText_slot = create_slot(labelText_slot_template, ctx, /*$$scope*/ ctx[11], get_labelText_slot_context);
	const labelText_slot_or_fallback = labelText_slot || fallback_block_2(ctx);
	const labelA_slot_template = /*#slots*/ ctx[12].labelA;
	const labelA_slot = create_slot(labelA_slot_template, ctx, /*$$scope*/ ctx[11], get_labelA_slot_context);
	const labelA_slot_or_fallback = labelA_slot || fallback_block_1(ctx);
	const labelB_slot_template = /*#slots*/ ctx[12].labelB;
	const labelB_slot = create_slot(labelB_slot_template, ctx, /*$$scope*/ ctx[11], get_labelB_slot_context);
	const labelB_slot_or_fallback = labelB_slot || fallback_block$3(ctx);

	let div_levels = [
		/*$$restProps*/ ctx[9],
		{
			style: div_style_value = "" + (/*$$restProps*/ ctx[9]['style'] + "; user-select: none")
		}
	];

	let div_data = {};

	for (let i = 0; i < div_levels.length; i += 1) {
		div_data = assign(div_data, div_levels[i]);
	}

	const block = {
		c: function create() {
			div = element("div");
			input = element("input");
			t0 = space();
			label = element("label");
			span0 = element("span");
			if (labelText_slot_or_fallback) labelText_slot_or_fallback.c();
			t1 = space();
			span3 = element("span");
			span1 = element("span");
			if (labelA_slot_or_fallback) labelA_slot_or_fallback.c();
			t2 = space();
			span2 = element("span");
			if (labelB_slot_or_fallback) labelB_slot_or_fallback.c();
			attr_dev(input, "role", "switch");
			attr_dev(input, "type", "checkbox");
			input.checked = /*toggled*/ ctx[0];
			input.disabled = /*disabled*/ ctx[2];
			attr_dev(input, "id", /*id*/ ctx[7]);
			attr_dev(input, "name", /*name*/ ctx[8]);
			toggle_class(input, "bx--toggle-input", true);
			toggle_class(input, "bx--toggle-input--small", /*size*/ ctx[1] === 'sm');
			add_location(input, file$Z, 55, 2, 1226);
			toggle_class(span0, "bx--visually-hidden", /*hideLabel*/ ctx[6]);
			add_location(span0, file$Z, 83, 4, 1852);
			attr_dev(span1, "aria-hidden", "true");
			toggle_class(span1, "bx--toggle__text--off", true);
			add_location(span1, file$Z, 92, 6, 2082);
			attr_dev(span2, "aria-hidden", "true");
			toggle_class(span2, "bx--toggle__text--on", true);
			add_location(span2, file$Z, 97, 6, 2229);
			attr_dev(span3, "style", span3_style_value = /*hideLabel*/ ctx[6] && 'margin-top: 0');
			toggle_class(span3, "bx--toggle__switch", true);
			add_location(span3, file$Z, 88, 4, 1979);

			attr_dev(label, "aria-label", label_aria_label_value = /*labelText*/ ctx[5]
			? undefined
			: /*$$props*/ ctx[10]['aria-label'] || 'Toggle');

			attr_dev(label, "for", /*id*/ ctx[7]);
			toggle_class(label, "bx--toggle-input__label", true);
			add_location(label, file$Z, 78, 2, 1702);
			set_attributes(div, div_data);
			toggle_class(div, "bx--form-item", true);
			add_location(div, file$Z, 46, 0, 1057);
		},
		l: function claim(nodes) {
			throw new Error("options.hydrate only works if the component was compiled with the `hydratable: true` option");
		},
		m: function mount(target, anchor) {
			insert_dev(target, div, anchor);
			append_dev(div, input);
			append_dev(div, t0);
			append_dev(div, label);
			append_dev(label, span0);

			if (labelText_slot_or_fallback) {
				labelText_slot_or_fallback.m(span0, null);
			}

			append_dev(label, t1);
			append_dev(label, span3);
			append_dev(span3, span1);

			if (labelA_slot_or_fallback) {
				labelA_slot_or_fallback.m(span1, null);
			}

			append_dev(span3, t2);
			append_dev(span3, span2);

			if (labelB_slot_or_fallback) {
				labelB_slot_or_fallback.m(span2, null);
			}

			current = true;

			if (!mounted) {
				dispose = [
					listen_dev(input, "change", /*change_handler*/ ctx[17], false, false, false),
					listen_dev(input, "change", /*change_handler_1*/ ctx[21], false, false, false),
					listen_dev(input, "keyup", /*keyup_handler*/ ctx[18], false, false, false),
					listen_dev(input, "keyup", /*keyup_handler_1*/ ctx[22], false, false, false),
					listen_dev(input, "focus", /*focus_handler*/ ctx[19], false, false, false),
					listen_dev(input, "blur", /*blur_handler*/ ctx[20], false, false, false),
					listen_dev(div, "click", /*click_handler*/ ctx[13], false, false, false),
					listen_dev(div, "mouseover", /*mouseover_handler*/ ctx[14], false, false, false),
					listen_dev(div, "mouseenter", /*mouseenter_handler*/ ctx[15], false, false, false),
					listen_dev(div, "mouseleave", /*mouseleave_handler*/ ctx[16], false, false, false)
				];

				mounted = true;
			}
		},
		p: function update(ctx, [dirty]) {
			if (!current || dirty & /*toggled*/ 1) {
				prop_dev(input, "checked", /*toggled*/ ctx[0]);
			}

			if (!current || dirty & /*disabled*/ 4) {
				prop_dev(input, "disabled", /*disabled*/ ctx[2]);
			}

			if (!current || dirty & /*id*/ 128) {
				attr_dev(input, "id", /*id*/ ctx[7]);
			}

			if (!current || dirty & /*name*/ 256) {
				attr_dev(input, "name", /*name*/ ctx[8]);
			}

			if (dirty & /*size*/ 2) {
				toggle_class(input, "bx--toggle-input--small", /*size*/ ctx[1] === 'sm');
			}

			if (labelText_slot) {
				if (labelText_slot.p && (!current || dirty & /*$$scope*/ 2048)) {
					update_slot_base(
						labelText_slot,
						labelText_slot_template,
						ctx,
						/*$$scope*/ ctx[11],
						!current
						? get_all_dirty_from_scope(/*$$scope*/ ctx[11])
						: get_slot_changes(labelText_slot_template, /*$$scope*/ ctx[11], dirty, get_labelText_slot_changes),
						get_labelText_slot_context
					);
				}
			} else {
				if (labelText_slot_or_fallback && labelText_slot_or_fallback.p && (!current || dirty & /*labelText*/ 32)) {
					labelText_slot_or_fallback.p(ctx, !current ? -1 : dirty);
				}
			}

			if (dirty & /*hideLabel*/ 64) {
				toggle_class(span0, "bx--visually-hidden", /*hideLabel*/ ctx[6]);
			}

			if (labelA_slot) {
				if (labelA_slot.p && (!current || dirty & /*$$scope*/ 2048)) {
					update_slot_base(
						labelA_slot,
						labelA_slot_template,
						ctx,
						/*$$scope*/ ctx[11],
						!current
						? get_all_dirty_from_scope(/*$$scope*/ ctx[11])
						: get_slot_changes(labelA_slot_template, /*$$scope*/ ctx[11], dirty, get_labelA_slot_changes),
						get_labelA_slot_context
					);
				}
			} else {
				if (labelA_slot_or_fallback && labelA_slot_or_fallback.p && (!current || dirty & /*labelA*/ 8)) {
					labelA_slot_or_fallback.p(ctx, !current ? -1 : dirty);
				}
			}

			if (labelB_slot) {
				if (labelB_slot.p && (!current || dirty & /*$$scope*/ 2048)) {
					update_slot_base(
						labelB_slot,
						labelB_slot_template,
						ctx,
						/*$$scope*/ ctx[11],
						!current
						? get_all_dirty_from_scope(/*$$scope*/ ctx[11])
						: get_slot_changes(labelB_slot_template, /*$$scope*/ ctx[11], dirty, get_labelB_slot_changes),
						get_labelB_slot_context
					);
				}
			} else {
				if (labelB_slot_or_fallback && labelB_slot_or_fallback.p && (!current || dirty & /*labelB*/ 16)) {
					labelB_slot_or_fallback.p(ctx, !current ? -1 : dirty);
				}
			}

			if (!current || dirty & /*hideLabel*/ 64 && span3_style_value !== (span3_style_value = /*hideLabel*/ ctx[6] && 'margin-top: 0')) {
				attr_dev(span3, "style", span3_style_value);
			}

			if (!current || dirty & /*labelText, $$props*/ 1056 && label_aria_label_value !== (label_aria_label_value = /*labelText*/ ctx[5]
			? undefined
			: /*$$props*/ ctx[10]['aria-label'] || 'Toggle')) {
				attr_dev(label, "aria-label", label_aria_label_value);
			}

			if (!current || dirty & /*id*/ 128) {
				attr_dev(label, "for", /*id*/ ctx[7]);
			}

			set_attributes(div, div_data = get_spread_update(div_levels, [
				dirty & /*$$restProps*/ 512 && /*$$restProps*/ ctx[9],
				(!current || dirty & /*$$restProps*/ 512 && div_style_value !== (div_style_value = "" + (/*$$restProps*/ ctx[9]['style'] + "; user-select: none"))) && { style: div_style_value }
			]));

			toggle_class(div, "bx--form-item", true);
		},
		i: function intro(local) {
			if (current) return;
			transition_in(labelText_slot_or_fallback, local);
			transition_in(labelA_slot_or_fallback, local);
			transition_in(labelB_slot_or_fallback, local);
			current = true;
		},
		o: function outro(local) {
			transition_out(labelText_slot_or_fallback, local);
			transition_out(labelA_slot_or_fallback, local);
			transition_out(labelB_slot_or_fallback, local);
			current = false;
		},
		d: function destroy(detaching) {
			if (detaching) detach_dev(div);
			if (labelText_slot_or_fallback) labelText_slot_or_fallback.d(detaching);
			if (labelA_slot_or_fallback) labelA_slot_or_fallback.d(detaching);
			if (labelB_slot_or_fallback) labelB_slot_or_fallback.d(detaching);
			mounted = false;
			run_all(dispose);
		}
	};

	dispatch_dev("SvelteRegisterBlock", {
		block,
		id: create_fragment$_.name,
		type: "component",
		source: "",
		ctx
	});

	return block;
}

function instance$_($$self, $$props, $$invalidate) {
	const omit_props_names = [
		"size","toggled","disabled","labelA","labelB","labelText","hideLabel","id","name"
	];

	let $$restProps = compute_rest_props($$props, omit_props_names);
	let { $$slots: slots = {}, $$scope } = $$props;
	validate_slots('Toggle', slots, ['labelText','labelA','labelB']);
	let { size = "default" } = $$props;
	let { toggled = false } = $$props;
	let { disabled = false } = $$props;
	let { labelA = "Off" } = $$props;
	let { labelB = "On" } = $$props;
	let { labelText = "" } = $$props;
	let { hideLabel = false } = $$props;
	let { id = "ccs-" + Math.random().toString(36) } = $$props;
	let { name = undefined } = $$props;
	const dispatch = createEventDispatcher();

	function click_handler(event) {
		bubble.call(this, $$self, event);
	}

	function mouseover_handler(event) {
		bubble.call(this, $$self, event);
	}

	function mouseenter_handler(event) {
		bubble.call(this, $$self, event);
	}

	function mouseleave_handler(event) {
		bubble.call(this, $$self, event);
	}

	function change_handler(event) {
		bubble.call(this, $$self, event);
	}

	function keyup_handler(event) {
		bubble.call(this, $$self, event);
	}

	function focus_handler(event) {
		bubble.call(this, $$self, event);
	}

	function blur_handler(event) {
		bubble.call(this, $$self, event);
	}

	const change_handler_1 = () => {
		$$invalidate(0, toggled = !toggled);
	};

	const keyup_handler_1 = e => {
		if (e.key === ' ' || e.key === 'Enter') {
			e.preventDefault();
			$$invalidate(0, toggled = !toggled);
		}
	};

	$$self.$$set = $$new_props => {
		$$invalidate(10, $$props = assign(assign({}, $$props), exclude_internal_props($$new_props)));
		$$invalidate(9, $$restProps = compute_rest_props($$props, omit_props_names));
		if ('size' in $$new_props) $$invalidate(1, size = $$new_props.size);
		if ('toggled' in $$new_props) $$invalidate(0, toggled = $$new_props.toggled);
		if ('disabled' in $$new_props) $$invalidate(2, disabled = $$new_props.disabled);
		if ('labelA' in $$new_props) $$invalidate(3, labelA = $$new_props.labelA);
		if ('labelB' in $$new_props) $$invalidate(4, labelB = $$new_props.labelB);
		if ('labelText' in $$new_props) $$invalidate(5, labelText = $$new_props.labelText);
		if ('hideLabel' in $$new_props) $$invalidate(6, hideLabel = $$new_props.hideLabel);
		if ('id' in $$new_props) $$invalidate(7, id = $$new_props.id);
		if ('name' in $$new_props) $$invalidate(8, name = $$new_props.name);
		if ('$$scope' in $$new_props) $$invalidate(11, $$scope = $$new_props.$$scope);
	};

	$$self.$capture_state = () => ({
		size,
		toggled,
		disabled,
		labelA,
		labelB,
		labelText,
		hideLabel,
		id,
		name,
		createEventDispatcher,
		dispatch
	});

	$$self.$inject_state = $$new_props => {
		$$invalidate(10, $$props = assign(assign({}, $$props), $$new_props));
		if ('size' in $$props) $$invalidate(1, size = $$new_props.size);
		if ('toggled' in $$props) $$invalidate(0, toggled = $$new_props.toggled);
		if ('disabled' in $$props) $$invalidate(2, disabled = $$new_props.disabled);
		if ('labelA' in $$props) $$invalidate(3, labelA = $$new_props.labelA);
		if ('labelB' in $$props) $$invalidate(4, labelB = $$new_props.labelB);
		if ('labelText' in $$props) $$invalidate(5, labelText = $$new_props.labelText);
		if ('hideLabel' in $$props) $$invalidate(6, hideLabel = $$new_props.hideLabel);
		if ('id' in $$props) $$invalidate(7, id = $$new_props.id);
		if ('name' in $$props) $$invalidate(8, name = $$new_props.name);
	};

	if ($$props && "$$inject" in $$props) {
		$$self.$inject_state($$props.$$inject);
	}

	$$self.$$.update = () => {
		if ($$self.$$.dirty & /*toggled*/ 1) {
			dispatch("toggle", { toggled });
		}
	};

	$$props = exclude_internal_props($$props);

	return [
		toggled,
		size,
		disabled,
		labelA,
		labelB,
		labelText,
		hideLabel,
		id,
		name,
		$$restProps,
		$$props,
		$$scope,
		slots,
		click_handler,
		mouseover_handler,
		mouseenter_handler,
		mouseleave_handler,
		change_handler,
		keyup_handler,
		focus_handler,
		blur_handler,
		change_handler_1,
		keyup_handler_1
	];
}

class Toggle extends SvelteComponentDev {
	constructor(options) {
		super(options);

		init(this, options, instance$_, create_fragment$_, safe_not_equal, {
			size: 1,
			toggled: 0,
			disabled: 2,
			labelA: 3,
			labelB: 4,
			labelText: 5,
			hideLabel: 6,
			id: 7,
			name: 8
		});

		dispatch_dev("SvelteRegisterComponent", {
			component: this,
			tagName: "Toggle",
			options,
			id: create_fragment$_.name
		});
	}

	get size() {
		throw new Error("<Toggle>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
	}

	set size(value) {
		throw new Error("<Toggle>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
	}

	get toggled() {
		throw new Error("<Toggle>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
	}

	set toggled(value) {
		throw new Error("<Toggle>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
	}

	get disabled() {
		throw new Error("<Toggle>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
	}

	set disabled(value) {
		throw new Error("<Toggle>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
	}

	get labelA() {
		throw new Error("<Toggle>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
	}

	set labelA(value) {
		throw new Error("<Toggle>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
	}

	get labelB() {
		throw new Error("<Toggle>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
	}

	set labelB(value) {
		throw new Error("<Toggle>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
	}

	get labelText() {
		throw new Error("<Toggle>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
	}

	set labelText(value) {
		throw new Error("<Toggle>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
	}

	get hideLabel() {
		throw new Error("<Toggle>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
	}

	set hideLabel(value) {
		throw new Error("<Toggle>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
	}

	get id() {
		throw new Error("<Toggle>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
	}

	set id(value) {
		throw new Error("<Toggle>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
	}

	get name() {
		throw new Error("<Toggle>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
	}

	set name(value) {
		throw new Error("<Toggle>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
	}
}

/* node_modules/carbon-components-svelte/src/Theme/Theme.svelte generated by Svelte v3.49.0 */

const { Object: Object_1, console: console_1$2 } = globals;
const get_default_slot_changes = dirty => ({ theme: dirty & /*theme*/ 1 });
const get_default_slot_context = ctx => ({ theme: /*theme*/ ctx[0] });

function get_each_context$1(ctx, list, i) {
	const child_ctx = ctx.slice();
	child_ctx[0] = list[i];
	return child_ctx;
}

// (98:0) {#if persist}
function create_if_block_2$3(ctx) {
	let localstorage;
	let updating_value;
	let current;

	function localstorage_value_binding(value) {
		/*localstorage_value_binding*/ ctx[9](value);
	}

	let localstorage_props = { key: /*persistKey*/ ctx[2] };

	if (/*theme*/ ctx[0] !== void 0) {
		localstorage_props.value = /*theme*/ ctx[0];
	}

	localstorage = new LocalStorage({
			props: localstorage_props,
			$$inline: true
		});

	binding_callbacks.push(() => bind(localstorage, 'value', localstorage_value_binding));

	const block = {
		c: function create() {
			create_component(localstorage.$$.fragment);
		},
		m: function mount(target, anchor) {
			mount_component(localstorage, target, anchor);
			current = true;
		},
		p: function update(ctx, dirty) {
			const localstorage_changes = {};
			if (dirty & /*persistKey*/ 4) localstorage_changes.key = /*persistKey*/ ctx[2];

			if (!updating_value && dirty & /*theme*/ 1) {
				updating_value = true;
				localstorage_changes.value = /*theme*/ ctx[0];
				add_flush_callback(() => updating_value = false);
			}

			localstorage.$set(localstorage_changes);
		},
		i: function intro(local) {
			if (current) return;
			transition_in(localstorage.$$.fragment, local);
			current = true;
		},
		o: function outro(local) {
			transition_out(localstorage.$$.fragment, local);
			current = false;
		},
		d: function destroy(detaching) {
			destroy_component(localstorage, detaching);
		}
	};

	dispatch_dev("SvelteRegisterBlock", {
		block,
		id: create_if_block_2$3.name,
		type: "if",
		source: "(98:0) {#if persist}",
		ctx
	});

	return block;
}

// (110:30) 
function create_if_block_1$4(ctx) {
	let select_1;
	let updating_selected;
	let current;
	const select_1_spread_levels = [/*select*/ ctx[5]];

	function select_1_selected_binding(value) {
		/*select_1_selected_binding*/ ctx[11](value);
	}

	let select_1_props = {
		$$slots: { default: [create_default_slot$8] },
		$$scope: { ctx }
	};

	for (let i = 0; i < select_1_spread_levels.length; i += 1) {
		select_1_props = assign(select_1_props, select_1_spread_levels[i]);
	}

	if (/*theme*/ ctx[0] !== void 0) {
		select_1_props.selected = /*theme*/ ctx[0];
	}

	select_1 = new Select({ props: select_1_props, $$inline: true });
	binding_callbacks.push(() => bind(select_1, 'selected', select_1_selected_binding));

	const block = {
		c: function create() {
			create_component(select_1.$$.fragment);
		},
		m: function mount(target, anchor) {
			mount_component(select_1, target, anchor);
			current = true;
		},
		p: function update(ctx, dirty) {
			const select_1_changes = (dirty & /*select*/ 32)
			? get_spread_update(select_1_spread_levels, [get_spread_object(/*select*/ ctx[5])])
			: {};

			if (dirty & /*$$scope, select*/ 4128) {
				select_1_changes.$$scope = { dirty, ctx };
			}

			if (!updating_selected && dirty & /*theme*/ 1) {
				updating_selected = true;
				select_1_changes.selected = /*theme*/ ctx[0];
				add_flush_callback(() => updating_selected = false);
			}

			select_1.$set(select_1_changes);
		},
		i: function intro(local) {
			if (current) return;
			transition_in(select_1.$$.fragment, local);
			current = true;
		},
		o: function outro(local) {
			transition_out(select_1.$$.fragment, local);
			current = false;
		},
		d: function destroy(detaching) {
			destroy_component(select_1, detaching);
		}
	};

	dispatch_dev("SvelteRegisterBlock", {
		block,
		id: create_if_block_1$4.name,
		type: "if",
		source: "(110:30) ",
		ctx
	});

	return block;
}

// (102:0) {#if render === "toggle"}
function create_if_block$P(ctx) {
	let toggle_1;
	let current;

	const toggle_1_spread_levels = [
		/*toggle*/ ctx[4],
		{
			toggled: /*theme*/ ctx[0] === /*toggle*/ ctx[4].themes[1]
		}
	];

	let toggle_1_props = {};

	for (let i = 0; i < toggle_1_spread_levels.length; i += 1) {
		toggle_1_props = assign(toggle_1_props, toggle_1_spread_levels[i]);
	}

	toggle_1 = new Toggle({ props: toggle_1_props, $$inline: true });
	toggle_1.$on("toggle", /*toggle_handler*/ ctx[10]);

	const block = {
		c: function create() {
			create_component(toggle_1.$$.fragment);
		},
		m: function mount(target, anchor) {
			mount_component(toggle_1, target, anchor);
			current = true;
		},
		p: function update(ctx, dirty) {
			const toggle_1_changes = (dirty & /*toggle, theme*/ 17)
			? get_spread_update(toggle_1_spread_levels, [
					dirty & /*toggle*/ 16 && get_spread_object(/*toggle*/ ctx[4]),
					{
						toggled: /*theme*/ ctx[0] === /*toggle*/ ctx[4].themes[1]
					}
				])
			: {};

			toggle_1.$set(toggle_1_changes);
		},
		i: function intro(local) {
			if (current) return;
			transition_in(toggle_1.$$.fragment, local);
			current = true;
		},
		o: function outro(local) {
			transition_out(toggle_1.$$.fragment, local);
			current = false;
		},
		d: function destroy(detaching) {
			destroy_component(toggle_1, detaching);
		}
	};

	dispatch_dev("SvelteRegisterBlock", {
		block,
		id: create_if_block$P.name,
		type: "if",
		source: "(102:0) {#if render === \\\"toggle\\\"}",
		ctx
	});

	return block;
}

// (112:4) {#each select.themes as theme (theme)}
function create_each_block$1(key_1, ctx) {
	let first;
	let selectitem;
	let current;

	selectitem = new SelectItem({
			props: {
				value: /*theme*/ ctx[0],
				text: /*themes*/ ctx[6][/*theme*/ ctx[0]]
			},
			$$inline: true
		});

	const block = {
		key: key_1,
		first: null,
		c: function create() {
			first = empty();
			create_component(selectitem.$$.fragment);
			this.first = first;
		},
		m: function mount(target, anchor) {
			insert_dev(target, first, anchor);
			mount_component(selectitem, target, anchor);
			current = true;
		},
		p: function update(new_ctx, dirty) {
			ctx = new_ctx;
			const selectitem_changes = {};
			if (dirty & /*select*/ 32) selectitem_changes.value = /*theme*/ ctx[0];
			if (dirty & /*select*/ 32) selectitem_changes.text = /*themes*/ ctx[6][/*theme*/ ctx[0]];
			selectitem.$set(selectitem_changes);
		},
		i: function intro(local) {
			if (current) return;
			transition_in(selectitem.$$.fragment, local);
			current = true;
		},
		o: function outro(local) {
			transition_out(selectitem.$$.fragment, local);
			current = false;
		},
		d: function destroy(detaching) {
			if (detaching) detach_dev(first);
			destroy_component(selectitem, detaching);
		}
	};

	dispatch_dev("SvelteRegisterBlock", {
		block,
		id: create_each_block$1.name,
		type: "each",
		source: "(112:4) {#each select.themes as theme (theme)}",
		ctx
	});

	return block;
}

// (111:2) <Select {...select} bind:selected="{theme}">
function create_default_slot$8(ctx) {
	let each_blocks = [];
	let each_1_lookup = new Map();
	let each_1_anchor;
	let current;
	let each_value = /*select*/ ctx[5].themes;
	validate_each_argument(each_value);
	const get_key = ctx => /*theme*/ ctx[0];
	validate_each_keys(ctx, each_value, get_each_context$1, get_key);

	for (let i = 0; i < each_value.length; i += 1) {
		let child_ctx = get_each_context$1(ctx, each_value, i);
		let key = get_key(child_ctx);
		each_1_lookup.set(key, each_blocks[i] = create_each_block$1(key, child_ctx));
	}

	const block = {
		c: function create() {
			for (let i = 0; i < each_blocks.length; i += 1) {
				each_blocks[i].c();
			}

			each_1_anchor = empty();
		},
		m: function mount(target, anchor) {
			for (let i = 0; i < each_blocks.length; i += 1) {
				each_blocks[i].m(target, anchor);
			}

			insert_dev(target, each_1_anchor, anchor);
			current = true;
		},
		p: function update(ctx, dirty) {
			if (dirty & /*select, themes*/ 96) {
				each_value = /*select*/ ctx[5].themes;
				validate_each_argument(each_value);
				group_outros();
				validate_each_keys(ctx, each_value, get_each_context$1, get_key);
				each_blocks = update_keyed_each(each_blocks, dirty, get_key, 1, ctx, each_value, each_1_lookup, each_1_anchor.parentNode, outro_and_destroy_block, create_each_block$1, each_1_anchor, get_each_context$1);
				check_outros();
			}
		},
		i: function intro(local) {
			if (current) return;

			for (let i = 0; i < each_value.length; i += 1) {
				transition_in(each_blocks[i]);
			}

			current = true;
		},
		o: function outro(local) {
			for (let i = 0; i < each_blocks.length; i += 1) {
				transition_out(each_blocks[i]);
			}

			current = false;
		},
		d: function destroy(detaching) {
			for (let i = 0; i < each_blocks.length; i += 1) {
				each_blocks[i].d(detaching);
			}

			if (detaching) detach_dev(each_1_anchor);
		}
	};

	dispatch_dev("SvelteRegisterBlock", {
		block,
		id: create_default_slot$8.name,
		type: "slot",
		source: "(111:2) <Select {...select} bind:selected=\\\"{theme}\\\">",
		ctx
	});

	return block;
}

function create_fragment$Z(ctx) {
	let t0;
	let current_block_type_index;
	let if_block1;
	let t1;
	let current;
	let if_block0 = /*persist*/ ctx[1] && create_if_block_2$3(ctx);
	const if_block_creators = [create_if_block$P, create_if_block_1$4];
	const if_blocks = [];

	function select_block_type(ctx, dirty) {
		if (/*render*/ ctx[3] === "toggle") return 0;
		if (/*render*/ ctx[3] === "select") return 1;
		return -1;
	}

	if (~(current_block_type_index = select_block_type(ctx))) {
		if_block1 = if_blocks[current_block_type_index] = if_block_creators[current_block_type_index](ctx);
	}

	const default_slot_template = /*#slots*/ ctx[8].default;
	const default_slot = create_slot(default_slot_template, ctx, /*$$scope*/ ctx[12], get_default_slot_context);

	const block = {
		c: function create() {
			if (if_block0) if_block0.c();
			t0 = space();
			if (if_block1) if_block1.c();
			t1 = space();
			if (default_slot) default_slot.c();
		},
		l: function claim(nodes) {
			throw new Error("options.hydrate only works if the component was compiled with the `hydratable: true` option");
		},
		m: function mount(target, anchor) {
			if (if_block0) if_block0.m(target, anchor);
			insert_dev(target, t0, anchor);

			if (~current_block_type_index) {
				if_blocks[current_block_type_index].m(target, anchor);
			}

			insert_dev(target, t1, anchor);

			if (default_slot) {
				default_slot.m(target, anchor);
			}

			current = true;
		},
		p: function update(ctx, [dirty]) {
			if (/*persist*/ ctx[1]) {
				if (if_block0) {
					if_block0.p(ctx, dirty);

					if (dirty & /*persist*/ 2) {
						transition_in(if_block0, 1);
					}
				} else {
					if_block0 = create_if_block_2$3(ctx);
					if_block0.c();
					transition_in(if_block0, 1);
					if_block0.m(t0.parentNode, t0);
				}
			} else if (if_block0) {
				group_outros();

				transition_out(if_block0, 1, 1, () => {
					if_block0 = null;
				});

				check_outros();
			}

			let previous_block_index = current_block_type_index;
			current_block_type_index = select_block_type(ctx);

			if (current_block_type_index === previous_block_index) {
				if (~current_block_type_index) {
					if_blocks[current_block_type_index].p(ctx, dirty);
				}
			} else {
				if (if_block1) {
					group_outros();

					transition_out(if_blocks[previous_block_index], 1, 1, () => {
						if_blocks[previous_block_index] = null;
					});

					check_outros();
				}

				if (~current_block_type_index) {
					if_block1 = if_blocks[current_block_type_index];

					if (!if_block1) {
						if_block1 = if_blocks[current_block_type_index] = if_block_creators[current_block_type_index](ctx);
						if_block1.c();
					} else {
						if_block1.p(ctx, dirty);
					}

					transition_in(if_block1, 1);
					if_block1.m(t1.parentNode, t1);
				} else {
					if_block1 = null;
				}
			}

			if (default_slot) {
				if (default_slot.p && (!current || dirty & /*$$scope, theme*/ 4097)) {
					update_slot_base(
						default_slot,
						default_slot_template,
						ctx,
						/*$$scope*/ ctx[12],
						!current
						? get_all_dirty_from_scope(/*$$scope*/ ctx[12])
						: get_slot_changes(default_slot_template, /*$$scope*/ ctx[12], dirty, get_default_slot_changes),
						get_default_slot_context
					);
				}
			}
		},
		i: function intro(local) {
			if (current) return;
			transition_in(if_block0);
			transition_in(if_block1);
			transition_in(default_slot, local);
			current = true;
		},
		o: function outro(local) {
			transition_out(if_block0);
			transition_out(if_block1);
			transition_out(default_slot, local);
			current = false;
		},
		d: function destroy(detaching) {
			if (if_block0) if_block0.d(detaching);
			if (detaching) detach_dev(t0);

			if (~current_block_type_index) {
				if_blocks[current_block_type_index].d(detaching);
			}

			if (detaching) detach_dev(t1);
			if (default_slot) default_slot.d(detaching);
		}
	};

	dispatch_dev("SvelteRegisterBlock", {
		block,
		id: create_fragment$Z.name,
		type: "component",
		source: "",
		ctx
	});

	return block;
}

function instance$Z($$self, $$props, $$invalidate) {
	let { $$slots: slots = {}, $$scope } = $$props;
	validate_slots('Theme', slots, ['default']);
	let { theme = "white" } = $$props;
	let { tokens = {} } = $$props;
	let { persist = false } = $$props;
	let { persistKey = "theme" } = $$props;
	let { render = undefined } = $$props;

	let { toggle = {
		themes: ["white", "g100"],
		labelA: "",
		labelB: "",
		labelText: "Dark mode",
		hideLabel: false
	} } = $$props;

	/** @type {Record<CarbonTheme, string>} */
	const themes = {
		white: "White",
		g10: "Gray 10",
		g80: "Gray 80",
		g90: "Gray 90",
		g100: "Gray 100"
	};

	/** @type {CarbonTheme} */
	const themeKeys = Object.keys(themes);

	let { select = {
		themes: themeKeys,
		labelText: "Themes",
		hideLabel: false
	} } = $$props;

	const dispatch = createEventDispatcher();
	const writable_props = ['theme', 'tokens', 'persist', 'persistKey', 'render', 'toggle', 'select'];

	Object_1.keys($$props).forEach(key => {
		if (!~writable_props.indexOf(key) && key.slice(0, 2) !== '$$' && key !== 'slot') console_1$2.warn(`<Theme> was created with unknown prop '${key}'`);
	});

	function localstorage_value_binding(value) {
		theme = value;
		$$invalidate(0, theme);
	}

	const toggle_handler = ({ detail }) => {
		$$invalidate(0, theme = detail.toggled ? toggle.themes[1] : toggle.themes[0]);
	};

	function select_1_selected_binding(value) {
		theme = value;
		$$invalidate(0, theme);
	}

	$$self.$$set = $$props => {
		if ('theme' in $$props) $$invalidate(0, theme = $$props.theme);
		if ('tokens' in $$props) $$invalidate(7, tokens = $$props.tokens);
		if ('persist' in $$props) $$invalidate(1, persist = $$props.persist);
		if ('persistKey' in $$props) $$invalidate(2, persistKey = $$props.persistKey);
		if ('render' in $$props) $$invalidate(3, render = $$props.render);
		if ('toggle' in $$props) $$invalidate(4, toggle = $$props.toggle);
		if ('select' in $$props) $$invalidate(5, select = $$props.select);
		if ('$$scope' in $$props) $$invalidate(12, $$scope = $$props.$$scope);
	};

	$$self.$capture_state = () => ({
		theme,
		tokens,
		persist,
		persistKey,
		render,
		toggle,
		themes,
		themeKeys,
		select,
		createEventDispatcher,
		Toggle,
		Select,
		SelectItem,
		LocalStorage,
		dispatch
	});

	$$self.$inject_state = $$props => {
		if ('theme' in $$props) $$invalidate(0, theme = $$props.theme);
		if ('tokens' in $$props) $$invalidate(7, tokens = $$props.tokens);
		if ('persist' in $$props) $$invalidate(1, persist = $$props.persist);
		if ('persistKey' in $$props) $$invalidate(2, persistKey = $$props.persistKey);
		if ('render' in $$props) $$invalidate(3, render = $$props.render);
		if ('toggle' in $$props) $$invalidate(4, toggle = $$props.toggle);
		if ('select' in $$props) $$invalidate(5, select = $$props.select);
	};

	if ($$props && "$$inject" in $$props) {
		$$self.$inject_state($$props.$$inject);
	}

	$$self.$$.update = () => {
		if ($$self.$$.dirty & /*tokens, theme*/ 129) {
			if (typeof window !== "undefined") {
				Object.entries(tokens).forEach(([token, value]) => {
					document.documentElement.style.setProperty(`--cds-${token}`, value);
				});

				if (theme in themes) {
					document.documentElement.setAttribute("theme", theme);
					dispatch("update", { theme });
				} else {
					console.warn(`[Theme.svelte] invalid theme "${theme}". Value must be one of: ${JSON.stringify(Object.keys(themes))}`);
				}
			}
		}
	};

	return [
		theme,
		persist,
		persistKey,
		render,
		toggle,
		select,
		themes,
		tokens,
		slots,
		localstorage_value_binding,
		toggle_handler,
		select_1_selected_binding,
		$$scope
	];
}

class Theme extends SvelteComponentDev {
	constructor(options) {
		super(options);

		init(this, options, instance$Z, create_fragment$Z, safe_not_equal, {
			theme: 0,
			tokens: 7,
			persist: 1,
			persistKey: 2,
			render: 3,
			toggle: 4,
			select: 5
		});

		dispatch_dev("SvelteRegisterComponent", {
			component: this,
			tagName: "Theme",
			options,
			id: create_fragment$Z.name
		});
	}

	get theme() {
		throw new Error("<Theme>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
	}

	set theme(value) {
		throw new Error("<Theme>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
	}

	get tokens() {
		throw new Error("<Theme>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
	}

	set tokens(value) {
		throw new Error("<Theme>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
	}

	get persist() {
		throw new Error("<Theme>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
	}

	set persist(value) {
		throw new Error("<Theme>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
	}

	get persistKey() {
		throw new Error("<Theme>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
	}

	set persistKey(value) {
		throw new Error("<Theme>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
	}

	get render() {
		throw new Error("<Theme>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
	}

	set render(value) {
		throw new Error("<Theme>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
	}

	get toggle() {
		throw new Error("<Theme>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
	}

	set toggle(value) {
		throw new Error("<Theme>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
	}

	get select() {
		throw new Error("<Theme>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
	}

	set select(value) {
		throw new Error("<Theme>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
	}
}

/* node_modules/carbon-components-svelte/src/Tile/Tile.svelte generated by Svelte v3.49.0 */

const file$Y = "node_modules/carbon-components-svelte/src/Tile/Tile.svelte";

function create_fragment$Y(ctx) {
	let div;
	let current;
	let mounted;
	let dispose;
	const default_slot_template = /*#slots*/ ctx[3].default;
	const default_slot = create_slot(default_slot_template, ctx, /*$$scope*/ ctx[2], null);
	let div_levels = [/*$$restProps*/ ctx[1]];
	let div_data = {};

	for (let i = 0; i < div_levels.length; i += 1) {
		div_data = assign(div_data, div_levels[i]);
	}

	const block = {
		c: function create() {
			div = element("div");
			if (default_slot) default_slot.c();
			set_attributes(div, div_data);
			toggle_class(div, "bx--tile", true);
			toggle_class(div, "bx--tile--light", /*light*/ ctx[0]);
			add_location(div, file$Y, 6, 0, 156);
		},
		l: function claim(nodes) {
			throw new Error("options.hydrate only works if the component was compiled with the `hydratable: true` option");
		},
		m: function mount(target, anchor) {
			insert_dev(target, div, anchor);

			if (default_slot) {
				default_slot.m(div, null);
			}

			current = true;

			if (!mounted) {
				dispose = [
					listen_dev(div, "click", /*click_handler*/ ctx[4], false, false, false),
					listen_dev(div, "mouseover", /*mouseover_handler*/ ctx[5], false, false, false),
					listen_dev(div, "mouseenter", /*mouseenter_handler*/ ctx[6], false, false, false),
					listen_dev(div, "mouseleave", /*mouseleave_handler*/ ctx[7], false, false, false)
				];

				mounted = true;
			}
		},
		p: function update(ctx, [dirty]) {
			if (default_slot) {
				if (default_slot.p && (!current || dirty & /*$$scope*/ 4)) {
					update_slot_base(
						default_slot,
						default_slot_template,
						ctx,
						/*$$scope*/ ctx[2],
						!current
						? get_all_dirty_from_scope(/*$$scope*/ ctx[2])
						: get_slot_changes(default_slot_template, /*$$scope*/ ctx[2], dirty, null),
						null
					);
				}
			}

			set_attributes(div, div_data = get_spread_update(div_levels, [dirty & /*$$restProps*/ 2 && /*$$restProps*/ ctx[1]]));
			toggle_class(div, "bx--tile", true);
			toggle_class(div, "bx--tile--light", /*light*/ ctx[0]);
		},
		i: function intro(local) {
			if (current) return;
			transition_in(default_slot, local);
			current = true;
		},
		o: function outro(local) {
			transition_out(default_slot, local);
			current = false;
		},
		d: function destroy(detaching) {
			if (detaching) detach_dev(div);
			if (default_slot) default_slot.d(detaching);
			mounted = false;
			run_all(dispose);
		}
	};

	dispatch_dev("SvelteRegisterBlock", {
		block,
		id: create_fragment$Y.name,
		type: "component",
		source: "",
		ctx
	});

	return block;
}

function instance$Y($$self, $$props, $$invalidate) {
	const omit_props_names = ["light"];
	let $$restProps = compute_rest_props($$props, omit_props_names);
	let { $$slots: slots = {}, $$scope } = $$props;
	validate_slots('Tile', slots, ['default']);
	let { light = false } = $$props;

	function click_handler(event) {
		bubble.call(this, $$self, event);
	}

	function mouseover_handler(event) {
		bubble.call(this, $$self, event);
	}

	function mouseenter_handler(event) {
		bubble.call(this, $$self, event);
	}

	function mouseleave_handler(event) {
		bubble.call(this, $$self, event);
	}

	$$self.$$set = $$new_props => {
		$$props = assign(assign({}, $$props), exclude_internal_props($$new_props));
		$$invalidate(1, $$restProps = compute_rest_props($$props, omit_props_names));
		if ('light' in $$new_props) $$invalidate(0, light = $$new_props.light);
		if ('$$scope' in $$new_props) $$invalidate(2, $$scope = $$new_props.$$scope);
	};

	$$self.$capture_state = () => ({ light });

	$$self.$inject_state = $$new_props => {
		if ('light' in $$props) $$invalidate(0, light = $$new_props.light);
	};

	if ($$props && "$$inject" in $$props) {
		$$self.$inject_state($$props.$$inject);
	}

	return [
		light,
		$$restProps,
		$$scope,
		slots,
		click_handler,
		mouseover_handler,
		mouseenter_handler,
		mouseleave_handler
	];
}

class Tile extends SvelteComponentDev {
	constructor(options) {
		super(options);
		init(this, options, instance$Y, create_fragment$Y, safe_not_equal, { light: 0 });

		dispatch_dev("SvelteRegisterComponent", {
			component: this,
			tagName: "Tile",
			options,
			id: create_fragment$Y.name
		});
	}

	get light() {
		throw new Error("<Tile>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
	}

	set light(value) {
		throw new Error("<Tile>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
	}
}

/* node_modules/carbon-components-svelte/src/icons/Menu.svelte generated by Svelte v3.49.0 */

const file$X = "node_modules/carbon-components-svelte/src/icons/Menu.svelte";

// (24:2) {#if title}
function create_if_block$O(ctx) {
	let title_1;
	let t;

	const block = {
		c: function create() {
			title_1 = svg_element("title");
			t = text(/*title*/ ctx[1]);
			add_location(title_1, file$X, 23, 13, 549);
		},
		m: function mount(target, anchor) {
			insert_dev(target, title_1, anchor);
			append_dev(title_1, t);
		},
		p: function update(ctx, dirty) {
			if (dirty & /*title*/ 2) set_data_dev(t, /*title*/ ctx[1]);
		},
		d: function destroy(detaching) {
			if (detaching) detach_dev(title_1);
		}
	};

	dispatch_dev("SvelteRegisterBlock", {
		block,
		id: create_if_block$O.name,
		type: "if",
		source: "(24:2) {#if title}",
		ctx
	});

	return block;
}

function create_fragment$X(ctx) {
	let svg;
	let path;
	let if_block = /*title*/ ctx[1] && create_if_block$O(ctx);

	let svg_levels = [
		{ xmlns: "http://www.w3.org/2000/svg" },
		{ viewBox: "0 0 32 32" },
		{ fill: "currentColor" },
		{ preserveAspectRatio: "xMidYMid meet" },
		{ width: /*size*/ ctx[0] },
		{ height: /*size*/ ctx[0] },
		/*attributes*/ ctx[2],
		/*$$restProps*/ ctx[3]
	];

	let svg_data = {};

	for (let i = 0; i < svg_levels.length; i += 1) {
		svg_data = assign(svg_data, svg_levels[i]);
	}

	const block = {
		c: function create() {
			svg = svg_element("svg");
			if (if_block) if_block.c();
			path = svg_element("path");
			attr_dev(path, "d", "M4 6H28V8H4zM4 24H28V26H4zM4 12H28V14H4zM4 18H28V20H4z");
			add_location(path, file$X, 24, 2, 579);
			set_svg_attributes(svg, svg_data);
			add_location(svg, file$X, 13, 0, 338);
		},
		l: function claim(nodes) {
			throw new Error("options.hydrate only works if the component was compiled with the `hydratable: true` option");
		},
		m: function mount(target, anchor) {
			insert_dev(target, svg, anchor);
			if (if_block) if_block.m(svg, null);
			append_dev(svg, path);
		},
		p: function update(ctx, [dirty]) {
			if (/*title*/ ctx[1]) {
				if (if_block) {
					if_block.p(ctx, dirty);
				} else {
					if_block = create_if_block$O(ctx);
					if_block.c();
					if_block.m(svg, path);
				}
			} else if (if_block) {
				if_block.d(1);
				if_block = null;
			}

			set_svg_attributes(svg, svg_data = get_spread_update(svg_levels, [
				{ xmlns: "http://www.w3.org/2000/svg" },
				{ viewBox: "0 0 32 32" },
				{ fill: "currentColor" },
				{ preserveAspectRatio: "xMidYMid meet" },
				dirty & /*size*/ 1 && { width: /*size*/ ctx[0] },
				dirty & /*size*/ 1 && { height: /*size*/ ctx[0] },
				dirty & /*attributes*/ 4 && /*attributes*/ ctx[2],
				dirty & /*$$restProps*/ 8 && /*$$restProps*/ ctx[3]
			]));
		},
		i: noop,
		o: noop,
		d: function destroy(detaching) {
			if (detaching) detach_dev(svg);
			if (if_block) if_block.d();
		}
	};

	dispatch_dev("SvelteRegisterBlock", {
		block,
		id: create_fragment$X.name,
		type: "component",
		source: "",
		ctx
	});

	return block;
}

function instance$X($$self, $$props, $$invalidate) {
	let labelled;
	let attributes;
	const omit_props_names = ["size","title"];
	let $$restProps = compute_rest_props($$props, omit_props_names);
	let { $$slots: slots = {}, $$scope } = $$props;
	validate_slots('Menu', slots, []);
	let { size = 16 } = $$props;
	let { title = undefined } = $$props;

	$$self.$$set = $$new_props => {
		$$invalidate(5, $$props = assign(assign({}, $$props), exclude_internal_props($$new_props)));
		$$invalidate(3, $$restProps = compute_rest_props($$props, omit_props_names));
		if ('size' in $$new_props) $$invalidate(0, size = $$new_props.size);
		if ('title' in $$new_props) $$invalidate(1, title = $$new_props.title);
	};

	$$self.$capture_state = () => ({ size, title, labelled, attributes });

	$$self.$inject_state = $$new_props => {
		$$invalidate(5, $$props = assign(assign({}, $$props), $$new_props));
		if ('size' in $$props) $$invalidate(0, size = $$new_props.size);
		if ('title' in $$props) $$invalidate(1, title = $$new_props.title);
		if ('labelled' in $$props) $$invalidate(4, labelled = $$new_props.labelled);
		if ('attributes' in $$props) $$invalidate(2, attributes = $$new_props.attributes);
	};

	if ($$props && "$$inject" in $$props) {
		$$self.$inject_state($$props.$$inject);
	}

	$$self.$$.update = () => {
		$$invalidate(4, labelled = $$props["aria-label"] || $$props["aria-labelledby"] || title);

		$$invalidate(2, attributes = {
			"aria-hidden": labelled ? undefined : true,
			role: labelled ? "img" : undefined,
			focusable: Number($$props["tabindex"]) === 0 ? true : undefined
		});
	};

	$$props = exclude_internal_props($$props);
	return [size, title, attributes, $$restProps, labelled];
}

class Menu extends SvelteComponentDev {
	constructor(options) {
		super(options);
		init(this, options, instance$X, create_fragment$X, safe_not_equal, { size: 0, title: 1 });

		dispatch_dev("SvelteRegisterComponent", {
			component: this,
			tagName: "Menu",
			options,
			id: create_fragment$X.name
		});
	}

	get size() {
		throw new Error("<Menu>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
	}

	set size(value) {
		throw new Error("<Menu>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
	}

	get title() {
		throw new Error("<Menu>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
	}

	set title(value) {
		throw new Error("<Menu>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
	}
}

const shouldRenderHamburgerMenu = writable(false);

const isSideNavCollapsed = writable(false);

/* node_modules/carbon-components-svelte/src/UIShell/HamburgerMenu.svelte generated by Svelte v3.49.0 */
const file$W = "node_modules/carbon-components-svelte/src/UIShell/HamburgerMenu.svelte";

function create_fragment$W(ctx) {
	let button;
	let switch_instance;
	let current;
	let mounted;
	let dispose;

	var switch_value = /*isOpen*/ ctx[0]
	? /*iconClose*/ ctx[4]
	: /*iconMenu*/ ctx[3];

	function switch_props(ctx) {
		return { props: { size: 20 }, $$inline: true };
	}

	if (switch_value) {
		switch_instance = new switch_value(switch_props());
	}

	let button_levels = [
		{ type: "button" },
		{ title: /*ariaLabel*/ ctx[2] },
		{ "aria-label": /*ariaLabel*/ ctx[2] },
		/*$$restProps*/ ctx[5]
	];

	let button_data = {};

	for (let i = 0; i < button_levels.length; i += 1) {
		button_data = assign(button_data, button_levels[i]);
	}

	const block = {
		c: function create() {
			button = element("button");
			if (switch_instance) create_component(switch_instance.$$.fragment);
			set_attributes(button, button_data);
			toggle_class(button, "bx--header__action", true);
			toggle_class(button, "bx--header__menu-trigger", true);
			toggle_class(button, "bx--header__menu-toggle", true);
			add_location(button, file$W, 31, 0, 758);
		},
		l: function claim(nodes) {
			throw new Error("options.hydrate only works if the component was compiled with the `hydratable: true` option");
		},
		m: function mount(target, anchor) {
			insert_dev(target, button, anchor);

			if (switch_instance) {
				mount_component(switch_instance, button, null);
			}

			if (button.autofocus) button.focus();
			/*button_binding*/ ctx[7](button);
			current = true;

			if (!mounted) {
				dispose = [
					listen_dev(button, "click", /*click_handler*/ ctx[6], false, false, false),
					listen_dev(button, "click", /*click_handler_1*/ ctx[8], false, false, false)
				];

				mounted = true;
			}
		},
		p: function update(ctx, [dirty]) {
			if (switch_value !== (switch_value = /*isOpen*/ ctx[0]
			? /*iconClose*/ ctx[4]
			: /*iconMenu*/ ctx[3])) {
				if (switch_instance) {
					group_outros();
					const old_component = switch_instance;

					transition_out(old_component.$$.fragment, 1, 0, () => {
						destroy_component(old_component, 1);
					});

					check_outros();
				}

				if (switch_value) {
					switch_instance = new switch_value(switch_props());
					create_component(switch_instance.$$.fragment);
					transition_in(switch_instance.$$.fragment, 1);
					mount_component(switch_instance, button, null);
				} else {
					switch_instance = null;
				}
			}

			set_attributes(button, button_data = get_spread_update(button_levels, [
				{ type: "button" },
				(!current || dirty & /*ariaLabel*/ 4) && { title: /*ariaLabel*/ ctx[2] },
				(!current || dirty & /*ariaLabel*/ 4) && { "aria-label": /*ariaLabel*/ ctx[2] },
				dirty & /*$$restProps*/ 32 && /*$$restProps*/ ctx[5]
			]));

			toggle_class(button, "bx--header__action", true);
			toggle_class(button, "bx--header__menu-trigger", true);
			toggle_class(button, "bx--header__menu-toggle", true);
		},
		i: function intro(local) {
			if (current) return;
			if (switch_instance) transition_in(switch_instance.$$.fragment, local);
			current = true;
		},
		o: function outro(local) {
			if (switch_instance) transition_out(switch_instance.$$.fragment, local);
			current = false;
		},
		d: function destroy(detaching) {
			if (detaching) detach_dev(button);
			if (switch_instance) destroy_component(switch_instance);
			/*button_binding*/ ctx[7](null);
			mounted = false;
			run_all(dispose);
		}
	};

	dispatch_dev("SvelteRegisterBlock", {
		block,
		id: create_fragment$W.name,
		type: "component",
		source: "",
		ctx
	});

	return block;
}

function instance$W($$self, $$props, $$invalidate) {
	const omit_props_names = ["ariaLabel","isOpen","iconMenu","iconClose","ref"];
	let $$restProps = compute_rest_props($$props, omit_props_names);
	let { $$slots: slots = {}, $$scope } = $$props;
	validate_slots('HamburgerMenu', slots, []);
	let { ariaLabel = undefined } = $$props;
	let { isOpen = false } = $$props;
	let { iconMenu = Menu } = $$props;
	let { iconClose = Close } = $$props;
	let { ref = null } = $$props;

	function click_handler(event) {
		bubble.call(this, $$self, event);
	}

	function button_binding($$value) {
		binding_callbacks[$$value ? 'unshift' : 'push'](() => {
			ref = $$value;
			$$invalidate(1, ref);
		});
	}

	const click_handler_1 = () => $$invalidate(0, isOpen = !isOpen);

	$$self.$$set = $$new_props => {
		$$props = assign(assign({}, $$props), exclude_internal_props($$new_props));
		$$invalidate(5, $$restProps = compute_rest_props($$props, omit_props_names));
		if ('ariaLabel' in $$new_props) $$invalidate(2, ariaLabel = $$new_props.ariaLabel);
		if ('isOpen' in $$new_props) $$invalidate(0, isOpen = $$new_props.isOpen);
		if ('iconMenu' in $$new_props) $$invalidate(3, iconMenu = $$new_props.iconMenu);
		if ('iconClose' in $$new_props) $$invalidate(4, iconClose = $$new_props.iconClose);
		if ('ref' in $$new_props) $$invalidate(1, ref = $$new_props.ref);
	};

	$$self.$capture_state = () => ({
		ariaLabel,
		isOpen,
		iconMenu,
		iconClose,
		ref,
		Close,
		Menu
	});

	$$self.$inject_state = $$new_props => {
		if ('ariaLabel' in $$props) $$invalidate(2, ariaLabel = $$new_props.ariaLabel);
		if ('isOpen' in $$props) $$invalidate(0, isOpen = $$new_props.isOpen);
		if ('iconMenu' in $$props) $$invalidate(3, iconMenu = $$new_props.iconMenu);
		if ('iconClose' in $$props) $$invalidate(4, iconClose = $$new_props.iconClose);
		if ('ref' in $$props) $$invalidate(1, ref = $$new_props.ref);
	};

	if ($$props && "$$inject" in $$props) {
		$$self.$inject_state($$props.$$inject);
	}

	return [
		isOpen,
		ref,
		ariaLabel,
		iconMenu,
		iconClose,
		$$restProps,
		click_handler,
		button_binding,
		click_handler_1
	];
}

class HamburgerMenu extends SvelteComponentDev {
	constructor(options) {
		super(options);

		init(this, options, instance$W, create_fragment$W, safe_not_equal, {
			ariaLabel: 2,
			isOpen: 0,
			iconMenu: 3,
			iconClose: 4,
			ref: 1
		});

		dispatch_dev("SvelteRegisterComponent", {
			component: this,
			tagName: "HamburgerMenu",
			options,
			id: create_fragment$W.name
		});
	}

	get ariaLabel() {
		throw new Error("<HamburgerMenu>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
	}

	set ariaLabel(value) {
		throw new Error("<HamburgerMenu>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
	}

	get isOpen() {
		throw new Error("<HamburgerMenu>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
	}

	set isOpen(value) {
		throw new Error("<HamburgerMenu>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
	}

	get iconMenu() {
		throw new Error("<HamburgerMenu>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
	}

	set iconMenu(value) {
		throw new Error("<HamburgerMenu>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
	}

	get iconClose() {
		throw new Error("<HamburgerMenu>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
	}

	set iconClose(value) {
		throw new Error("<HamburgerMenu>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
	}

	get ref() {
		throw new Error("<HamburgerMenu>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
	}

	set ref(value) {
		throw new Error("<HamburgerMenu>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
	}
}

/* node_modules/carbon-components-svelte/src/UIShell/Header.svelte generated by Svelte v3.49.0 */
const file$V = "node_modules/carbon-components-svelte/src/UIShell/Header.svelte";
const get_platform_slot_changes = dirty => ({});
const get_platform_slot_context = ctx => ({});
const get_skip_to_content_slot_changes = dirty => ({});
const get_skip_to_content_slot_context = ctx => ({});

// (83:2) {#if ($shouldRenderHamburgerMenu && winWidth < expansionBreakpoint) || persistentHamburgerMenu}
function create_if_block_1$3(ctx) {
	let hamburgermenu;
	let updating_isOpen;
	let current;

	function hamburgermenu_isOpen_binding(value) {
		/*hamburgermenu_isOpen_binding*/ ctx[19](value);
	}

	let hamburgermenu_props = {
		iconClose: /*iconClose*/ ctx[8],
		iconMenu: /*iconMenu*/ ctx[7]
	};

	if (/*isSideNavOpen*/ ctx[0] !== void 0) {
		hamburgermenu_props.isOpen = /*isSideNavOpen*/ ctx[0];
	}

	hamburgermenu = new HamburgerMenu({
			props: hamburgermenu_props,
			$$inline: true
		});

	binding_callbacks.push(() => bind(hamburgermenu, 'isOpen', hamburgermenu_isOpen_binding));

	const block = {
		c: function create() {
			create_component(hamburgermenu.$$.fragment);
		},
		m: function mount(target, anchor) {
			mount_component(hamburgermenu, target, anchor);
			current = true;
		},
		p: function update(ctx, dirty) {
			const hamburgermenu_changes = {};
			if (dirty & /*iconClose*/ 256) hamburgermenu_changes.iconClose = /*iconClose*/ ctx[8];
			if (dirty & /*iconMenu*/ 128) hamburgermenu_changes.iconMenu = /*iconMenu*/ ctx[7];

			if (!updating_isOpen && dirty & /*isSideNavOpen*/ 1) {
				updating_isOpen = true;
				hamburgermenu_changes.isOpen = /*isSideNavOpen*/ ctx[0];
				add_flush_callback(() => updating_isOpen = false);
			}

			hamburgermenu.$set(hamburgermenu_changes);
		},
		i: function intro(local) {
			if (current) return;
			transition_in(hamburgermenu.$$.fragment, local);
			current = true;
		},
		o: function outro(local) {
			transition_out(hamburgermenu.$$.fragment, local);
			current = false;
		},
		d: function destroy(detaching) {
			destroy_component(hamburgermenu, detaching);
		}
	};

	dispatch_dev("SvelteRegisterBlock", {
		block,
		id: create_if_block_1$3.name,
		type: "if",
		source: "(83:2) {#if ($shouldRenderHamburgerMenu && winWidth < expansionBreakpoint) || persistentHamburgerMenu}",
		ctx
	});

	return block;
}

// (97:4) {#if company}
function create_if_block$N(ctx) {
	let span;
	let t0;
	let t1;

	const block = {
		c: function create() {
			span = element("span");
			t0 = text(/*company*/ ctx[3]);
			t1 = text(" ");
			toggle_class(span, "bx--header__name--prefix", true);
			add_location(span, file$V, 97, 6, 2527);
		},
		m: function mount(target, anchor) {
			insert_dev(target, span, anchor);
			append_dev(span, t0);
			append_dev(span, t1);
		},
		p: function update(ctx, dirty) {
			if (dirty & /*company*/ 8) set_data_dev(t0, /*company*/ ctx[3]);
		},
		d: function destroy(detaching) {
			if (detaching) detach_dev(span);
		}
	};

	dispatch_dev("SvelteRegisterBlock", {
		block,
		id: create_if_block$N.name,
		type: "if",
		source: "(97:4) {#if company}",
		ctx
	});

	return block;
}

// (100:26) {platformName}
function fallback_block$2(ctx) {
	let t;

	const block = {
		c: function create() {
			t = text(/*platformName*/ ctx[4]);
		},
		m: function mount(target, anchor) {
			insert_dev(target, t, anchor);
		},
		p: function update(ctx, dirty) {
			if (dirty & /*platformName*/ 16) set_data_dev(t, /*platformName*/ ctx[4]);
		},
		d: function destroy(detaching) {
			if (detaching) detach_dev(t);
		}
	};

	dispatch_dev("SvelteRegisterBlock", {
		block,
		id: fallback_block$2.name,
		type: "fallback",
		source: "(100:26) {platformName}",
		ctx
	});

	return block;
}

function create_fragment$V(ctx) {
	let header;
	let t0;
	let t1;
	let a;
	let t2;
	let t3;
	let current;
	let mounted;
	let dispose;
	add_render_callback(/*onwindowresize*/ ctx[18]);
	const skip_to_content_slot_template = /*#slots*/ ctx[16]["skip-to-content"];
	const skip_to_content_slot = create_slot(skip_to_content_slot_template, ctx, /*$$scope*/ ctx[15], get_skip_to_content_slot_context);
	let if_block0 = (/*$shouldRenderHamburgerMenu*/ ctx[11] && /*winWidth*/ ctx[9] < /*expansionBreakpoint*/ ctx[6] || /*persistentHamburgerMenu*/ ctx[5]) && create_if_block_1$3(ctx);
	let if_block1 = /*company*/ ctx[3] && create_if_block$N(ctx);
	const platform_slot_template = /*#slots*/ ctx[16].platform;
	const platform_slot = create_slot(platform_slot_template, ctx, /*$$scope*/ ctx[15], get_platform_slot_context);
	const platform_slot_or_fallback = platform_slot || fallback_block$2(ctx);
	let a_levels = [{ href: /*href*/ ctx[2] }, /*$$restProps*/ ctx[12]];
	let a_data = {};

	for (let i = 0; i < a_levels.length; i += 1) {
		a_data = assign(a_data, a_levels[i]);
	}

	const default_slot_template = /*#slots*/ ctx[16].default;
	const default_slot = create_slot(default_slot_template, ctx, /*$$scope*/ ctx[15], null);

	const block = {
		c: function create() {
			header = element("header");
			if (skip_to_content_slot) skip_to_content_slot.c();
			t0 = space();
			if (if_block0) if_block0.c();
			t1 = space();
			a = element("a");
			if (if_block1) if_block1.c();
			t2 = space();
			if (platform_slot_or_fallback) platform_slot_or_fallback.c();
			t3 = space();
			if (default_slot) default_slot.c();
			set_attributes(a, a_data);
			toggle_class(a, "bx--header__name", true);
			add_location(a, file$V, 89, 2, 2386);
			attr_dev(header, "aria-label", /*ariaLabel*/ ctx[10]);
			toggle_class(header, "bx--header", true);
			add_location(header, file$V, 80, 0, 2064);
		},
		l: function claim(nodes) {
			throw new Error("options.hydrate only works if the component was compiled with the `hydratable: true` option");
		},
		m: function mount(target, anchor) {
			insert_dev(target, header, anchor);

			if (skip_to_content_slot) {
				skip_to_content_slot.m(header, null);
			}

			append_dev(header, t0);
			if (if_block0) if_block0.m(header, null);
			append_dev(header, t1);
			append_dev(header, a);
			if (if_block1) if_block1.m(a, null);
			append_dev(a, t2);

			if (platform_slot_or_fallback) {
				platform_slot_or_fallback.m(a, null);
			}

			/*a_binding*/ ctx[20](a);
			append_dev(header, t3);

			if (default_slot) {
				default_slot.m(header, null);
			}

			current = true;

			if (!mounted) {
				dispose = [
					listen_dev(window, "resize", /*onwindowresize*/ ctx[18]),
					listen_dev(a, "click", /*click_handler*/ ctx[17], false, false, false)
				];

				mounted = true;
			}
		},
		p: function update(ctx, [dirty]) {
			if (skip_to_content_slot) {
				if (skip_to_content_slot.p && (!current || dirty & /*$$scope*/ 32768)) {
					update_slot_base(
						skip_to_content_slot,
						skip_to_content_slot_template,
						ctx,
						/*$$scope*/ ctx[15],
						!current
						? get_all_dirty_from_scope(/*$$scope*/ ctx[15])
						: get_slot_changes(skip_to_content_slot_template, /*$$scope*/ ctx[15], dirty, get_skip_to_content_slot_changes),
						get_skip_to_content_slot_context
					);
				}
			}

			if (/*$shouldRenderHamburgerMenu*/ ctx[11] && /*winWidth*/ ctx[9] < /*expansionBreakpoint*/ ctx[6] || /*persistentHamburgerMenu*/ ctx[5]) {
				if (if_block0) {
					if_block0.p(ctx, dirty);

					if (dirty & /*$shouldRenderHamburgerMenu, winWidth, expansionBreakpoint, persistentHamburgerMenu*/ 2656) {
						transition_in(if_block0, 1);
					}
				} else {
					if_block0 = create_if_block_1$3(ctx);
					if_block0.c();
					transition_in(if_block0, 1);
					if_block0.m(header, t1);
				}
			} else if (if_block0) {
				group_outros();

				transition_out(if_block0, 1, 1, () => {
					if_block0 = null;
				});

				check_outros();
			}

			if (/*company*/ ctx[3]) {
				if (if_block1) {
					if_block1.p(ctx, dirty);
				} else {
					if_block1 = create_if_block$N(ctx);
					if_block1.c();
					if_block1.m(a, t2);
				}
			} else if (if_block1) {
				if_block1.d(1);
				if_block1 = null;
			}

			if (platform_slot) {
				if (platform_slot.p && (!current || dirty & /*$$scope*/ 32768)) {
					update_slot_base(
						platform_slot,
						platform_slot_template,
						ctx,
						/*$$scope*/ ctx[15],
						!current
						? get_all_dirty_from_scope(/*$$scope*/ ctx[15])
						: get_slot_changes(platform_slot_template, /*$$scope*/ ctx[15], dirty, get_platform_slot_changes),
						get_platform_slot_context
					);
				}
			} else {
				if (platform_slot_or_fallback && platform_slot_or_fallback.p && (!current || dirty & /*platformName*/ 16)) {
					platform_slot_or_fallback.p(ctx, !current ? -1 : dirty);
				}
			}

			set_attributes(a, a_data = get_spread_update(a_levels, [
				(!current || dirty & /*href*/ 4) && { href: /*href*/ ctx[2] },
				dirty & /*$$restProps*/ 4096 && /*$$restProps*/ ctx[12]
			]));

			toggle_class(a, "bx--header__name", true);

			if (default_slot) {
				if (default_slot.p && (!current || dirty & /*$$scope*/ 32768)) {
					update_slot_base(
						default_slot,
						default_slot_template,
						ctx,
						/*$$scope*/ ctx[15],
						!current
						? get_all_dirty_from_scope(/*$$scope*/ ctx[15])
						: get_slot_changes(default_slot_template, /*$$scope*/ ctx[15], dirty, null),
						null
					);
				}
			}

			if (!current || dirty & /*ariaLabel*/ 1024) {
				attr_dev(header, "aria-label", /*ariaLabel*/ ctx[10]);
			}
		},
		i: function intro(local) {
			if (current) return;
			transition_in(skip_to_content_slot, local);
			transition_in(if_block0);
			transition_in(platform_slot_or_fallback, local);
			transition_in(default_slot, local);
			current = true;
		},
		o: function outro(local) {
			transition_out(skip_to_content_slot, local);
			transition_out(if_block0);
			transition_out(platform_slot_or_fallback, local);
			transition_out(default_slot, local);
			current = false;
		},
		d: function destroy(detaching) {
			if (detaching) detach_dev(header);
			if (skip_to_content_slot) skip_to_content_slot.d(detaching);
			if (if_block0) if_block0.d();
			if (if_block1) if_block1.d();
			if (platform_slot_or_fallback) platform_slot_or_fallback.d(detaching);
			/*a_binding*/ ctx[20](null);
			if (default_slot) default_slot.d(detaching);
			mounted = false;
			run_all(dispose);
		}
	};

	dispatch_dev("SvelteRegisterBlock", {
		block,
		id: create_fragment$V.name,
		type: "component",
		source: "",
		ctx
	});

	return block;
}

function instance$V($$self, $$props, $$invalidate) {
	let ariaLabel;

	const omit_props_names = [
		"expandedByDefault","isSideNavOpen","uiShellAriaLabel","href","company","platformName","persistentHamburgerMenu","expansionBreakpoint","ref","iconMenu","iconClose"
	];

	let $$restProps = compute_rest_props($$props, omit_props_names);
	let $shouldRenderHamburgerMenu;
	validate_store(shouldRenderHamburgerMenu, 'shouldRenderHamburgerMenu');
	component_subscribe($$self, shouldRenderHamburgerMenu, $$value => $$invalidate(11, $shouldRenderHamburgerMenu = $$value));
	let { $$slots: slots = {}, $$scope } = $$props;
	validate_slots('Header', slots, ['skip-to-content','platform','default']);
	let { expandedByDefault = true } = $$props;
	let { isSideNavOpen = false } = $$props;
	let { uiShellAriaLabel = undefined } = $$props;
	let { href = undefined } = $$props;
	let { company = undefined } = $$props;
	let { platformName = "" } = $$props;
	let { persistentHamburgerMenu = false } = $$props;
	let { expansionBreakpoint = 1056 } = $$props;
	let { ref = null } = $$props;
	let { iconMenu = Menu } = $$props;
	let { iconClose = Close } = $$props;
	let winWidth = undefined;

	function click_handler(event) {
		bubble.call(this, $$self, event);
	}

	function onwindowresize() {
		$$invalidate(9, winWidth = window.innerWidth);
	}

	function hamburgermenu_isOpen_binding(value) {
		isSideNavOpen = value;
		(((($$invalidate(0, isSideNavOpen), $$invalidate(13, expandedByDefault)), $$invalidate(9, winWidth)), $$invalidate(6, expansionBreakpoint)), $$invalidate(5, persistentHamburgerMenu));
	}

	function a_binding($$value) {
		binding_callbacks[$$value ? 'unshift' : 'push'](() => {
			ref = $$value;
			$$invalidate(1, ref);
		});
	}

	$$self.$$set = $$new_props => {
		$$invalidate(21, $$props = assign(assign({}, $$props), exclude_internal_props($$new_props)));
		$$invalidate(12, $$restProps = compute_rest_props($$props, omit_props_names));
		if ('expandedByDefault' in $$new_props) $$invalidate(13, expandedByDefault = $$new_props.expandedByDefault);
		if ('isSideNavOpen' in $$new_props) $$invalidate(0, isSideNavOpen = $$new_props.isSideNavOpen);
		if ('uiShellAriaLabel' in $$new_props) $$invalidate(14, uiShellAriaLabel = $$new_props.uiShellAriaLabel);
		if ('href' in $$new_props) $$invalidate(2, href = $$new_props.href);
		if ('company' in $$new_props) $$invalidate(3, company = $$new_props.company);
		if ('platformName' in $$new_props) $$invalidate(4, platformName = $$new_props.platformName);
		if ('persistentHamburgerMenu' in $$new_props) $$invalidate(5, persistentHamburgerMenu = $$new_props.persistentHamburgerMenu);
		if ('expansionBreakpoint' in $$new_props) $$invalidate(6, expansionBreakpoint = $$new_props.expansionBreakpoint);
		if ('ref' in $$new_props) $$invalidate(1, ref = $$new_props.ref);
		if ('iconMenu' in $$new_props) $$invalidate(7, iconMenu = $$new_props.iconMenu);
		if ('iconClose' in $$new_props) $$invalidate(8, iconClose = $$new_props.iconClose);
		if ('$$scope' in $$new_props) $$invalidate(15, $$scope = $$new_props.$$scope);
	};

	$$self.$capture_state = () => ({
		expandedByDefault,
		isSideNavOpen,
		uiShellAriaLabel,
		href,
		company,
		platformName,
		persistentHamburgerMenu,
		expansionBreakpoint,
		ref,
		iconMenu,
		iconClose,
		Close,
		Menu,
		shouldRenderHamburgerMenu,
		HamburgerMenu,
		winWidth,
		ariaLabel,
		$shouldRenderHamburgerMenu
	});

	$$self.$inject_state = $$new_props => {
		$$invalidate(21, $$props = assign(assign({}, $$props), $$new_props));
		if ('expandedByDefault' in $$props) $$invalidate(13, expandedByDefault = $$new_props.expandedByDefault);
		if ('isSideNavOpen' in $$props) $$invalidate(0, isSideNavOpen = $$new_props.isSideNavOpen);
		if ('uiShellAriaLabel' in $$props) $$invalidate(14, uiShellAriaLabel = $$new_props.uiShellAriaLabel);
		if ('href' in $$props) $$invalidate(2, href = $$new_props.href);
		if ('company' in $$props) $$invalidate(3, company = $$new_props.company);
		if ('platformName' in $$props) $$invalidate(4, platformName = $$new_props.platformName);
		if ('persistentHamburgerMenu' in $$props) $$invalidate(5, persistentHamburgerMenu = $$new_props.persistentHamburgerMenu);
		if ('expansionBreakpoint' in $$props) $$invalidate(6, expansionBreakpoint = $$new_props.expansionBreakpoint);
		if ('ref' in $$props) $$invalidate(1, ref = $$new_props.ref);
		if ('iconMenu' in $$props) $$invalidate(7, iconMenu = $$new_props.iconMenu);
		if ('iconClose' in $$props) $$invalidate(8, iconClose = $$new_props.iconClose);
		if ('winWidth' in $$props) $$invalidate(9, winWidth = $$new_props.winWidth);
		if ('ariaLabel' in $$props) $$invalidate(10, ariaLabel = $$new_props.ariaLabel);
	};

	if ($$props && "$$inject" in $$props) {
		$$self.$inject_state($$props.$$inject);
	}

	$$self.$$.update = () => {
		if ($$self.$$.dirty & /*expandedByDefault, winWidth, expansionBreakpoint, persistentHamburgerMenu*/ 8800) {
			$$invalidate(0, isSideNavOpen = expandedByDefault && winWidth >= expansionBreakpoint && !persistentHamburgerMenu);
		}

		$$invalidate(10, ariaLabel = company
		? `${company} `
		: "" + (uiShellAriaLabel || $$props["aria-label"] || platformName));
	};

	$$props = exclude_internal_props($$props);

	return [
		isSideNavOpen,
		ref,
		href,
		company,
		platformName,
		persistentHamburgerMenu,
		expansionBreakpoint,
		iconMenu,
		iconClose,
		winWidth,
		ariaLabel,
		$shouldRenderHamburgerMenu,
		$$restProps,
		expandedByDefault,
		uiShellAriaLabel,
		$$scope,
		slots,
		click_handler,
		onwindowresize,
		hamburgermenu_isOpen_binding,
		a_binding
	];
}

class Header extends SvelteComponentDev {
	constructor(options) {
		super(options);

		init(this, options, instance$V, create_fragment$V, safe_not_equal, {
			expandedByDefault: 13,
			isSideNavOpen: 0,
			uiShellAriaLabel: 14,
			href: 2,
			company: 3,
			platformName: 4,
			persistentHamburgerMenu: 5,
			expansionBreakpoint: 6,
			ref: 1,
			iconMenu: 7,
			iconClose: 8
		});

		dispatch_dev("SvelteRegisterComponent", {
			component: this,
			tagName: "Header",
			options,
			id: create_fragment$V.name
		});
	}

	get expandedByDefault() {
		throw new Error("<Header>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
	}

	set expandedByDefault(value) {
		throw new Error("<Header>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
	}

	get isSideNavOpen() {
		throw new Error("<Header>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
	}

	set isSideNavOpen(value) {
		throw new Error("<Header>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
	}

	get uiShellAriaLabel() {
		throw new Error("<Header>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
	}

	set uiShellAriaLabel(value) {
		throw new Error("<Header>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
	}

	get href() {
		throw new Error("<Header>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
	}

	set href(value) {
		throw new Error("<Header>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
	}

	get company() {
		throw new Error("<Header>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
	}

	set company(value) {
		throw new Error("<Header>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
	}

	get platformName() {
		throw new Error("<Header>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
	}

	set platformName(value) {
		throw new Error("<Header>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
	}

	get persistentHamburgerMenu() {
		throw new Error("<Header>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
	}

	set persistentHamburgerMenu(value) {
		throw new Error("<Header>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
	}

	get expansionBreakpoint() {
		throw new Error("<Header>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
	}

	set expansionBreakpoint(value) {
		throw new Error("<Header>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
	}

	get ref() {
		throw new Error("<Header>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
	}

	set ref(value) {
		throw new Error("<Header>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
	}

	get iconMenu() {
		throw new Error("<Header>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
	}

	set iconMenu(value) {
		throw new Error("<Header>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
	}

	get iconClose() {
		throw new Error("<Header>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
	}

	set iconClose(value) {
		throw new Error("<Header>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
	}
}

/* node_modules/carbon-components-svelte/src/UIShell/HeaderUtilities.svelte generated by Svelte v3.49.0 */

const file$U = "node_modules/carbon-components-svelte/src/UIShell/HeaderUtilities.svelte";

function create_fragment$U(ctx) {
	let div;
	let current;
	const default_slot_template = /*#slots*/ ctx[1].default;
	const default_slot = create_slot(default_slot_template, ctx, /*$$scope*/ ctx[0], null);

	const block = {
		c: function create() {
			div = element("div");
			if (default_slot) default_slot.c();
			toggle_class(div, "bx--header__global", true);
			add_location(div, file$U, 0, 0, 0);
		},
		l: function claim(nodes) {
			throw new Error("options.hydrate only works if the component was compiled with the `hydratable: true` option");
		},
		m: function mount(target, anchor) {
			insert_dev(target, div, anchor);

			if (default_slot) {
				default_slot.m(div, null);
			}

			current = true;
		},
		p: function update(ctx, [dirty]) {
			if (default_slot) {
				if (default_slot.p && (!current || dirty & /*$$scope*/ 1)) {
					update_slot_base(
						default_slot,
						default_slot_template,
						ctx,
						/*$$scope*/ ctx[0],
						!current
						? get_all_dirty_from_scope(/*$$scope*/ ctx[0])
						: get_slot_changes(default_slot_template, /*$$scope*/ ctx[0], dirty, null),
						null
					);
				}
			}
		},
		i: function intro(local) {
			if (current) return;
			transition_in(default_slot, local);
			current = true;
		},
		o: function outro(local) {
			transition_out(default_slot, local);
			current = false;
		},
		d: function destroy(detaching) {
			if (detaching) detach_dev(div);
			if (default_slot) default_slot.d(detaching);
		}
	};

	dispatch_dev("SvelteRegisterBlock", {
		block,
		id: create_fragment$U.name,
		type: "component",
		source: "",
		ctx
	});

	return block;
}

function instance$U($$self, $$props, $$invalidate) {
	let { $$slots: slots = {}, $$scope } = $$props;
	validate_slots('HeaderUtilities', slots, ['default']);
	const writable_props = [];

	Object.keys($$props).forEach(key => {
		if (!~writable_props.indexOf(key) && key.slice(0, 2) !== '$$' && key !== 'slot') console.warn(`<HeaderUtilities> was created with unknown prop '${key}'`);
	});

	$$self.$$set = $$props => {
		if ('$$scope' in $$props) $$invalidate(0, $$scope = $$props.$$scope);
	};

	return [$$scope, slots];
}

class HeaderUtilities extends SvelteComponentDev {
	constructor(options) {
		super(options);
		init(this, options, instance$U, create_fragment$U, safe_not_equal, {});

		dispatch_dev("SvelteRegisterComponent", {
			component: this,
			tagName: "HeaderUtilities",
			options,
			id: create_fragment$U.name
		});
	}
}

/* node_modules/carbon-components-svelte/src/UIShell/Content.svelte generated by Svelte v3.49.0 */
const file$T = "node_modules/carbon-components-svelte/src/UIShell/Content.svelte";

function create_fragment$T(ctx) {
	let main;
	let main_style_value;
	let current;
	const default_slot_template = /*#slots*/ ctx[4].default;
	const default_slot = create_slot(default_slot_template, ctx, /*$$scope*/ ctx[3], null);

	let main_levels = [
		{ id: /*id*/ ctx[0] },
		/*$$restProps*/ ctx[2],
		{
			style: main_style_value = "" + ((/*$isSideNavCollapsed*/ ctx[1] && 'margin-left: 0;') + " " + /*$$restProps*/ ctx[2].style + "}")
		}
	];

	let main_data = {};

	for (let i = 0; i < main_levels.length; i += 1) {
		main_data = assign(main_data, main_levels[i]);
	}

	const block = {
		c: function create() {
			main = element("main");
			if (default_slot) default_slot.c();
			set_attributes(main, main_data);
			toggle_class(main, "bx--content", true);
			add_location(main, file$T, 7, 0, 151);
		},
		l: function claim(nodes) {
			throw new Error("options.hydrate only works if the component was compiled with the `hydratable: true` option");
		},
		m: function mount(target, anchor) {
			insert_dev(target, main, anchor);

			if (default_slot) {
				default_slot.m(main, null);
			}

			current = true;
		},
		p: function update(ctx, [dirty]) {
			if (default_slot) {
				if (default_slot.p && (!current || dirty & /*$$scope*/ 8)) {
					update_slot_base(
						default_slot,
						default_slot_template,
						ctx,
						/*$$scope*/ ctx[3],
						!current
						? get_all_dirty_from_scope(/*$$scope*/ ctx[3])
						: get_slot_changes(default_slot_template, /*$$scope*/ ctx[3], dirty, null),
						null
					);
				}
			}

			set_attributes(main, main_data = get_spread_update(main_levels, [
				(!current || dirty & /*id*/ 1) && { id: /*id*/ ctx[0] },
				dirty & /*$$restProps*/ 4 && /*$$restProps*/ ctx[2],
				(!current || dirty & /*$isSideNavCollapsed, $$restProps*/ 6 && main_style_value !== (main_style_value = "" + ((/*$isSideNavCollapsed*/ ctx[1] && 'margin-left: 0;') + " " + /*$$restProps*/ ctx[2].style + "}"))) && { style: main_style_value }
			]));

			toggle_class(main, "bx--content", true);
		},
		i: function intro(local) {
			if (current) return;
			transition_in(default_slot, local);
			current = true;
		},
		o: function outro(local) {
			transition_out(default_slot, local);
			current = false;
		},
		d: function destroy(detaching) {
			if (detaching) detach_dev(main);
			if (default_slot) default_slot.d(detaching);
		}
	};

	dispatch_dev("SvelteRegisterBlock", {
		block,
		id: create_fragment$T.name,
		type: "component",
		source: "",
		ctx
	});

	return block;
}

function instance$T($$self, $$props, $$invalidate) {
	const omit_props_names = ["id"];
	let $$restProps = compute_rest_props($$props, omit_props_names);
	let $isSideNavCollapsed;
	validate_store(isSideNavCollapsed, 'isSideNavCollapsed');
	component_subscribe($$self, isSideNavCollapsed, $$value => $$invalidate(1, $isSideNavCollapsed = $$value));
	let { $$slots: slots = {}, $$scope } = $$props;
	validate_slots('Content', slots, ['default']);
	let { id = "main-content" } = $$props;

	$$self.$$set = $$new_props => {
		$$props = assign(assign({}, $$props), exclude_internal_props($$new_props));
		$$invalidate(2, $$restProps = compute_rest_props($$props, omit_props_names));
		if ('id' in $$new_props) $$invalidate(0, id = $$new_props.id);
		if ('$$scope' in $$new_props) $$invalidate(3, $$scope = $$new_props.$$scope);
	};

	$$self.$capture_state = () => ({
		id,
		isSideNavCollapsed,
		$isSideNavCollapsed
	});

	$$self.$inject_state = $$new_props => {
		if ('id' in $$props) $$invalidate(0, id = $$new_props.id);
	};

	if ($$props && "$$inject" in $$props) {
		$$self.$inject_state($$props.$$inject);
	}

	return [id, $isSideNavCollapsed, $$restProps, $$scope, slots];
}

class Content extends SvelteComponentDev {
	constructor(options) {
		super(options);
		init(this, options, instance$T, create_fragment$T, safe_not_equal, { id: 0 });

		dispatch_dev("SvelteRegisterComponent", {
			component: this,
			tagName: "Content",
			options,
			id: create_fragment$T.name
		});
	}

	get id() {
		throw new Error("<Content>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
	}

	set id(value) {
		throw new Error("<Content>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
	}
}

/* node_modules/carbon-components-svelte/src/UIShell/SkipToContent.svelte generated by Svelte v3.49.0 */

const file$S = "node_modules/carbon-components-svelte/src/UIShell/SkipToContent.svelte";

// (16:8) Skip to main content
function fallback_block$1(ctx) {
	let t;

	const block = {
		c: function create() {
			t = text("Skip to main content");
		},
		m: function mount(target, anchor) {
			insert_dev(target, t, anchor);
		},
		d: function destroy(detaching) {
			if (detaching) detach_dev(t);
		}
	};

	dispatch_dev("SvelteRegisterBlock", {
		block,
		id: fallback_block$1.name,
		type: "fallback",
		source: "(16:8) Skip to main content",
		ctx
	});

	return block;
}

function create_fragment$S(ctx) {
	let a;
	let current;
	let mounted;
	let dispose;
	const default_slot_template = /*#slots*/ ctx[4].default;
	const default_slot = create_slot(default_slot_template, ctx, /*$$scope*/ ctx[3], null);
	const default_slot_or_fallback = default_slot || fallback_block$1(ctx);

	let a_levels = [
		{ href: /*href*/ ctx[0] },
		{ tabindex: /*tabindex*/ ctx[1] },
		/*$$restProps*/ ctx[2]
	];

	let a_data = {};

	for (let i = 0; i < a_levels.length; i += 1) {
		a_data = assign(a_data, a_levels[i]);
	}

	const block = {
		c: function create() {
			a = element("a");
			if (default_slot_or_fallback) default_slot_or_fallback.c();
			set_attributes(a, a_data);
			toggle_class(a, "bx--skip-to-content", true);
			add_location(a, file$S, 8, 0, 155);
		},
		l: function claim(nodes) {
			throw new Error("options.hydrate only works if the component was compiled with the `hydratable: true` option");
		},
		m: function mount(target, anchor) {
			insert_dev(target, a, anchor);

			if (default_slot_or_fallback) {
				default_slot_or_fallback.m(a, null);
			}

			current = true;

			if (!mounted) {
				dispose = listen_dev(a, "click", /*click_handler*/ ctx[5], false, false, false);
				mounted = true;
			}
		},
		p: function update(ctx, [dirty]) {
			if (default_slot) {
				if (default_slot.p && (!current || dirty & /*$$scope*/ 8)) {
					update_slot_base(
						default_slot,
						default_slot_template,
						ctx,
						/*$$scope*/ ctx[3],
						!current
						? get_all_dirty_from_scope(/*$$scope*/ ctx[3])
						: get_slot_changes(default_slot_template, /*$$scope*/ ctx[3], dirty, null),
						null
					);
				}
			}

			set_attributes(a, a_data = get_spread_update(a_levels, [
				(!current || dirty & /*href*/ 1) && { href: /*href*/ ctx[0] },
				(!current || dirty & /*tabindex*/ 2) && { tabindex: /*tabindex*/ ctx[1] },
				dirty & /*$$restProps*/ 4 && /*$$restProps*/ ctx[2]
			]));

			toggle_class(a, "bx--skip-to-content", true);
		},
		i: function intro(local) {
			if (current) return;
			transition_in(default_slot_or_fallback, local);
			current = true;
		},
		o: function outro(local) {
			transition_out(default_slot_or_fallback, local);
			current = false;
		},
		d: function destroy(detaching) {
			if (detaching) detach_dev(a);
			if (default_slot_or_fallback) default_slot_or_fallback.d(detaching);
			mounted = false;
			dispose();
		}
	};

	dispatch_dev("SvelteRegisterBlock", {
		block,
		id: create_fragment$S.name,
		type: "component",
		source: "",
		ctx
	});

	return block;
}

function instance$S($$self, $$props, $$invalidate) {
	const omit_props_names = ["href","tabindex"];
	let $$restProps = compute_rest_props($$props, omit_props_names);
	let { $$slots: slots = {}, $$scope } = $$props;
	validate_slots('SkipToContent', slots, ['default']);
	let { href = "#main-content" } = $$props;
	let { tabindex = "0" } = $$props;

	function click_handler(event) {
		bubble.call(this, $$self, event);
	}

	$$self.$$set = $$new_props => {
		$$props = assign(assign({}, $$props), exclude_internal_props($$new_props));
		$$invalidate(2, $$restProps = compute_rest_props($$props, omit_props_names));
		if ('href' in $$new_props) $$invalidate(0, href = $$new_props.href);
		if ('tabindex' in $$new_props) $$invalidate(1, tabindex = $$new_props.tabindex);
		if ('$$scope' in $$new_props) $$invalidate(3, $$scope = $$new_props.$$scope);
	};

	$$self.$capture_state = () => ({ href, tabindex });

	$$self.$inject_state = $$new_props => {
		if ('href' in $$props) $$invalidate(0, href = $$new_props.href);
		if ('tabindex' in $$props) $$invalidate(1, tabindex = $$new_props.tabindex);
	};

	if ($$props && "$$inject" in $$props) {
		$$self.$inject_state($$props.$$inject);
	}

	return [href, tabindex, $$restProps, $$scope, slots, click_handler];
}

class SkipToContent extends SvelteComponentDev {
	constructor(options) {
		super(options);
		init(this, options, instance$S, create_fragment$S, safe_not_equal, { href: 0, tabindex: 1 });

		dispatch_dev("SvelteRegisterComponent", {
			component: this,
			tagName: "SkipToContent",
			options,
			id: create_fragment$S.name
		});
	}

	get href() {
		throw new Error("<SkipToContent>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
	}

	set href(value) {
		throw new Error("<SkipToContent>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
	}

	get tabindex() {
		throw new Error("<SkipToContent>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
	}

	set tabindex(value) {
		throw new Error("<SkipToContent>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
	}
}

/* node_modules/carbon-components-svelte/src/UIShell/HeaderGlobalAction.svelte generated by Svelte v3.49.0 */

const file$R = "node_modules/carbon-components-svelte/src/UIShell/HeaderGlobalAction.svelte";

// (23:8)      
function fallback_block(ctx) {
	let switch_instance;
	let switch_instance_anchor;
	let current;
	var switch_value = /*icon*/ ctx[2];

	function switch_props(ctx) {
		return { props: { size: 20 }, $$inline: true };
	}

	if (switch_value) {
		switch_instance = new switch_value(switch_props());
	}

	const block = {
		c: function create() {
			if (switch_instance) create_component(switch_instance.$$.fragment);
			switch_instance_anchor = empty();
		},
		m: function mount(target, anchor) {
			if (switch_instance) {
				mount_component(switch_instance, target, anchor);
			}

			insert_dev(target, switch_instance_anchor, anchor);
			current = true;
		},
		p: function update(ctx, dirty) {
			if (switch_value !== (switch_value = /*icon*/ ctx[2])) {
				if (switch_instance) {
					group_outros();
					const old_component = switch_instance;

					transition_out(old_component.$$.fragment, 1, 0, () => {
						destroy_component(old_component, 1);
					});

					check_outros();
				}

				if (switch_value) {
					switch_instance = new switch_value(switch_props());
					create_component(switch_instance.$$.fragment);
					transition_in(switch_instance.$$.fragment, 1);
					mount_component(switch_instance, switch_instance_anchor.parentNode, switch_instance_anchor);
				} else {
					switch_instance = null;
				}
			}
		},
		i: function intro(local) {
			if (current) return;
			if (switch_instance) transition_in(switch_instance.$$.fragment, local);
			current = true;
		},
		o: function outro(local) {
			if (switch_instance) transition_out(switch_instance.$$.fragment, local);
			current = false;
		},
		d: function destroy(detaching) {
			if (detaching) detach_dev(switch_instance_anchor);
			if (switch_instance) destroy_component(switch_instance, detaching);
		}
	};

	dispatch_dev("SvelteRegisterBlock", {
		block,
		id: fallback_block.name,
		type: "fallback",
		source: "(23:8)      ",
		ctx
	});

	return block;
}

function create_fragment$R(ctx) {
	let button;
	let current;
	let mounted;
	let dispose;
	const default_slot_template = /*#slots*/ ctx[5].default;
	const default_slot = create_slot(default_slot_template, ctx, /*$$scope*/ ctx[4], null);
	const default_slot_or_fallback = default_slot || fallback_block(ctx);
	let button_levels = [{ type: "button" }, /*$$restProps*/ ctx[3]];
	let button_data = {};

	for (let i = 0; i < button_levels.length; i += 1) {
		button_data = assign(button_data, button_levels[i]);
	}

	const block = {
		c: function create() {
			button = element("button");
			if (default_slot_or_fallback) default_slot_or_fallback.c();
			set_attributes(button, button_data);
			toggle_class(button, "bx--header__action", true);
			toggle_class(button, "bx--header__action--active", /*isActive*/ ctx[1]);
			add_location(button, file$R, 14, 0, 310);
		},
		l: function claim(nodes) {
			throw new Error("options.hydrate only works if the component was compiled with the `hydratable: true` option");
		},
		m: function mount(target, anchor) {
			insert_dev(target, button, anchor);

			if (default_slot_or_fallback) {
				default_slot_or_fallback.m(button, null);
			}

			if (button.autofocus) button.focus();
			/*button_binding*/ ctx[7](button);
			current = true;

			if (!mounted) {
				dispose = listen_dev(button, "click", /*click_handler*/ ctx[6], false, false, false);
				mounted = true;
			}
		},
		p: function update(ctx, [dirty]) {
			if (default_slot) {
				if (default_slot.p && (!current || dirty & /*$$scope*/ 16)) {
					update_slot_base(
						default_slot,
						default_slot_template,
						ctx,
						/*$$scope*/ ctx[4],
						!current
						? get_all_dirty_from_scope(/*$$scope*/ ctx[4])
						: get_slot_changes(default_slot_template, /*$$scope*/ ctx[4], dirty, null),
						null
					);
				}
			} else {
				if (default_slot_or_fallback && default_slot_or_fallback.p && (!current || dirty & /*icon*/ 4)) {
					default_slot_or_fallback.p(ctx, !current ? -1 : dirty);
				}
			}

			set_attributes(button, button_data = get_spread_update(button_levels, [{ type: "button" }, dirty & /*$$restProps*/ 8 && /*$$restProps*/ ctx[3]]));
			toggle_class(button, "bx--header__action", true);
			toggle_class(button, "bx--header__action--active", /*isActive*/ ctx[1]);
		},
		i: function intro(local) {
			if (current) return;
			transition_in(default_slot_or_fallback, local);
			current = true;
		},
		o: function outro(local) {
			transition_out(default_slot_or_fallback, local);
			current = false;
		},
		d: function destroy(detaching) {
			if (detaching) detach_dev(button);
			if (default_slot_or_fallback) default_slot_or_fallback.d(detaching);
			/*button_binding*/ ctx[7](null);
			mounted = false;
			dispose();
		}
	};

	dispatch_dev("SvelteRegisterBlock", {
		block,
		id: create_fragment$R.name,
		type: "component",
		source: "",
		ctx
	});

	return block;
}

function instance$R($$self, $$props, $$invalidate) {
	const omit_props_names = ["isActive","icon","ref"];
	let $$restProps = compute_rest_props($$props, omit_props_names);
	let { $$slots: slots = {}, $$scope } = $$props;
	validate_slots('HeaderGlobalAction', slots, ['default']);
	let { isActive = false } = $$props;
	let { icon = undefined } = $$props;
	let { ref = null } = $$props;

	function click_handler(event) {
		bubble.call(this, $$self, event);
	}

	function button_binding($$value) {
		binding_callbacks[$$value ? 'unshift' : 'push'](() => {
			ref = $$value;
			$$invalidate(0, ref);
		});
	}

	$$self.$$set = $$new_props => {
		$$props = assign(assign({}, $$props), exclude_internal_props($$new_props));
		$$invalidate(3, $$restProps = compute_rest_props($$props, omit_props_names));
		if ('isActive' in $$new_props) $$invalidate(1, isActive = $$new_props.isActive);
		if ('icon' in $$new_props) $$invalidate(2, icon = $$new_props.icon);
		if ('ref' in $$new_props) $$invalidate(0, ref = $$new_props.ref);
		if ('$$scope' in $$new_props) $$invalidate(4, $$scope = $$new_props.$$scope);
	};

	$$self.$capture_state = () => ({ isActive, icon, ref });

	$$self.$inject_state = $$new_props => {
		if ('isActive' in $$props) $$invalidate(1, isActive = $$new_props.isActive);
		if ('icon' in $$props) $$invalidate(2, icon = $$new_props.icon);
		if ('ref' in $$props) $$invalidate(0, ref = $$new_props.ref);
	};

	if ($$props && "$$inject" in $$props) {
		$$self.$inject_state($$props.$$inject);
	}

	return [
		ref,
		isActive,
		icon,
		$$restProps,
		$$scope,
		slots,
		click_handler,
		button_binding
	];
}

class HeaderGlobalAction extends SvelteComponentDev {
	constructor(options) {
		super(options);
		init(this, options, instance$R, create_fragment$R, safe_not_equal, { isActive: 1, icon: 2, ref: 0 });

		dispatch_dev("SvelteRegisterComponent", {
			component: this,
			tagName: "HeaderGlobalAction",
			options,
			id: create_fragment$R.name
		});
	}

	get isActive() {
		throw new Error("<HeaderGlobalAction>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
	}

	set isActive(value) {
		throw new Error("<HeaderGlobalAction>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
	}

	get icon() {
		throw new Error("<HeaderGlobalAction>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
	}

	set icon(value) {
		throw new Error("<HeaderGlobalAction>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
	}

	get ref() {
		throw new Error("<HeaderGlobalAction>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
	}

	set ref(value) {
		throw new Error("<HeaderGlobalAction>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
	}
}

/* node_modules/carbon-icons-svelte/lib/WatsonHealthStudySkip.svelte generated by Svelte v3.49.0 */

const file$Q = "node_modules/carbon-icons-svelte/lib/WatsonHealthStudySkip.svelte";

// (23:2) {#if title}
function create_if_block$M(ctx) {
	let title_1;
	let t;

	const block = {
		c: function create() {
			title_1 = svg_element("title");
			t = text(/*title*/ ctx[1]);
			add_location(title_1, file$Q, 22, 13, 543);
		},
		m: function mount(target, anchor) {
			insert_dev(target, title_1, anchor);
			append_dev(title_1, t);
		},
		p: function update(ctx, dirty) {
			if (dirty & /*title*/ 2) set_data_dev(t, /*title*/ ctx[1]);
		},
		d: function destroy(detaching) {
			if (detaching) detach_dev(title_1);
		}
	};

	dispatch_dev("SvelteRegisterBlock", {
		block,
		id: create_if_block$M.name,
		type: "if",
		source: "(23:2) {#if title}",
		ctx
	});

	return block;
}

function create_fragment$Q(ctx) {
	let svg;
	let path0;
	let path1;
	let if_block = /*title*/ ctx[1] && create_if_block$M(ctx);

	let svg_levels = [
		{ xmlns: "http://www.w3.org/2000/svg" },
		{ viewBox: "0 0 32 32" },
		{ fill: "currentColor" },
		{ preserveAspectRatio: "xMidYMid meet" },
		{ width: /*size*/ ctx[0] },
		{ height: /*size*/ ctx[0] },
		/*attributes*/ ctx[2],
		/*$$restProps*/ ctx[3]
	];

	let svg_data = {};

	for (let i = 0; i < svg_levels.length; i += 1) {
		svg_data = assign(svg_data, svg_levels[i]);
	}

	const block = {
		c: function create() {
			svg = svg_element("svg");
			if (if_block) if_block.c();
			path0 = svg_element("path");
			path1 = svg_element("path");
			attr_dev(path0, "d", "M22,9h5.2A11,11,0,0,0,7,15H5A13,13,0,0,1,28,6.7V3h2v8H22Z");
			add_location(path0, file$Q, 23, 2, 573);
			attr_dev(path1, "d", "M16 12a3 3 0 11-3 3 2.95 2.95 0 013-3m0-2a5 5 0 105 5A5 5 0 0016 10zM23 30H21V27a3 3 0 00-3-3H14a3 3 0 00-3 3v3H9V27a5 5 0 015-5h4a5 5 0 015 5z");
			add_location(path1, file$Q, 23, 77, 648);
			set_svg_attributes(svg, svg_data);
			add_location(svg, file$Q, 13, 0, 337);
		},
		l: function claim(nodes) {
			throw new Error("options.hydrate only works if the component was compiled with the `hydratable: true` option");
		},
		m: function mount(target, anchor) {
			insert_dev(target, svg, anchor);
			if (if_block) if_block.m(svg, null);
			append_dev(svg, path0);
			append_dev(svg, path1);
		},
		p: function update(ctx, [dirty]) {
			if (/*title*/ ctx[1]) {
				if (if_block) {
					if_block.p(ctx, dirty);
				} else {
					if_block = create_if_block$M(ctx);
					if_block.c();
					if_block.m(svg, path0);
				}
			} else if (if_block) {
				if_block.d(1);
				if_block = null;
			}

			set_svg_attributes(svg, svg_data = get_spread_update(svg_levels, [
				{ xmlns: "http://www.w3.org/2000/svg" },
				{ viewBox: "0 0 32 32" },
				{ fill: "currentColor" },
				{ preserveAspectRatio: "xMidYMid meet" },
				dirty & /*size*/ 1 && { width: /*size*/ ctx[0] },
				dirty & /*size*/ 1 && { height: /*size*/ ctx[0] },
				dirty & /*attributes*/ 4 && /*attributes*/ ctx[2],
				dirty & /*$$restProps*/ 8 && /*$$restProps*/ ctx[3]
			]));
		},
		i: noop,
		o: noop,
		d: function destroy(detaching) {
			if (detaching) detach_dev(svg);
			if (if_block) if_block.d();
		}
	};

	dispatch_dev("SvelteRegisterBlock", {
		block,
		id: create_fragment$Q.name,
		type: "component",
		source: "",
		ctx
	});

	return block;
}

function instance$Q($$self, $$props, $$invalidate) {
	let labelled;
	let attributes;
	const omit_props_names = ["size","title"];
	let $$restProps = compute_rest_props($$props, omit_props_names);
	let { $$slots: slots = {}, $$scope } = $$props;
	validate_slots('WatsonHealthStudySkip', slots, []);
	let { size = 16 } = $$props;
	let { title = undefined } = $$props;

	$$self.$$set = $$new_props => {
		$$invalidate(5, $$props = assign(assign({}, $$props), exclude_internal_props($$new_props)));
		$$invalidate(3, $$restProps = compute_rest_props($$props, omit_props_names));
		if ('size' in $$new_props) $$invalidate(0, size = $$new_props.size);
		if ('title' in $$new_props) $$invalidate(1, title = $$new_props.title);
	};

	$$self.$capture_state = () => ({ size, title, labelled, attributes });

	$$self.$inject_state = $$new_props => {
		$$invalidate(5, $$props = assign(assign({}, $$props), $$new_props));
		if ('size' in $$props) $$invalidate(0, size = $$new_props.size);
		if ('title' in $$props) $$invalidate(1, title = $$new_props.title);
		if ('labelled' in $$props) $$invalidate(4, labelled = $$new_props.labelled);
		if ('attributes' in $$props) $$invalidate(2, attributes = $$new_props.attributes);
	};

	if ($$props && "$$inject" in $$props) {
		$$self.$inject_state($$props.$$inject);
	}

	$$self.$$.update = () => {
		$$invalidate(4, labelled = $$props["aria-label"] || $$props["aria-labelledby"] || title);

		$$invalidate(2, attributes = {
			"aria-hidden": labelled ? undefined : true,
			role: labelled ? "img" : undefined,
			focusable: Number($$props["tabindex"]) === 0 ? true : undefined
		});
	};

	$$props = exclude_internal_props($$props);
	return [size, title, attributes, $$restProps, labelled];
}

class WatsonHealthStudySkip extends SvelteComponentDev {
	constructor(options) {
		super(options);
		init(this, options, instance$Q, create_fragment$Q, safe_not_equal, { size: 0, title: 1 });

		dispatch_dev("SvelteRegisterComponent", {
			component: this,
			tagName: "WatsonHealthStudySkip",
			options,
			id: create_fragment$Q.name
		});
	}

	get size() {
		throw new Error("<WatsonHealthStudySkip>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
	}

	set size(value) {
		throw new Error("<WatsonHealthStudySkip>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
	}

	get title() {
		throw new Error("<WatsonHealthStudySkip>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
	}

	set title(value) {
		throw new Error("<WatsonHealthStudySkip>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
	}
}

/* src/pages/main.svelte generated by Svelte v3.49.0 */
const file$P = "src/pages/main.svelte";

// (38:8) <Column>
function create_default_slot_11(ctx) {
	let h1;
	let t0;
	let t1;
	let h2;
	let t2;
	let t3;
	let h5;
	let t5;
	let hr;

	const block = {
		c: function create() {
			h1 = element("h1");
			t0 = text(/*pluginemoji*/ ctx[1]);
			t1 = space();
			h2 = element("h2");
			t2 = text(/*pluginname*/ ctx[0]);
			t3 = space();
			h5 = element("h5");
			h5.textContent = "Loaded Succesfully";
			t5 = space();
			hr = element("hr");
			set_style(h1, "text-align", "center");
			add_location(h1, file$P, 38, 10, 747);
			set_style(h2, "text-align", "center");
			attr_dev(h2, "class", "svelte-8ggwz8");
			add_location(h2, file$P, 39, 10, 806);
			set_style(h5, "text-align", "center");
			add_location(h5, file$P, 40, 10, 864);
			add_location(hr, file$P, 41, 10, 928);
		},
		m: function mount(target, anchor) {
			insert_dev(target, h1, anchor);
			append_dev(h1, t0);
			insert_dev(target, t1, anchor);
			insert_dev(target, h2, anchor);
			append_dev(h2, t2);
			insert_dev(target, t3, anchor);
			insert_dev(target, h5, anchor);
			insert_dev(target, t5, anchor);
			insert_dev(target, hr, anchor);
		},
		p: function update(ctx, dirty) {
			if (dirty & /*pluginemoji*/ 2) set_data_dev(t0, /*pluginemoji*/ ctx[1]);
			if (dirty & /*pluginname*/ 1) set_data_dev(t2, /*pluginname*/ ctx[0]);
		},
		d: function destroy(detaching) {
			if (detaching) detach_dev(h1);
			if (detaching) detach_dev(t1);
			if (detaching) detach_dev(h2);
			if (detaching) detach_dev(t3);
			if (detaching) detach_dev(h5);
			if (detaching) detach_dev(t5);
			if (detaching) detach_dev(hr);
		}
	};

	dispatch_dev("SvelteRegisterBlock", {
		block,
		id: create_default_slot_11.name,
		type: "slot",
		source: "(38:8) <Column>",
		ctx
	});

	return block;
}

// (37:6) <Row>
function create_default_slot_10(ctx) {
	let column;
	let current;

	column = new Column({
			props: {
				$$slots: { default: [create_default_slot_11] },
				$$scope: { ctx }
			},
			$$inline: true
		});

	const block = {
		c: function create() {
			create_component(column.$$.fragment);
		},
		m: function mount(target, anchor) {
			mount_component(column, target, anchor);
			current = true;
		},
		p: function update(ctx, dirty) {
			const column_changes = {};

			if (dirty & /*$$scope, pluginname, pluginemoji*/ 2051) {
				column_changes.$$scope = { dirty, ctx };
			}

			column.$set(column_changes);
		},
		i: function intro(local) {
			if (current) return;
			transition_in(column.$$.fragment, local);
			current = true;
		},
		o: function outro(local) {
			transition_out(column.$$.fragment, local);
			current = false;
		},
		d: function destroy(detaching) {
			destroy_component(column, detaching);
		}
	};

	dispatch_dev("SvelteRegisterBlock", {
		block,
		id: create_default_slot_10.name,
		type: "slot",
		source: "(37:6) <Row>",
		ctx
	});

	return block;
}

// (36:4) <Grid>
function create_default_slot_9$1(ctx) {
	let row;
	let current;

	row = new Row({
			props: {
				$$slots: { default: [create_default_slot_10] },
				$$scope: { ctx }
			},
			$$inline: true
		});

	const block = {
		c: function create() {
			create_component(row.$$.fragment);
		},
		m: function mount(target, anchor) {
			mount_component(row, target, anchor);
			current = true;
		},
		p: function update(ctx, dirty) {
			const row_changes = {};

			if (dirty & /*$$scope, pluginname, pluginemoji*/ 2051) {
				row_changes.$$scope = { dirty, ctx };
			}

			row.$set(row_changes);
		},
		i: function intro(local) {
			if (current) return;
			transition_in(row.$$.fragment, local);
			current = true;
		},
		o: function outro(local) {
			transition_out(row.$$.fragment, local);
			current = false;
		},
		d: function destroy(detaching) {
			destroy_component(row, detaching);
		}
	};

	dispatch_dev("SvelteRegisterBlock", {
		block,
		id: create_default_slot_9$1.name,
		type: "slot",
		source: "(36:4) <Grid>",
		ctx
	});

	return block;
}

// (48:6) <ContentSwitcher size="sm" bind:selectedIndex={selectedDuration}>
function create_default_slot_8$1(ctx) {
	let switch0;
	let t0;
	let switch1;
	let t1;
	let switch2;
	let t2;
	let switch3;
	let current;

	switch0 = new Switch({
			props: { text: "7 min", style: "font-size:75%" },
			$$inline: true
		});

	switch1 = new Switch({
			props: { text: "14 min", style: "font-size:75%" },
			$$inline: true
		});

	switch2 = new Switch({
			props: { text: "21 min", style: "font-size:75%" },
			$$inline: true
		});

	switch3 = new Switch({
			props: { text: "28 min", style: "font-size:75%" },
			$$inline: true
		});

	const block = {
		c: function create() {
			create_component(switch0.$$.fragment);
			t0 = space();
			create_component(switch1.$$.fragment);
			t1 = space();
			create_component(switch2.$$.fragment);
			t2 = space();
			create_component(switch3.$$.fragment);
		},
		m: function mount(target, anchor) {
			mount_component(switch0, target, anchor);
			insert_dev(target, t0, anchor);
			mount_component(switch1, target, anchor);
			insert_dev(target, t1, anchor);
			mount_component(switch2, target, anchor);
			insert_dev(target, t2, anchor);
			mount_component(switch3, target, anchor);
			current = true;
		},
		p: noop,
		i: function intro(local) {
			if (current) return;
			transition_in(switch0.$$.fragment, local);
			transition_in(switch1.$$.fragment, local);
			transition_in(switch2.$$.fragment, local);
			transition_in(switch3.$$.fragment, local);
			current = true;
		},
		o: function outro(local) {
			transition_out(switch0.$$.fragment, local);
			transition_out(switch1.$$.fragment, local);
			transition_out(switch2.$$.fragment, local);
			transition_out(switch3.$$.fragment, local);
			current = false;
		},
		d: function destroy(detaching) {
			destroy_component(switch0, detaching);
			if (detaching) detach_dev(t0);
			destroy_component(switch1, detaching);
			if (detaching) detach_dev(t1);
			destroy_component(switch2, detaching);
			if (detaching) detach_dev(t2);
			destroy_component(switch3, detaching);
		}
	};

	dispatch_dev("SvelteRegisterBlock", {
		block,
		id: create_default_slot_8$1.name,
		type: "slot",
		source: "(48:6) <ContentSwitcher size=\\\"sm\\\" bind:selectedIndex={selectedDuration}>",
		ctx
	});

	return block;
}

// (46:4) <Tile>
function create_default_slot_7$1(ctx) {
	let h3;
	let t1;
	let contentswitcher;
	let updating_selectedIndex;
	let current;

	function contentswitcher_selectedIndex_binding(value) {
		/*contentswitcher_selectedIndex_binding*/ ctx[5](value);
	}

	let contentswitcher_props = {
		size: "sm",
		$$slots: { default: [create_default_slot_8$1] },
		$$scope: { ctx }
	};

	if (/*selectedDuration*/ ctx[2] !== void 0) {
		contentswitcher_props.selectedIndex = /*selectedDuration*/ ctx[2];
	}

	contentswitcher = new ContentSwitcher({
			props: contentswitcher_props,
			$$inline: true
		});

	binding_callbacks.push(() => bind(contentswitcher, 'selectedIndex', contentswitcher_selectedIndex_binding));

	const block = {
		c: function create() {
			h3 = element("h3");
			h3.textContent = "Duration:";
			t1 = space();
			create_component(contentswitcher.$$.fragment);
			add_location(h3, file$P, 46, 6, 993);
		},
		m: function mount(target, anchor) {
			insert_dev(target, h3, anchor);
			insert_dev(target, t1, anchor);
			mount_component(contentswitcher, target, anchor);
			current = true;
		},
		p: function update(ctx, dirty) {
			const contentswitcher_changes = {};

			if (dirty & /*$$scope*/ 2048) {
				contentswitcher_changes.$$scope = { dirty, ctx };
			}

			if (!updating_selectedIndex && dirty & /*selectedDuration*/ 4) {
				updating_selectedIndex = true;
				contentswitcher_changes.selectedIndex = /*selectedDuration*/ ctx[2];
				add_flush_callback(() => updating_selectedIndex = false);
			}

			contentswitcher.$set(contentswitcher_changes);
		},
		i: function intro(local) {
			if (current) return;
			transition_in(contentswitcher.$$.fragment, local);
			current = true;
		},
		o: function outro(local) {
			transition_out(contentswitcher.$$.fragment, local);
			current = false;
		},
		d: function destroy(detaching) {
			if (detaching) detach_dev(h3);
			if (detaching) detach_dev(t1);
			destroy_component(contentswitcher, detaching);
		}
	};

	dispatch_dev("SvelteRegisterBlock", {
		block,
		id: create_default_slot_7$1.name,
		type: "slot",
		source: "(46:4) <Tile>",
		ctx
	});

	return block;
}

// (58:6) <ContentSwitcher size="sm" bind:selectedIndex={selectedTarget}>
function create_default_slot_6$2(ctx) {
	let switch0;
	let t0;
	let switch1;
	let t1;
	let switch2;
	let t2;
	let switch3;
	let current;

	switch0 = new Switch({
			props: {
				text: "Full Body",
				style: "font-size:65%"
			},
			$$inline: true
		});

	switch1 = new Switch({
			props: {
				text: "Upper Body",
				style: "font-size:65%"
			},
			$$inline: true
		});

	switch2 = new Switch({
			props: {
				text: "Lower Body",
				style: "font-size:65%"
			},
			$$inline: true
		});

	switch3 = new Switch({
			props: { text: "Core", style: "font-size:65%" },
			$$inline: true
		});

	const block = {
		c: function create() {
			create_component(switch0.$$.fragment);
			t0 = space();
			create_component(switch1.$$.fragment);
			t1 = space();
			create_component(switch2.$$.fragment);
			t2 = space();
			create_component(switch3.$$.fragment);
		},
		m: function mount(target, anchor) {
			mount_component(switch0, target, anchor);
			insert_dev(target, t0, anchor);
			mount_component(switch1, target, anchor);
			insert_dev(target, t1, anchor);
			mount_component(switch2, target, anchor);
			insert_dev(target, t2, anchor);
			mount_component(switch3, target, anchor);
			current = true;
		},
		p: noop,
		i: function intro(local) {
			if (current) return;
			transition_in(switch0.$$.fragment, local);
			transition_in(switch1.$$.fragment, local);
			transition_in(switch2.$$.fragment, local);
			transition_in(switch3.$$.fragment, local);
			current = true;
		},
		o: function outro(local) {
			transition_out(switch0.$$.fragment, local);
			transition_out(switch1.$$.fragment, local);
			transition_out(switch2.$$.fragment, local);
			transition_out(switch3.$$.fragment, local);
			current = false;
		},
		d: function destroy(detaching) {
			destroy_component(switch0, detaching);
			if (detaching) detach_dev(t0);
			destroy_component(switch1, detaching);
			if (detaching) detach_dev(t1);
			destroy_component(switch2, detaching);
			if (detaching) detach_dev(t2);
			destroy_component(switch3, detaching);
		}
	};

	dispatch_dev("SvelteRegisterBlock", {
		block,
		id: create_default_slot_6$2.name,
		type: "slot",
		source: "(58:6) <ContentSwitcher size=\\\"sm\\\" bind:selectedIndex={selectedTarget}>",
		ctx
	});

	return block;
}

// (56:4) <Tile>
function create_default_slot_5$2(ctx) {
	let h3;
	let t1;
	let contentswitcher;
	let updating_selectedIndex;
	let current;

	function contentswitcher_selectedIndex_binding_1(value) {
		/*contentswitcher_selectedIndex_binding_1*/ ctx[6](value);
	}

	let contentswitcher_props = {
		size: "sm",
		$$slots: { default: [create_default_slot_6$2] },
		$$scope: { ctx }
	};

	if (/*selectedTarget*/ ctx[3] !== void 0) {
		contentswitcher_props.selectedIndex = /*selectedTarget*/ ctx[3];
	}

	contentswitcher = new ContentSwitcher({
			props: contentswitcher_props,
			$$inline: true
		});

	binding_callbacks.push(() => bind(contentswitcher, 'selectedIndex', contentswitcher_selectedIndex_binding_1));

	const block = {
		c: function create() {
			h3 = element("h3");
			h3.textContent = "Target:";
			t1 = space();
			create_component(contentswitcher.$$.fragment);
			add_location(h3, file$P, 56, 6, 1365);
		},
		m: function mount(target, anchor) {
			insert_dev(target, h3, anchor);
			insert_dev(target, t1, anchor);
			mount_component(contentswitcher, target, anchor);
			current = true;
		},
		p: function update(ctx, dirty) {
			const contentswitcher_changes = {};

			if (dirty & /*$$scope*/ 2048) {
				contentswitcher_changes.$$scope = { dirty, ctx };
			}

			if (!updating_selectedIndex && dirty & /*selectedTarget*/ 8) {
				updating_selectedIndex = true;
				contentswitcher_changes.selectedIndex = /*selectedTarget*/ ctx[3];
				add_flush_callback(() => updating_selectedIndex = false);
			}

			contentswitcher.$set(contentswitcher_changes);
		},
		i: function intro(local) {
			if (current) return;
			transition_in(contentswitcher.$$.fragment, local);
			current = true;
		},
		o: function outro(local) {
			transition_out(contentswitcher.$$.fragment, local);
			current = false;
		},
		d: function destroy(detaching) {
			if (detaching) detach_dev(h3);
			if (detaching) detach_dev(t1);
			destroy_component(contentswitcher, detaching);
		}
	};

	dispatch_dev("SvelteRegisterBlock", {
		block,
		id: create_default_slot_5$2.name,
		type: "slot",
		source: "(56:4) <Tile>",
		ctx
	});

	return block;
}

// (71:10) <Button style="width:100%" icon={WatsonHealthStudySkip} on:click={()=>{startWorkout()}}>
function create_default_slot_4$2(ctx) {
	let t;

	const block = {
		c: function create() {
			t = text("Start");
		},
		m: function mount(target, anchor) {
			insert_dev(target, t, anchor);
		},
		d: function destroy(detaching) {
			if (detaching) detach_dev(t);
		}
	};

	dispatch_dev("SvelteRegisterBlock", {
		block,
		id: create_default_slot_4$2.name,
		type: "slot",
		source: "(71:10) <Button style=\\\"width:100%\\\" icon={WatsonHealthStudySkip} on:click={()=>{startWorkout()}}>",
		ctx
	});

	return block;
}

// (70:8) <Column style="width:60%">
function create_default_slot_3$3(ctx) {
	let button;
	let current;

	button = new Button({
			props: {
				style: "width:100%",
				icon: WatsonHealthStudySkip,
				$$slots: { default: [create_default_slot_4$2] },
				$$scope: { ctx }
			},
			$$inline: true
		});

	button.$on("click", /*click_handler*/ ctx[7]);

	const block = {
		c: function create() {
			create_component(button.$$.fragment);
		},
		m: function mount(target, anchor) {
			mount_component(button, target, anchor);
			current = true;
		},
		p: function update(ctx, dirty) {
			const button_changes = {};

			if (dirty & /*$$scope*/ 2048) {
				button_changes.$$scope = { dirty, ctx };
			}

			button.$set(button_changes);
		},
		i: function intro(local) {
			if (current) return;
			transition_in(button.$$.fragment, local);
			current = true;
		},
		o: function outro(local) {
			transition_out(button.$$.fragment, local);
			current = false;
		},
		d: function destroy(detaching) {
			destroy_component(button, detaching);
		}
	};

	dispatch_dev("SvelteRegisterBlock", {
		block,
		id: create_default_slot_3$3.name,
		type: "slot",
		source: "(70:8) <Column style=\\\"width:60%\\\">",
		ctx
	});

	return block;
}

// (67:6) <Row>
function create_default_slot_2$3(ctx) {
	let column0;
	let t0;
	let column1;
	let t1;
	let column2;
	let current;

	column0 = new Column({
			props: { style: "width:20%" },
			$$inline: true
		});

	column1 = new Column({
			props: {
				style: "width:60%",
				$$slots: { default: [create_default_slot_3$3] },
				$$scope: { ctx }
			},
			$$inline: true
		});

	column2 = new Column({
			props: { style: "width:20%" },
			$$inline: true
		});

	const block = {
		c: function create() {
			create_component(column0.$$.fragment);
			t0 = space();
			create_component(column1.$$.fragment);
			t1 = space();
			create_component(column2.$$.fragment);
		},
		m: function mount(target, anchor) {
			mount_component(column0, target, anchor);
			insert_dev(target, t0, anchor);
			mount_component(column1, target, anchor);
			insert_dev(target, t1, anchor);
			mount_component(column2, target, anchor);
			current = true;
		},
		p: function update(ctx, dirty) {
			const column1_changes = {};

			if (dirty & /*$$scope*/ 2048) {
				column1_changes.$$scope = { dirty, ctx };
			}

			column1.$set(column1_changes);
		},
		i: function intro(local) {
			if (current) return;
			transition_in(column0.$$.fragment, local);
			transition_in(column1.$$.fragment, local);
			transition_in(column2.$$.fragment, local);
			current = true;
		},
		o: function outro(local) {
			transition_out(column0.$$.fragment, local);
			transition_out(column1.$$.fragment, local);
			transition_out(column2.$$.fragment, local);
			current = false;
		},
		d: function destroy(detaching) {
			destroy_component(column0, detaching);
			if (detaching) detach_dev(t0);
			destroy_component(column1, detaching);
			if (detaching) detach_dev(t1);
			destroy_component(column2, detaching);
		}
	};

	dispatch_dev("SvelteRegisterBlock", {
		block,
		id: create_default_slot_2$3.name,
		type: "slot",
		source: "(67:6) <Row>",
		ctx
	});

	return block;
}

// (66:4) <Grid>
function create_default_slot_1$5(ctx) {
	let row;
	let current;

	row = new Row({
			props: {
				$$slots: { default: [create_default_slot_2$3] },
				$$scope: { ctx }
			},
			$$inline: true
		});

	const block = {
		c: function create() {
			create_component(row.$$.fragment);
		},
		m: function mount(target, anchor) {
			mount_component(row, target, anchor);
			current = true;
		},
		p: function update(ctx, dirty) {
			const row_changes = {};

			if (dirty & /*$$scope*/ 2048) {
				row_changes.$$scope = { dirty, ctx };
			}

			row.$set(row_changes);
		},
		i: function intro(local) {
			if (current) return;
			transition_in(row.$$.fragment, local);
			current = true;
		},
		o: function outro(local) {
			transition_out(row.$$.fragment, local);
			current = false;
		},
		d: function destroy(detaching) {
			destroy_component(row, detaching);
		}
	};

	dispatch_dev("SvelteRegisterBlock", {
		block,
		id: create_default_slot_1$5.name,
		type: "slot",
		source: "(66:4) <Grid>",
		ctx
	});

	return block;
}

// (35:0) <Content>
function create_default_slot$7(ctx) {
	let grid0;
	let t0;
	let tile0;
	let t1;
	let br0;
	let t2;
	let tile1;
	let t3;
	let br1;
	let t4;
	let grid1;
	let current;

	grid0 = new Grid({
			props: {
				$$slots: { default: [create_default_slot_9$1] },
				$$scope: { ctx }
			},
			$$inline: true
		});

	tile0 = new Tile({
			props: {
				$$slots: { default: [create_default_slot_7$1] },
				$$scope: { ctx }
			},
			$$inline: true
		});

	tile1 = new Tile({
			props: {
				$$slots: { default: [create_default_slot_5$2] },
				$$scope: { ctx }
			},
			$$inline: true
		});

	grid1 = new Grid({
			props: {
				$$slots: { default: [create_default_slot_1$5] },
				$$scope: { ctx }
			},
			$$inline: true
		});

	const block = {
		c: function create() {
			create_component(grid0.$$.fragment);
			t0 = space();
			create_component(tile0.$$.fragment);
			t1 = space();
			br0 = element("br");
			t2 = space();
			create_component(tile1.$$.fragment);
			t3 = space();
			br1 = element("br");
			t4 = space();
			create_component(grid1.$$.fragment);
			add_location(br0, file$P, 54, 4, 1343);
			add_location(br1, file$P, 64, 4, 1722);
		},
		m: function mount(target, anchor) {
			mount_component(grid0, target, anchor);
			insert_dev(target, t0, anchor);
			mount_component(tile0, target, anchor);
			insert_dev(target, t1, anchor);
			insert_dev(target, br0, anchor);
			insert_dev(target, t2, anchor);
			mount_component(tile1, target, anchor);
			insert_dev(target, t3, anchor);
			insert_dev(target, br1, anchor);
			insert_dev(target, t4, anchor);
			mount_component(grid1, target, anchor);
			current = true;
		},
		p: function update(ctx, dirty) {
			const grid0_changes = {};

			if (dirty & /*$$scope, pluginname, pluginemoji*/ 2051) {
				grid0_changes.$$scope = { dirty, ctx };
			}

			grid0.$set(grid0_changes);
			const tile0_changes = {};

			if (dirty & /*$$scope, selectedDuration*/ 2052) {
				tile0_changes.$$scope = { dirty, ctx };
			}

			tile0.$set(tile0_changes);
			const tile1_changes = {};

			if (dirty & /*$$scope, selectedTarget*/ 2056) {
				tile1_changes.$$scope = { dirty, ctx };
			}

			tile1.$set(tile1_changes);
			const grid1_changes = {};

			if (dirty & /*$$scope*/ 2048) {
				grid1_changes.$$scope = { dirty, ctx };
			}

			grid1.$set(grid1_changes);
		},
		i: function intro(local) {
			if (current) return;
			transition_in(grid0.$$.fragment, local);
			transition_in(tile0.$$.fragment, local);
			transition_in(tile1.$$.fragment, local);
			transition_in(grid1.$$.fragment, local);
			current = true;
		},
		o: function outro(local) {
			transition_out(grid0.$$.fragment, local);
			transition_out(tile0.$$.fragment, local);
			transition_out(tile1.$$.fragment, local);
			transition_out(grid1.$$.fragment, local);
			current = false;
		},
		d: function destroy(detaching) {
			destroy_component(grid0, detaching);
			if (detaching) detach_dev(t0);
			destroy_component(tile0, detaching);
			if (detaching) detach_dev(t1);
			if (detaching) detach_dev(br0);
			if (detaching) detach_dev(t2);
			destroy_component(tile1, detaching);
			if (detaching) detach_dev(t3);
			if (detaching) detach_dev(br1);
			if (detaching) detach_dev(t4);
			destroy_component(grid1, detaching);
		}
	};

	dispatch_dev("SvelteRegisterBlock", {
		block,
		id: create_default_slot$7.name,
		type: "slot",
		source: "(35:0) <Content>",
		ctx
	});

	return block;
}

function create_fragment$P(ctx) {
	let content;
	let current;

	content = new Content({
			props: {
				$$slots: { default: [create_default_slot$7] },
				$$scope: { ctx }
			},
			$$inline: true
		});

	const block = {
		c: function create() {
			create_component(content.$$.fragment);
		},
		l: function claim(nodes) {
			throw new Error("options.hydrate only works if the component was compiled with the `hydratable: true` option");
		},
		m: function mount(target, anchor) {
			mount_component(content, target, anchor);
			current = true;
		},
		p: function update(ctx, [dirty]) {
			const content_changes = {};

			if (dirty & /*$$scope, selectedTarget, selectedDuration, pluginname, pluginemoji*/ 2063) {
				content_changes.$$scope = { dirty, ctx };
			}

			content.$set(content_changes);
		},
		i: function intro(local) {
			if (current) return;
			transition_in(content.$$.fragment, local);
			current = true;
		},
		o: function outro(local) {
			transition_out(content.$$.fragment, local);
			current = false;
		},
		d: function destroy(detaching) {
			destroy_component(content, detaching);
		}
	};

	dispatch_dev("SvelteRegisterBlock", {
		block,
		id: create_fragment$P.name,
		type: "component",
		source: "",
		ctx
	});

	return block;
}

function instance$P($$self, $$props, $$invalidate) {
	let { $$slots: slots = {}, $$scope } = $$props;
	validate_slots('Main', slots, []);
	let { pluginname } = $$props;
	let { pluginemoji } = $$props;
	let selectedDuration = 0;
	let selectedTarget = 0;
	let open = true;
	const dispatch = createEventDispatcher();

	function exitMain() {
		dispatch("exitinfo");
		open = false;
	}

	function startWorkout() {
		dispatch("startworkout", [selectedDuration, selectedTarget]);
	}

	const writable_props = ['pluginname', 'pluginemoji'];

	Object.keys($$props).forEach(key => {
		if (!~writable_props.indexOf(key) && key.slice(0, 2) !== '$$' && key !== 'slot') console.warn(`<Main> was created with unknown prop '${key}'`);
	});

	function contentswitcher_selectedIndex_binding(value) {
		selectedDuration = value;
		$$invalidate(2, selectedDuration);
	}

	function contentswitcher_selectedIndex_binding_1(value) {
		selectedTarget = value;
		$$invalidate(3, selectedTarget);
	}

	const click_handler = () => {
		startWorkout();
	};

	$$self.$$set = $$props => {
		if ('pluginname' in $$props) $$invalidate(0, pluginname = $$props.pluginname);
		if ('pluginemoji' in $$props) $$invalidate(1, pluginemoji = $$props.pluginemoji);
	};

	$$self.$capture_state = () => ({
		createEventDispatcher,
		Button,
		Content,
		Grid,
		Row,
		Column,
		ContentSwitcher,
		Switch,
		Tile,
		WatsonHealthStudySkip,
		pluginname,
		pluginemoji,
		selectedDuration,
		selectedTarget,
		open,
		dispatch,
		exitMain,
		startWorkout
	});

	$$self.$inject_state = $$props => {
		if ('pluginname' in $$props) $$invalidate(0, pluginname = $$props.pluginname);
		if ('pluginemoji' in $$props) $$invalidate(1, pluginemoji = $$props.pluginemoji);
		if ('selectedDuration' in $$props) $$invalidate(2, selectedDuration = $$props.selectedDuration);
		if ('selectedTarget' in $$props) $$invalidate(3, selectedTarget = $$props.selectedTarget);
		if ('open' in $$props) open = $$props.open;
	};

	if ($$props && "$$inject" in $$props) {
		$$self.$inject_state($$props.$$inject);
	}

	return [
		pluginname,
		pluginemoji,
		selectedDuration,
		selectedTarget,
		startWorkout,
		contentswitcher_selectedIndex_binding,
		contentswitcher_selectedIndex_binding_1,
		click_handler
	];
}

class Main extends SvelteComponentDev {
	constructor(options) {
		super(options);
		init(this, options, instance$P, create_fragment$P, safe_not_equal, { pluginname: 0, pluginemoji: 1 });

		dispatch_dev("SvelteRegisterComponent", {
			component: this,
			tagName: "Main",
			options,
			id: create_fragment$P.name
		});

		const { ctx } = this.$$;
		const props = options.props || {};

		if (/*pluginname*/ ctx[0] === undefined && !('pluginname' in props)) {
			console.warn("<Main> was created without expected prop 'pluginname'");
		}

		if (/*pluginemoji*/ ctx[1] === undefined && !('pluginemoji' in props)) {
			console.warn("<Main> was created without expected prop 'pluginemoji'");
		}
	}

	get pluginname() {
		throw new Error("<Main>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
	}

	set pluginname(value) {
		throw new Error("<Main>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
	}

	get pluginemoji() {
		throw new Error("<Main>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
	}

	set pluginemoji(value) {
		throw new Error("<Main>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
	}
}

/* src/pages/info.svelte generated by Svelte v3.49.0 */
const file$O = "src/pages/info.svelte";

// (28:8) <Column>
function create_default_slot_6$1(ctx) {
	let h1;
	let t0;
	let t1;
	let h2;
	let t2;
	let t3;
	let h5;
	let t5;
	let hr0;
	let t6;
	let h40;
	let t8;
	let h60;
	let t9;
	let t10;
	let t11;
	let t12;
	let t13;
	let hr1;
	let br0;
	let t14;
	let h41;
	let t16;
	let h61;
	let t17;
	let t18;
	let t19;
	let t20;
	let h62;
	let t22;
	let hr2;
	let br1;
	let t23;
	let h42;
	let t25;
	let h63;

	const block = {
		c: function create() {
			h1 = element("h1");
			t0 = text(/*pluginemoji*/ ctx[1]);
			t1 = space();
			h2 = element("h2");
			t2 = text(/*pluginname*/ ctx[0]);
			t3 = space();
			h5 = element("h5");
			h5.textContent = "General Information";
			t5 = space();
			hr0 = element("hr");
			t6 = space();
			h40 = element("h4");
			h40.textContent = "General:";
			t8 = space();
			h60 = element("h6");
			t9 = text("This is a plugin for ");
			t10 = text(/*parent*/ ctx[2]);
			t11 = text(". This plugin will support guided breathings. After a breathing exercise the plugin will log the results (repeats & total time) in ");
			t12 = text(/*parent*/ ctx[2]);
			t13 = space();
			hr1 = element("hr");
			br0 = element("br");
			t14 = space();
			h41 = element("h4");
			h41.textContent = "Licence:";
			t16 = space();
			h61 = element("h6");
			t17 = text("The ");
			t18 = text(/*parent*/ ctx[2]);
			t19 = text(" Breathe Plugin is licenced under the MIT licence");
			t20 = space();
			h62 = element("h6");
			h62.textContent = "Copyright Ronald de Lange.\n                Permission is hereby granted, free of charge, to any person obtaining a copy of this software and associated documentation files (the \"Software\"), to deal in the Software without restriction, including without limitation the rights to use, copy, modify, merge, publish, distribute, sublicense, and/or sell copies of the Software, and to permit persons to whom the Software is furnished to do so, subject to the following conditions:\n                The above copyright notice and this permission notice shall be included in all copies or substantial portions of the Software.\n                THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.";
			t22 = space();
			hr2 = element("hr");
			br1 = element("br");
			t23 = space();
			h42 = element("h4");
			h42.textContent = "Support:";
			t25 = space();
			h63 = element("h6");
			h63.textContent = "Please contact me @ ronald_de_lange@hotmail.com";
			set_style(h1, "text-align", "center");
			add_location(h1, file$O, 28, 12, 491);
			set_style(h2, "text-align", "center");
			attr_dev(h2, "class", "svelte-gjbk59");
			add_location(h2, file$O, 29, 12, 552);
			set_style(h5, "text-align", "center");
			add_location(h5, file$O, 30, 12, 612);
			add_location(hr0, file$O, 31, 12, 679);
			add_location(h40, file$O, 32, 12, 696);
			attr_dev(h60, "class", "svelte-gjbk59");
			add_location(h60, file$O, 33, 12, 726);
			add_location(hr1, file$O, 34, 12, 916);
			add_location(br0, file$O, 34, 16, 920);
			add_location(h41, file$O, 35, 12, 937);
			attr_dev(h61, "class", "svelte-gjbk59");
			add_location(h61, file$O, 36, 12, 967);
			attr_dev(h62, "class", "svelte-gjbk59");
			add_location(h62, file$O, 37, 12, 1050);
			add_location(hr2, file$O, 42, 12, 2180);
			add_location(br1, file$O, 42, 16, 2184);
			add_location(h42, file$O, 43, 12, 2201);
			attr_dev(h63, "class", "svelte-gjbk59");
			add_location(h63, file$O, 44, 12, 2231);
		},
		m: function mount(target, anchor) {
			insert_dev(target, h1, anchor);
			append_dev(h1, t0);
			insert_dev(target, t1, anchor);
			insert_dev(target, h2, anchor);
			append_dev(h2, t2);
			insert_dev(target, t3, anchor);
			insert_dev(target, h5, anchor);
			insert_dev(target, t5, anchor);
			insert_dev(target, hr0, anchor);
			insert_dev(target, t6, anchor);
			insert_dev(target, h40, anchor);
			insert_dev(target, t8, anchor);
			insert_dev(target, h60, anchor);
			append_dev(h60, t9);
			append_dev(h60, t10);
			append_dev(h60, t11);
			append_dev(h60, t12);
			insert_dev(target, t13, anchor);
			insert_dev(target, hr1, anchor);
			insert_dev(target, br0, anchor);
			insert_dev(target, t14, anchor);
			insert_dev(target, h41, anchor);
			insert_dev(target, t16, anchor);
			insert_dev(target, h61, anchor);
			append_dev(h61, t17);
			append_dev(h61, t18);
			append_dev(h61, t19);
			insert_dev(target, t20, anchor);
			insert_dev(target, h62, anchor);
			insert_dev(target, t22, anchor);
			insert_dev(target, hr2, anchor);
			insert_dev(target, br1, anchor);
			insert_dev(target, t23, anchor);
			insert_dev(target, h42, anchor);
			insert_dev(target, t25, anchor);
			insert_dev(target, h63, anchor);
		},
		p: function update(ctx, dirty) {
			if (dirty & /*pluginemoji*/ 2) set_data_dev(t0, /*pluginemoji*/ ctx[1]);
			if (dirty & /*pluginname*/ 1) set_data_dev(t2, /*pluginname*/ ctx[0]);
			if (dirty & /*parent*/ 4) set_data_dev(t10, /*parent*/ ctx[2]);
			if (dirty & /*parent*/ 4) set_data_dev(t12, /*parent*/ ctx[2]);
			if (dirty & /*parent*/ 4) set_data_dev(t18, /*parent*/ ctx[2]);
		},
		d: function destroy(detaching) {
			if (detaching) detach_dev(h1);
			if (detaching) detach_dev(t1);
			if (detaching) detach_dev(h2);
			if (detaching) detach_dev(t3);
			if (detaching) detach_dev(h5);
			if (detaching) detach_dev(t5);
			if (detaching) detach_dev(hr0);
			if (detaching) detach_dev(t6);
			if (detaching) detach_dev(h40);
			if (detaching) detach_dev(t8);
			if (detaching) detach_dev(h60);
			if (detaching) detach_dev(t13);
			if (detaching) detach_dev(hr1);
			if (detaching) detach_dev(br0);
			if (detaching) detach_dev(t14);
			if (detaching) detach_dev(h41);
			if (detaching) detach_dev(t16);
			if (detaching) detach_dev(h61);
			if (detaching) detach_dev(t20);
			if (detaching) detach_dev(h62);
			if (detaching) detach_dev(t22);
			if (detaching) detach_dev(hr2);
			if (detaching) detach_dev(br1);
			if (detaching) detach_dev(t23);
			if (detaching) detach_dev(h42);
			if (detaching) detach_dev(t25);
			if (detaching) detach_dev(h63);
		}
	};

	dispatch_dev("SvelteRegisterBlock", {
		block,
		id: create_default_slot_6$1.name,
		type: "slot",
		source: "(28:8) <Column>",
		ctx
	});

	return block;
}

// (27:6) <Row>
function create_default_slot_5$1(ctx) {
	let column;
	let current;

	column = new Column({
			props: {
				$$slots: { default: [create_default_slot_6$1] },
				$$scope: { ctx }
			},
			$$inline: true
		});

	const block = {
		c: function create() {
			create_component(column.$$.fragment);
		},
		m: function mount(target, anchor) {
			mount_component(column, target, anchor);
			current = true;
		},
		p: function update(ctx, dirty) {
			const column_changes = {};

			if (dirty & /*$$scope, parent, pluginname, pluginemoji*/ 71) {
				column_changes.$$scope = { dirty, ctx };
			}

			column.$set(column_changes);
		},
		i: function intro(local) {
			if (current) return;
			transition_in(column.$$.fragment, local);
			current = true;
		},
		o: function outro(local) {
			transition_out(column.$$.fragment, local);
			current = false;
		},
		d: function destroy(detaching) {
			destroy_component(column, detaching);
		}
	};

	dispatch_dev("SvelteRegisterBlock", {
		block,
		id: create_default_slot_5$1.name,
		type: "slot",
		source: "(27:6) <Row>",
		ctx
	});

	return block;
}

// (51:19) <Button on:click={exitInfo} style="float: right;">
function create_default_slot_4$1(ctx) {
	let t;

	const block = {
		c: function create() {
			t = text("Exit");
		},
		m: function mount(target, anchor) {
			insert_dev(target, t, anchor);
		},
		d: function destroy(detaching) {
			if (detaching) detach_dev(t);
		}
	};

	dispatch_dev("SvelteRegisterBlock", {
		block,
		id: create_default_slot_4$1.name,
		type: "slot",
		source: "(51:19) <Button on:click={exitInfo} style=\\\"float: right;\\\">",
		ctx
	});

	return block;
}

// (49:8) <Column>
function create_default_slot_3$2(ctx) {
	let br0;
	let t0;
	let span;
	let button;
	let t1;
	let br1;
	let current;

	button = new Button({
			props: {
				style: "float: right;",
				$$slots: { default: [create_default_slot_4$1] },
				$$scope: { ctx }
			},
			$$inline: true
		});

	button.$on("click", /*exitInfo*/ ctx[3]);

	const block = {
		c: function create() {
			br0 = element("br");
			t0 = space();
			span = element("span");
			create_component(button.$$.fragment);
			t1 = space();
			br1 = element("br");
			add_location(br0, file$O, 49, 12, 2360);
			add_location(span, file$O, 50, 13, 2378);
			add_location(br1, file$O, 51, 13, 2468);
		},
		m: function mount(target, anchor) {
			insert_dev(target, br0, anchor);
			insert_dev(target, t0, anchor);
			insert_dev(target, span, anchor);
			mount_component(button, span, null);
			insert_dev(target, t1, anchor);
			insert_dev(target, br1, anchor);
			current = true;
		},
		p: function update(ctx, dirty) {
			const button_changes = {};

			if (dirty & /*$$scope*/ 64) {
				button_changes.$$scope = { dirty, ctx };
			}

			button.$set(button_changes);
		},
		i: function intro(local) {
			if (current) return;
			transition_in(button.$$.fragment, local);
			current = true;
		},
		o: function outro(local) {
			transition_out(button.$$.fragment, local);
			current = false;
		},
		d: function destroy(detaching) {
			if (detaching) detach_dev(br0);
			if (detaching) detach_dev(t0);
			if (detaching) detach_dev(span);
			destroy_component(button);
			if (detaching) detach_dev(t1);
			if (detaching) detach_dev(br1);
		}
	};

	dispatch_dev("SvelteRegisterBlock", {
		block,
		id: create_default_slot_3$2.name,
		type: "slot",
		source: "(49:8) <Column>",
		ctx
	});

	return block;
}

// (48:6) <Row>
function create_default_slot_2$2(ctx) {
	let column;
	let current;

	column = new Column({
			props: {
				$$slots: { default: [create_default_slot_3$2] },
				$$scope: { ctx }
			},
			$$inline: true
		});

	const block = {
		c: function create() {
			create_component(column.$$.fragment);
		},
		m: function mount(target, anchor) {
			mount_component(column, target, anchor);
			current = true;
		},
		p: function update(ctx, dirty) {
			const column_changes = {};

			if (dirty & /*$$scope*/ 64) {
				column_changes.$$scope = { dirty, ctx };
			}

			column.$set(column_changes);
		},
		i: function intro(local) {
			if (current) return;
			transition_in(column.$$.fragment, local);
			current = true;
		},
		o: function outro(local) {
			transition_out(column.$$.fragment, local);
			current = false;
		},
		d: function destroy(detaching) {
			destroy_component(column, detaching);
		}
	};

	dispatch_dev("SvelteRegisterBlock", {
		block,
		id: create_default_slot_2$2.name,
		type: "slot",
		source: "(48:6) <Row>",
		ctx
	});

	return block;
}

// (26:4) <Grid>
function create_default_slot_1$4(ctx) {
	let row0;
	let t;
	let row1;
	let current;

	row0 = new Row({
			props: {
				$$slots: { default: [create_default_slot_5$1] },
				$$scope: { ctx }
			},
			$$inline: true
		});

	row1 = new Row({
			props: {
				$$slots: { default: [create_default_slot_2$2] },
				$$scope: { ctx }
			},
			$$inline: true
		});

	const block = {
		c: function create() {
			create_component(row0.$$.fragment);
			t = space();
			create_component(row1.$$.fragment);
		},
		m: function mount(target, anchor) {
			mount_component(row0, target, anchor);
			insert_dev(target, t, anchor);
			mount_component(row1, target, anchor);
			current = true;
		},
		p: function update(ctx, dirty) {
			const row0_changes = {};

			if (dirty & /*$$scope, parent, pluginname, pluginemoji*/ 71) {
				row0_changes.$$scope = { dirty, ctx };
			}

			row0.$set(row0_changes);
			const row1_changes = {};

			if (dirty & /*$$scope*/ 64) {
				row1_changes.$$scope = { dirty, ctx };
			}

			row1.$set(row1_changes);
		},
		i: function intro(local) {
			if (current) return;
			transition_in(row0.$$.fragment, local);
			transition_in(row1.$$.fragment, local);
			current = true;
		},
		o: function outro(local) {
			transition_out(row0.$$.fragment, local);
			transition_out(row1.$$.fragment, local);
			current = false;
		},
		d: function destroy(detaching) {
			destroy_component(row0, detaching);
			if (detaching) detach_dev(t);
			destroy_component(row1, detaching);
		}
	};

	dispatch_dev("SvelteRegisterBlock", {
		block,
		id: create_default_slot_1$4.name,
		type: "slot",
		source: "(26:4) <Grid>",
		ctx
	});

	return block;
}

// (25:0) <Content>
function create_default_slot$6(ctx) {
	let grid;
	let current;

	grid = new Grid({
			props: {
				$$slots: { default: [create_default_slot_1$4] },
				$$scope: { ctx }
			},
			$$inline: true
		});

	const block = {
		c: function create() {
			create_component(grid.$$.fragment);
		},
		m: function mount(target, anchor) {
			mount_component(grid, target, anchor);
			current = true;
		},
		p: function update(ctx, dirty) {
			const grid_changes = {};

			if (dirty & /*$$scope, parent, pluginname, pluginemoji*/ 71) {
				grid_changes.$$scope = { dirty, ctx };
			}

			grid.$set(grid_changes);
		},
		i: function intro(local) {
			if (current) return;
			transition_in(grid.$$.fragment, local);
			current = true;
		},
		o: function outro(local) {
			transition_out(grid.$$.fragment, local);
			current = false;
		},
		d: function destroy(detaching) {
			destroy_component(grid, detaching);
		}
	};

	dispatch_dev("SvelteRegisterBlock", {
		block,
		id: create_default_slot$6.name,
		type: "slot",
		source: "(25:0) <Content>",
		ctx
	});

	return block;
}

function create_fragment$O(ctx) {
	let content;
	let current;

	content = new Content({
			props: {
				$$slots: { default: [create_default_slot$6] },
				$$scope: { ctx }
			},
			$$inline: true
		});

	const block = {
		c: function create() {
			create_component(content.$$.fragment);
		},
		l: function claim(nodes) {
			throw new Error("options.hydrate only works if the component was compiled with the `hydratable: true` option");
		},
		m: function mount(target, anchor) {
			mount_component(content, target, anchor);
			current = true;
		},
		p: function update(ctx, [dirty]) {
			const content_changes = {};

			if (dirty & /*$$scope, parent, pluginname, pluginemoji*/ 71) {
				content_changes.$$scope = { dirty, ctx };
			}

			content.$set(content_changes);
		},
		i: function intro(local) {
			if (current) return;
			transition_in(content.$$.fragment, local);
			current = true;
		},
		o: function outro(local) {
			transition_out(content.$$.fragment, local);
			current = false;
		},
		d: function destroy(detaching) {
			destroy_component(content, detaching);
		}
	};

	dispatch_dev("SvelteRegisterBlock", {
		block,
		id: create_fragment$O.name,
		type: "component",
		source: "",
		ctx
	});

	return block;
}

function instance$O($$self, $$props, $$invalidate) {
	let { $$slots: slots = {}, $$scope } = $$props;
	validate_slots('Info', slots, []);
	let { pluginname } = $$props;
	let { pluginemoji } = $$props;
	let { parent } = $$props;
	let open = true;
	const dispatch = createEventDispatcher();

	function exitInfo() {
		dispatch("exitinfo");
		open = false;
	}

	const writable_props = ['pluginname', 'pluginemoji', 'parent'];

	Object.keys($$props).forEach(key => {
		if (!~writable_props.indexOf(key) && key.slice(0, 2) !== '$$' && key !== 'slot') console.warn(`<Info> was created with unknown prop '${key}'`);
	});

	$$self.$$set = $$props => {
		if ('pluginname' in $$props) $$invalidate(0, pluginname = $$props.pluginname);
		if ('pluginemoji' in $$props) $$invalidate(1, pluginemoji = $$props.pluginemoji);
		if ('parent' in $$props) $$invalidate(2, parent = $$props.parent);
	};

	$$self.$capture_state = () => ({
		createEventDispatcher,
		Button,
		Content,
		Grid,
		Row,
		Column,
		pluginname,
		pluginemoji,
		parent,
		open,
		dispatch,
		exitInfo
	});

	$$self.$inject_state = $$props => {
		if ('pluginname' in $$props) $$invalidate(0, pluginname = $$props.pluginname);
		if ('pluginemoji' in $$props) $$invalidate(1, pluginemoji = $$props.pluginemoji);
		if ('parent' in $$props) $$invalidate(2, parent = $$props.parent);
		if ('open' in $$props) open = $$props.open;
	};

	if ($$props && "$$inject" in $$props) {
		$$self.$inject_state($$props.$$inject);
	}

	return [pluginname, pluginemoji, parent, exitInfo];
}

class Info extends SvelteComponentDev {
	constructor(options) {
		super(options);
		init(this, options, instance$O, create_fragment$O, safe_not_equal, { pluginname: 0, pluginemoji: 1, parent: 2 });

		dispatch_dev("SvelteRegisterComponent", {
			component: this,
			tagName: "Info",
			options,
			id: create_fragment$O.name
		});

		const { ctx } = this.$$;
		const props = options.props || {};

		if (/*pluginname*/ ctx[0] === undefined && !('pluginname' in props)) {
			console.warn("<Info> was created without expected prop 'pluginname'");
		}

		if (/*pluginemoji*/ ctx[1] === undefined && !('pluginemoji' in props)) {
			console.warn("<Info> was created without expected prop 'pluginemoji'");
		}

		if (/*parent*/ ctx[2] === undefined && !('parent' in props)) {
			console.warn("<Info> was created without expected prop 'parent'");
		}
	}

	get pluginname() {
		throw new Error("<Info>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
	}

	set pluginname(value) {
		throw new Error("<Info>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
	}

	get pluginemoji() {
		throw new Error("<Info>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
	}

	set pluginemoji(value) {
		throw new Error("<Info>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
	}

	get parent() {
		throw new Error("<Info>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
	}

	set parent(value) {
		throw new Error("<Info>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
	}
}

/* src/components/configure-animation.svelte generated by Svelte v3.49.0 */

const file$N = "src/components/configure-animation.svelte";

// (32:0) {#if refresh}
function create_if_block$L(ctx) {
	let svg;
	let t;
	let g1;
	let g0;
	let path0;
	let path1;
	let path2;
	let path3;

	const block = {
		c: function create() {
			svg = svg_element("svg");
			t = text(">\n\n  ");
			g1 = svg_element("g");
			g0 = svg_element("g");
			path0 = svg_element("path");
			path1 = svg_element("path");
			path2 = svg_element("path");
			path3 = svg_element("path");
			attr_dev(path0, "d", "M202 157c-2 0-2-2-1-3 4-14 8-27 14-40 3-8 9-11 16-14l31-11 9 11c2 1 1 5 4 5a70 70 0 0 0 23 0c7-1 11-6 13-13l37 17c7 3 8 10 11 15l11 31c1 4 2 8-2 10-5-3-9 0-12 3-6 4-12 6-18 8l-4-5-1 22-2 47c-1 14 1 29 2 44 1 6-1 7-6 6a20 20 0 0 0-3 0l-24 1-68-5c-3 0-5-1-7 1a1 1 0 0 1-1 0c-1-3-2-6-1-10l7-52c2-17 0-33 1-49 0-6 2-12 1-18l-5 6c-8-5-17-4-25-7Z");
			attr_dev(path0, "fill", "var(--shirt)");
			add_location(path0, file$N, 36, 6, 969);
			attr_dev(path1, "fill", "var(--pants)");
			attr_dev(path1, "d", "M225 287c2-2 4-1 7-1l68 5 24-1 1 7c-2 12-4 24-3 37a207 207 0 0 0-2 30c0 3 0 5-4 5s-5 4-8 5c-11 0-21 0-31-6a4 4 0 0 0-4 0c-11 5-23 2-35 1-7-1-9-4-9-11-1-24-5-47-4-71Z");
			add_location(path1, file$N, 40, 6, 1371);
			attr_dev(path2, "fill", "var(--flesh)");
			attr_dev(path2, "d", "M238 369c12 1 24 4 35-1a4 4 0 0 1 4 0c10 6 20 6 31 6l-5 29a89 89 0 0 0 1 17c3 18-3 34-7 51-4 14-8 29-8 44a14 14 0 0 1-1 6c-5-4-10-4-16 1v-17c4-13 3-27 2-40-1-12-2-23 0-34 1-7 3-14 1-22a192 192 0 0 1-3-26c-2 15-6 30-4 45 2 10 3 20 1 29-3 18-4 35 0 52 1 3 1 7-3 9-5-2-10-1-14 2 1-24-8-46-12-69-2-12-3-24-1-36 3-15 1-31-1-46ZM338 176c6-2 12-4 18-8 3-3 7-6 12-3 2 14-1 29 2 43 5 23-2 45-4 67-1 14-4 27-1 41 2 12-6 24-18 27l-9 2c-5-2-4-5-1-8s7-6 8-12c0-2 3-4 0-5-4-2-5 1-7 3a77 77 0 0 1-4 8 3 3 0 0 1-3 1 2 2 0 0 1-1-3c3-8 2-17 9-23s11-14 10-25l-1-37c-1-16 0-32-6-47-2-7-1-14-4-21ZM202 157c8 3 18 2 25 7l-1 9c-1 12-8 23-7 35a112 112 0 0 1-8 46c-4 10-6 22-2 32s6 20 6 31c0 2 1 4-2 5-2 1-3-1-4-2s-2-4-4-2c-2 1-1 3 0 5l4 8c1 1 1 4-1 5s-4 0-5-1a11 11 0 0 0-6-4l-4-6-3-8c-4-9-3-17 0-25 4-12 4-23 2-35-2-19 1-39 4-58l1-7c3-11 4-23 5-35ZM311 92c-2 7-6 12-13 13a70 70 0 0 1-23 0c-3 0-2-4-4-5l-9-11c7-5 8-15 2-23l-4-12c-1-2-2-5 2-6l3 6c0-10 0-17 3-23 2-4 4-7 8-5a34 34 0 0 0 21 0c3-1 8-1 8 3 1 6 6 11 6 18 0 1-1 3 1 4 3 0 2-3 3-4 3 3 3 12-1 16s-5 9-7 14c-2 6-2 11 4 15Z");
			add_location(path2, file$N, 44, 6, 1598);
			attr_dev(path3, "fill", "var(--hair)");
			attr_dev(path3, "d", "M252 520c4-3 9-4 14-2 0 4 0 7 6 4 6-5 11-5 16-1 5 8 10 16 9 25-1 13-18 19-28 12-1-1-2-2-4-1-17 8-26 1-23-18 1-7 3-14 10-19ZM315 47c-1 1 0 4-3 4-2-1-1-3-1-4 0-7-5-12-6-18 0-4-5-4-8-3a34 34 0 0 1-21 0c-4-2-6 1-8 5-3 6-3 13-3 23l-3-6c-2-10 2-21-2-32-1-3 1-5 4-6 10-6 21-9 33-6 4 1 6 4 10 6 16 10 7 24 8 37Z");
			add_location(path3, file$N, 48, 6, 2715);
			attr_dev(g0, "id", "configuration");
			attr_dev(g0, "class", "svelte-hj8ad9");
			add_location(g0, file$N, 35, 4, 940);
			attr_dev(g1, "class", "shapes svelte-hj8ad9");
			add_location(g1, file$N, 34, 2, 893);
			attr_dev(svg, "xmlns", "http://www.w3.org/2000/svg");
			attr_dev(svg, "viewBox", "0 0 538.2 564.5");
			attr_dev(svg, "height", "100%");
			attr_dev(svg, "width", "100%");
			attr_dev(svg, "class", "svelte-hj8ad9");
			add_location(svg, file$N, 32, 0, 795);
		},
		m: function mount(target, anchor) {
			insert_dev(target, svg, anchor);
			append_dev(svg, t);
			append_dev(svg, g1);
			append_dev(g1, g0);
			append_dev(g0, path0);
			append_dev(g0, path1);
			append_dev(g0, path2);
			append_dev(g0, path3);
			/*g1_binding*/ ctx[6](g1);
		},
		p: noop,
		d: function destroy(detaching) {
			if (detaching) detach_dev(svg);
			/*g1_binding*/ ctx[6](null);
		}
	};

	dispatch_dev("SvelteRegisterBlock", {
		block,
		id: create_if_block$L.name,
		type: "if",
		source: "(32:0) {#if refresh}",
		ctx
	});

	return block;
}

function create_fragment$N(ctx) {
	let if_block_anchor;
	let if_block = /*refresh*/ ctx[1] && create_if_block$L(ctx);

	const block = {
		c: function create() {
			if (if_block) if_block.c();
			if_block_anchor = empty();
		},
		l: function claim(nodes) {
			throw new Error("options.hydrate only works if the component was compiled with the `hydratable: true` option");
		},
		m: function mount(target, anchor) {
			if (if_block) if_block.m(target, anchor);
			insert_dev(target, if_block_anchor, anchor);
		},
		p: function update(ctx, [dirty]) {
			if (/*refresh*/ ctx[1]) if_block.p(ctx, dirty);
		},
		i: noop,
		o: noop,
		d: function destroy(detaching) {
			if (if_block) if_block.d(detaching);
			if (detaching) detach_dev(if_block_anchor);
		}
	};

	dispatch_dev("SvelteRegisterBlock", {
		block,
		id: create_fragment$N.name,
		type: "component",
		source: "",
		ctx
	});

	return block;
}

function instance$N($$self, $$props, $$invalidate) {
	let { $$slots: slots = {}, $$scope } = $$props;
	validate_slots('Configure_animation', slots, []);
	let { flesh } = $$props;
	let { hair } = $$props;
	let { pants } = $$props;
	let { shirt } = $$props;
	let refresh = true;
	let rootElement;
	const writable_props = ['flesh', 'hair', 'pants', 'shirt'];

	Object.keys($$props).forEach(key => {
		if (!~writable_props.indexOf(key) && key.slice(0, 2) !== '$$' && key !== 'slot') console.warn(`<Configure_animation> was created with unknown prop '${key}'`);
	});

	function g1_binding($$value) {
		binding_callbacks[$$value ? 'unshift' : 'push'](() => {
			rootElement = $$value;
			$$invalidate(0, rootElement);
		});
	}

	$$self.$$set = $$props => {
		if ('flesh' in $$props) $$invalidate(2, flesh = $$props.flesh);
		if ('hair' in $$props) $$invalidate(3, hair = $$props.hair);
		if ('pants' in $$props) $$invalidate(4, pants = $$props.pants);
		if ('shirt' in $$props) $$invalidate(5, shirt = $$props.shirt);
	};

	$$self.$capture_state = () => ({
		flesh,
		hair,
		pants,
		shirt,
		refresh,
		rootElement
	});

	$$self.$inject_state = $$props => {
		if ('flesh' in $$props) $$invalidate(2, flesh = $$props.flesh);
		if ('hair' in $$props) $$invalidate(3, hair = $$props.hair);
		if ('pants' in $$props) $$invalidate(4, pants = $$props.pants);
		if ('shirt' in $$props) $$invalidate(5, shirt = $$props.shirt);
		if ('refresh' in $$props) $$invalidate(1, refresh = $$props.refresh);
		if ('rootElement' in $$props) $$invalidate(0, rootElement = $$props.rootElement);
	};

	if ($$props && "$$inject" in $$props) {
		$$self.$inject_state($$props.$$inject);
	}

	$$self.$$.update = () => {
		if ($$self.$$.dirty & /*rootElement, hair*/ 9) {
			rootElement && rootElement.style.setProperty('--hair', `${hair}`);
		}

		if ($$self.$$.dirty & /*rootElement, flesh*/ 5) {
			rootElement && rootElement.style.setProperty('--flesh', `${flesh}`);
		}

		if ($$self.$$.dirty & /*rootElement, pants*/ 17) {
			rootElement && rootElement.style.setProperty('--pants', `${pants}`);
		}

		if ($$self.$$.dirty & /*rootElement, shirt*/ 33) {
			rootElement && rootElement.style.setProperty('--shirt', `${shirt}`);
		}
	};

	return [rootElement, refresh, flesh, hair, pants, shirt, g1_binding];
}

class Configure_animation extends SvelteComponentDev {
	constructor(options) {
		super(options);
		init(this, options, instance$N, create_fragment$N, safe_not_equal, { flesh: 2, hair: 3, pants: 4, shirt: 5 });

		dispatch_dev("SvelteRegisterComponent", {
			component: this,
			tagName: "Configure_animation",
			options,
			id: create_fragment$N.name
		});

		const { ctx } = this.$$;
		const props = options.props || {};

		if (/*flesh*/ ctx[2] === undefined && !('flesh' in props)) {
			console.warn("<Configure_animation> was created without expected prop 'flesh'");
		}

		if (/*hair*/ ctx[3] === undefined && !('hair' in props)) {
			console.warn("<Configure_animation> was created without expected prop 'hair'");
		}

		if (/*pants*/ ctx[4] === undefined && !('pants' in props)) {
			console.warn("<Configure_animation> was created without expected prop 'pants'");
		}

		if (/*shirt*/ ctx[5] === undefined && !('shirt' in props)) {
			console.warn("<Configure_animation> was created without expected prop 'shirt'");
		}
	}

	get flesh() {
		throw new Error("<Configure_animation>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
	}

	set flesh(value) {
		throw new Error("<Configure_animation>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
	}

	get hair() {
		throw new Error("<Configure_animation>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
	}

	set hair(value) {
		throw new Error("<Configure_animation>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
	}

	get pants() {
		throw new Error("<Configure_animation>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
	}

	set pants(value) {
		throw new Error("<Configure_animation>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
	}

	get shirt() {
		throw new Error("<Configure_animation>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
	}

	set shirt(value) {
		throw new Error("<Configure_animation>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
	}
}

/* src/components/h-scroller.svelte generated by Svelte v3.49.0 */
const file$M = "src/components/h-scroller.svelte";

function create_fragment$M(ctx) {
	let div1;
	let div0;
	let div0_class_value;
	let div1_class_value;
	let current;
	const default_slot_template = /*#slots*/ ctx[11].default;
	const default_slot = create_slot(default_slot_template, ctx, /*$$scope*/ ctx[10], null);

	const block = {
		c: function create() {
			div1 = element("div");
			div0 = element("div");
			if (default_slot) default_slot.c();
			attr_dev(div0, "class", div0_class_value = "wrapper " + /*wrapperClass*/ ctx[1] + " " + (/*centered*/ ctx[5] ? 'force-center' : 'no-force') + " svelte-b6nzu7");
			add_location(div0, file$M, 126, 2, 3535);
			attr_dev(div1, "class", div1_class_value = "n-hscroller " + /*className*/ ctx[0] + " svelte-b6nzu7");
			attr_dev(div1, "style", /*style*/ ctx[2]);
			attr_dev(div1, "data-scroll", "0");
			add_location(div1, file$M, 125, 0, 3450);
		},
		l: function claim(nodes) {
			throw new Error("options.hydrate only works if the component was compiled with the `hydratable: true` option");
		},
		m: function mount(target, anchor) {
			insert_dev(target, div1, anchor);
			append_dev(div1, div0);

			if (default_slot) {
				default_slot.m(div0, null);
			}

			/*div0_binding*/ ctx[12](div0);
			/*div1_binding*/ ctx[13](div1);
			current = true;
		},
		p: function update(ctx, [dirty]) {
			if (default_slot) {
				if (default_slot.p && (!current || dirty & /*$$scope*/ 1024)) {
					update_slot_base(
						default_slot,
						default_slot_template,
						ctx,
						/*$$scope*/ ctx[10],
						!current
						? get_all_dirty_from_scope(/*$$scope*/ ctx[10])
						: get_slot_changes(default_slot_template, /*$$scope*/ ctx[10], dirty, null),
						null
					);
				}
			}

			if (!current || dirty & /*wrapperClass, centered*/ 34 && div0_class_value !== (div0_class_value = "wrapper " + /*wrapperClass*/ ctx[1] + " " + (/*centered*/ ctx[5] ? 'force-center' : 'no-force') + " svelte-b6nzu7")) {
				attr_dev(div0, "class", div0_class_value);
			}

			if (!current || dirty & /*className*/ 1 && div1_class_value !== (div1_class_value = "n-hscroller " + /*className*/ ctx[0] + " svelte-b6nzu7")) {
				attr_dev(div1, "class", div1_class_value);
			}

			if (!current || dirty & /*style*/ 4) {
				attr_dev(div1, "style", /*style*/ ctx[2]);
			}
		},
		i: function intro(local) {
			if (current) return;
			transition_in(default_slot, local);
			current = true;
		},
		o: function outro(local) {
			transition_out(default_slot, local);
			current = false;
		},
		d: function destroy(detaching) {
			if (detaching) detach_dev(div1);
			if (default_slot) default_slot.d(detaching);
			/*div0_binding*/ ctx[12](null);
			/*div1_binding*/ ctx[13](null);
		}
	};

	dispatch_dev("SvelteRegisterBlock", {
		block,
		id: create_fragment$M.name,
		type: "component",
		source: "",
		ctx
	});

	return block;
}

function instance$M($$self, $$props, $$invalidate) {
	let { $$slots: slots = {}, $$scope } = $$props;
	validate_slots('H_scroller', slots, ['default']);
	let { activeIndex = undefined } = $$props;
	let { activeClass = "active" } = $$props;
	let { className = "" } = $$props;
	let { centerIfPossible = false } = $$props;
	let { wrapperClass = "" } = $$props;
	let { style = "" } = $$props;

	// Locals
	let wrapper;

	let scroller;
	let ready = false;
	let centered = true;
	let scrollUnsub;

	// Methods
	const methods = {
		checkForCenter() {
			if (centerIfPossible && wrapper) {
				let width = wrapper.offsetWidth;
				let scrollWidth = wrapper.scrollWidth;

				if (scrollWidth > width) {
					$$invalidate(5, centered = false);
				} else {
					$$invalidate(5, centered = true);
				}
			} else {
				$$invalidate(5, centered = false);
			}
		},
		init() {
			// looop over children - apply a click event
			if (wrapper && wrapper.children) {
				for (let i = 0; i < wrapper.children.length; i++) {
					let child = wrapper.children[i];

					child.addEventListener("click", event => {
						let selectedIndex = Array.prototype.indexOf.call(wrapper.children, event.target);
						methods.selectIndex(selectedIndex);
					});
				}

				scroller.addEventListener(
					"scroll",
					evt => {
						scroller.setAttribute("data-scroll", evt.target.scrollLeft);
					},
					{ passive: true }
				);

				$$invalidate(9, ready = true);
			}

			methods.checkForCenter();
		},
		// Clear currently selected index
		clearSelected() {
			if (activeIndex > -1 && wrapper.children[activeIndex]) {
				wrapper.children[activeIndex].classList.remove(activeClass);
			}
		},
		// Select new item
		selectIndex(index) {
			methods.clearSelected();
			$$invalidate(6, activeIndex = index);

			try {
				let child = wrapper.children[activeIndex];
				let parentOffset = wrapper.offsetLeft;
				let childEnd = child.offsetLeft - parentOffset;
				let scrollTo = childEnd - child.offsetWidth * 0.5;
				let scrolledAmount = scroller.scrollLeft;

				setTimeout(
					() => {
						if (scroller) {
							if (childEnd > scroller.offsetWidth * 0.5) {
								scroller.scrollTo(scrollTo, 0);
							} else if (scrolledAmount > childEnd) {
								scroller.scrollTo(scrollTo, 0);
							}

							child.classList.add(activeClass);
						}

						methods.checkForCenter();
					},
					60
				);
			} catch(e) {
				
			}

			$$invalidate(9, ready = true);
		}
	};

	// when component mounts
	onMount(() => {
		setTimeout(
			() => {
				methods.init();
			},
			10
		);

		methods.checkForCenter();
	});

	onDestroy(() => {
		scroller.removeEventListener("scroll", () => {
			
		});
	});

	const writable_props = [
		'activeIndex',
		'activeClass',
		'className',
		'centerIfPossible',
		'wrapperClass',
		'style'
	];

	Object.keys($$props).forEach(key => {
		if (!~writable_props.indexOf(key) && key.slice(0, 2) !== '$$' && key !== 'slot') console.warn(`<H_scroller> was created with unknown prop '${key}'`);
	});

	function div0_binding($$value) {
		binding_callbacks[$$value ? 'unshift' : 'push'](() => {
			wrapper = $$value;
			$$invalidate(3, wrapper);
		});
	}

	function div1_binding($$value) {
		binding_callbacks[$$value ? 'unshift' : 'push'](() => {
			scroller = $$value;
			$$invalidate(4, scroller);
		});
	}

	$$self.$$set = $$props => {
		if ('activeIndex' in $$props) $$invalidate(6, activeIndex = $$props.activeIndex);
		if ('activeClass' in $$props) $$invalidate(7, activeClass = $$props.activeClass);
		if ('className' in $$props) $$invalidate(0, className = $$props.className);
		if ('centerIfPossible' in $$props) $$invalidate(8, centerIfPossible = $$props.centerIfPossible);
		if ('wrapperClass' in $$props) $$invalidate(1, wrapperClass = $$props.wrapperClass);
		if ('style' in $$props) $$invalidate(2, style = $$props.style);
		if ('$$scope' in $$props) $$invalidate(10, $$scope = $$props.$$scope);
	};

	$$self.$capture_state = () => ({
		onDestroy,
		onMount,
		activeIndex,
		activeClass,
		className,
		centerIfPossible,
		wrapperClass,
		style,
		wrapper,
		scroller,
		ready,
		centered,
		scrollUnsub,
		methods
	});

	$$self.$inject_state = $$props => {
		if ('activeIndex' in $$props) $$invalidate(6, activeIndex = $$props.activeIndex);
		if ('activeClass' in $$props) $$invalidate(7, activeClass = $$props.activeClass);
		if ('className' in $$props) $$invalidate(0, className = $$props.className);
		if ('centerIfPossible' in $$props) $$invalidate(8, centerIfPossible = $$props.centerIfPossible);
		if ('wrapperClass' in $$props) $$invalidate(1, wrapperClass = $$props.wrapperClass);
		if ('style' in $$props) $$invalidate(2, style = $$props.style);
		if ('wrapper' in $$props) $$invalidate(3, wrapper = $$props.wrapper);
		if ('scroller' in $$props) $$invalidate(4, scroller = $$props.scroller);
		if ('ready' in $$props) $$invalidate(9, ready = $$props.ready);
		if ('centered' in $$props) $$invalidate(5, centered = $$props.centered);
		if ('scrollUnsub' in $$props) scrollUnsub = $$props.scrollUnsub;
	};

	if ($$props && "$$inject" in $$props) {
		$$self.$inject_state($$props.$$inject);
	}

	$$self.$$.update = () => {
		if ($$self.$$.dirty & /*activeIndex, ready*/ 576) {
			if (activeIndex && ready) {
				methods.selectIndex(activeIndex);
			}
		}
	};

	return [
		className,
		wrapperClass,
		style,
		wrapper,
		scroller,
		centered,
		activeIndex,
		activeClass,
		centerIfPossible,
		ready,
		$$scope,
		slots,
		div0_binding,
		div1_binding
	];
}

class H_scroller extends SvelteComponentDev {
	constructor(options) {
		super(options);

		init(this, options, instance$M, create_fragment$M, safe_not_equal, {
			activeIndex: 6,
			activeClass: 7,
			className: 0,
			centerIfPossible: 8,
			wrapperClass: 1,
			style: 2
		});

		dispatch_dev("SvelteRegisterComponent", {
			component: this,
			tagName: "H_scroller",
			options,
			id: create_fragment$M.name
		});
	}

	get activeIndex() {
		throw new Error("<H_scroller>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
	}

	set activeIndex(value) {
		throw new Error("<H_scroller>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
	}

	get activeClass() {
		throw new Error("<H_scroller>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
	}

	set activeClass(value) {
		throw new Error("<H_scroller>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
	}

	get className() {
		throw new Error("<H_scroller>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
	}

	set className(value) {
		throw new Error("<H_scroller>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
	}

	get centerIfPossible() {
		throw new Error("<H_scroller>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
	}

	set centerIfPossible(value) {
		throw new Error("<H_scroller>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
	}

	get wrapperClass() {
		throw new Error("<H_scroller>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
	}

	set wrapperClass(value) {
		throw new Error("<H_scroller>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
	}

	get style() {
		throw new Error("<H_scroller>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
	}

	set style(value) {
		throw new Error("<H_scroller>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
	}
}

const base = [
    "#f44336",
    "#E91E63",
    "#9C27B0",
    "#673AB7",
    "#3F51B5",
    "#2196F3",
    "#03A9F4",
    "#00BCD4",
    "#009688",
    "#4CAF50",
    "#8BC34A",
    "#CDDC39",
    "#795548",
    "#607D8B",
    "#B39DDB",
    "#9FA8DA",
    "#90CAF9",
    "#81D4FA",
    "#80DEEA",
    "#80CBC4",
    "#A5D6A7",
    "#C5E1A5",
    "#E6EE9C",
    "#FFF59D",
    "#FFE082",
    "#FFCC80",
    "#FFAB91",
    "#BCAAA4",
    "#EEEEEE",
    "#B0BEC5",
    "#e57373",
    "#9575CD",
    "#7986CB",
    "#64B5F6",
    "#4FC3F7",
    "#4DD0E1",
    "#4DB6AC",
    "#81C784",
    "#AED581",
    "#DCE775",
    "#A1887F",
    "#E0E0E0",
    "#90A4AE",
    "#ef5350",
    "#EC407A",
    "#AB47BC",
    "#7E57C2",
    "#5C6BC0",
    "#42A5F5",
    "#29B6F6",
    "#26C6DA",
    "#26A69A",
    "#66BB6A",
    "#9CCC65",
    "#D4E157",
    "#FFEE58",
    "#FFCA28",
    "#FFA726",
    "#FF7043",
    "#8D6E63",
    "#BDBDBD",
    "#78909C",
    "#f44336",
    "#E91E63",
    "#9C27B0",
    "#673AB7",
    "#3F51B5",
    "#2196F3",
    "#03A9F4",
    "#00BCD4",
    "#009688",
    "#4CAF50",
    "#8BC34A",
    "#CDDC39",
    "#FFEB3B",
    "#FFC107",
    "#FF9800",
    "#FF5722",
    "#795548",
    "#9E9E9E",
    "#607D8B",
    "#e53935",
    "#D81B60",
    "#8E24AA",
    "#5E35B1",
    "#3949AB",
    "#1E88E5",
    "#039BE5",
    "#00ACC1",
    "#00897B",
    "#43A047",
    "#7CB342",
    "#C0CA33",
    "#FDD835",
    "#FFB300",
    "#FB8C00",
    "#F4511E",
    "#6D4C41",
    "#757575",
    "#546E7A",
    "#d32f2f",
    "#C2185B",
    "#7B1FA2",
    "#512DA8",
    "#303F9F",
    "#1976D2",
    "#0288D1",
    "#0097A7",
    "#00796B",
    "#388E3C",
    "#689F38",
    "#AFB42B",
    "#FBC02D",
    "#FFA000",
    "#F57C00",
    "#E64A19",
    "#5D4037",
    "#616161",
    "#455A64",
    "#c62828",
    "#AD1457",
    "#6A1B9A",
    "#4527A0",
    "#283593",
    "#1565C0",
    "#0277BD",
    "#00838F",
    "#00695C",
    "#2E7D32",
    "#558B2F",
    "#9E9D24",
    "#F9A825",
    "#FF8F00",
    "#EF6C00",
    "#D84315",
    "#4E342E",
    "#424242",
    "#37474F",
    "#b71c1c",
    "#880E4F",
    "#4A148C",
    "#311B92",
    "#1A237E",
    "#0D47A1",
    "#01579B",
    "#006064",
    "#004D40",
    "#1B5E20",
    "#33691E",
    "#827717",
    "#F57F17",
    "#FF6F00",
    "#E65100",
    "#BF360C",
    "#3E2723",
    "#212121",
    "#263238",
    "#ff8a80",
    "#FF80AB",
    "#EA80FC",
    "#B388FF",
    "#8C9EFF",
    "#82B1FF",
    "#80D8FF",
    "#84FFFF",
    "#A7FFEB",
    "#B9F6CA",
    "#CCFF90",
    "#F4FF81",
    "#FFFF8D",
    "#FFE57F",
    "#FFD180",
    "#FF9E80",
    "#ff5252",
    "#FF4081",
    "#E040FB",
    "#7C4DFF",
    "#536DFE",
    "#448AFF",
    "#40C4FF",
    "#18FFFF",
    "#64FFDA",
    "#69F0AE",
    "#B2FF59",
    "#EEFF41",
    "#FFFF00",
    "#FFD740",
    "#FFAB40",
    "#FF6E40",
    "#ff1744",
    "#F50057",
    "#D500F9",
    "#651FFF",
    "#3D5AFE",
    "#2979FF",
    "#00B0FF",
    "#00E5FF",
    "#1DE9B6",
    "#00E676",
    "#76FF03",
    "#C6FF00",
    "#FFEA00",
    "#FFC400",
    "#FF9100",
    "#FF3D00",
    "#d50000",
    "#C51162",
    "#AA00FF",
    "#6200EA",
    "#304FFE",
    "#2962FF",
    "#0091EA",
    "#00B8D4",
    "#00BFA5",
    "#00C853",
    "#64DD17",
    "#AEEA00",
    "#FFD600",
    "#FFAB00",
    "#FF6D00",
    "#DD2C00",
];

/* src/components/color-picker.svelte generated by Svelte v3.49.0 */
const file$L = "src/components/color-picker.svelte";

function get_each_context_1(ctx, list, i) {
	const child_ctx = ctx.slice();
	child_ctx[7] = list[i];
	child_ctx[9] = i;
	return child_ctx;
}

function get_each_context(ctx, list, i) {
	const child_ctx = ctx.slice();
	child_ctx[7] = list[i];
	child_ctx[9] = i;
	return child_ctx;
}

// (52:0) {:else}
function create_else_block$2(ctx) {
	let nhscroller;
	let current;

	nhscroller = new H_scroller({
			props: {
				className: "n-color-picker " + /*className*/ ctx[3],
				activeIndex: /*selectedIndex*/ ctx[4],
				$$slots: { default: [create_default_slot$5] },
				$$scope: { ctx }
			},
			$$inline: true
		});

	const block = {
		c: function create() {
			create_component(nhscroller.$$.fragment);
		},
		m: function mount(target, anchor) {
			mount_component(nhscroller, target, anchor);
			current = true;
		},
		p: function update(ctx, dirty) {
			const nhscroller_changes = {};
			if (dirty & /*className*/ 8) nhscroller_changes.className = "n-color-picker " + /*className*/ ctx[3];
			if (dirty & /*selectedIndex*/ 16) nhscroller_changes.activeIndex = /*selectedIndex*/ ctx[4];

			if (dirty & /*$$scope, colors, value*/ 2053) {
				nhscroller_changes.$$scope = { dirty, ctx };
			}

			nhscroller.$set(nhscroller_changes);
		},
		i: function intro(local) {
			if (current) return;
			transition_in(nhscroller.$$.fragment, local);
			current = true;
		},
		o: function outro(local) {
			transition_out(nhscroller.$$.fragment, local);
			current = false;
		},
		d: function destroy(detaching) {
			destroy_component(nhscroller, detaching);
		}
	};

	dispatch_dev("SvelteRegisterBlock", {
		block,
		id: create_else_block$2.name,
		type: "else",
		source: "(52:0) {:else}",
		ctx
	});

	return block;
}

// (41:0) {#if grid}
function create_if_block$K(ctx) {
	let div;
	let div_class_value;
	let each_value = /*colors*/ ctx[2];
	validate_each_argument(each_value);
	let each_blocks = [];

	for (let i = 0; i < each_value.length; i += 1) {
		each_blocks[i] = create_each_block(get_each_context(ctx, each_value, i));
	}

	const block = {
		c: function create() {
			div = element("div");

			for (let i = 0; i < each_blocks.length; i += 1) {
				each_blocks[i].c();
			}

			attr_dev(div, "class", div_class_value = "n-grid n-color-picker " + /*className*/ ctx[3] + " svelte-g9ovez");
			attr_dev(div, "activeindex", /*selectedIndex*/ ctx[4]);
			add_location(div, file$L, 41, 2, 944);
		},
		m: function mount(target, anchor) {
			insert_dev(target, div, anchor);

			for (let i = 0; i < each_blocks.length; i += 1) {
				each_blocks[i].m(div, null);
			}
		},
		p: function update(ctx, dirty) {
			if (dirty & /*colors, value*/ 5) {
				each_value = /*colors*/ ctx[2];
				validate_each_argument(each_value);
				let i;

				for (i = 0; i < each_value.length; i += 1) {
					const child_ctx = get_each_context(ctx, each_value, i);

					if (each_blocks[i]) {
						each_blocks[i].p(child_ctx, dirty);
					} else {
						each_blocks[i] = create_each_block(child_ctx);
						each_blocks[i].c();
						each_blocks[i].m(div, null);
					}
				}

				for (; i < each_blocks.length; i += 1) {
					each_blocks[i].d(1);
				}

				each_blocks.length = each_value.length;
			}

			if (dirty & /*className*/ 8 && div_class_value !== (div_class_value = "n-grid n-color-picker " + /*className*/ ctx[3] + " svelte-g9ovez")) {
				attr_dev(div, "class", div_class_value);
			}

			if (dirty & /*selectedIndex*/ 16) {
				attr_dev(div, "activeindex", /*selectedIndex*/ ctx[4]);
			}
		},
		i: noop,
		o: noop,
		d: function destroy(detaching) {
			if (detaching) detach_dev(div);
			destroy_each(each_blocks, detaching);
		}
	};

	dispatch_dev("SvelteRegisterBlock", {
		block,
		id: create_if_block$K.name,
		type: "if",
		source: "(41:0) {#if grid}",
		ctx
	});

	return block;
}

// (54:4) {#each colors as color, index}
function create_each_block_1(ctx) {
	let button;
	let button_class_value;
	let mounted;
	let dispose;

	function click_handler_1() {
		return /*click_handler_1*/ ctx[6](/*color*/ ctx[7]);
	}

	const block = {
		c: function create() {
			button = element("button");
			attr_dev(button, "class", button_class_value = "color-btn " + (/*color*/ ctx[7] == /*value*/ ctx[0] ? 'selected' : '') + " svelte-g9ovez");
			set_style(button, "padding", "0px");
			set_style(button, "width", "20px");
			set_style(button, "background-color", /*color*/ ctx[7]);
			add_location(button, file$L, 54, 6, 1388);
		},
		m: function mount(target, anchor) {
			insert_dev(target, button, anchor);

			if (!mounted) {
				dispose = listen_dev(button, "click", click_handler_1, false, false, false);
				mounted = true;
			}
		},
		p: function update(new_ctx, dirty) {
			ctx = new_ctx;

			if (dirty & /*colors, value*/ 5 && button_class_value !== (button_class_value = "color-btn " + (/*color*/ ctx[7] == /*value*/ ctx[0] ? 'selected' : '') + " svelte-g9ovez")) {
				attr_dev(button, "class", button_class_value);
			}

			if (dirty & /*colors*/ 4) {
				set_style(button, "background-color", /*color*/ ctx[7]);
			}
		},
		d: function destroy(detaching) {
			if (detaching) detach_dev(button);
			mounted = false;
			dispose();
		}
	};

	dispatch_dev("SvelteRegisterBlock", {
		block,
		id: create_each_block_1.name,
		type: "each",
		source: "(54:4) {#each colors as color, index}",
		ctx
	});

	return block;
}

// (53:2) <NHScroller className="n-color-picker {className}" activeIndex={selectedIndex}>
function create_default_slot$5(ctx) {
	let each_1_anchor;
	let each_value_1 = /*colors*/ ctx[2];
	validate_each_argument(each_value_1);
	let each_blocks = [];

	for (let i = 0; i < each_value_1.length; i += 1) {
		each_blocks[i] = create_each_block_1(get_each_context_1(ctx, each_value_1, i));
	}

	const block = {
		c: function create() {
			for (let i = 0; i < each_blocks.length; i += 1) {
				each_blocks[i].c();
			}

			each_1_anchor = empty();
		},
		m: function mount(target, anchor) {
			for (let i = 0; i < each_blocks.length; i += 1) {
				each_blocks[i].m(target, anchor);
			}

			insert_dev(target, each_1_anchor, anchor);
		},
		p: function update(ctx, dirty) {
			if (dirty & /*colors, value*/ 5) {
				each_value_1 = /*colors*/ ctx[2];
				validate_each_argument(each_value_1);
				let i;

				for (i = 0; i < each_value_1.length; i += 1) {
					const child_ctx = get_each_context_1(ctx, each_value_1, i);

					if (each_blocks[i]) {
						each_blocks[i].p(child_ctx, dirty);
					} else {
						each_blocks[i] = create_each_block_1(child_ctx);
						each_blocks[i].c();
						each_blocks[i].m(each_1_anchor.parentNode, each_1_anchor);
					}
				}

				for (; i < each_blocks.length; i += 1) {
					each_blocks[i].d(1);
				}

				each_blocks.length = each_value_1.length;
			}
		},
		d: function destroy(detaching) {
			destroy_each(each_blocks, detaching);
			if (detaching) detach_dev(each_1_anchor);
		}
	};

	dispatch_dev("SvelteRegisterBlock", {
		block,
		id: create_default_slot$5.name,
		type: "slot",
		source: "(53:2) <NHScroller className=\\\"n-color-picker {className}\\\" activeIndex={selectedIndex}>",
		ctx
	});

	return block;
}

// (43:4) {#each colors as color, index}
function create_each_block(ctx) {
	let button;
	let button_class_value;
	let mounted;
	let dispose;

	function click_handler() {
		return /*click_handler*/ ctx[5](/*color*/ ctx[7]);
	}

	const block = {
		c: function create() {
			button = element("button");
			attr_dev(button, "class", button_class_value = "color-btn " + (/*color*/ ctx[7] == /*value*/ ctx[0] ? 'selected' : '') + " svelte-g9ovez");
			set_style(button, "background-color", /*color*/ ctx[7]);
			add_location(button, file$L, 43, 6, 1061);
		},
		m: function mount(target, anchor) {
			insert_dev(target, button, anchor);

			if (!mounted) {
				dispose = listen_dev(button, "click", click_handler, false, false, false);
				mounted = true;
			}
		},
		p: function update(new_ctx, dirty) {
			ctx = new_ctx;

			if (dirty & /*colors, value*/ 5 && button_class_value !== (button_class_value = "color-btn " + (/*color*/ ctx[7] == /*value*/ ctx[0] ? 'selected' : '') + " svelte-g9ovez")) {
				attr_dev(button, "class", button_class_value);
			}

			if (dirty & /*colors*/ 4) {
				set_style(button, "background-color", /*color*/ ctx[7]);
			}
		},
		d: function destroy(detaching) {
			if (detaching) detach_dev(button);
			mounted = false;
			dispose();
		}
	};

	dispatch_dev("SvelteRegisterBlock", {
		block,
		id: create_each_block.name,
		type: "each",
		source: "(43:4) {#each colors as color, index}",
		ctx
	});

	return block;
}

function create_fragment$L(ctx) {
	let current_block_type_index;
	let if_block;
	let if_block_anchor;
	let current;
	const if_block_creators = [create_if_block$K, create_else_block$2];
	const if_blocks = [];

	function select_block_type(ctx, dirty) {
		if (/*grid*/ ctx[1]) return 0;
		return 1;
	}

	current_block_type_index = select_block_type(ctx);
	if_block = if_blocks[current_block_type_index] = if_block_creators[current_block_type_index](ctx);

	const block = {
		c: function create() {
			if_block.c();
			if_block_anchor = empty();
		},
		l: function claim(nodes) {
			throw new Error("options.hydrate only works if the component was compiled with the `hydratable: true` option");
		},
		m: function mount(target, anchor) {
			if_blocks[current_block_type_index].m(target, anchor);
			insert_dev(target, if_block_anchor, anchor);
			current = true;
		},
		p: function update(ctx, [dirty]) {
			let previous_block_index = current_block_type_index;
			current_block_type_index = select_block_type(ctx);

			if (current_block_type_index === previous_block_index) {
				if_blocks[current_block_type_index].p(ctx, dirty);
			} else {
				group_outros();

				transition_out(if_blocks[previous_block_index], 1, 1, () => {
					if_blocks[previous_block_index] = null;
				});

				check_outros();
				if_block = if_blocks[current_block_type_index];

				if (!if_block) {
					if_block = if_blocks[current_block_type_index] = if_block_creators[current_block_type_index](ctx);
					if_block.c();
				} else {
					if_block.p(ctx, dirty);
				}

				transition_in(if_block, 1);
				if_block.m(if_block_anchor.parentNode, if_block_anchor);
			}
		},
		i: function intro(local) {
			if (current) return;
			transition_in(if_block);
			current = true;
		},
		o: function outro(local) {
			transition_out(if_block);
			current = false;
		},
		d: function destroy(detaching) {
			if_blocks[current_block_type_index].d(detaching);
			if (detaching) detach_dev(if_block_anchor);
		}
	};

	dispatch_dev("SvelteRegisterBlock", {
		block,
		id: create_fragment$L.name,
		type: "component",
		source: "",
		ctx
	});

	return block;
}

function instance$L($$self, $$props, $$invalidate) {
	let selectedIndex;
	let { $$slots: slots = {}, $$scope } = $$props;
	validate_slots('Color_picker', slots, []);
	let { value = "#20699d" } = $$props;
	let { grid = false } = $$props;
	let { colors = base } = $$props;
	let { className = "" } = $$props;
	const writable_props = ['value', 'grid', 'colors', 'className'];

	Object.keys($$props).forEach(key => {
		if (!~writable_props.indexOf(key) && key.slice(0, 2) !== '$$' && key !== 'slot') console.warn(`<Color_picker> was created with unknown prop '${key}'`);
	});

	const click_handler = color => {
		$$invalidate(0, value = color);
	};

	const click_handler_1 = color => {
		$$invalidate(0, value = color);
	};

	$$self.$$set = $$props => {
		if ('value' in $$props) $$invalidate(0, value = $$props.value);
		if ('grid' in $$props) $$invalidate(1, grid = $$props.grid);
		if ('colors' in $$props) $$invalidate(2, colors = $$props.colors);
		if ('className' in $$props) $$invalidate(3, className = $$props.className);
	};

	$$self.$capture_state = () => ({
		NHScroller: H_scroller,
		base,
		value,
		grid,
		colors,
		className,
		selectedIndex
	});

	$$self.$inject_state = $$props => {
		if ('value' in $$props) $$invalidate(0, value = $$props.value);
		if ('grid' in $$props) $$invalidate(1, grid = $$props.grid);
		if ('colors' in $$props) $$invalidate(2, colors = $$props.colors);
		if ('className' in $$props) $$invalidate(3, className = $$props.className);
		if ('selectedIndex' in $$props) $$invalidate(4, selectedIndex = $$props.selectedIndex);
	};

	if ($$props && "$$inject" in $$props) {
		$$self.$inject_state($$props.$$inject);
	}

	$$self.$$.update = () => {
		if ($$self.$$.dirty & /*colors, value*/ 5) {
			$$invalidate(4, selectedIndex = colors.indexOf(value) || 0);
		}
	};

	return [value, grid, colors, className, selectedIndex, click_handler, click_handler_1];
}

class Color_picker extends SvelteComponentDev {
	constructor(options) {
		super(options);

		init(this, options, instance$L, create_fragment$L, safe_not_equal, {
			value: 0,
			grid: 1,
			colors: 2,
			className: 3
		});

		dispatch_dev("SvelteRegisterComponent", {
			component: this,
			tagName: "Color_picker",
			options,
			id: create_fragment$L.name
		});
	}

	get value() {
		throw new Error("<Color_picker>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
	}

	set value(value) {
		throw new Error("<Color_picker>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
	}

	get grid() {
		throw new Error("<Color_picker>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
	}

	set grid(value) {
		throw new Error("<Color_picker>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
	}

	get colors() {
		throw new Error("<Color_picker>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
	}

	set colors(value) {
		throw new Error("<Color_picker>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
	}

	get className() {
		throw new Error("<Color_picker>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
	}

	set className(value) {
		throw new Error("<Color_picker>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
	}
}

/* node_modules/carbon-icons-svelte/lib/AccessibilityColor.svelte generated by Svelte v3.49.0 */

const file$K = "node_modules/carbon-icons-svelte/lib/AccessibilityColor.svelte";

// (23:2) {#if title}
function create_if_block$J(ctx) {
	let title_1;
	let t;

	const block = {
		c: function create() {
			title_1 = svg_element("title");
			t = text(/*title*/ ctx[1]);
			add_location(title_1, file$K, 22, 13, 543);
		},
		m: function mount(target, anchor) {
			insert_dev(target, title_1, anchor);
			append_dev(title_1, t);
		},
		p: function update(ctx, dirty) {
			if (dirty & /*title*/ 2) set_data_dev(t, /*title*/ ctx[1]);
		},
		d: function destroy(detaching) {
			if (detaching) detach_dev(title_1);
		}
	};

	dispatch_dev("SvelteRegisterBlock", {
		block,
		id: create_if_block$J.name,
		type: "if",
		source: "(23:2) {#if title}",
		ctx
	});

	return block;
}

function create_fragment$K(ctx) {
	let svg;
	let path0;
	let path1;
	let path2;
	let if_block = /*title*/ ctx[1] && create_if_block$J(ctx);

	let svg_levels = [
		{ xmlns: "http://www.w3.org/2000/svg" },
		{ viewBox: "0 0 32 32" },
		{ fill: "currentColor" },
		{ preserveAspectRatio: "xMidYMid meet" },
		{ width: /*size*/ ctx[0] },
		{ height: /*size*/ ctx[0] },
		/*attributes*/ ctx[2],
		/*$$restProps*/ ctx[3]
	];

	let svg_data = {};

	for (let i = 0; i < svg_levels.length; i += 1) {
		svg_data = assign(svg_data, svg_levels[i]);
	}

	const block = {
		c: function create() {
			svg = svg_element("svg");
			if (if_block) if_block.c();
			path0 = svg_element("path");
			path1 = svg_element("path");
			path2 = svg_element("path");
			attr_dev(path0, "d", "M16,20a4,4,0,1,1,4-4A4.0045,4.0045,0,0,1,16,20Zm0-6a2,2,0,1,0,2,2A2.0021,2.0021,0,0,0,16,14Z");
			add_location(path0, file$K, 23, 2, 573);
			attr_dev(path1, "d", "M16,24a10.6547,10.6547,0,0,1-9.97-7.7576L5.9692,16l.0606-.2424A10.6547,10.6547,0,0,1,16,8a10.6547,10.6547,0,0,1,9.97,7.7576L26.0308,16l-.0606.2424A10.6547,10.6547,0,0,1,16,24ZM8.0352,16A8.5975,8.5975,0,0,0,16,22a8.5975,8.5975,0,0,0,7.9648-6A8.5975,8.5975,0,0,0,16,10,8.5975,8.5975,0,0,0,8.0352,16Z");
			add_location(path1, file$K, 23, 112, 683);
			attr_dev(path2, "d", "M16,30A14,14,0,1,1,30,16,14.0158,14.0158,0,0,1,16,30ZM16,4A12,12,0,1,0,28,16,12.0137,12.0137,0,0,0,16,4Z");
			add_location(path2, file$K, 23, 427, 998);
			set_svg_attributes(svg, svg_data);
			add_location(svg, file$K, 13, 0, 337);
		},
		l: function claim(nodes) {
			throw new Error("options.hydrate only works if the component was compiled with the `hydratable: true` option");
		},
		m: function mount(target, anchor) {
			insert_dev(target, svg, anchor);
			if (if_block) if_block.m(svg, null);
			append_dev(svg, path0);
			append_dev(svg, path1);
			append_dev(svg, path2);
		},
		p: function update(ctx, [dirty]) {
			if (/*title*/ ctx[1]) {
				if (if_block) {
					if_block.p(ctx, dirty);
				} else {
					if_block = create_if_block$J(ctx);
					if_block.c();
					if_block.m(svg, path0);
				}
			} else if (if_block) {
				if_block.d(1);
				if_block = null;
			}

			set_svg_attributes(svg, svg_data = get_spread_update(svg_levels, [
				{ xmlns: "http://www.w3.org/2000/svg" },
				{ viewBox: "0 0 32 32" },
				{ fill: "currentColor" },
				{ preserveAspectRatio: "xMidYMid meet" },
				dirty & /*size*/ 1 && { width: /*size*/ ctx[0] },
				dirty & /*size*/ 1 && { height: /*size*/ ctx[0] },
				dirty & /*attributes*/ 4 && /*attributes*/ ctx[2],
				dirty & /*$$restProps*/ 8 && /*$$restProps*/ ctx[3]
			]));
		},
		i: noop,
		o: noop,
		d: function destroy(detaching) {
			if (detaching) detach_dev(svg);
			if (if_block) if_block.d();
		}
	};

	dispatch_dev("SvelteRegisterBlock", {
		block,
		id: create_fragment$K.name,
		type: "component",
		source: "",
		ctx
	});

	return block;
}

function instance$K($$self, $$props, $$invalidate) {
	let labelled;
	let attributes;
	const omit_props_names = ["size","title"];
	let $$restProps = compute_rest_props($$props, omit_props_names);
	let { $$slots: slots = {}, $$scope } = $$props;
	validate_slots('AccessibilityColor', slots, []);
	let { size = 16 } = $$props;
	let { title = undefined } = $$props;

	$$self.$$set = $$new_props => {
		$$invalidate(5, $$props = assign(assign({}, $$props), exclude_internal_props($$new_props)));
		$$invalidate(3, $$restProps = compute_rest_props($$props, omit_props_names));
		if ('size' in $$new_props) $$invalidate(0, size = $$new_props.size);
		if ('title' in $$new_props) $$invalidate(1, title = $$new_props.title);
	};

	$$self.$capture_state = () => ({ size, title, labelled, attributes });

	$$self.$inject_state = $$new_props => {
		$$invalidate(5, $$props = assign(assign({}, $$props), $$new_props));
		if ('size' in $$props) $$invalidate(0, size = $$new_props.size);
		if ('title' in $$props) $$invalidate(1, title = $$new_props.title);
		if ('labelled' in $$props) $$invalidate(4, labelled = $$new_props.labelled);
		if ('attributes' in $$props) $$invalidate(2, attributes = $$new_props.attributes);
	};

	if ($$props && "$$inject" in $$props) {
		$$self.$inject_state($$props.$$inject);
	}

	$$self.$$.update = () => {
		$$invalidate(4, labelled = $$props["aria-label"] || $$props["aria-labelledby"] || title);

		$$invalidate(2, attributes = {
			"aria-hidden": labelled ? undefined : true,
			role: labelled ? "img" : undefined,
			focusable: Number($$props["tabindex"]) === 0 ? true : undefined
		});
	};

	$$props = exclude_internal_props($$props);
	return [size, title, attributes, $$restProps, labelled];
}

class AccessibilityColor extends SvelteComponentDev {
	constructor(options) {
		super(options);
		init(this, options, instance$K, create_fragment$K, safe_not_equal, { size: 0, title: 1 });

		dispatch_dev("SvelteRegisterComponent", {
			component: this,
			tagName: "AccessibilityColor",
			options,
			id: create_fragment$K.name
		});
	}

	get size() {
		throw new Error("<AccessibilityColor>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
	}

	set size(value) {
		throw new Error("<AccessibilityColor>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
	}

	get title() {
		throw new Error("<AccessibilityColor>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
	}

	set title(value) {
		throw new Error("<AccessibilityColor>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
	}
}

/* src/pages/settings.svelte generated by Svelte v3.49.0 */
const file$J = "src/pages/settings.svelte";

// (60:8) <Column>
function create_default_slot_9(ctx) {
	let h1;
	let t0;
	let t1;
	let h2;
	let t2;
	let t3;
	let h5;
	let t5;
	let hr;

	const block = {
		c: function create() {
			h1 = element("h1");
			t0 = text(/*pluginemoji*/ ctx[2]);
			t1 = space();
			h2 = element("h2");
			t2 = text(/*pluginname*/ ctx[1]);
			t3 = space();
			h5 = element("h5");
			h5.textContent = "Plugin Settings";
			t5 = space();
			hr = element("hr");
			set_style(h1, "text-align", "center");
			add_location(h1, file$J, 60, 10, 1628);
			set_style(h2, "text-align", "center");
			attr_dev(h2, "class", "svelte-148r5ex");
			add_location(h2, file$J, 61, 10, 1687);
			set_style(h5, "text-align", "center");
			add_location(h5, file$J, 62, 10, 1745);
			add_location(hr, file$J, 63, 10, 1806);
		},
		m: function mount(target, anchor) {
			insert_dev(target, h1, anchor);
			append_dev(h1, t0);
			insert_dev(target, t1, anchor);
			insert_dev(target, h2, anchor);
			append_dev(h2, t2);
			insert_dev(target, t3, anchor);
			insert_dev(target, h5, anchor);
			insert_dev(target, t5, anchor);
			insert_dev(target, hr, anchor);
		},
		p: function update(ctx, dirty) {
			if (dirty & /*pluginemoji*/ 4) set_data_dev(t0, /*pluginemoji*/ ctx[2]);
			if (dirty & /*pluginname*/ 2) set_data_dev(t2, /*pluginname*/ ctx[1]);
		},
		d: function destroy(detaching) {
			if (detaching) detach_dev(h1);
			if (detaching) detach_dev(t1);
			if (detaching) detach_dev(h2);
			if (detaching) detach_dev(t3);
			if (detaching) detach_dev(h5);
			if (detaching) detach_dev(t5);
			if (detaching) detach_dev(hr);
		}
	};

	dispatch_dev("SvelteRegisterBlock", {
		block,
		id: create_default_slot_9.name,
		type: "slot",
		source: "(60:8) <Column>",
		ctx
	});

	return block;
}

// (59:6) <Row>
function create_default_slot_8(ctx) {
	let column;
	let current;

	column = new Column({
			props: {
				$$slots: { default: [create_default_slot_9] },
				$$scope: { ctx }
			},
			$$inline: true
		});

	const block = {
		c: function create() {
			create_component(column.$$.fragment);
		},
		m: function mount(target, anchor) {
			mount_component(column, target, anchor);
			current = true;
		},
		p: function update(ctx, dirty) {
			const column_changes = {};

			if (dirty & /*$$scope, pluginname, pluginemoji*/ 67108870) {
				column_changes.$$scope = { dirty, ctx };
			}

			column.$set(column_changes);
		},
		i: function intro(local) {
			if (current) return;
			transition_in(column.$$.fragment, local);
			current = true;
		},
		o: function outro(local) {
			transition_out(column.$$.fragment, local);
			current = false;
		},
		d: function destroy(detaching) {
			destroy_component(column, detaching);
		}
	};

	dispatch_dev("SvelteRegisterBlock", {
		block,
		id: create_default_slot_8.name,
		type: "slot",
		source: "(59:6) <Row>",
		ctx
	});

	return block;
}

// (58:4) <Grid>
function create_default_slot_7(ctx) {
	let row;
	let current;

	row = new Row({
			props: {
				$$slots: { default: [create_default_slot_8] },
				$$scope: { ctx }
			},
			$$inline: true
		});

	const block = {
		c: function create() {
			create_component(row.$$.fragment);
		},
		m: function mount(target, anchor) {
			mount_component(row, target, anchor);
			current = true;
		},
		p: function update(ctx, dirty) {
			const row_changes = {};

			if (dirty & /*$$scope, pluginname, pluginemoji*/ 67108870) {
				row_changes.$$scope = { dirty, ctx };
			}

			row.$set(row_changes);
		},
		i: function intro(local) {
			if (current) return;
			transition_in(row.$$.fragment, local);
			current = true;
		},
		o: function outro(local) {
			transition_out(row.$$.fragment, local);
			current = false;
		},
		d: function destroy(detaching) {
			destroy_component(row, detaching);
		}
	};

	dispatch_dev("SvelteRegisterBlock", {
		block,
		id: create_default_slot_7.name,
		type: "slot",
		source: "(58:4) <Grid>",
		ctx
	});

	return block;
}

// (69:6) {#if refreshed}
function create_if_block$I(ctx) {
	let div0;
	let configureanimation;
	let updating_flesh;
	let updating_hair;
	let updating_pants;
	let updating_shirt;
	let t0;
	let span;
	let accessibilitycolor;
	let t1;
	let div3;
	let div1;
	let p0;
	let t3;
	let div2;
	let colorpicker0;
	let updating_value;
	let t4;
	let div6;
	let div4;
	let p1;
	let t6;
	let div5;
	let colorpicker1;
	let updating_value_1;
	let t7;
	let div9;
	let div7;
	let p2;
	let t9;
	let div8;
	let colorpicker2;
	let updating_value_2;
	let t10;
	let div12;
	let div10;
	let p3;
	let t12;
	let div11;
	let colorpicker3;
	let updating_value_3;
	let current;
	let mounted;
	let dispose;

	function configureanimation_flesh_binding(value) {
		/*configureanimation_flesh_binding*/ ctx[7](value);
	}

	function configureanimation_hair_binding(value) {
		/*configureanimation_hair_binding*/ ctx[8](value);
	}

	function configureanimation_pants_binding(value) {
		/*configureanimation_pants_binding*/ ctx[9](value);
	}

	function configureanimation_shirt_binding(value) {
		/*configureanimation_shirt_binding*/ ctx[10](value);
	}

	let configureanimation_props = {};

	if (/*settingsconfig*/ ctx[0].colors.flesh !== void 0) {
		configureanimation_props.flesh = /*settingsconfig*/ ctx[0].colors.flesh;
	}

	if (/*settingsconfig*/ ctx[0].colors.hair !== void 0) {
		configureanimation_props.hair = /*settingsconfig*/ ctx[0].colors.hair;
	}

	if (/*settingsconfig*/ ctx[0].colors.pants !== void 0) {
		configureanimation_props.pants = /*settingsconfig*/ ctx[0].colors.pants;
	}

	if (/*settingsconfig*/ ctx[0].colors.shirt !== void 0) {
		configureanimation_props.shirt = /*settingsconfig*/ ctx[0].colors.shirt;
	}

	configureanimation = new Configure_animation({
			props: configureanimation_props,
			$$inline: true
		});

	binding_callbacks.push(() => bind(configureanimation, 'flesh', configureanimation_flesh_binding));
	binding_callbacks.push(() => bind(configureanimation, 'hair', configureanimation_hair_binding));
	binding_callbacks.push(() => bind(configureanimation, 'pants', configureanimation_pants_binding));
	binding_callbacks.push(() => bind(configureanimation, 'shirt', configureanimation_shirt_binding));

	accessibilitycolor = new AccessibilityColor({
			props: {
				size: 32,
				style: "cursor: pointer;margin-top:-32px;"
			},
			$$inline: true
		});

	function colorpicker0_value_binding(value) {
		/*colorpicker0_value_binding*/ ctx[12](value);
	}

	let colorpicker0_props = {};

	if (/*settingsconfig*/ ctx[0].colors.flesh !== void 0) {
		colorpicker0_props.value = /*settingsconfig*/ ctx[0].colors.flesh;
	}

	colorpicker0 = new Color_picker({
			props: colorpicker0_props,
			$$inline: true
		});

	binding_callbacks.push(() => bind(colorpicker0, 'value', colorpicker0_value_binding));

	function colorpicker1_value_binding(value) {
		/*colorpicker1_value_binding*/ ctx[13](value);
	}

	let colorpicker1_props = {};

	if (/*settingsconfig*/ ctx[0].colors.hair !== void 0) {
		colorpicker1_props.value = /*settingsconfig*/ ctx[0].colors.hair;
	}

	colorpicker1 = new Color_picker({
			props: colorpicker1_props,
			$$inline: true
		});

	binding_callbacks.push(() => bind(colorpicker1, 'value', colorpicker1_value_binding));

	function colorpicker2_value_binding(value) {
		/*colorpicker2_value_binding*/ ctx[14](value);
	}

	let colorpicker2_props = {};

	if (/*settingsconfig*/ ctx[0].colors.pants !== void 0) {
		colorpicker2_props.value = /*settingsconfig*/ ctx[0].colors.pants;
	}

	colorpicker2 = new Color_picker({
			props: colorpicker2_props,
			$$inline: true
		});

	binding_callbacks.push(() => bind(colorpicker2, 'value', colorpicker2_value_binding));

	function colorpicker3_value_binding(value) {
		/*colorpicker3_value_binding*/ ctx[15](value);
	}

	let colorpicker3_props = {};

	if (/*settingsconfig*/ ctx[0].colors.shirt !== void 0) {
		colorpicker3_props.value = /*settingsconfig*/ ctx[0].colors.shirt;
	}

	colorpicker3 = new Color_picker({
			props: colorpicker3_props,
			$$inline: true
		});

	binding_callbacks.push(() => bind(colorpicker3, 'value', colorpicker3_value_binding));

	const block = {
		c: function create() {
			div0 = element("div");
			create_component(configureanimation.$$.fragment);
			t0 = space();
			span = element("span");
			create_component(accessibilitycolor.$$.fragment);
			t1 = space();
			div3 = element("div");
			div1 = element("div");
			p0 = element("p");
			p0.textContent = "Flesh";
			t3 = space();
			div2 = element("div");
			create_component(colorpicker0.$$.fragment);
			t4 = space();
			div6 = element("div");
			div4 = element("div");
			p1 = element("p");
			p1.textContent = "Hair";
			t6 = space();
			div5 = element("div");
			create_component(colorpicker1.$$.fragment);
			t7 = space();
			div9 = element("div");
			div7 = element("div");
			p2 = element("p");
			p2.textContent = "Pants";
			t9 = space();
			div8 = element("div");
			create_component(colorpicker2.$$.fragment);
			t10 = space();
			div12 = element("div");
			div10 = element("div");
			p3 = element("p");
			p3.textContent = "Shirt";
			t12 = space();
			div11 = element("div");
			create_component(colorpicker3.$$.fragment);
			attr_dev(div0, "class", "human svelte-148r5ex");
			add_location(div0, file$J, 69, 6, 1893);
			add_location(span, file$J, 72, 4, 2138);
			add_location(p0, file$J, 75, 10, 2324);
			attr_dev(div1, "class", "column1 svelte-148r5ex");
			add_location(div1, file$J, 74, 8, 2292);
			attr_dev(div2, "class", "column2 svelte-148r5ex");
			add_location(div2, file$J, 77, 8, 2360);
			attr_dev(div3, "class", "row svelte-148r5ex");
			add_location(div3, file$J, 73, 6, 2266);
			add_location(p1, file$J, 83, 12, 2546);
			attr_dev(div4, "class", "column1 svelte-148r5ex");
			add_location(div4, file$J, 82, 10, 2512);
			attr_dev(div5, "class", "column2 svelte-148r5ex");
			add_location(div5, file$J, 85, 10, 2585);
			attr_dev(div6, "class", "row svelte-148r5ex");
			add_location(div6, file$J, 81, 8, 2484);
			add_location(p2, file$J, 91, 14, 2782);
			attr_dev(div7, "class", "column1 svelte-148r5ex");
			add_location(div7, file$J, 90, 12, 2746);
			attr_dev(div8, "class", "column2 svelte-148r5ex");
			add_location(div8, file$J, 93, 12, 2826);
			attr_dev(div9, "class", "row svelte-148r5ex");
			add_location(div9, file$J, 89, 10, 2716);
			add_location(p3, file$J, 99, 16, 3036);
			attr_dev(div10, "class", "column1 svelte-148r5ex");
			add_location(div10, file$J, 98, 14, 2998);
			attr_dev(div11, "class", "column2 svelte-148r5ex");
			add_location(div11, file$J, 101, 14, 3084);
			attr_dev(div12, "class", "row svelte-148r5ex");
			add_location(div12, file$J, 97, 12, 2966);
		},
		m: function mount(target, anchor) {
			insert_dev(target, div0, anchor);
			mount_component(configureanimation, div0, null);
			insert_dev(target, t0, anchor);
			insert_dev(target, span, anchor);
			mount_component(accessibilitycolor, span, null);
			insert_dev(target, t1, anchor);
			insert_dev(target, div3, anchor);
			append_dev(div3, div1);
			append_dev(div1, p0);
			append_dev(div3, t3);
			append_dev(div3, div2);
			mount_component(colorpicker0, div2, null);
			insert_dev(target, t4, anchor);
			insert_dev(target, div6, anchor);
			append_dev(div6, div4);
			append_dev(div4, p1);
			append_dev(div6, t6);
			append_dev(div6, div5);
			mount_component(colorpicker1, div5, null);
			insert_dev(target, t7, anchor);
			insert_dev(target, div9, anchor);
			append_dev(div9, div7);
			append_dev(div7, p2);
			append_dev(div9, t9);
			append_dev(div9, div8);
			mount_component(colorpicker2, div8, null);
			insert_dev(target, t10, anchor);
			insert_dev(target, div12, anchor);
			append_dev(div12, div10);
			append_dev(div10, p3);
			append_dev(div12, t12);
			append_dev(div12, div11);
			mount_component(colorpicker3, div11, null);
			current = true;

			if (!mounted) {
				dispose = listen_dev(span, "click", /*click_handler*/ ctx[11], false, false, false);
				mounted = true;
			}
		},
		p: function update(ctx, dirty) {
			const configureanimation_changes = {};

			if (!updating_flesh && dirty & /*settingsconfig*/ 1) {
				updating_flesh = true;
				configureanimation_changes.flesh = /*settingsconfig*/ ctx[0].colors.flesh;
				add_flush_callback(() => updating_flesh = false);
			}

			if (!updating_hair && dirty & /*settingsconfig*/ 1) {
				updating_hair = true;
				configureanimation_changes.hair = /*settingsconfig*/ ctx[0].colors.hair;
				add_flush_callback(() => updating_hair = false);
			}

			if (!updating_pants && dirty & /*settingsconfig*/ 1) {
				updating_pants = true;
				configureanimation_changes.pants = /*settingsconfig*/ ctx[0].colors.pants;
				add_flush_callback(() => updating_pants = false);
			}

			if (!updating_shirt && dirty & /*settingsconfig*/ 1) {
				updating_shirt = true;
				configureanimation_changes.shirt = /*settingsconfig*/ ctx[0].colors.shirt;
				add_flush_callback(() => updating_shirt = false);
			}

			configureanimation.$set(configureanimation_changes);
			const colorpicker0_changes = {};

			if (!updating_value && dirty & /*settingsconfig*/ 1) {
				updating_value = true;
				colorpicker0_changes.value = /*settingsconfig*/ ctx[0].colors.flesh;
				add_flush_callback(() => updating_value = false);
			}

			colorpicker0.$set(colorpicker0_changes);
			const colorpicker1_changes = {};

			if (!updating_value_1 && dirty & /*settingsconfig*/ 1) {
				updating_value_1 = true;
				colorpicker1_changes.value = /*settingsconfig*/ ctx[0].colors.hair;
				add_flush_callback(() => updating_value_1 = false);
			}

			colorpicker1.$set(colorpicker1_changes);
			const colorpicker2_changes = {};

			if (!updating_value_2 && dirty & /*settingsconfig*/ 1) {
				updating_value_2 = true;
				colorpicker2_changes.value = /*settingsconfig*/ ctx[0].colors.pants;
				add_flush_callback(() => updating_value_2 = false);
			}

			colorpicker2.$set(colorpicker2_changes);
			const colorpicker3_changes = {};

			if (!updating_value_3 && dirty & /*settingsconfig*/ 1) {
				updating_value_3 = true;
				colorpicker3_changes.value = /*settingsconfig*/ ctx[0].colors.shirt;
				add_flush_callback(() => updating_value_3 = false);
			}

			colorpicker3.$set(colorpicker3_changes);
		},
		i: function intro(local) {
			if (current) return;
			transition_in(configureanimation.$$.fragment, local);
			transition_in(accessibilitycolor.$$.fragment, local);
			transition_in(colorpicker0.$$.fragment, local);
			transition_in(colorpicker1.$$.fragment, local);
			transition_in(colorpicker2.$$.fragment, local);
			transition_in(colorpicker3.$$.fragment, local);
			current = true;
		},
		o: function outro(local) {
			transition_out(configureanimation.$$.fragment, local);
			transition_out(accessibilitycolor.$$.fragment, local);
			transition_out(colorpicker0.$$.fragment, local);
			transition_out(colorpicker1.$$.fragment, local);
			transition_out(colorpicker2.$$.fragment, local);
			transition_out(colorpicker3.$$.fragment, local);
			current = false;
		},
		d: function destroy(detaching) {
			if (detaching) detach_dev(div0);
			destroy_component(configureanimation);
			if (detaching) detach_dev(t0);
			if (detaching) detach_dev(span);
			destroy_component(accessibilitycolor);
			if (detaching) detach_dev(t1);
			if (detaching) detach_dev(div3);
			destroy_component(colorpicker0);
			if (detaching) detach_dev(t4);
			if (detaching) detach_dev(div6);
			destroy_component(colorpicker1);
			if (detaching) detach_dev(t7);
			if (detaching) detach_dev(div9);
			destroy_component(colorpicker2);
			if (detaching) detach_dev(t10);
			if (detaching) detach_dev(div12);
			destroy_component(colorpicker3);
			mounted = false;
			dispose();
		}
	};

	dispatch_dev("SvelteRegisterBlock", {
		block,
		id: create_if_block$I.name,
		type: "if",
		source: "(69:6) {#if refreshed}",
		ctx
	});

	return block;
}

// (68:4) <Tile>
function create_default_slot_6(ctx) {
	let if_block_anchor;
	let current;
	let if_block = /*refreshed*/ ctx[3] && create_if_block$I(ctx);

	const block = {
		c: function create() {
			if (if_block) if_block.c();
			if_block_anchor = empty();
		},
		m: function mount(target, anchor) {
			if (if_block) if_block.m(target, anchor);
			insert_dev(target, if_block_anchor, anchor);
			current = true;
		},
		p: function update(ctx, dirty) {
			if (/*refreshed*/ ctx[3]) if_block.p(ctx, dirty);
		},
		i: function intro(local) {
			if (current) return;
			transition_in(if_block);
			current = true;
		},
		o: function outro(local) {
			transition_out(if_block);
			current = false;
		},
		d: function destroy(detaching) {
			if (if_block) if_block.d(detaching);
			if (detaching) detach_dev(if_block_anchor);
		}
	};

	dispatch_dev("SvelteRegisterBlock", {
		block,
		id: create_default_slot_6.name,
		type: "slot",
		source: "(68:4) <Tile>",
		ctx
	});

	return block;
}

// (111:17) <Button kind="secondary" on:click={exitSettings} style="float: left;">
function create_default_slot_5(ctx) {
	let t;

	const block = {
		c: function create() {
			t = text("Exit");
		},
		m: function mount(target, anchor) {
			insert_dev(target, t, anchor);
		},
		d: function destroy(detaching) {
			if (detaching) detach_dev(t);
		}
	};

	dispatch_dev("SvelteRegisterBlock", {
		block,
		id: create_default_slot_5.name,
		type: "slot",
		source: "(111:17) <Button kind=\\\"secondary\\\" on:click={exitSettings} style=\\\"float: left;\\\">",
		ctx
	});

	return block;
}

// (109:6) <Column>
function create_default_slot_4(ctx) {
	let br0;
	let t0;
	let span;
	let button;
	let t1;
	let br1;
	let current;

	button = new Button({
			props: {
				kind: "secondary",
				style: "float: left;",
				$$slots: { default: [create_default_slot_5] },
				$$scope: { ctx }
			},
			$$inline: true
		});

	button.$on("click", /*exitSettings*/ ctx[4]);

	const block = {
		c: function create() {
			br0 = element("br");
			t0 = space();
			span = element("span");
			create_component(button.$$.fragment);
			t1 = space();
			br1 = element("br");
			add_location(br0, file$J, 109, 10, 3285);
			add_location(span, file$J, 110, 11, 3301);
			add_location(br1, file$J, 111, 11, 3409);
		},
		m: function mount(target, anchor) {
			insert_dev(target, br0, anchor);
			insert_dev(target, t0, anchor);
			insert_dev(target, span, anchor);
			mount_component(button, span, null);
			insert_dev(target, t1, anchor);
			insert_dev(target, br1, anchor);
			current = true;
		},
		p: function update(ctx, dirty) {
			const button_changes = {};

			if (dirty & /*$$scope*/ 67108864) {
				button_changes.$$scope = { dirty, ctx };
			}

			button.$set(button_changes);
		},
		i: function intro(local) {
			if (current) return;
			transition_in(button.$$.fragment, local);
			current = true;
		},
		o: function outro(local) {
			transition_out(button.$$.fragment, local);
			current = false;
		},
		d: function destroy(detaching) {
			if (detaching) detach_dev(br0);
			if (detaching) detach_dev(t0);
			if (detaching) detach_dev(span);
			destroy_component(button);
			if (detaching) detach_dev(t1);
			if (detaching) detach_dev(br1);
		}
	};

	dispatch_dev("SvelteRegisterBlock", {
		block,
		id: create_default_slot_4.name,
		type: "slot",
		source: "(109:6) <Column>",
		ctx
	});

	return block;
}

// (116:15) <Button on:click={saveSettings} style="float: right;">
function create_default_slot_3$1(ctx) {
	let t;

	const block = {
		c: function create() {
			t = text("Save");
		},
		m: function mount(target, anchor) {
			insert_dev(target, t, anchor);
		},
		d: function destroy(detaching) {
			if (detaching) detach_dev(t);
		}
	};

	dispatch_dev("SvelteRegisterBlock", {
		block,
		id: create_default_slot_3$1.name,
		type: "slot",
		source: "(116:15) <Button on:click={saveSettings} style=\\\"float: right;\\\">",
		ctx
	});

	return block;
}

// (114:4) <Column>
function create_default_slot_2$1(ctx) {
	let br0;
	let t0;
	let span;
	let button;
	let t1;
	let br1;
	let current;

	button = new Button({
			props: {
				style: "float: right;",
				$$slots: { default: [create_default_slot_3$1] },
				$$scope: { ctx }
			},
			$$inline: true
		});

	button.$on("click", /*saveSettings*/ ctx[5]);

	const block = {
		c: function create() {
			br0 = element("br");
			t0 = space();
			span = element("span");
			create_component(button.$$.fragment);
			t1 = space();
			br1 = element("br");
			add_location(br0, file$J, 114, 8, 3451);
			add_location(span, file$J, 115, 9, 3465);
			add_location(br1, file$J, 116, 9, 3555);
		},
		m: function mount(target, anchor) {
			insert_dev(target, br0, anchor);
			insert_dev(target, t0, anchor);
			insert_dev(target, span, anchor);
			mount_component(button, span, null);
			insert_dev(target, t1, anchor);
			insert_dev(target, br1, anchor);
			current = true;
		},
		p: function update(ctx, dirty) {
			const button_changes = {};

			if (dirty & /*$$scope*/ 67108864) {
				button_changes.$$scope = { dirty, ctx };
			}

			button.$set(button_changes);
		},
		i: function intro(local) {
			if (current) return;
			transition_in(button.$$.fragment, local);
			current = true;
		},
		o: function outro(local) {
			transition_out(button.$$.fragment, local);
			current = false;
		},
		d: function destroy(detaching) {
			if (detaching) detach_dev(br0);
			if (detaching) detach_dev(t0);
			if (detaching) detach_dev(span);
			destroy_component(button);
			if (detaching) detach_dev(t1);
			if (detaching) detach_dev(br1);
		}
	};

	dispatch_dev("SvelteRegisterBlock", {
		block,
		id: create_default_slot_2$1.name,
		type: "slot",
		source: "(114:4) <Column>",
		ctx
	});

	return block;
}

// (108:4) <Row>
function create_default_slot_1$3(ctx) {
	let column0;
	let t;
	let column1;
	let current;

	column0 = new Column({
			props: {
				$$slots: { default: [create_default_slot_4] },
				$$scope: { ctx }
			},
			$$inline: true
		});

	column1 = new Column({
			props: {
				$$slots: { default: [create_default_slot_2$1] },
				$$scope: { ctx }
			},
			$$inline: true
		});

	const block = {
		c: function create() {
			create_component(column0.$$.fragment);
			t = space();
			create_component(column1.$$.fragment);
		},
		m: function mount(target, anchor) {
			mount_component(column0, target, anchor);
			insert_dev(target, t, anchor);
			mount_component(column1, target, anchor);
			current = true;
		},
		p: function update(ctx, dirty) {
			const column0_changes = {};

			if (dirty & /*$$scope*/ 67108864) {
				column0_changes.$$scope = { dirty, ctx };
			}

			column0.$set(column0_changes);
			const column1_changes = {};

			if (dirty & /*$$scope*/ 67108864) {
				column1_changes.$$scope = { dirty, ctx };
			}

			column1.$set(column1_changes);
		},
		i: function intro(local) {
			if (current) return;
			transition_in(column0.$$.fragment, local);
			transition_in(column1.$$.fragment, local);
			current = true;
		},
		o: function outro(local) {
			transition_out(column0.$$.fragment, local);
			transition_out(column1.$$.fragment, local);
			current = false;
		},
		d: function destroy(detaching) {
			destroy_component(column0, detaching);
			if (detaching) detach_dev(t);
			destroy_component(column1, detaching);
		}
	};

	dispatch_dev("SvelteRegisterBlock", {
		block,
		id: create_default_slot_1$3.name,
		type: "slot",
		source: "(108:4) <Row>",
		ctx
	});

	return block;
}

// (57:0) <Content>
function create_default_slot$4(ctx) {
	let grid;
	let t0;
	let tile;
	let t1;
	let row;
	let current;

	grid = new Grid({
			props: {
				$$slots: { default: [create_default_slot_7] },
				$$scope: { ctx }
			},
			$$inline: true
		});

	tile = new Tile({
			props: {
				$$slots: { default: [create_default_slot_6] },
				$$scope: { ctx }
			},
			$$inline: true
		});

	row = new Row({
			props: {
				$$slots: { default: [create_default_slot_1$3] },
				$$scope: { ctx }
			},
			$$inline: true
		});

	const block = {
		c: function create() {
			create_component(grid.$$.fragment);
			t0 = space();
			create_component(tile.$$.fragment);
			t1 = space();
			create_component(row.$$.fragment);
		},
		m: function mount(target, anchor) {
			mount_component(grid, target, anchor);
			insert_dev(target, t0, anchor);
			mount_component(tile, target, anchor);
			insert_dev(target, t1, anchor);
			mount_component(row, target, anchor);
			current = true;
		},
		p: function update(ctx, dirty) {
			const grid_changes = {};

			if (dirty & /*$$scope, pluginname, pluginemoji*/ 67108870) {
				grid_changes.$$scope = { dirty, ctx };
			}

			grid.$set(grid_changes);
			const tile_changes = {};

			if (dirty & /*$$scope, settingsconfig*/ 67108865) {
				tile_changes.$$scope = { dirty, ctx };
			}

			tile.$set(tile_changes);
			const row_changes = {};

			if (dirty & /*$$scope*/ 67108864) {
				row_changes.$$scope = { dirty, ctx };
			}

			row.$set(row_changes);
		},
		i: function intro(local) {
			if (current) return;
			transition_in(grid.$$.fragment, local);
			transition_in(tile.$$.fragment, local);
			transition_in(row.$$.fragment, local);
			current = true;
		},
		o: function outro(local) {
			transition_out(grid.$$.fragment, local);
			transition_out(tile.$$.fragment, local);
			transition_out(row.$$.fragment, local);
			current = false;
		},
		d: function destroy(detaching) {
			destroy_component(grid, detaching);
			if (detaching) detach_dev(t0);
			destroy_component(tile, detaching);
			if (detaching) detach_dev(t1);
			destroy_component(row, detaching);
		}
	};

	dispatch_dev("SvelteRegisterBlock", {
		block,
		id: create_default_slot$4.name,
		type: "slot",
		source: "(57:0) <Content>",
		ctx
	});

	return block;
}

function create_fragment$J(ctx) {
	let content;
	let current;

	content = new Content({
			props: {
				$$slots: { default: [create_default_slot$4] },
				$$scope: { ctx }
			},
			$$inline: true
		});

	const block = {
		c: function create() {
			create_component(content.$$.fragment);
		},
		l: function claim(nodes) {
			throw new Error("options.hydrate only works if the component was compiled with the `hydratable: true` option");
		},
		m: function mount(target, anchor) {
			mount_component(content, target, anchor);
			current = true;
		},
		p: function update(ctx, [dirty]) {
			const content_changes = {};

			if (dirty & /*$$scope, settingsconfig, pluginname, pluginemoji*/ 67108871) {
				content_changes.$$scope = { dirty, ctx };
			}

			content.$set(content_changes);
		},
		i: function intro(local) {
			if (current) return;
			transition_in(content.$$.fragment, local);
			current = true;
		},
		o: function outro(local) {
			transition_out(content.$$.fragment, local);
			current = false;
		},
		d: function destroy(detaching) {
			destroy_component(content, detaching);
		}
	};

	dispatch_dev("SvelteRegisterBlock", {
		block,
		id: create_fragment$J.name,
		type: "component",
		source: "",
		ctx
	});

	return block;
}

function instance$J($$self, $$props, $$invalidate) {
	let { $$slots: slots = {}, $$scope } = $$props;
	validate_slots('Settings', slots, []);
	let { pluginname } = $$props;
	let { pluginemoji } = $$props;
	let { settingsconfig } = $$props;
	let flesh = '#d5ae83';
	let hair = '#412323';
	let pants = '#414141';
	let shirt = '#42cbef';
	const lastflesh = settingsconfig.colors.flesh;
	const lasthair = settingsconfig.colors.hair;
	const lastpants = settingsconfig.colors.pants;
	const lastshirt = settingsconfig.colors.shirt;
	var refreshed = true;
	let open = true;
	const dispatch = createEventDispatcher();

	function exitSettings() {
		$$invalidate(0, settingsconfig.colors.flesh = lastflesh, settingsconfig);
		$$invalidate(0, settingsconfig.colors.hair = lasthair, settingsconfig);
		$$invalidate(0, settingsconfig.colors.pants = lastpants, settingsconfig);
		$$invalidate(0, settingsconfig.colors.shirt = lastshirt, settingsconfig);
		dispatch("exitsettings", settingsconfig);
		open = false;
	}

	function saveSettings() {
		dispatch("savesettings", settingsconfig);
		open = false;
	}

	function setDefaultColor() {
		$$invalidate(0, settingsconfig.colors.flesh = '#d5ae83', settingsconfig);
		$$invalidate(0, settingsconfig.colors.hair = '#412323', settingsconfig);
		$$invalidate(0, settingsconfig.colors.pants = '#414141', settingsconfig);
		$$invalidate(0, settingsconfig.colors.shirt = '#42cbef', settingsconfig);
	}

	const writable_props = ['pluginname', 'pluginemoji', 'settingsconfig'];

	Object.keys($$props).forEach(key => {
		if (!~writable_props.indexOf(key) && key.slice(0, 2) !== '$$' && key !== 'slot') console.warn(`<Settings> was created with unknown prop '${key}'`);
	});

	function configureanimation_flesh_binding(value) {
		if ($$self.$$.not_equal(settingsconfig.colors.flesh, value)) {
			settingsconfig.colors.flesh = value;
			$$invalidate(0, settingsconfig);
		}
	}

	function configureanimation_hair_binding(value) {
		if ($$self.$$.not_equal(settingsconfig.colors.hair, value)) {
			settingsconfig.colors.hair = value;
			$$invalidate(0, settingsconfig);
		}
	}

	function configureanimation_pants_binding(value) {
		if ($$self.$$.not_equal(settingsconfig.colors.pants, value)) {
			settingsconfig.colors.pants = value;
			$$invalidate(0, settingsconfig);
		}
	}

	function configureanimation_shirt_binding(value) {
		if ($$self.$$.not_equal(settingsconfig.colors.shirt, value)) {
			settingsconfig.colors.shirt = value;
			$$invalidate(0, settingsconfig);
		}
	}

	const click_handler = () => {
		setDefaultColor();
	};

	function colorpicker0_value_binding(value) {
		if ($$self.$$.not_equal(settingsconfig.colors.flesh, value)) {
			settingsconfig.colors.flesh = value;
			$$invalidate(0, settingsconfig);
		}
	}

	function colorpicker1_value_binding(value) {
		if ($$self.$$.not_equal(settingsconfig.colors.hair, value)) {
			settingsconfig.colors.hair = value;
			$$invalidate(0, settingsconfig);
		}
	}

	function colorpicker2_value_binding(value) {
		if ($$self.$$.not_equal(settingsconfig.colors.pants, value)) {
			settingsconfig.colors.pants = value;
			$$invalidate(0, settingsconfig);
		}
	}

	function colorpicker3_value_binding(value) {
		if ($$self.$$.not_equal(settingsconfig.colors.shirt, value)) {
			settingsconfig.colors.shirt = value;
			$$invalidate(0, settingsconfig);
		}
	}

	$$self.$$set = $$props => {
		if ('pluginname' in $$props) $$invalidate(1, pluginname = $$props.pluginname);
		if ('pluginemoji' in $$props) $$invalidate(2, pluginemoji = $$props.pluginemoji);
		if ('settingsconfig' in $$props) $$invalidate(0, settingsconfig = $$props.settingsconfig);
	};

	$$self.$capture_state = () => ({
		createEventDispatcher,
		Button,
		Content,
		Grid,
		Row,
		Column,
		Tile,
		ConfigureAnimation: Configure_animation,
		ColorPicker: Color_picker,
		AccessibilityColor,
		pluginname,
		pluginemoji,
		settingsconfig,
		flesh,
		hair,
		pants,
		shirt,
		lastflesh,
		lasthair,
		lastpants,
		lastshirt,
		refreshed,
		open,
		dispatch,
		exitSettings,
		saveSettings,
		setDefaultColor
	});

	$$self.$inject_state = $$props => {
		if ('pluginname' in $$props) $$invalidate(1, pluginname = $$props.pluginname);
		if ('pluginemoji' in $$props) $$invalidate(2, pluginemoji = $$props.pluginemoji);
		if ('settingsconfig' in $$props) $$invalidate(0, settingsconfig = $$props.settingsconfig);
		if ('flesh' in $$props) flesh = $$props.flesh;
		if ('hair' in $$props) hair = $$props.hair;
		if ('pants' in $$props) pants = $$props.pants;
		if ('shirt' in $$props) shirt = $$props.shirt;
		if ('refreshed' in $$props) $$invalidate(3, refreshed = $$props.refreshed);
		if ('open' in $$props) open = $$props.open;
	};

	if ($$props && "$$inject" in $$props) {
		$$self.$inject_state($$props.$$inject);
	}

	return [
		settingsconfig,
		pluginname,
		pluginemoji,
		refreshed,
		exitSettings,
		saveSettings,
		setDefaultColor,
		configureanimation_flesh_binding,
		configureanimation_hair_binding,
		configureanimation_pants_binding,
		configureanimation_shirt_binding,
		click_handler,
		colorpicker0_value_binding,
		colorpicker1_value_binding,
		colorpicker2_value_binding,
		colorpicker3_value_binding
	];
}

class Settings extends SvelteComponentDev {
	constructor(options) {
		super(options);

		init(this, options, instance$J, create_fragment$J, safe_not_equal, {
			pluginname: 1,
			pluginemoji: 2,
			settingsconfig: 0
		});

		dispatch_dev("SvelteRegisterComponent", {
			component: this,
			tagName: "Settings",
			options,
			id: create_fragment$J.name
		});

		const { ctx } = this.$$;
		const props = options.props || {};

		if (/*pluginname*/ ctx[1] === undefined && !('pluginname' in props)) {
			console.warn("<Settings> was created without expected prop 'pluginname'");
		}

		if (/*pluginemoji*/ ctx[2] === undefined && !('pluginemoji' in props)) {
			console.warn("<Settings> was created without expected prop 'pluginemoji'");
		}

		if (/*settingsconfig*/ ctx[0] === undefined && !('settingsconfig' in props)) {
			console.warn("<Settings> was created without expected prop 'settingsconfig'");
		}
	}

	get pluginname() {
		throw new Error("<Settings>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
	}

	set pluginname(value) {
		throw new Error("<Settings>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
	}

	get pluginemoji() {
		throw new Error("<Settings>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
	}

	set pluginemoji(value) {
		throw new Error("<Settings>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
	}

	get settingsconfig() {
		throw new Error("<Settings>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
	}

	set settingsconfig(value) {
		throw new Error("<Settings>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
	}
}

function is_date(obj) {
    return Object.prototype.toString.call(obj) === '[object Date]';
}

function get_interpolator(a, b) {
    if (a === b || a !== a)
        return () => a;
    const type = typeof a;
    if (type !== typeof b || Array.isArray(a) !== Array.isArray(b)) {
        throw new Error('Cannot interpolate values of different type');
    }
    if (Array.isArray(a)) {
        const arr = b.map((bi, i) => {
            return get_interpolator(a[i], bi);
        });
        return t => arr.map(fn => fn(t));
    }
    if (type === 'object') {
        if (!a || !b)
            throw new Error('Object cannot be null');
        if (is_date(a) && is_date(b)) {
            a = a.getTime();
            b = b.getTime();
            const delta = b - a;
            return t => new Date(a + t * delta);
        }
        const keys = Object.keys(b);
        const interpolators = {};
        keys.forEach(key => {
            interpolators[key] = get_interpolator(a[key], b[key]);
        });
        return t => {
            const result = {};
            keys.forEach(key => {
                result[key] = interpolators[key](t);
            });
            return result;
        };
    }
    if (type === 'number') {
        const delta = b - a;
        return t => a + t * delta;
    }
    throw new Error(`Cannot interpolate ${type} values`);
}
function tweened(value, defaults = {}) {
    const store = writable(value);
    let task;
    let target_value = value;
    function set(new_value, opts) {
        if (value == null) {
            store.set(value = new_value);
            return Promise.resolve();
        }
        target_value = new_value;
        let previous_task = task;
        let started = false;
        let { delay = 0, duration = 400, easing = identity, interpolate = get_interpolator } = assign(assign({}, defaults), opts);
        if (duration === 0) {
            if (previous_task) {
                previous_task.abort();
                previous_task = null;
            }
            store.set(value = target_value);
            return Promise.resolve();
        }
        const start = now() + delay;
        let fn;
        task = loop(now => {
            if (now < start)
                return true;
            if (!started) {
                fn = interpolate(value, new_value);
                if (typeof duration === 'function')
                    duration = duration(value, new_value);
                started = true;
            }
            if (previous_task) {
                previous_task.abort();
                previous_task = null;
            }
            const elapsed = now - start;
            if (elapsed > duration) {
                store.set(value = new_value);
                return false;
            }
            // @ts-ignore
            store.set(value = fn(easing(elapsed / duration)));
            return true;
        });
        return task.promise;
    }
    return {
        set,
        update: (fn, opts) => set(fn(target_value, value), opts),
        subscribe: store.subscribe
    };
}

/* src/components/program-controller.svelte generated by Svelte v3.49.0 */

const { console: console_1$1 } = globals;
const file$I = "src/components/program-controller.svelte";

// (61:0) {#if minutes >=0}
function create_if_block_1$2(ctx) {
	let if_block_anchor;

	function select_block_type(ctx, dirty) {
		if (/*seconds*/ ctx[2] > 9) return create_if_block_2$2;
		return create_else_block$1;
	}

	let current_block_type = select_block_type(ctx);
	let if_block = current_block_type(ctx);

	const block = {
		c: function create() {
			if_block.c();
			if_block_anchor = empty();
		},
		m: function mount(target, anchor) {
			if_block.m(target, anchor);
			insert_dev(target, if_block_anchor, anchor);
		},
		p: function update(ctx, dirty) {
			if (current_block_type === (current_block_type = select_block_type(ctx)) && if_block) {
				if_block.p(ctx, dirty);
			} else {
				if_block.d(1);
				if_block = current_block_type(ctx);

				if (if_block) {
					if_block.c();
					if_block.m(if_block_anchor.parentNode, if_block_anchor);
				}
			}
		},
		d: function destroy(detaching) {
			if_block.d(detaching);
			if (detaching) detach_dev(if_block_anchor);
		}
	};

	dispatch_dev("SvelteRegisterBlock", {
		block,
		id: create_if_block_1$2.name,
		type: "if",
		source: "(61:0) {#if minutes >=0}",
		ctx
	});

	return block;
}

// (64:2) {:else}
function create_else_block$1(ctx) {
	let p;
	let t0;
	let t1;
	let t2;
	let t3;
	let t4;
	let t5;

	const block = {
		c: function create() {
			p = element("p");
			t0 = text(/*wotarget*/ ctx[3]);
			t1 = text(" Workout ");
			t2 = text(/*minutes*/ ctx[1]);
			t3 = text(":0");
			t4 = text(/*seconds*/ ctx[2]);
			t5 = text("'");
			add_location(p, file$I, 64, 2, 1292);
		},
		m: function mount(target, anchor) {
			insert_dev(target, p, anchor);
			append_dev(p, t0);
			append_dev(p, t1);
			append_dev(p, t2);
			append_dev(p, t3);
			append_dev(p, t4);
			append_dev(p, t5);
		},
		p: function update(ctx, dirty) {
			if (dirty & /*wotarget*/ 8) set_data_dev(t0, /*wotarget*/ ctx[3]);
			if (dirty & /*minutes*/ 2) set_data_dev(t2, /*minutes*/ ctx[1]);
			if (dirty & /*seconds*/ 4) set_data_dev(t4, /*seconds*/ ctx[2]);
		},
		d: function destroy(detaching) {
			if (detaching) detach_dev(p);
		}
	};

	dispatch_dev("SvelteRegisterBlock", {
		block,
		id: create_else_block$1.name,
		type: "else",
		source: "(64:2) {:else}",
		ctx
	});

	return block;
}

// (62:2) {#if seconds > 9}
function create_if_block_2$2(ctx) {
	let p;
	let t0;
	let t1;
	let t2;
	let t3;
	let t4;
	let t5;

	const block = {
		c: function create() {
			p = element("p");
			t0 = text(/*wotarget*/ ctx[3]);
			t1 = text(" Workout ");
			t2 = text(/*minutes*/ ctx[1]);
			t3 = text(":");
			t4 = text(/*seconds*/ ctx[2]);
			t5 = text("'");
			add_location(p, file$I, 62, 2, 1233);
		},
		m: function mount(target, anchor) {
			insert_dev(target, p, anchor);
			append_dev(p, t0);
			append_dev(p, t1);
			append_dev(p, t2);
			append_dev(p, t3);
			append_dev(p, t4);
			append_dev(p, t5);
		},
		p: function update(ctx, dirty) {
			if (dirty & /*wotarget*/ 8) set_data_dev(t0, /*wotarget*/ ctx[3]);
			if (dirty & /*minutes*/ 2) set_data_dev(t2, /*minutes*/ ctx[1]);
			if (dirty & /*seconds*/ 4) set_data_dev(t4, /*seconds*/ ctx[2]);
		},
		d: function destroy(detaching) {
			if (detaching) detach_dev(p);
		}
	};

	dispatch_dev("SvelteRegisterBlock", {
		block,
		id: create_if_block_2$2.name,
		type: "if",
		source: "(62:2) {#if seconds > 9}",
		ctx
	});

	return block;
}

// (68:2) {#if minutes <0}
function create_if_block$H(ctx) {
	let p;
	let t0;
	let t1;

	const block = {
		c: function create() {
			p = element("p");
			t0 = text(/*wotarget*/ ctx[3]);
			t1 = text(" Workout 0:00'");
			add_location(p, file$I, 68, 2, 1377);
		},
		m: function mount(target, anchor) {
			insert_dev(target, p, anchor);
			append_dev(p, t0);
			append_dev(p, t1);
		},
		p: function update(ctx, dirty) {
			if (dirty & /*wotarget*/ 8) set_data_dev(t0, /*wotarget*/ ctx[3]);
		},
		d: function destroy(detaching) {
			if (detaching) detach_dev(p);
		}
	};

	dispatch_dev("SvelteRegisterBlock", {
		block,
		id: create_if_block$H.name,
		type: "if",
		source: "(68:2) {#if minutes <0}",
		ctx
	});

	return block;
}

// (74:2) <ContentSwitcher>
function create_default_slot_1$2(ctx) {
	let switch0;
	let t;
	let switch1;
	let current;

	switch0 = new Switch({
			props: {
				text: "Pause",
				style: "font-size:75%",
				enabled: /*isPaused*/ ctx[0]
			},
			$$inline: true
		});

	switch0.$on("click", /*setPause*/ ctx[4]());

	switch1 = new Switch({
			props: {
				text: "End",
				style: "font-size:75%",
				enabled: !/*isPaused*/ ctx[0]
			},
			$$inline: true
		});

	switch1.$on("click", /*letEnd*/ ctx[5]());

	const block = {
		c: function create() {
			create_component(switch0.$$.fragment);
			t = space();
			create_component(switch1.$$.fragment);
		},
		m: function mount(target, anchor) {
			mount_component(switch0, target, anchor);
			insert_dev(target, t, anchor);
			mount_component(switch1, target, anchor);
			current = true;
		},
		p: function update(ctx, dirty) {
			const switch0_changes = {};
			if (dirty & /*isPaused*/ 1) switch0_changes.enabled = /*isPaused*/ ctx[0];
			switch0.$set(switch0_changes);
			const switch1_changes = {};
			if (dirty & /*isPaused*/ 1) switch1_changes.enabled = !/*isPaused*/ ctx[0];
			switch1.$set(switch1_changes);
		},
		i: function intro(local) {
			if (current) return;
			transition_in(switch0.$$.fragment, local);
			transition_in(switch1.$$.fragment, local);
			current = true;
		},
		o: function outro(local) {
			transition_out(switch0.$$.fragment, local);
			transition_out(switch1.$$.fragment, local);
			current = false;
		},
		d: function destroy(detaching) {
			destroy_component(switch0, detaching);
			if (detaching) detach_dev(t);
			destroy_component(switch1, detaching);
		}
	};

	dispatch_dev("SvelteRegisterBlock", {
		block,
		id: create_default_slot_1$2.name,
		type: "slot",
		source: "(74:2) <ContentSwitcher>",
		ctx
	});

	return block;
}

// (72:0) <Tile>
function create_default_slot$3(ctx) {
	let contentswitcher;
	let current;

	contentswitcher = new ContentSwitcher({
			props: {
				$$slots: { default: [create_default_slot_1$2] },
				$$scope: { ctx }
			},
			$$inline: true
		});

	const block = {
		c: function create() {
			create_component(contentswitcher.$$.fragment);
		},
		m: function mount(target, anchor) {
			mount_component(contentswitcher, target, anchor);
			current = true;
		},
		p: function update(ctx, dirty) {
			const contentswitcher_changes = {};

			if (dirty & /*$$scope, isPaused*/ 2049) {
				contentswitcher_changes.$$scope = { dirty, ctx };
			}

			contentswitcher.$set(contentswitcher_changes);
		},
		i: function intro(local) {
			if (current) return;
			transition_in(contentswitcher.$$.fragment, local);
			current = true;
		},
		o: function outro(local) {
			transition_out(contentswitcher.$$.fragment, local);
			current = false;
		},
		d: function destroy(detaching) {
			destroy_component(contentswitcher, detaching);
		}
	};

	dispatch_dev("SvelteRegisterBlock", {
		block,
		id: create_default_slot$3.name,
		type: "slot",
		source: "(72:0) <Tile>",
		ctx
	});

	return block;
}

function create_fragment$I(ctx) {
	let t0;
	let t1;
	let tile;
	let current;
	let if_block0 = /*minutes*/ ctx[1] >= 0 && create_if_block_1$2(ctx);
	let if_block1 = /*minutes*/ ctx[1] < 0 && create_if_block$H(ctx);

	tile = new Tile({
			props: {
				$$slots: { default: [create_default_slot$3] },
				$$scope: { ctx }
			},
			$$inline: true
		});

	const block = {
		c: function create() {
			if (if_block0) if_block0.c();
			t0 = space();
			if (if_block1) if_block1.c();
			t1 = space();
			create_component(tile.$$.fragment);
		},
		l: function claim(nodes) {
			throw new Error("options.hydrate only works if the component was compiled with the `hydratable: true` option");
		},
		m: function mount(target, anchor) {
			if (if_block0) if_block0.m(target, anchor);
			insert_dev(target, t0, anchor);
			if (if_block1) if_block1.m(target, anchor);
			insert_dev(target, t1, anchor);
			mount_component(tile, target, anchor);
			current = true;
		},
		p: function update(ctx, [dirty]) {
			if (/*minutes*/ ctx[1] >= 0) {
				if (if_block0) {
					if_block0.p(ctx, dirty);
				} else {
					if_block0 = create_if_block_1$2(ctx);
					if_block0.c();
					if_block0.m(t0.parentNode, t0);
				}
			} else if (if_block0) {
				if_block0.d(1);
				if_block0 = null;
			}

			if (/*minutes*/ ctx[1] < 0) {
				if (if_block1) {
					if_block1.p(ctx, dirty);
				} else {
					if_block1 = create_if_block$H(ctx);
					if_block1.c();
					if_block1.m(t1.parentNode, t1);
				}
			} else if (if_block1) {
				if_block1.d(1);
				if_block1 = null;
			}

			const tile_changes = {};

			if (dirty & /*$$scope, isPaused*/ 2049) {
				tile_changes.$$scope = { dirty, ctx };
			}

			tile.$set(tile_changes);
		},
		i: function intro(local) {
			if (current) return;
			transition_in(tile.$$.fragment, local);
			current = true;
		},
		o: function outro(local) {
			transition_out(tile.$$.fragment, local);
			current = false;
		},
		d: function destroy(detaching) {
			if (if_block0) if_block0.d(detaching);
			if (detaching) detach_dev(t0);
			if (if_block1) if_block1.d(detaching);
			if (detaching) detach_dev(t1);
			destroy_component(tile, detaching);
		}
	};

	dispatch_dev("SvelteRegisterBlock", {
		block,
		id: create_fragment$I.name,
		type: "component",
		source: "",
		ctx
	});

	return block;
}

function instance$I($$self, $$props, $$invalidate) {
	let { $$slots: slots = {}, $$scope } = $$props;
	validate_slots('Program_controller', slots, []);
	let { minutes } = $$props;
	let { seconds } = $$props;
	let { target } = $$props;
	let { isPaused = false } = $$props;
	let plugin;
	const unsubscribe = globalplugin.subscribe(value => plugin = value);
	let pausebutton = `Pause`;
	let wotarget = "Full Body";
	const dispatch = createEventDispatcher();

	if (target == "full") {
		wotarget = "Full Body";
	} else if (target == "upper") {
		wotarget = "Upper Body";
	} else if (target == "lower") {
		wotarget = "Lower Body";
	} else {
		wotarget = "Core";
	}

	function setPause() {
		if (!isPaused) {
			$$invalidate(0, isPaused = true);
			pausebutton = `Resume`;
		} else {
			$$invalidate(0, isPaused = false);
			pausebutton = `Pause`;
		}
	}

	async function letEnd() {
		if (isPaused) {
			let res = await plugin.confirm('Really stop Session?', 'The current session will be ended');

			if (res.value) {
				dispatch("end");
			} else {
				console.log("They DID NOT CONFIRM it");
			}
		}
	}

	const writable_props = ['minutes', 'seconds', 'target', 'isPaused'];

	Object.keys($$props).forEach(key => {
		if (!~writable_props.indexOf(key) && key.slice(0, 2) !== '$$' && key !== 'slot') console_1$1.warn(`<Program_controller> was created with unknown prop '${key}'`);
	});

	$$self.$$set = $$props => {
		if ('minutes' in $$props) $$invalidate(1, minutes = $$props.minutes);
		if ('seconds' in $$props) $$invalidate(2, seconds = $$props.seconds);
		if ('target' in $$props) $$invalidate(6, target = $$props.target);
		if ('isPaused' in $$props) $$invalidate(0, isPaused = $$props.isPaused);
	};

	$$self.$capture_state = () => ({
		createEventDispatcher,
		onMount,
		globalplugin,
		ContentSwitcher,
		Switch,
		Tile,
		minutes,
		seconds,
		target,
		isPaused,
		plugin,
		unsubscribe,
		pausebutton,
		wotarget,
		dispatch,
		setPause,
		letEnd
	});

	$$self.$inject_state = $$props => {
		if ('minutes' in $$props) $$invalidate(1, minutes = $$props.minutes);
		if ('seconds' in $$props) $$invalidate(2, seconds = $$props.seconds);
		if ('target' in $$props) $$invalidate(6, target = $$props.target);
		if ('isPaused' in $$props) $$invalidate(0, isPaused = $$props.isPaused);
		if ('plugin' in $$props) plugin = $$props.plugin;
		if ('pausebutton' in $$props) pausebutton = $$props.pausebutton;
		if ('wotarget' in $$props) $$invalidate(3, wotarget = $$props.wotarget);
	};

	if ($$props && "$$inject" in $$props) {
		$$self.$inject_state($$props.$$inject);
	}

	return [isPaused, minutes, seconds, wotarget, setPause, letEnd, target];
}

class Program_controller extends SvelteComponentDev {
	constructor(options) {
		super(options);

		init(this, options, instance$I, create_fragment$I, safe_not_equal, {
			minutes: 1,
			seconds: 2,
			target: 6,
			isPaused: 0
		});

		dispatch_dev("SvelteRegisterComponent", {
			component: this,
			tagName: "Program_controller",
			options,
			id: create_fragment$I.name
		});

		const { ctx } = this.$$;
		const props = options.props || {};

		if (/*minutes*/ ctx[1] === undefined && !('minutes' in props)) {
			console_1$1.warn("<Program_controller> was created without expected prop 'minutes'");
		}

		if (/*seconds*/ ctx[2] === undefined && !('seconds' in props)) {
			console_1$1.warn("<Program_controller> was created without expected prop 'seconds'");
		}

		if (/*target*/ ctx[6] === undefined && !('target' in props)) {
			console_1$1.warn("<Program_controller> was created without expected prop 'target'");
		}
	}

	get minutes() {
		throw new Error("<Program_controller>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
	}

	set minutes(value) {
		throw new Error("<Program_controller>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
	}

	get seconds() {
		throw new Error("<Program_controller>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
	}

	set seconds(value) {
		throw new Error("<Program_controller>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
	}

	get target() {
		throw new Error("<Program_controller>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
	}

	set target(value) {
		throw new Error("<Program_controller>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
	}

	get isPaused() {
		throw new Error("<Program_controller>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
	}

	set isPaused(value) {
		throw new Error("<Program_controller>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
	}
}

/* src/components/workout-progress.svelte generated by Svelte v3.49.0 */
const file$H = "src/components/workout-progress.svelte";

// (25:2) {#if minutes >=0}
function create_if_block_1$1(ctx) {
	let if_block_anchor;

	function select_block_type(ctx, dirty) {
		if (/*seconds*/ ctx[1] > 9) return create_if_block_2$1;
		return create_else_block;
	}

	let current_block_type = select_block_type(ctx);
	let if_block = current_block_type(ctx);

	const block = {
		c: function create() {
			if_block.c();
			if_block_anchor = empty();
		},
		m: function mount(target, anchor) {
			if_block.m(target, anchor);
			insert_dev(target, if_block_anchor, anchor);
		},
		p: function update(ctx, dirty) {
			if (current_block_type === (current_block_type = select_block_type(ctx)) && if_block) {
				if_block.p(ctx, dirty);
			} else {
				if_block.d(1);
				if_block = current_block_type(ctx);

				if (if_block) {
					if_block.c();
					if_block.m(if_block_anchor.parentNode, if_block_anchor);
				}
			}
		},
		d: function destroy(detaching) {
			if_block.d(detaching);
			if (detaching) detach_dev(if_block_anchor);
		}
	};

	dispatch_dev("SvelteRegisterBlock", {
		block,
		id: create_if_block_1$1.name,
		type: "if",
		source: "(25:2) {#if minutes >=0}",
		ctx
	});

	return block;
}

// (28:2) {:else}
function create_else_block(ctx) {
	let p;
	let t0;
	let t1;
	let t2;
	let t3;
	let t4;

	const block = {
		c: function create() {
			p = element("p");
			t0 = text(/*minutes*/ ctx[0]);
			t1 = text(":0");
			t2 = text(/*seconds*/ ctx[1]);
			t3 = text("' ");
			t4 = text(/*wodisplayname*/ ctx[2]);
			add_location(p, file$H, 28, 2, 453);
		},
		m: function mount(target, anchor) {
			insert_dev(target, p, anchor);
			append_dev(p, t0);
			append_dev(p, t1);
			append_dev(p, t2);
			append_dev(p, t3);
			append_dev(p, t4);
		},
		p: function update(ctx, dirty) {
			if (dirty & /*minutes*/ 1) set_data_dev(t0, /*minutes*/ ctx[0]);
			if (dirty & /*seconds*/ 2) set_data_dev(t2, /*seconds*/ ctx[1]);
			if (dirty & /*wodisplayname*/ 4) set_data_dev(t4, /*wodisplayname*/ ctx[2]);
		},
		d: function destroy(detaching) {
			if (detaching) detach_dev(p);
		}
	};

	dispatch_dev("SvelteRegisterBlock", {
		block,
		id: create_else_block.name,
		type: "else",
		source: "(28:2) {:else}",
		ctx
	});

	return block;
}

// (26:2) {#if seconds > 9}
function create_if_block_2$1(ctx) {
	let p;
	let t0;
	let t1;
	let t2;
	let t3;
	let t4;

	const block = {
		c: function create() {
			p = element("p");
			t0 = text(/*minutes*/ ctx[0]);
			t1 = text(":");
			t2 = text(/*seconds*/ ctx[1]);
			t3 = text("' ");
			t4 = text(/*wodisplayname*/ ctx[2]);
			add_location(p, file$H, 26, 2, 397);
		},
		m: function mount(target, anchor) {
			insert_dev(target, p, anchor);
			append_dev(p, t0);
			append_dev(p, t1);
			append_dev(p, t2);
			append_dev(p, t3);
			append_dev(p, t4);
		},
		p: function update(ctx, dirty) {
			if (dirty & /*minutes*/ 1) set_data_dev(t0, /*minutes*/ ctx[0]);
			if (dirty & /*seconds*/ 2) set_data_dev(t2, /*seconds*/ ctx[1]);
			if (dirty & /*wodisplayname*/ 4) set_data_dev(t4, /*wodisplayname*/ ctx[2]);
		},
		d: function destroy(detaching) {
			if (detaching) detach_dev(p);
		}
	};

	dispatch_dev("SvelteRegisterBlock", {
		block,
		id: create_if_block_2$1.name,
		type: "if",
		source: "(26:2) {#if seconds > 9}",
		ctx
	});

	return block;
}

// (32:2) {#if minutes <0}
function create_if_block$G(ctx) {
	let p;
	let t0;
	let t1;

	const block = {
		c: function create() {
			p = element("p");
			t0 = text("0:00' ");
			t1 = text(/*wodisplayname*/ ctx[2]);
			add_location(p, file$H, 32, 2, 535);
		},
		m: function mount(target, anchor) {
			insert_dev(target, p, anchor);
			append_dev(p, t0);
			append_dev(p, t1);
		},
		p: function update(ctx, dirty) {
			if (dirty & /*wodisplayname*/ 4) set_data_dev(t1, /*wodisplayname*/ ctx[2]);
		},
		d: function destroy(detaching) {
			if (detaching) detach_dev(p);
		}
	};

	dispatch_dev("SvelteRegisterBlock", {
		block,
		id: create_if_block$G.name,
		type: "if",
		source: "(32:2) {#if minutes <0}",
		ctx
	});

	return block;
}

// (24:0) <Tile>
function create_default_slot$2(ctx) {
	let t0;
	let t1;
	let progress;
	let progress_value_value;
	let t2;
	let p;
	let t3;
	let t4;
	let if_block0 = /*minutes*/ ctx[0] >= 0 && create_if_block_1$1(ctx);
	let if_block1 = /*minutes*/ ctx[0] < 0 && create_if_block$G(ctx);

	const block = {
		c: function create() {
			if (if_block0) if_block0.c();
			t0 = space();
			if (if_block1) if_block1.c();
			t1 = space();
			progress = element("progress");
			t2 = space();
			p = element("p");
			t3 = text("Next Up: ");
			t4 = text(/*nextwo*/ ctx[5]);
			progress.value = progress_value_value = /*wotime*/ ctx[3] / /*totalwotime*/ ctx[4];
			attr_dev(progress, "class", "svelte-14krudl");
			add_location(progress, file$H, 34, 2, 574);
			add_location(p, file$H, 35, 2, 625);
		},
		m: function mount(target, anchor) {
			if (if_block0) if_block0.m(target, anchor);
			insert_dev(target, t0, anchor);
			if (if_block1) if_block1.m(target, anchor);
			insert_dev(target, t1, anchor);
			insert_dev(target, progress, anchor);
			insert_dev(target, t2, anchor);
			insert_dev(target, p, anchor);
			append_dev(p, t3);
			append_dev(p, t4);
		},
		p: function update(ctx, dirty) {
			if (/*minutes*/ ctx[0] >= 0) {
				if (if_block0) {
					if_block0.p(ctx, dirty);
				} else {
					if_block0 = create_if_block_1$1(ctx);
					if_block0.c();
					if_block0.m(t0.parentNode, t0);
				}
			} else if (if_block0) {
				if_block0.d(1);
				if_block0 = null;
			}

			if (/*minutes*/ ctx[0] < 0) {
				if (if_block1) {
					if_block1.p(ctx, dirty);
				} else {
					if_block1 = create_if_block$G(ctx);
					if_block1.c();
					if_block1.m(t1.parentNode, t1);
				}
			} else if (if_block1) {
				if_block1.d(1);
				if_block1 = null;
			}

			if (dirty & /*wotime, totalwotime*/ 24 && progress_value_value !== (progress_value_value = /*wotime*/ ctx[3] / /*totalwotime*/ ctx[4])) {
				prop_dev(progress, "value", progress_value_value);
			}

			if (dirty & /*nextwo*/ 32) set_data_dev(t4, /*nextwo*/ ctx[5]);
		},
		d: function destroy(detaching) {
			if (if_block0) if_block0.d(detaching);
			if (detaching) detach_dev(t0);
			if (if_block1) if_block1.d(detaching);
			if (detaching) detach_dev(t1);
			if (detaching) detach_dev(progress);
			if (detaching) detach_dev(t2);
			if (detaching) detach_dev(p);
		}
	};

	dispatch_dev("SvelteRegisterBlock", {
		block,
		id: create_default_slot$2.name,
		type: "slot",
		source: "(24:0) <Tile>",
		ctx
	});

	return block;
}

function create_fragment$H(ctx) {
	let tile;
	let current;

	tile = new Tile({
			props: {
				$$slots: { default: [create_default_slot$2] },
				$$scope: { ctx }
			},
			$$inline: true
		});

	const block = {
		c: function create() {
			create_component(tile.$$.fragment);
		},
		l: function claim(nodes) {
			throw new Error("options.hydrate only works if the component was compiled with the `hydratable: true` option");
		},
		m: function mount(target, anchor) {
			mount_component(tile, target, anchor);
			current = true;
		},
		p: function update(ctx, [dirty]) {
			const tile_changes = {};

			if (dirty & /*$$scope, nextwo, wotime, totalwotime, wodisplayname, minutes, seconds*/ 127) {
				tile_changes.$$scope = { dirty, ctx };
			}

			tile.$set(tile_changes);
		},
		i: function intro(local) {
			if (current) return;
			transition_in(tile.$$.fragment, local);
			current = true;
		},
		o: function outro(local) {
			transition_out(tile.$$.fragment, local);
			current = false;
		},
		d: function destroy(detaching) {
			destroy_component(tile, detaching);
		}
	};

	dispatch_dev("SvelteRegisterBlock", {
		block,
		id: create_fragment$H.name,
		type: "component",
		source: "",
		ctx
	});

	return block;
}

function instance$H($$self, $$props, $$invalidate) {
	let { $$slots: slots = {}, $$scope } = $$props;
	validate_slots('Workout_progress', slots, []);
	let { minutes = 0 } = $$props;
	let { seconds = 0 } = $$props;
	let { wodisplayname = "rest" } = $$props;
	let { wotime = 1 } = $$props;
	let { totalwotime = 1 } = $$props;
	let { nextwo = "" } = $$props;
	const writable_props = ['minutes', 'seconds', 'wodisplayname', 'wotime', 'totalwotime', 'nextwo'];

	Object.keys($$props).forEach(key => {
		if (!~writable_props.indexOf(key) && key.slice(0, 2) !== '$$' && key !== 'slot') console.warn(`<Workout_progress> was created with unknown prop '${key}'`);
	});

	$$self.$$set = $$props => {
		if ('minutes' in $$props) $$invalidate(0, minutes = $$props.minutes);
		if ('seconds' in $$props) $$invalidate(1, seconds = $$props.seconds);
		if ('wodisplayname' in $$props) $$invalidate(2, wodisplayname = $$props.wodisplayname);
		if ('wotime' in $$props) $$invalidate(3, wotime = $$props.wotime);
		if ('totalwotime' in $$props) $$invalidate(4, totalwotime = $$props.totalwotime);
		if ('nextwo' in $$props) $$invalidate(5, nextwo = $$props.nextwo);
	};

	$$self.$capture_state = () => ({
		Tile,
		minutes,
		seconds,
		wodisplayname,
		wotime,
		totalwotime,
		nextwo
	});

	$$self.$inject_state = $$props => {
		if ('minutes' in $$props) $$invalidate(0, minutes = $$props.minutes);
		if ('seconds' in $$props) $$invalidate(1, seconds = $$props.seconds);
		if ('wodisplayname' in $$props) $$invalidate(2, wodisplayname = $$props.wodisplayname);
		if ('wotime' in $$props) $$invalidate(3, wotime = $$props.wotime);
		if ('totalwotime' in $$props) $$invalidate(4, totalwotime = $$props.totalwotime);
		if ('nextwo' in $$props) $$invalidate(5, nextwo = $$props.nextwo);
	};

	if ($$props && "$$inject" in $$props) {
		$$self.$inject_state($$props.$$inject);
	}

	return [minutes, seconds, wodisplayname, wotime, totalwotime, nextwo];
}

class Workout_progress extends SvelteComponentDev {
	constructor(options) {
		super(options);

		init(this, options, instance$H, create_fragment$H, safe_not_equal, {
			minutes: 0,
			seconds: 1,
			wodisplayname: 2,
			wotime: 3,
			totalwotime: 4,
			nextwo: 5
		});

		dispatch_dev("SvelteRegisterComponent", {
			component: this,
			tagName: "Workout_progress",
			options,
			id: create_fragment$H.name
		});
	}

	get minutes() {
		throw new Error("<Workout_progress>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
	}

	set minutes(value) {
		throw new Error("<Workout_progress>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
	}

	get seconds() {
		throw new Error("<Workout_progress>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
	}

	set seconds(value) {
		throw new Error("<Workout_progress>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
	}

	get wodisplayname() {
		throw new Error("<Workout_progress>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
	}

	set wodisplayname(value) {
		throw new Error("<Workout_progress>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
	}

	get wotime() {
		throw new Error("<Workout_progress>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
	}

	set wotime(value) {
		throw new Error("<Workout_progress>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
	}

	get totalwotime() {
		throw new Error("<Workout_progress>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
	}

	set totalwotime(value) {
		throw new Error("<Workout_progress>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
	}

	get nextwo() {
		throw new Error("<Workout_progress>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
	}

	set nextwo(value) {
		throw new Error("<Workout_progress>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
	}
}

/* src/components/workout-animation.svelte generated by Svelte v3.49.0 */
const file$G = "src/components/workout-animation.svelte";

function create_fragment$G(ctx) {
	let div;
	let switch_instance;
	let updating_isPaused;
	let updating_direction;
	let updating_rootElement;
	let current;

	function switch_instance_isPaused_binding(value) {
		/*switch_instance_isPaused_binding*/ ctx[9](value);
	}

	function switch_instance_direction_binding(value) {
		/*switch_instance_direction_binding*/ ctx[10](value);
	}

	function switch_instance_rootElement_binding(value) {
		/*switch_instance_rootElement_binding*/ ctx[11](value);
	}

	var switch_value = /*Workout*/ ctx[3];

	function switch_props(ctx) {
		let switch_instance_props = {};

		if (/*isPaused*/ ctx[0] !== void 0) {
			switch_instance_props.isPaused = /*isPaused*/ ctx[0];
		}

		if (/*direction*/ ctx[1] !== void 0) {
			switch_instance_props.direction = /*direction*/ ctx[1];
		}

		if (/*rootElement*/ ctx[2] !== void 0) {
			switch_instance_props.rootElement = /*rootElement*/ ctx[2];
		}

		return {
			props: switch_instance_props,
			$$inline: true
		};
	}

	if (switch_value) {
		switch_instance = new switch_value(switch_props(ctx));
		binding_callbacks.push(() => bind(switch_instance, 'isPaused', switch_instance_isPaused_binding));
		binding_callbacks.push(() => bind(switch_instance, 'direction', switch_instance_direction_binding));
		binding_callbacks.push(() => bind(switch_instance, 'rootElement', switch_instance_rootElement_binding));
	}

	const block = {
		c: function create() {
			div = element("div");
			if (switch_instance) create_component(switch_instance.$$.fragment);
			attr_dev(div, "class", "animation svelte-10feo98");
			add_location(div, file$G, 161, 0, 7257);
		},
		l: function claim(nodes) {
			throw new Error("options.hydrate only works if the component was compiled with the `hydratable: true` option");
		},
		m: function mount(target, anchor) {
			insert_dev(target, div, anchor);

			if (switch_instance) {
				mount_component(switch_instance, div, null);
			}

			current = true;
		},
		p: function update(ctx, [dirty]) {
			const switch_instance_changes = {};

			if (!updating_isPaused && dirty & /*isPaused*/ 1) {
				updating_isPaused = true;
				switch_instance_changes.isPaused = /*isPaused*/ ctx[0];
				add_flush_callback(() => updating_isPaused = false);
			}

			if (!updating_direction && dirty & /*direction*/ 2) {
				updating_direction = true;
				switch_instance_changes.direction = /*direction*/ ctx[1];
				add_flush_callback(() => updating_direction = false);
			}

			if (!updating_rootElement && dirty & /*rootElement*/ 4) {
				updating_rootElement = true;
				switch_instance_changes.rootElement = /*rootElement*/ ctx[2];
				add_flush_callback(() => updating_rootElement = false);
			}

			if (switch_value !== (switch_value = /*Workout*/ ctx[3])) {
				if (switch_instance) {
					group_outros();
					const old_component = switch_instance;

					transition_out(old_component.$$.fragment, 1, 0, () => {
						destroy_component(old_component, 1);
					});

					check_outros();
				}

				if (switch_value) {
					switch_instance = new switch_value(switch_props(ctx));
					binding_callbacks.push(() => bind(switch_instance, 'isPaused', switch_instance_isPaused_binding));
					binding_callbacks.push(() => bind(switch_instance, 'direction', switch_instance_direction_binding));
					binding_callbacks.push(() => bind(switch_instance, 'rootElement', switch_instance_rootElement_binding));
					create_component(switch_instance.$$.fragment);
					transition_in(switch_instance.$$.fragment, 1);
					mount_component(switch_instance, div, null);
				} else {
					switch_instance = null;
				}
			} else if (switch_value) {
				switch_instance.$set(switch_instance_changes);
			}
		},
		i: function intro(local) {
			if (current) return;
			if (switch_instance) transition_in(switch_instance.$$.fragment, local);
			current = true;
		},
		o: function outro(local) {
			if (switch_instance) transition_out(switch_instance.$$.fragment, local);
			current = false;
		},
		d: function destroy(detaching) {
			if (detaching) detach_dev(div);
			if (switch_instance) destroy_component(switch_instance);
		}
	};

	dispatch_dev("SvelteRegisterBlock", {
		block,
		id: create_fragment$G.name,
		type: "component",
		source: "",
		ctx
	});

	return block;
}

function instance$G($$self, $$props, $$invalidate) {
	let { $$slots: slots = {}, $$scope } = $$props;
	validate_slots('Workout_animation', slots, []);

	var __awaiter = this && this.__awaiter || function (thisArg, _arguments, P, generator) {
		function adopt(value) {
			return value instanceof P
			? value
			: new P(function (resolve) {
						resolve(value);
					});
		}

		return new (P || (P = Promise))(function (resolve, reject) {
				function fulfilled(value) {
					try {
						step(generator.next(value));
					} catch(e) {
						reject(e);
					}
				}

				function rejected(value) {
					try {
						step(generator["throw"](value));
					} catch(e) {
						reject(e);
					}
				}

				function step(result) {
					result.done
					? resolve(result.value)
					: adopt(result.value).then(fulfilled, rejected);
				}

				step((generator = generator.apply(thisArg, _arguments || [])).next());
			});
	};

	let { wo_animation = "pushups" } = $$props;
	let { isPaused = false } = $$props;
	let { direction = "right" } = $$props;
	let { flesh } = $$props;
	let { hair } = $$props;
	let { pants } = $$props;
	let { shirt } = $$props;
	let Workout;
	let rootElement;
	const sleep = ms => new Promise(f => setTimeout(f, ms));

	function loadAnimation() {
		return __awaiter(this, void 0, void 0, function* () {
			if (wo_animation == "pushups") {
				$$invalidate(3, Workout = (yield Promise.resolve().then(function () { return workoutPushups; })).default);
			} else if (wo_animation == "sideplank") {
				$$invalidate(3, Workout = (yield Promise.resolve().then(function () { return workoutSideplank; })).default);
			} else if (wo_animation == "agilitycircles") {
				$$invalidate(3, Workout = (yield Promise.resolve().then(function () { return workoutAgilitycircles; })).default);
			} else if (wo_animation == "alternatingsupermans") {
				$$invalidate(3, Workout = (yield Promise.resolve().then(function () { return workoutAlternatingsupermans; })).default);
			} else if (wo_animation == "balancereaches") {
				$$invalidate(3, Workout = (yield Promise.resolve().then(function () { return workoutBalancereaches; })).default);
			} else if (wo_animation == "bicycles") {
				$$invalidate(3, Workout = (yield Promise.resolve().then(function () { return workoutBicycles; })).default);
			} else if (wo_animation == "burpees") {
				$$invalidate(3, Workout = (yield Promise.resolve().then(function () { return workoutBurpees; })).default);
			} else if (wo_animation == "crossbodyv") {
				$$invalidate(3, Workout = (yield Promise.resolve().then(function () { return workoutCrossbodyv; })).default);
			} else if (wo_animation == "crunches") {
				$$invalidate(3, Workout = (yield Promise.resolve().then(function () { return workoutCrunches; })).default);
			} else if (wo_animation == "curtsylunges") {
				$$invalidate(3, Workout = (yield Promise.resolve().then(function () { return workoutCurtsylunges; })).default);
			} else if (wo_animation == "diagonallunges") {
				$$invalidate(3, Workout = (yield Promise.resolve().then(function () { return workoutDiagonallunges; })).default);
			} else if (wo_animation == "divebomberpushup") {
				$$invalidate(3, Workout = (yield Promise.resolve().then(function () { return workoutDivebomberpushup; })).default);
			} else if (wo_animation == "doublecrunches") {
				$$invalidate(3, Workout = (yield Promise.resolve().then(function () { return workoutDoublecrunches; })).default);
			} else if (wo_animation == "hellodollies") {
				$$invalidate(3, Workout = (yield Promise.resolve().then(function () { return workoutHellodollies; })).default);
			} else if (wo_animation == "hightailpushups") {
				$$invalidate(3, Workout = (yield Promise.resolve().then(function () { return workoutHightailpushups; })).default);
			} else if (wo_animation == "jumpingjacks") {
				$$invalidate(3, Workout = (yield Promise.resolve().then(function () { return workoutJumpingjacks; })).default);
			} else if (wo_animation == "laterallunges") {
				$$invalidate(3, Workout = (yield Promise.resolve().then(function () { return workoutLaterallunges; })).default);
			} else if (wo_animation == "lunges") {
				$$invalidate(3, Workout = (yield Promise.resolve().then(function () { return workoutLunges; })).default);
			} else if (wo_animation == "prisoners") {
				$$invalidate(3, Workout = (yield Promise.resolve().then(function () { return workoutPrisoners; })).default);
			} else if (wo_animation == "pushuprotate") {
				$$invalidate(3, Workout = (yield Promise.resolve().then(function () { return workoutPushuprotate; })).default);
			} else if (wo_animation == "pushupspider") {
				$$invalidate(3, Workout = (yield Promise.resolve().then(function () { return workoutPushupspider; })).default);
			} else if (wo_animation == "rest") {
				$$invalidate(3, Workout = (yield Promise.resolve().then(function () { return workoutRest; })).default);
			} else if (wo_animation == "reverselungerotate") {
				$$invalidate(3, Workout = (yield Promise.resolve().then(function () { return workoutReverselungerotate; })).default);
			} else if (wo_animation == "reverselunges") {
				$$invalidate(3, Workout = (yield Promise.resolve().then(function () { return workoutReverselunges; })).default);
			} else if (wo_animation == "shadowboxing") {
				$$invalidate(3, Workout = (yield Promise.resolve().then(function () { return workoutShadowboxing; })).default);
			} else if (wo_animation == "skater") {
				$$invalidate(3, Workout = (yield Promise.resolve().then(function () { return workoutSkater; })).default);
			} else if (wo_animation == "sprints") {
				$$invalidate(3, Workout = (yield Promise.resolve().then(function () { return workoutSprints; })).default);
			} else if (wo_animation == "squats") {
				$$invalidate(3, Workout = (yield Promise.resolve().then(function () { return workoutSquats; })).default);
			} else if (wo_animation == "stepupsquats") {
				$$invalidate(3, Workout = (yield Promise.resolve().then(function () { return workoutStepupsquats; })).default);
			} else if (wo_animation == "surfers") {
				$$invalidate(3, Workout = (yield Promise.resolve().then(function () { return workoutSurfers; })).default);
			} else if (wo_animation == "swimmers") {
				$$invalidate(3, Workout = (yield Promise.resolve().then(function () { return workoutSwimmers; })).default);
			} else if (wo_animation == "tensandtwos") {
				$$invalidate(3, Workout = (yield Promise.resolve().then(function () { return workoutTensandtwos; })).default);
			} else if (wo_animation == "toetouches") {
				$$invalidate(3, Workout = (yield Promise.resolve().then(function () { return workoutToetouches; })).default);
			} else if (wo_animation == "tricepsdipandreach") {
				$$invalidate(3, Workout = (yield Promise.resolve().then(function () { return workoutTricepsdipandreach; })).default);
			} else if (wo_animation == "tricepsdips") {
				$$invalidate(3, Workout = (yield Promise.resolve().then(function () { return workoutTricepsdips; })).default);
			} else if (wo_animation == "wormwalkouts") {
				$$invalidate(3, Workout = (yield Promise.resolve().then(function () { return workoutWormwalkouts; })).default);
			} else {
				$$invalidate(3, Workout = (yield Promise.resolve().then(function () { return workoutPlank; })).default);
			}
		});
	}

	onMount(() => __awaiter(void 0, void 0, void 0, function* () {
		yield sleep(10); // simulate network delay
		loadAnimation();
	}));

	const writable_props = ['wo_animation', 'isPaused', 'direction', 'flesh', 'hair', 'pants', 'shirt'];

	Object.keys($$props).forEach(key => {
		if (!~writable_props.indexOf(key) && key.slice(0, 2) !== '$$' && key !== 'slot') console.warn(`<Workout_animation> was created with unknown prop '${key}'`);
	});

	function switch_instance_isPaused_binding(value) {
		isPaused = value;
		$$invalidate(0, isPaused);
	}

	function switch_instance_direction_binding(value) {
		direction = value;
		$$invalidate(1, direction);
	}

	function switch_instance_rootElement_binding(value) {
		rootElement = value;
		$$invalidate(2, rootElement);
	}

	$$self.$$set = $$props => {
		if ('wo_animation' in $$props) $$invalidate(4, wo_animation = $$props.wo_animation);
		if ('isPaused' in $$props) $$invalidate(0, isPaused = $$props.isPaused);
		if ('direction' in $$props) $$invalidate(1, direction = $$props.direction);
		if ('flesh' in $$props) $$invalidate(5, flesh = $$props.flesh);
		if ('hair' in $$props) $$invalidate(6, hair = $$props.hair);
		if ('pants' in $$props) $$invalidate(7, pants = $$props.pants);
		if ('shirt' in $$props) $$invalidate(8, shirt = $$props.shirt);
	};

	$$self.$capture_state = () => ({
		__awaiter,
		onMount,
		wo_animation,
		isPaused,
		direction,
		flesh,
		hair,
		pants,
		shirt,
		Workout,
		rootElement,
		sleep,
		loadAnimation
	});

	$$self.$inject_state = $$props => {
		if ('__awaiter' in $$props) __awaiter = $$props.__awaiter;
		if ('wo_animation' in $$props) $$invalidate(4, wo_animation = $$props.wo_animation);
		if ('isPaused' in $$props) $$invalidate(0, isPaused = $$props.isPaused);
		if ('direction' in $$props) $$invalidate(1, direction = $$props.direction);
		if ('flesh' in $$props) $$invalidate(5, flesh = $$props.flesh);
		if ('hair' in $$props) $$invalidate(6, hair = $$props.hair);
		if ('pants' in $$props) $$invalidate(7, pants = $$props.pants);
		if ('shirt' in $$props) $$invalidate(8, shirt = $$props.shirt);
		if ('Workout' in $$props) $$invalidate(3, Workout = $$props.Workout);
		if ('rootElement' in $$props) $$invalidate(2, rootElement = $$props.rootElement);
	};

	if ($$props && "$$inject" in $$props) {
		$$self.$inject_state($$props.$$inject);
	}

	$$self.$$.update = () => {
		if ($$self.$$.dirty & /*rootElement, hair*/ 68) {
			rootElement && rootElement.style.setProperty('--hair', `${hair}`);
		}

		if ($$self.$$.dirty & /*rootElement, flesh*/ 36) {
			rootElement && rootElement.style.setProperty('--flesh', `${flesh}`);
		}

		if ($$self.$$.dirty & /*rootElement, pants*/ 132) {
			rootElement && rootElement.style.setProperty('--pants', `${pants}`);
		}

		if ($$self.$$.dirty & /*rootElement, shirt*/ 260) {
			rootElement && rootElement.style.setProperty('--shirt', `${shirt}`);
		}
	};

	return [
		isPaused,
		direction,
		rootElement,
		Workout,
		wo_animation,
		flesh,
		hair,
		pants,
		shirt,
		switch_instance_isPaused_binding,
		switch_instance_direction_binding,
		switch_instance_rootElement_binding
	];
}

class Workout_animation extends SvelteComponentDev {
	constructor(options) {
		super(options);

		init(this, options, instance$G, create_fragment$G, safe_not_equal, {
			wo_animation: 4,
			isPaused: 0,
			direction: 1,
			flesh: 5,
			hair: 6,
			pants: 7,
			shirt: 8
		});

		dispatch_dev("SvelteRegisterComponent", {
			component: this,
			tagName: "Workout_animation",
			options,
			id: create_fragment$G.name
		});

		const { ctx } = this.$$;
		const props = options.props || {};

		if (/*flesh*/ ctx[5] === undefined && !('flesh' in props)) {
			console.warn("<Workout_animation> was created without expected prop 'flesh'");
		}

		if (/*hair*/ ctx[6] === undefined && !('hair' in props)) {
			console.warn("<Workout_animation> was created without expected prop 'hair'");
		}

		if (/*pants*/ ctx[7] === undefined && !('pants' in props)) {
			console.warn("<Workout_animation> was created without expected prop 'pants'");
		}

		if (/*shirt*/ ctx[8] === undefined && !('shirt' in props)) {
			console.warn("<Workout_animation> was created without expected prop 'shirt'");
		}
	}

	get wo_animation() {
		throw new Error("<Workout_animation>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
	}

	set wo_animation(value) {
		throw new Error("<Workout_animation>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
	}

	get isPaused() {
		throw new Error("<Workout_animation>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
	}

	set isPaused(value) {
		throw new Error("<Workout_animation>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
	}

	get direction() {
		throw new Error("<Workout_animation>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
	}

	set direction(value) {
		throw new Error("<Workout_animation>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
	}

	get flesh() {
		throw new Error("<Workout_animation>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
	}

	set flesh(value) {
		throw new Error("<Workout_animation>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
	}

	get hair() {
		throw new Error("<Workout_animation>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
	}

	set hair(value) {
		throw new Error("<Workout_animation>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
	}

	get pants() {
		throw new Error("<Workout_animation>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
	}

	set pants(value) {
		throw new Error("<Workout_animation>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
	}

	get shirt() {
		throw new Error("<Workout_animation>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
	}

	set shirt(value) {
		throw new Error("<Workout_animation>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
	}
}

/* src/pages/workout.svelte generated by Svelte v3.49.0 */
const file$F = "src/pages/workout.svelte";

// (158:8) <Column>
function create_default_slot_3(ctx) {
	let h1;
	let t0;
	let t1;
	let h2;
	let t2;
	let t3;
	let h5;
	let t5;
	let hr;

	const block = {
		c: function create() {
			h1 = element("h1");
			t0 = text(/*pluginemoji*/ ctx[6]);
			t1 = space();
			h2 = element("h2");
			t2 = text(/*pluginname*/ ctx[5]);
			t3 = space();
			h5 = element("h5");
			h5.textContent = "Workout";
			t5 = space();
			hr = element("hr");
			set_style(h1, "text-align", "center");
			add_location(h1, file$F, 158, 10, 3841);
			set_style(h2, "text-align", "center");
			attr_dev(h2, "class", "svelte-8ggwz8");
			add_location(h2, file$F, 159, 10, 3900);
			set_style(h5, "text-align", "center");
			add_location(h5, file$F, 160, 10, 3958);
			add_location(hr, file$F, 161, 10, 4011);
		},
		m: function mount(target, anchor) {
			insert_dev(target, h1, anchor);
			append_dev(h1, t0);
			insert_dev(target, t1, anchor);
			insert_dev(target, h2, anchor);
			append_dev(h2, t2);
			insert_dev(target, t3, anchor);
			insert_dev(target, h5, anchor);
			insert_dev(target, t5, anchor);
			insert_dev(target, hr, anchor);
		},
		p: function update(ctx, dirty) {
			if (dirty[0] & /*pluginemoji*/ 64) set_data_dev(t0, /*pluginemoji*/ ctx[6]);
			if (dirty[0] & /*pluginname*/ 32) set_data_dev(t2, /*pluginname*/ ctx[5]);
		},
		d: function destroy(detaching) {
			if (detaching) detach_dev(h1);
			if (detaching) detach_dev(t1);
			if (detaching) detach_dev(h2);
			if (detaching) detach_dev(t3);
			if (detaching) detach_dev(h5);
			if (detaching) detach_dev(t5);
			if (detaching) detach_dev(hr);
		}
	};

	dispatch_dev("SvelteRegisterBlock", {
		block,
		id: create_default_slot_3.name,
		type: "slot",
		source: "(158:8) <Column>",
		ctx
	});

	return block;
}

// (157:6) <Row>
function create_default_slot_2(ctx) {
	let column;
	let current;

	column = new Column({
			props: {
				$$slots: { default: [create_default_slot_3] },
				$$scope: { ctx }
			},
			$$inline: true
		});

	const block = {
		c: function create() {
			create_component(column.$$.fragment);
		},
		m: function mount(target, anchor) {
			mount_component(column, target, anchor);
			current = true;
		},
		p: function update(ctx, dirty) {
			const column_changes = {};

			if (dirty[0] & /*pluginname, pluginemoji*/ 96 | dirty[1] & /*$$scope*/ 16777216) {
				column_changes.$$scope = { dirty, ctx };
			}

			column.$set(column_changes);
		},
		i: function intro(local) {
			if (current) return;
			transition_in(column.$$.fragment, local);
			current = true;
		},
		o: function outro(local) {
			transition_out(column.$$.fragment, local);
			current = false;
		},
		d: function destroy(detaching) {
			destroy_component(column, detaching);
		}
	};

	dispatch_dev("SvelteRegisterBlock", {
		block,
		id: create_default_slot_2.name,
		type: "slot",
		source: "(157:6) <Row>",
		ctx
	});

	return block;
}

// (156:4) <Grid>
function create_default_slot_1$1(ctx) {
	let row;
	let current;

	row = new Row({
			props: {
				$$slots: { default: [create_default_slot_2] },
				$$scope: { ctx }
			},
			$$inline: true
		});

	const block = {
		c: function create() {
			create_component(row.$$.fragment);
		},
		m: function mount(target, anchor) {
			mount_component(row, target, anchor);
			current = true;
		},
		p: function update(ctx, dirty) {
			const row_changes = {};

			if (dirty[0] & /*pluginname, pluginemoji*/ 96 | dirty[1] & /*$$scope*/ 16777216) {
				row_changes.$$scope = { dirty, ctx };
			}

			row.$set(row_changes);
		},
		i: function intro(local) {
			if (current) return;
			transition_in(row.$$.fragment, local);
			current = true;
		},
		o: function outro(local) {
			transition_out(row.$$.fragment, local);
			current = false;
		},
		d: function destroy(detaching) {
			destroy_component(row, detaching);
		}
	};

	dispatch_dev("SvelteRegisterBlock", {
		block,
		id: create_default_slot_1$1.name,
		type: "slot",
		source: "(156:4) <Grid>",
		ctx
	});

	return block;
}

// (155:0) <Content>
function create_default_slot$1(ctx) {
	let grid;
	let current;

	grid = new Grid({
			props: {
				$$slots: { default: [create_default_slot_1$1] },
				$$scope: { ctx }
			},
			$$inline: true
		});

	const block = {
		c: function create() {
			create_component(grid.$$.fragment);
		},
		m: function mount(target, anchor) {
			mount_component(grid, target, anchor);
			current = true;
		},
		p: function update(ctx, dirty) {
			const grid_changes = {};

			if (dirty[0] & /*pluginname, pluginemoji*/ 96 | dirty[1] & /*$$scope*/ 16777216) {
				grid_changes.$$scope = { dirty, ctx };
			}

			grid.$set(grid_changes);
		},
		i: function intro(local) {
			if (current) return;
			transition_in(grid.$$.fragment, local);
			current = true;
		},
		o: function outro(local) {
			transition_out(grid.$$.fragment, local);
			current = false;
		},
		d: function destroy(detaching) {
			destroy_component(grid, detaching);
		}
	};

	dispatch_dev("SvelteRegisterBlock", {
		block,
		id: create_default_slot$1.name,
		type: "slot",
		source: "(155:0) <Content>",
		ctx
	});

	return block;
}

// (168:2) {#if activeIndexrefreshed}
function create_if_block$F(ctx) {
	let p;
	let t1;
	let workoutanimation;
	let updating_flesh;
	let updating_hair;
	let updating_pants;
	let updating_shirt;
	let updating_wo_animation;
	let updating_isPaused;
	let current;

	function workoutanimation_flesh_binding(value) {
		/*workoutanimation_flesh_binding*/ ctx[32](value);
	}

	function workoutanimation_hair_binding(value) {
		/*workoutanimation_hair_binding*/ ctx[33](value);
	}

	function workoutanimation_pants_binding(value) {
		/*workoutanimation_pants_binding*/ ctx[34](value);
	}

	function workoutanimation_shirt_binding(value) {
		/*workoutanimation_shirt_binding*/ ctx[35](value);
	}

	function workoutanimation_wo_animation_binding(value) {
		/*workoutanimation_wo_animation_binding*/ ctx[36](value);
	}

	function workoutanimation_isPaused_binding(value) {
		/*workoutanimation_isPaused_binding*/ ctx[37](value);
	}

	let workoutanimation_props = { direction: /*wodirection*/ ctx[16] };

	if (/*flesh*/ ctx[1] !== void 0) {
		workoutanimation_props.flesh = /*flesh*/ ctx[1];
	}

	if (/*hair*/ ctx[2] !== void 0) {
		workoutanimation_props.hair = /*hair*/ ctx[2];
	}

	if (/*pants*/ ctx[3] !== void 0) {
		workoutanimation_props.pants = /*pants*/ ctx[3];
	}

	if (/*shirt*/ ctx[4] !== void 0) {
		workoutanimation_props.shirt = /*shirt*/ ctx[4];
	}

	if (/*woname*/ ctx[14] !== void 0) {
		workoutanimation_props.wo_animation = /*woname*/ ctx[14];
	}

	if (/*isPaused*/ ctx[9] !== void 0) {
		workoutanimation_props.isPaused = /*isPaused*/ ctx[9];
	}

	workoutanimation = new Workout_animation({
			props: workoutanimation_props,
			$$inline: true
		});

	binding_callbacks.push(() => bind(workoutanimation, 'flesh', workoutanimation_flesh_binding));
	binding_callbacks.push(() => bind(workoutanimation, 'hair', workoutanimation_hair_binding));
	binding_callbacks.push(() => bind(workoutanimation, 'pants', workoutanimation_pants_binding));
	binding_callbacks.push(() => bind(workoutanimation, 'shirt', workoutanimation_shirt_binding));
	binding_callbacks.push(() => bind(workoutanimation, 'wo_animation', workoutanimation_wo_animation_binding));
	binding_callbacks.push(() => bind(workoutanimation, 'isPaused', workoutanimation_isPaused_binding));

	const block = {
		c: function create() {
			p = element("p");
			p.textContent = "temp";
			t1 = space();
			create_component(workoutanimation.$$.fragment);
			add_location(p, file$F, 168, 2, 4203);
		},
		m: function mount(target, anchor) {
			insert_dev(target, p, anchor);
			insert_dev(target, t1, anchor);
			mount_component(workoutanimation, target, anchor);
			current = true;
		},
		p: function update(ctx, dirty) {
			const workoutanimation_changes = {};
			if (dirty[0] & /*wodirection*/ 65536) workoutanimation_changes.direction = /*wodirection*/ ctx[16];

			if (!updating_flesh && dirty[0] & /*flesh*/ 2) {
				updating_flesh = true;
				workoutanimation_changes.flesh = /*flesh*/ ctx[1];
				add_flush_callback(() => updating_flesh = false);
			}

			if (!updating_hair && dirty[0] & /*hair*/ 4) {
				updating_hair = true;
				workoutanimation_changes.hair = /*hair*/ ctx[2];
				add_flush_callback(() => updating_hair = false);
			}

			if (!updating_pants && dirty[0] & /*pants*/ 8) {
				updating_pants = true;
				workoutanimation_changes.pants = /*pants*/ ctx[3];
				add_flush_callback(() => updating_pants = false);
			}

			if (!updating_shirt && dirty[0] & /*shirt*/ 16) {
				updating_shirt = true;
				workoutanimation_changes.shirt = /*shirt*/ ctx[4];
				add_flush_callback(() => updating_shirt = false);
			}

			if (!updating_wo_animation && dirty[0] & /*woname*/ 16384) {
				updating_wo_animation = true;
				workoutanimation_changes.wo_animation = /*woname*/ ctx[14];
				add_flush_callback(() => updating_wo_animation = false);
			}

			if (!updating_isPaused && dirty[0] & /*isPaused*/ 512) {
				updating_isPaused = true;
				workoutanimation_changes.isPaused = /*isPaused*/ ctx[9];
				add_flush_callback(() => updating_isPaused = false);
			}

			workoutanimation.$set(workoutanimation_changes);
		},
		i: function intro(local) {
			if (current) return;
			transition_in(workoutanimation.$$.fragment, local);
			current = true;
		},
		o: function outro(local) {
			transition_out(workoutanimation.$$.fragment, local);
			current = false;
		},
		d: function destroy(detaching) {
			if (detaching) detach_dev(p);
			if (detaching) detach_dev(t1);
			destroy_component(workoutanimation, detaching);
		}
	};

	dispatch_dev("SvelteRegisterBlock", {
		block,
		id: create_if_block$F.name,
		type: "if",
		source: "(168:2) {#if activeIndexrefreshed}",
		ctx
	});

	return block;
}

function create_fragment$F(ctx) {
	let content;
	let t0;
	let controller;
	let updating_minutes;
	let updating_seconds;
	let updating_target;
	let updating_isPaused;
	let t1;
	let t2;
	let workoutprogress;
	let updating_nextwo;
	let updating_minutes_1;
	let updating_seconds_1;
	let updating_wotime;
	let updating_totalwotime;
	let updating_wodisplayname;
	let current;

	content = new Content({
			props: {
				$$slots: { default: [create_default_slot$1] },
				$$scope: { ctx }
			},
			$$inline: true
		});

	function controller_minutes_binding(value) {
		/*controller_minutes_binding*/ ctx[28](value);
	}

	function controller_seconds_binding(value) {
		/*controller_seconds_binding*/ ctx[29](value);
	}

	function controller_target_binding(value) {
		/*controller_target_binding*/ ctx[30](value);
	}

	function controller_isPaused_binding(value) {
		/*controller_isPaused_binding*/ ctx[31](value);
	}

	let controller_props = {};

	if (/*minutes*/ ctx[8] !== void 0) {
		controller_props.minutes = /*minutes*/ ctx[8];
	}

	if (/*seconds*/ ctx[19] !== void 0) {
		controller_props.seconds = /*seconds*/ ctx[19];
	}

	if (/*target*/ ctx[0] !== void 0) {
		controller_props.target = /*target*/ ctx[0];
	}

	if (/*isPaused*/ ctx[9] !== void 0) {
		controller_props.isPaused = /*isPaused*/ ctx[9];
	}

	controller = new Program_controller({ props: controller_props, $$inline: true });
	binding_callbacks.push(() => bind(controller, 'minutes', controller_minutes_binding));
	binding_callbacks.push(() => bind(controller, 'seconds', controller_seconds_binding));
	binding_callbacks.push(() => bind(controller, 'target', controller_target_binding));
	binding_callbacks.push(() => bind(controller, 'isPaused', controller_isPaused_binding));
	controller.$on("end", /*endProgram*/ ctx[21]);
	let if_block = /*activeIndexrefreshed*/ ctx[17] && create_if_block$F(ctx);

	function workoutprogress_nextwo_binding(value) {
		/*workoutprogress_nextwo_binding*/ ctx[38](value);
	}

	function workoutprogress_minutes_binding(value) {
		/*workoutprogress_minutes_binding*/ ctx[39](value);
	}

	function workoutprogress_seconds_binding(value) {
		/*workoutprogress_seconds_binding*/ ctx[40](value);
	}

	function workoutprogress_wotime_binding(value) {
		/*workoutprogress_wotime_binding*/ ctx[41](value);
	}

	function workoutprogress_totalwotime_binding(value) {
		/*workoutprogress_totalwotime_binding*/ ctx[42](value);
	}

	function workoutprogress_wodisplayname_binding(value) {
		/*workoutprogress_wodisplayname_binding*/ ctx[43](value);
	}

	let workoutprogress_props = {};

	if (/*nextwo*/ ctx[18] !== void 0) {
		workoutprogress_props.nextwo = /*nextwo*/ ctx[18];
	}

	if (/*wominutes*/ ctx[7] !== void 0) {
		workoutprogress_props.minutes = /*wominutes*/ ctx[7];
	}

	if (/*woseconds*/ ctx[13] !== void 0) {
		workoutprogress_props.seconds = /*woseconds*/ ctx[13];
	}

	if (/*wotime*/ ctx[12] !== void 0) {
		workoutprogress_props.wotime = /*wotime*/ ctx[12];
	}

	if (/*totalwotime*/ ctx[10] !== void 0) {
		workoutprogress_props.totalwotime = /*totalwotime*/ ctx[10];
	}

	if (/*wodisplayname*/ ctx[15] !== void 0) {
		workoutprogress_props.wodisplayname = /*wodisplayname*/ ctx[15];
	}

	workoutprogress = new Workout_progress({
			props: workoutprogress_props,
			$$inline: true
		});

	binding_callbacks.push(() => bind(workoutprogress, 'nextwo', workoutprogress_nextwo_binding));
	binding_callbacks.push(() => bind(workoutprogress, 'minutes', workoutprogress_minutes_binding));
	binding_callbacks.push(() => bind(workoutprogress, 'seconds', workoutprogress_seconds_binding));
	binding_callbacks.push(() => bind(workoutprogress, 'wotime', workoutprogress_wotime_binding));
	binding_callbacks.push(() => bind(workoutprogress, 'totalwotime', workoutprogress_totalwotime_binding));
	binding_callbacks.push(() => bind(workoutprogress, 'wodisplayname', workoutprogress_wodisplayname_binding));

	const block = {
		c: function create() {
			create_component(content.$$.fragment);
			t0 = space();
			create_component(controller.$$.fragment);
			t1 = space();
			if (if_block) if_block.c();
			t2 = space();
			create_component(workoutprogress.$$.fragment);
		},
		l: function claim(nodes) {
			throw new Error("options.hydrate only works if the component was compiled with the `hydratable: true` option");
		},
		m: function mount(target, anchor) {
			mount_component(content, target, anchor);
			insert_dev(target, t0, anchor);
			mount_component(controller, target, anchor);
			insert_dev(target, t1, anchor);
			if (if_block) if_block.m(target, anchor);
			insert_dev(target, t2, anchor);
			mount_component(workoutprogress, target, anchor);
			current = true;
		},
		p: function update(ctx, dirty) {
			const content_changes = {};

			if (dirty[0] & /*pluginname, pluginemoji*/ 96 | dirty[1] & /*$$scope*/ 16777216) {
				content_changes.$$scope = { dirty, ctx };
			}

			content.$set(content_changes);
			const controller_changes = {};

			if (!updating_minutes && dirty[0] & /*minutes*/ 256) {
				updating_minutes = true;
				controller_changes.minutes = /*minutes*/ ctx[8];
				add_flush_callback(() => updating_minutes = false);
			}

			if (!updating_seconds && dirty[0] & /*seconds*/ 524288) {
				updating_seconds = true;
				controller_changes.seconds = /*seconds*/ ctx[19];
				add_flush_callback(() => updating_seconds = false);
			}

			if (!updating_target && dirty[0] & /*target*/ 1) {
				updating_target = true;
				controller_changes.target = /*target*/ ctx[0];
				add_flush_callback(() => updating_target = false);
			}

			if (!updating_isPaused && dirty[0] & /*isPaused*/ 512) {
				updating_isPaused = true;
				controller_changes.isPaused = /*isPaused*/ ctx[9];
				add_flush_callback(() => updating_isPaused = false);
			}

			controller.$set(controller_changes);

			if (/*activeIndexrefreshed*/ ctx[17]) {
				if (if_block) {
					if_block.p(ctx, dirty);

					if (dirty[0] & /*activeIndexrefreshed*/ 131072) {
						transition_in(if_block, 1);
					}
				} else {
					if_block = create_if_block$F(ctx);
					if_block.c();
					transition_in(if_block, 1);
					if_block.m(t2.parentNode, t2);
				}
			} else if (if_block) {
				group_outros();

				transition_out(if_block, 1, 1, () => {
					if_block = null;
				});

				check_outros();
			}

			const workoutprogress_changes = {};

			if (!updating_nextwo && dirty[0] & /*nextwo*/ 262144) {
				updating_nextwo = true;
				workoutprogress_changes.nextwo = /*nextwo*/ ctx[18];
				add_flush_callback(() => updating_nextwo = false);
			}

			if (!updating_minutes_1 && dirty[0] & /*wominutes*/ 128) {
				updating_minutes_1 = true;
				workoutprogress_changes.minutes = /*wominutes*/ ctx[7];
				add_flush_callback(() => updating_minutes_1 = false);
			}

			if (!updating_seconds_1 && dirty[0] & /*woseconds*/ 8192) {
				updating_seconds_1 = true;
				workoutprogress_changes.seconds = /*woseconds*/ ctx[13];
				add_flush_callback(() => updating_seconds_1 = false);
			}

			if (!updating_wotime && dirty[0] & /*wotime*/ 4096) {
				updating_wotime = true;
				workoutprogress_changes.wotime = /*wotime*/ ctx[12];
				add_flush_callback(() => updating_wotime = false);
			}

			if (!updating_totalwotime && dirty[0] & /*totalwotime*/ 1024) {
				updating_totalwotime = true;
				workoutprogress_changes.totalwotime = /*totalwotime*/ ctx[10];
				add_flush_callback(() => updating_totalwotime = false);
			}

			if (!updating_wodisplayname && dirty[0] & /*wodisplayname*/ 32768) {
				updating_wodisplayname = true;
				workoutprogress_changes.wodisplayname = /*wodisplayname*/ ctx[15];
				add_flush_callback(() => updating_wodisplayname = false);
			}

			workoutprogress.$set(workoutprogress_changes);
		},
		i: function intro(local) {
			if (current) return;
			transition_in(content.$$.fragment, local);
			transition_in(controller.$$.fragment, local);
			transition_in(if_block);
			transition_in(workoutprogress.$$.fragment, local);
			current = true;
		},
		o: function outro(local) {
			transition_out(content.$$.fragment, local);
			transition_out(controller.$$.fragment, local);
			transition_out(if_block);
			transition_out(workoutprogress.$$.fragment, local);
			current = false;
		},
		d: function destroy(detaching) {
			destroy_component(content, detaching);
			if (detaching) detach_dev(t0);
			destroy_component(controller, detaching);
			if (detaching) detach_dev(t1);
			if (if_block) if_block.d(detaching);
			if (detaching) detach_dev(t2);
			destroy_component(workoutprogress, detaching);
		}
	};

	dispatch_dev("SvelteRegisterBlock", {
		block,
		id: create_fragment$F.name,
		type: "component",
		source: "",
		ctx
	});

	return block;
}

function instance$F($$self, $$props, $$invalidate) {
	let minutes;
	let seconds;

	let $wotimer,
		$$unsubscribe_wotimer = noop,
		$$subscribe_wotimer = () => ($$unsubscribe_wotimer(), $$unsubscribe_wotimer = subscribe(wotimer, $$value => $$invalidate(26, $wotimer = $$value)), wotimer);

	let $timer;
	$$self.$$.on_destroy.push(() => $$unsubscribe_wotimer());
	let { $$slots: slots = {}, $$scope } = $$props;
	validate_slots('Workout', slots, []);
	let { pluginname } = $$props;
	let { pluginemoji } = $$props;
	let { duration = 6.5 } = $$props;
	let { target = "full" } = $$props;
	let { program } = $$props;
	let { workouts } = $$props;
	let { flesh } = $$props;
	let { hair } = $$props;
	let { pants } = $$props;
	let { shirt } = $$props;
	let open = true;
	const dispatch = createEventDispatcher();
	let totaltime = duration * 60;
	let timer = tweened(totaltime);
	validate_store(timer, 'timer');
	component_subscribe($$self, timer, value => $$invalidate(27, $timer = value));
	let isPaused = false;
	let totalwotime = 10;
	let cumwotime = 0;
	let wotimer = tweened(totalwotime);
	validate_store(wotimer, 'wotimer');
	$$subscribe_wotimer();
	let wotime = 1;
	let wominutes = 0;
	let woseconds = 10;
	let wostart;
	let woname;
	let wodisplayname;
	let wodirection;
	let activeIndexrefreshed = true;
	let nextwo = "";
	let numberofWO = 0;
	let currentWO = 0;
	let woInterval;

	function startProgram() {
		numberofWO = program.routine.length;
		$$invalidate(25, currentWO = 0);

		setInterval(
			() => {
				if (!isPaused) {
					if ($timer > 0) set_store_value(timer, $timer--, $timer);
				}
			},
			1000
		);

		nextWO();
	}

	function nextWO() {
		if (woInterval) {
			clearInterval(woInterval);
		}

		let wonext = [{ "displayname": "Rest" }];

		let wo = workouts.filter(temp => {
			return temp.id == program.routine[currentWO];
		});

		if (currentWO == program.routine.length - 1) {
			wonext[0].displayname = "Rest";
		} else {
			wonext = workouts.filter(temp => {
				return temp.id == program.routine[currentWO + 1];
			});
		}

		//validate if workout is defined, otherwise assign wo with id 40 = boxing
		if (wo.length == 0) {
			wo = workouts.filter(temp => {
				return temp.id == 40;
			});
		}

		if (wonext.length == 0) {
			wonext = workouts.filter(temp => {
				return temp.id == 40;
			});
		}

		//end validate
		//set workout variables
		$$invalidate(15, wodisplayname = wo[0].displayname);

		$$invalidate(14, woname = wo[0].woname);
		$$invalidate(16, wodirection = wo[0].wodirection);
		$$invalidate(10, totalwotime = wo[0].duration - 0.7);
		$$invalidate(18, nextwo = wonext[0].displayname);

		//end set workout variable
		//change animation
		$$invalidate(17, activeIndexrefreshed = false);

		setTimeout(
			() => {
				$$invalidate(17, activeIndexrefreshed = true);
			},
			3
		);

		//end change animation
		//start wotimer
		$$subscribe_wotimer($$invalidate(11, wotimer = tweened(totalwotime)));

		woInterval = setInterval(
			() => {
				if (!isPaused) {
					if ($wotimer > 0) set_store_value(wotimer, $wotimer--, $wotimer);
				}
			},
			1000
		);
	} //end start wotimer

	function pause() {
		$$invalidate(9, isPaused = true);
	}

	function endProgram(event) {
		dispatch("end");
	}

	async function programFinished() {
		$$invalidate(9, isPaused = true);
		dispatch("finished");
	}

	onMount(() => {
		startProgram();
	});

	const writable_props = [
		'pluginname',
		'pluginemoji',
		'duration',
		'target',
		'program',
		'workouts',
		'flesh',
		'hair',
		'pants',
		'shirt'
	];

	Object.keys($$props).forEach(key => {
		if (!~writable_props.indexOf(key) && key.slice(0, 2) !== '$$' && key !== 'slot') console.warn(`<Workout> was created with unknown prop '${key}'`);
	});

	function controller_minutes_binding(value) {
		minutes = value;
		($$invalidate(8, minutes), $$invalidate(27, $timer));
	}

	function controller_seconds_binding(value) {
		seconds = value;
		(($$invalidate(19, seconds), $$invalidate(27, $timer)), $$invalidate(8, minutes));
	}

	function controller_target_binding(value) {
		target = value;
		$$invalidate(0, target);
	}

	function controller_isPaused_binding(value) {
		isPaused = value;
		$$invalidate(9, isPaused);
	}

	function workoutanimation_flesh_binding(value) {
		flesh = value;
		$$invalidate(1, flesh);
	}

	function workoutanimation_hair_binding(value) {
		hair = value;
		$$invalidate(2, hair);
	}

	function workoutanimation_pants_binding(value) {
		pants = value;
		$$invalidate(3, pants);
	}

	function workoutanimation_shirt_binding(value) {
		shirt = value;
		$$invalidate(4, shirt);
	}

	function workoutanimation_wo_animation_binding(value) {
		woname = value;
		$$invalidate(14, woname);
	}

	function workoutanimation_isPaused_binding(value) {
		isPaused = value;
		$$invalidate(9, isPaused);
	}

	function workoutprogress_nextwo_binding(value) {
		nextwo = value;
		$$invalidate(18, nextwo);
	}

	function workoutprogress_minutes_binding(value) {
		wominutes = value;
		($$invalidate(7, wominutes), $$invalidate(26, $wotimer));
	}

	function workoutprogress_seconds_binding(value) {
		woseconds = value;
		(($$invalidate(13, woseconds), $$invalidate(26, $wotimer)), $$invalidate(7, wominutes));
	}

	function workoutprogress_wotime_binding(value) {
		wotime = value;
		($$invalidate(12, wotime), $$invalidate(26, $wotimer));
	}

	function workoutprogress_totalwotime_binding(value) {
		totalwotime = value;
		$$invalidate(10, totalwotime);
	}

	function workoutprogress_wodisplayname_binding(value) {
		wodisplayname = value;
		$$invalidate(15, wodisplayname);
	}

	$$self.$$set = $$props => {
		if ('pluginname' in $$props) $$invalidate(5, pluginname = $$props.pluginname);
		if ('pluginemoji' in $$props) $$invalidate(6, pluginemoji = $$props.pluginemoji);
		if ('duration' in $$props) $$invalidate(22, duration = $$props.duration);
		if ('target' in $$props) $$invalidate(0, target = $$props.target);
		if ('program' in $$props) $$invalidate(23, program = $$props.program);
		if ('workouts' in $$props) $$invalidate(24, workouts = $$props.workouts);
		if ('flesh' in $$props) $$invalidate(1, flesh = $$props.flesh);
		if ('hair' in $$props) $$invalidate(2, hair = $$props.hair);
		if ('pants' in $$props) $$invalidate(3, pants = $$props.pants);
		if ('shirt' in $$props) $$invalidate(4, shirt = $$props.shirt);
	};

	$$self.$capture_state = () => ({
		onMount,
		createEventDispatcher,
		Button,
		Content,
		Grid,
		Row,
		Column,
		ContentSwitcher,
		Switch,
		Tile,
		tweened,
		Controller: Program_controller,
		Workoutprogress: Workout_progress,
		WorkoutAnimation: Workout_animation,
		pluginname,
		pluginemoji,
		duration,
		target,
		program,
		workouts,
		flesh,
		hair,
		pants,
		shirt,
		open,
		dispatch,
		totaltime,
		timer,
		isPaused,
		totalwotime,
		cumwotime,
		wotimer,
		wotime,
		wominutes,
		woseconds,
		wostart,
		woname,
		wodisplayname,
		wodirection,
		activeIndexrefreshed,
		nextwo,
		numberofWO,
		currentWO,
		woInterval,
		startProgram,
		nextWO,
		pause,
		endProgram,
		programFinished,
		minutes,
		seconds,
		$wotimer,
		$timer
	});

	$$self.$inject_state = $$props => {
		if ('pluginname' in $$props) $$invalidate(5, pluginname = $$props.pluginname);
		if ('pluginemoji' in $$props) $$invalidate(6, pluginemoji = $$props.pluginemoji);
		if ('duration' in $$props) $$invalidate(22, duration = $$props.duration);
		if ('target' in $$props) $$invalidate(0, target = $$props.target);
		if ('program' in $$props) $$invalidate(23, program = $$props.program);
		if ('workouts' in $$props) $$invalidate(24, workouts = $$props.workouts);
		if ('flesh' in $$props) $$invalidate(1, flesh = $$props.flesh);
		if ('hair' in $$props) $$invalidate(2, hair = $$props.hair);
		if ('pants' in $$props) $$invalidate(3, pants = $$props.pants);
		if ('shirt' in $$props) $$invalidate(4, shirt = $$props.shirt);
		if ('open' in $$props) open = $$props.open;
		if ('totaltime' in $$props) totaltime = $$props.totaltime;
		if ('timer' in $$props) $$invalidate(20, timer = $$props.timer);
		if ('isPaused' in $$props) $$invalidate(9, isPaused = $$props.isPaused);
		if ('totalwotime' in $$props) $$invalidate(10, totalwotime = $$props.totalwotime);
		if ('cumwotime' in $$props) cumwotime = $$props.cumwotime;
		if ('wotimer' in $$props) $$subscribe_wotimer($$invalidate(11, wotimer = $$props.wotimer));
		if ('wotime' in $$props) $$invalidate(12, wotime = $$props.wotime);
		if ('wominutes' in $$props) $$invalidate(7, wominutes = $$props.wominutes);
		if ('woseconds' in $$props) $$invalidate(13, woseconds = $$props.woseconds);
		if ('wostart' in $$props) wostart = $$props.wostart;
		if ('woname' in $$props) $$invalidate(14, woname = $$props.woname);
		if ('wodisplayname' in $$props) $$invalidate(15, wodisplayname = $$props.wodisplayname);
		if ('wodirection' in $$props) $$invalidate(16, wodirection = $$props.wodirection);
		if ('activeIndexrefreshed' in $$props) $$invalidate(17, activeIndexrefreshed = $$props.activeIndexrefreshed);
		if ('nextwo' in $$props) $$invalidate(18, nextwo = $$props.nextwo);
		if ('numberofWO' in $$props) numberofWO = $$props.numberofWO;
		if ('currentWO' in $$props) $$invalidate(25, currentWO = $$props.currentWO);
		if ('woInterval' in $$props) woInterval = $$props.woInterval;
		if ('minutes' in $$props) $$invalidate(8, minutes = $$props.minutes);
		if ('seconds' in $$props) $$invalidate(19, seconds = $$props.seconds);
	};

	if ($$props && "$$inject" in $$props) {
		$$self.$inject_state($$props.$$inject);
	}

	$$self.$$.update = () => {
		if ($$self.$$.dirty[0] & /*$timer*/ 134217728) {
			$$invalidate(8, minutes = Math.floor($timer / 60));
		}

		if ($$self.$$.dirty[0] & /*$timer, minutes*/ 134217984) {
			$$invalidate(19, seconds = Math.floor($timer - minutes * 60));
		}

		if ($$self.$$.dirty[0] & /*$wotimer*/ 67108864) {
			$$invalidate(7, wominutes = Math.floor($wotimer / 60));
		}

		if ($$self.$$.dirty[0] & /*$wotimer, wominutes*/ 67108992) {
			$$invalidate(13, woseconds = Math.floor($wotimer - wominutes * 60));
		}

		if ($$self.$$.dirty[0] & /*$wotimer*/ 67108864) {
			$$invalidate(12, wotime = Math.floor($wotimer));
		}

		if ($$self.$$.dirty[0] & /*$wotimer, currentWO, program, $timer*/ 243269632) {
			if ($wotimer <= 0) {
				$$invalidate(25, currentWO = currentWO + 1);

				if (currentWO < program.routine.length && $timer > 0) {
					nextWO();
				} else {
					programFinished();
				}
			}
		}
	};

	return [
		target,
		flesh,
		hair,
		pants,
		shirt,
		pluginname,
		pluginemoji,
		wominutes,
		minutes,
		isPaused,
		totalwotime,
		wotimer,
		wotime,
		woseconds,
		woname,
		wodisplayname,
		wodirection,
		activeIndexrefreshed,
		nextwo,
		seconds,
		timer,
		endProgram,
		duration,
		program,
		workouts,
		currentWO,
		$wotimer,
		$timer,
		controller_minutes_binding,
		controller_seconds_binding,
		controller_target_binding,
		controller_isPaused_binding,
		workoutanimation_flesh_binding,
		workoutanimation_hair_binding,
		workoutanimation_pants_binding,
		workoutanimation_shirt_binding,
		workoutanimation_wo_animation_binding,
		workoutanimation_isPaused_binding,
		workoutprogress_nextwo_binding,
		workoutprogress_minutes_binding,
		workoutprogress_seconds_binding,
		workoutprogress_wotime_binding,
		workoutprogress_totalwotime_binding,
		workoutprogress_wodisplayname_binding
	];
}

class Workout extends SvelteComponentDev {
	constructor(options) {
		super(options);

		init(
			this,
			options,
			instance$F,
			create_fragment$F,
			safe_not_equal,
			{
				pluginname: 5,
				pluginemoji: 6,
				duration: 22,
				target: 0,
				program: 23,
				workouts: 24,
				flesh: 1,
				hair: 2,
				pants: 3,
				shirt: 4
			},
			null,
			[-1, -1]
		);

		dispatch_dev("SvelteRegisterComponent", {
			component: this,
			tagName: "Workout",
			options,
			id: create_fragment$F.name
		});

		const { ctx } = this.$$;
		const props = options.props || {};

		if (/*pluginname*/ ctx[5] === undefined && !('pluginname' in props)) {
			console.warn("<Workout> was created without expected prop 'pluginname'");
		}

		if (/*pluginemoji*/ ctx[6] === undefined && !('pluginemoji' in props)) {
			console.warn("<Workout> was created without expected prop 'pluginemoji'");
		}

		if (/*program*/ ctx[23] === undefined && !('program' in props)) {
			console.warn("<Workout> was created without expected prop 'program'");
		}

		if (/*workouts*/ ctx[24] === undefined && !('workouts' in props)) {
			console.warn("<Workout> was created without expected prop 'workouts'");
		}

		if (/*flesh*/ ctx[1] === undefined && !('flesh' in props)) {
			console.warn("<Workout> was created without expected prop 'flesh'");
		}

		if (/*hair*/ ctx[2] === undefined && !('hair' in props)) {
			console.warn("<Workout> was created without expected prop 'hair'");
		}

		if (/*pants*/ ctx[3] === undefined && !('pants' in props)) {
			console.warn("<Workout> was created without expected prop 'pants'");
		}

		if (/*shirt*/ ctx[4] === undefined && !('shirt' in props)) {
			console.warn("<Workout> was created without expected prop 'shirt'");
		}
	}

	get pluginname() {
		throw new Error("<Workout>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
	}

	set pluginname(value) {
		throw new Error("<Workout>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
	}

	get pluginemoji() {
		throw new Error("<Workout>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
	}

	set pluginemoji(value) {
		throw new Error("<Workout>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
	}

	get duration() {
		throw new Error("<Workout>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
	}

	set duration(value) {
		throw new Error("<Workout>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
	}

	get target() {
		throw new Error("<Workout>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
	}

	set target(value) {
		throw new Error("<Workout>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
	}

	get program() {
		throw new Error("<Workout>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
	}

	set program(value) {
		throw new Error("<Workout>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
	}

	get workouts() {
		throw new Error("<Workout>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
	}

	set workouts(value) {
		throw new Error("<Workout>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
	}

	get flesh() {
		throw new Error("<Workout>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
	}

	set flesh(value) {
		throw new Error("<Workout>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
	}

	get hair() {
		throw new Error("<Workout>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
	}

	set hair(value) {
		throw new Error("<Workout>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
	}

	get pants() {
		throw new Error("<Workout>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
	}

	set pants(value) {
		throw new Error("<Workout>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
	}

	get shirt() {
		throw new Error("<Workout>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
	}

	set shirt(value) {
		throw new Error("<Workout>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
	}
}

/* node_modules/carbon-icons-svelte/lib/SettingsAdjust.svelte generated by Svelte v3.49.0 */

const file$E = "node_modules/carbon-icons-svelte/lib/SettingsAdjust.svelte";

// (23:2) {#if title}
function create_if_block$E(ctx) {
	let title_1;
	let t;

	const block = {
		c: function create() {
			title_1 = svg_element("title");
			t = text(/*title*/ ctx[1]);
			add_location(title_1, file$E, 22, 13, 543);
		},
		m: function mount(target, anchor) {
			insert_dev(target, title_1, anchor);
			append_dev(title_1, t);
		},
		p: function update(ctx, dirty) {
			if (dirty & /*title*/ 2) set_data_dev(t, /*title*/ ctx[1]);
		},
		d: function destroy(detaching) {
			if (detaching) detach_dev(title_1);
		}
	};

	dispatch_dev("SvelteRegisterBlock", {
		block,
		id: create_if_block$E.name,
		type: "if",
		source: "(23:2) {#if title}",
		ctx
	});

	return block;
}

function create_fragment$E(ctx) {
	let svg;
	let path;
	let if_block = /*title*/ ctx[1] && create_if_block$E(ctx);

	let svg_levels = [
		{ xmlns: "http://www.w3.org/2000/svg" },
		{ viewBox: "0 0 32 32" },
		{ fill: "currentColor" },
		{ preserveAspectRatio: "xMidYMid meet" },
		{ width: /*size*/ ctx[0] },
		{ height: /*size*/ ctx[0] },
		/*attributes*/ ctx[2],
		/*$$restProps*/ ctx[3]
	];

	let svg_data = {};

	for (let i = 0; i < svg_levels.length; i += 1) {
		svg_data = assign(svg_data, svg_levels[i]);
	}

	const block = {
		c: function create() {
			svg = svg_element("svg");
			if (if_block) if_block.c();
			path = svg_element("path");
			attr_dev(path, "d", "M30 8h-4.1c-.5-2.3-2.5-4-4.9-4s-4.4 1.7-4.9 4H2v2h14.1c.5 2.3 2.5 4 4.9 4s4.4-1.7 4.9-4H30V8zM21 12c-1.7 0-3-1.3-3-3s1.3-3 3-3 3 1.3 3 3S22.7 12 21 12zM2 24h4.1c.5 2.3 2.5 4 4.9 4s4.4-1.7 4.9-4H30v-2H15.9c-.5-2.3-2.5-4-4.9-4s-4.4 1.7-4.9 4H2V24zM11 20c1.7 0 3 1.3 3 3s-1.3 3-3 3-3-1.3-3-3S9.3 20 11 20z");
			add_location(path, file$E, 23, 2, 573);
			set_svg_attributes(svg, svg_data);
			add_location(svg, file$E, 13, 0, 337);
		},
		l: function claim(nodes) {
			throw new Error("options.hydrate only works if the component was compiled with the `hydratable: true` option");
		},
		m: function mount(target, anchor) {
			insert_dev(target, svg, anchor);
			if (if_block) if_block.m(svg, null);
			append_dev(svg, path);
		},
		p: function update(ctx, [dirty]) {
			if (/*title*/ ctx[1]) {
				if (if_block) {
					if_block.p(ctx, dirty);
				} else {
					if_block = create_if_block$E(ctx);
					if_block.c();
					if_block.m(svg, path);
				}
			} else if (if_block) {
				if_block.d(1);
				if_block = null;
			}

			set_svg_attributes(svg, svg_data = get_spread_update(svg_levels, [
				{ xmlns: "http://www.w3.org/2000/svg" },
				{ viewBox: "0 0 32 32" },
				{ fill: "currentColor" },
				{ preserveAspectRatio: "xMidYMid meet" },
				dirty & /*size*/ 1 && { width: /*size*/ ctx[0] },
				dirty & /*size*/ 1 && { height: /*size*/ ctx[0] },
				dirty & /*attributes*/ 4 && /*attributes*/ ctx[2],
				dirty & /*$$restProps*/ 8 && /*$$restProps*/ ctx[3]
			]));
		},
		i: noop,
		o: noop,
		d: function destroy(detaching) {
			if (detaching) detach_dev(svg);
			if (if_block) if_block.d();
		}
	};

	dispatch_dev("SvelteRegisterBlock", {
		block,
		id: create_fragment$E.name,
		type: "component",
		source: "",
		ctx
	});

	return block;
}

function instance$E($$self, $$props, $$invalidate) {
	let labelled;
	let attributes;
	const omit_props_names = ["size","title"];
	let $$restProps = compute_rest_props($$props, omit_props_names);
	let { $$slots: slots = {}, $$scope } = $$props;
	validate_slots('SettingsAdjust', slots, []);
	let { size = 16 } = $$props;
	let { title = undefined } = $$props;

	$$self.$$set = $$new_props => {
		$$invalidate(5, $$props = assign(assign({}, $$props), exclude_internal_props($$new_props)));
		$$invalidate(3, $$restProps = compute_rest_props($$props, omit_props_names));
		if ('size' in $$new_props) $$invalidate(0, size = $$new_props.size);
		if ('title' in $$new_props) $$invalidate(1, title = $$new_props.title);
	};

	$$self.$capture_state = () => ({ size, title, labelled, attributes });

	$$self.$inject_state = $$new_props => {
		$$invalidate(5, $$props = assign(assign({}, $$props), $$new_props));
		if ('size' in $$props) $$invalidate(0, size = $$new_props.size);
		if ('title' in $$props) $$invalidate(1, title = $$new_props.title);
		if ('labelled' in $$props) $$invalidate(4, labelled = $$new_props.labelled);
		if ('attributes' in $$props) $$invalidate(2, attributes = $$new_props.attributes);
	};

	if ($$props && "$$inject" in $$props) {
		$$self.$inject_state($$props.$$inject);
	}

	$$self.$$.update = () => {
		$$invalidate(4, labelled = $$props["aria-label"] || $$props["aria-labelledby"] || title);

		$$invalidate(2, attributes = {
			"aria-hidden": labelled ? undefined : true,
			role: labelled ? "img" : undefined,
			focusable: Number($$props["tabindex"]) === 0 ? true : undefined
		});
	};

	$$props = exclude_internal_props($$props);
	return [size, title, attributes, $$restProps, labelled];
}

class SettingsAdjust extends SvelteComponentDev {
	constructor(options) {
		super(options);
		init(this, options, instance$E, create_fragment$E, safe_not_equal, { size: 0, title: 1 });

		dispatch_dev("SvelteRegisterComponent", {
			component: this,
			tagName: "SettingsAdjust",
			options,
			id: create_fragment$E.name
		});
	}

	get size() {
		throw new Error("<SettingsAdjust>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
	}

	set size(value) {
		throw new Error("<SettingsAdjust>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
	}

	get title() {
		throw new Error("<SettingsAdjust>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
	}

	set title(value) {
		throw new Error("<SettingsAdjust>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
	}
}

/* node_modules/carbon-icons-svelte/lib/Sun.svelte generated by Svelte v3.49.0 */

const file$D = "node_modules/carbon-icons-svelte/lib/Sun.svelte";

// (23:2) {#if title}
function create_if_block$D(ctx) {
	let title_1;
	let t;

	const block = {
		c: function create() {
			title_1 = svg_element("title");
			t = text(/*title*/ ctx[1]);
			add_location(title_1, file$D, 22, 13, 543);
		},
		m: function mount(target, anchor) {
			insert_dev(target, title_1, anchor);
			append_dev(title_1, t);
		},
		p: function update(ctx, dirty) {
			if (dirty & /*title*/ 2) set_data_dev(t, /*title*/ ctx[1]);
		},
		d: function destroy(detaching) {
			if (detaching) detach_dev(title_1);
		}
	};

	dispatch_dev("SvelteRegisterBlock", {
		block,
		id: create_if_block$D.name,
		type: "if",
		source: "(23:2) {#if title}",
		ctx
	});

	return block;
}

function create_fragment$D(ctx) {
	let svg;
	let path0;
	let path1;
	let path2;
	let path3;
	let path4;
	let path5;
	let path6;
	let path7;
	let path8;
	let if_block = /*title*/ ctx[1] && create_if_block$D(ctx);

	let svg_levels = [
		{ xmlns: "http://www.w3.org/2000/svg" },
		{ viewBox: "0 0 32 32" },
		{ fill: "currentColor" },
		{ preserveAspectRatio: "xMidYMid meet" },
		{ width: /*size*/ ctx[0] },
		{ height: /*size*/ ctx[0] },
		/*attributes*/ ctx[2],
		/*$$restProps*/ ctx[3]
	];

	let svg_data = {};

	for (let i = 0; i < svg_levels.length; i += 1) {
		svg_data = assign(svg_data, svg_levels[i]);
	}

	const block = {
		c: function create() {
			svg = svg_element("svg");
			if (if_block) if_block.c();
			path0 = svg_element("path");
			path1 = svg_element("path");
			path2 = svg_element("path");
			path3 = svg_element("path");
			path4 = svg_element("path");
			path5 = svg_element("path");
			path6 = svg_element("path");
			path7 = svg_element("path");
			path8 = svg_element("path");
			attr_dev(path0, "d", "M16,12a4,4,0,1,1-4,4,4.0045,4.0045,0,0,1,4-4m0-2a6,6,0,1,0,6,6,6,6,0,0,0-6-6Z");
			attr_dev(path0, "transform", "translate(0 .005)");
			add_location(path0, file$D, 23, 2, 573);
			attr_dev(path1, "d", "M6.854 5.375H8.854V10.333H6.854z");
			attr_dev(path1, "transform", "rotate(-45 7.86 7.856)");
			add_location(path1, file$D, 23, 127, 698);
			attr_dev(path2, "d", "M2 15.005H7V17.005000000000003H2z");
			add_location(path2, file$D, 23, 212, 783);
			attr_dev(path3, "d", "M5.375 23.147H10.333V25.147H5.375z");
			attr_dev(path3, "transform", "rotate(-45 7.86 24.149)");
			add_location(path3, file$D, 23, 263, 834);
			attr_dev(path4, "d", "M15 25.005H17V30.005H15z");
			add_location(path4, file$D, 23, 351, 922);
			attr_dev(path5, "d", "M23.147 21.668H25.147V26.625999999999998H23.147z");
			attr_dev(path5, "transform", "rotate(-45 24.152 24.149)");
			add_location(path5, file$D, 23, 393, 964);
			attr_dev(path6, "d", "M25 15.005H30V17.005000000000003H25z");
			add_location(path6, file$D, 23, 497, 1068);
			attr_dev(path7, "d", "M21.668 6.854H26.625999999999998V8.854H21.668z");
			attr_dev(path7, "transform", "rotate(-45 24.152 7.856)");
			add_location(path7, file$D, 23, 551, 1122);
			attr_dev(path8, "d", "M15 2.005H17V7.005H15z");
			add_location(path8, file$D, 23, 652, 1223);
			set_svg_attributes(svg, svg_data);
			add_location(svg, file$D, 13, 0, 337);
		},
		l: function claim(nodes) {
			throw new Error("options.hydrate only works if the component was compiled with the `hydratable: true` option");
		},
		m: function mount(target, anchor) {
			insert_dev(target, svg, anchor);
			if (if_block) if_block.m(svg, null);
			append_dev(svg, path0);
			append_dev(svg, path1);
			append_dev(svg, path2);
			append_dev(svg, path3);
			append_dev(svg, path4);
			append_dev(svg, path5);
			append_dev(svg, path6);
			append_dev(svg, path7);
			append_dev(svg, path8);
		},
		p: function update(ctx, [dirty]) {
			if (/*title*/ ctx[1]) {
				if (if_block) {
					if_block.p(ctx, dirty);
				} else {
					if_block = create_if_block$D(ctx);
					if_block.c();
					if_block.m(svg, path0);
				}
			} else if (if_block) {
				if_block.d(1);
				if_block = null;
			}

			set_svg_attributes(svg, svg_data = get_spread_update(svg_levels, [
				{ xmlns: "http://www.w3.org/2000/svg" },
				{ viewBox: "0 0 32 32" },
				{ fill: "currentColor" },
				{ preserveAspectRatio: "xMidYMid meet" },
				dirty & /*size*/ 1 && { width: /*size*/ ctx[0] },
				dirty & /*size*/ 1 && { height: /*size*/ ctx[0] },
				dirty & /*attributes*/ 4 && /*attributes*/ ctx[2],
				dirty & /*$$restProps*/ 8 && /*$$restProps*/ ctx[3]
			]));
		},
		i: noop,
		o: noop,
		d: function destroy(detaching) {
			if (detaching) detach_dev(svg);
			if (if_block) if_block.d();
		}
	};

	dispatch_dev("SvelteRegisterBlock", {
		block,
		id: create_fragment$D.name,
		type: "component",
		source: "",
		ctx
	});

	return block;
}

function instance$D($$self, $$props, $$invalidate) {
	let labelled;
	let attributes;
	const omit_props_names = ["size","title"];
	let $$restProps = compute_rest_props($$props, omit_props_names);
	let { $$slots: slots = {}, $$scope } = $$props;
	validate_slots('Sun', slots, []);
	let { size = 16 } = $$props;
	let { title = undefined } = $$props;

	$$self.$$set = $$new_props => {
		$$invalidate(5, $$props = assign(assign({}, $$props), exclude_internal_props($$new_props)));
		$$invalidate(3, $$restProps = compute_rest_props($$props, omit_props_names));
		if ('size' in $$new_props) $$invalidate(0, size = $$new_props.size);
		if ('title' in $$new_props) $$invalidate(1, title = $$new_props.title);
	};

	$$self.$capture_state = () => ({ size, title, labelled, attributes });

	$$self.$inject_state = $$new_props => {
		$$invalidate(5, $$props = assign(assign({}, $$props), $$new_props));
		if ('size' in $$props) $$invalidate(0, size = $$new_props.size);
		if ('title' in $$props) $$invalidate(1, title = $$new_props.title);
		if ('labelled' in $$props) $$invalidate(4, labelled = $$new_props.labelled);
		if ('attributes' in $$props) $$invalidate(2, attributes = $$new_props.attributes);
	};

	if ($$props && "$$inject" in $$props) {
		$$self.$inject_state($$props.$$inject);
	}

	$$self.$$.update = () => {
		$$invalidate(4, labelled = $$props["aria-label"] || $$props["aria-labelledby"] || title);

		$$invalidate(2, attributes = {
			"aria-hidden": labelled ? undefined : true,
			role: labelled ? "img" : undefined,
			focusable: Number($$props["tabindex"]) === 0 ? true : undefined
		});
	};

	$$props = exclude_internal_props($$props);
	return [size, title, attributes, $$restProps, labelled];
}

class Sun extends SvelteComponentDev {
	constructor(options) {
		super(options);
		init(this, options, instance$D, create_fragment$D, safe_not_equal, { size: 0, title: 1 });

		dispatch_dev("SvelteRegisterComponent", {
			component: this,
			tagName: "Sun",
			options,
			id: create_fragment$D.name
		});
	}

	get size() {
		throw new Error("<Sun>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
	}

	set size(value) {
		throw new Error("<Sun>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
	}

	get title() {
		throw new Error("<Sun>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
	}

	set title(value) {
		throw new Error("<Sun>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
	}
}

/* node_modules/carbon-icons-svelte/lib/Information.svelte generated by Svelte v3.49.0 */

const file$C = "node_modules/carbon-icons-svelte/lib/Information.svelte";

// (23:2) {#if title}
function create_if_block$C(ctx) {
	let title_1;
	let t;

	const block = {
		c: function create() {
			title_1 = svg_element("title");
			t = text(/*title*/ ctx[1]);
			add_location(title_1, file$C, 22, 13, 543);
		},
		m: function mount(target, anchor) {
			insert_dev(target, title_1, anchor);
			append_dev(title_1, t);
		},
		p: function update(ctx, dirty) {
			if (dirty & /*title*/ 2) set_data_dev(t, /*title*/ ctx[1]);
		},
		d: function destroy(detaching) {
			if (detaching) detach_dev(title_1);
		}
	};

	dispatch_dev("SvelteRegisterBlock", {
		block,
		id: create_if_block$C.name,
		type: "if",
		source: "(23:2) {#if title}",
		ctx
	});

	return block;
}

function create_fragment$C(ctx) {
	let svg;
	let path0;
	let path1;
	let if_block = /*title*/ ctx[1] && create_if_block$C(ctx);

	let svg_levels = [
		{ xmlns: "http://www.w3.org/2000/svg" },
		{ viewBox: "0 0 32 32" },
		{ fill: "currentColor" },
		{ preserveAspectRatio: "xMidYMid meet" },
		{ width: /*size*/ ctx[0] },
		{ height: /*size*/ ctx[0] },
		/*attributes*/ ctx[2],
		/*$$restProps*/ ctx[3]
	];

	let svg_data = {};

	for (let i = 0; i < svg_levels.length; i += 1) {
		svg_data = assign(svg_data, svg_levels[i]);
	}

	const block = {
		c: function create() {
			svg = svg_element("svg");
			if (if_block) if_block.c();
			path0 = svg_element("path");
			path1 = svg_element("path");
			attr_dev(path0, "d", "M17 22L17 14 13 14 13 16 15 16 15 22 12 22 12 24 20 24 20 22 17 22zM16 8a1.5 1.5 0 101.5 1.5A1.5 1.5 0 0016 8z");
			add_location(path0, file$C, 23, 2, 573);
			attr_dev(path1, "d", "M16,30A14,14,0,1,1,30,16,14,14,0,0,1,16,30ZM16,4A12,12,0,1,0,28,16,12,12,0,0,0,16,4Z");
			add_location(path1, file$C, 23, 130, 701);
			set_svg_attributes(svg, svg_data);
			add_location(svg, file$C, 13, 0, 337);
		},
		l: function claim(nodes) {
			throw new Error("options.hydrate only works if the component was compiled with the `hydratable: true` option");
		},
		m: function mount(target, anchor) {
			insert_dev(target, svg, anchor);
			if (if_block) if_block.m(svg, null);
			append_dev(svg, path0);
			append_dev(svg, path1);
		},
		p: function update(ctx, [dirty]) {
			if (/*title*/ ctx[1]) {
				if (if_block) {
					if_block.p(ctx, dirty);
				} else {
					if_block = create_if_block$C(ctx);
					if_block.c();
					if_block.m(svg, path0);
				}
			} else if (if_block) {
				if_block.d(1);
				if_block = null;
			}

			set_svg_attributes(svg, svg_data = get_spread_update(svg_levels, [
				{ xmlns: "http://www.w3.org/2000/svg" },
				{ viewBox: "0 0 32 32" },
				{ fill: "currentColor" },
				{ preserveAspectRatio: "xMidYMid meet" },
				dirty & /*size*/ 1 && { width: /*size*/ ctx[0] },
				dirty & /*size*/ 1 && { height: /*size*/ ctx[0] },
				dirty & /*attributes*/ 4 && /*attributes*/ ctx[2],
				dirty & /*$$restProps*/ 8 && /*$$restProps*/ ctx[3]
			]));
		},
		i: noop,
		o: noop,
		d: function destroy(detaching) {
			if (detaching) detach_dev(svg);
			if (if_block) if_block.d();
		}
	};

	dispatch_dev("SvelteRegisterBlock", {
		block,
		id: create_fragment$C.name,
		type: "component",
		source: "",
		ctx
	});

	return block;
}

function instance$C($$self, $$props, $$invalidate) {
	let labelled;
	let attributes;
	const omit_props_names = ["size","title"];
	let $$restProps = compute_rest_props($$props, omit_props_names);
	let { $$slots: slots = {}, $$scope } = $$props;
	validate_slots('Information', slots, []);
	let { size = 16 } = $$props;
	let { title = undefined } = $$props;

	$$self.$$set = $$new_props => {
		$$invalidate(5, $$props = assign(assign({}, $$props), exclude_internal_props($$new_props)));
		$$invalidate(3, $$restProps = compute_rest_props($$props, omit_props_names));
		if ('size' in $$new_props) $$invalidate(0, size = $$new_props.size);
		if ('title' in $$new_props) $$invalidate(1, title = $$new_props.title);
	};

	$$self.$capture_state = () => ({ size, title, labelled, attributes });

	$$self.$inject_state = $$new_props => {
		$$invalidate(5, $$props = assign(assign({}, $$props), $$new_props));
		if ('size' in $$props) $$invalidate(0, size = $$new_props.size);
		if ('title' in $$props) $$invalidate(1, title = $$new_props.title);
		if ('labelled' in $$props) $$invalidate(4, labelled = $$new_props.labelled);
		if ('attributes' in $$props) $$invalidate(2, attributes = $$new_props.attributes);
	};

	if ($$props && "$$inject" in $$props) {
		$$self.$inject_state($$props.$$inject);
	}

	$$self.$$.update = () => {
		$$invalidate(4, labelled = $$props["aria-label"] || $$props["aria-labelledby"] || title);

		$$invalidate(2, attributes = {
			"aria-hidden": labelled ? undefined : true,
			role: labelled ? "img" : undefined,
			focusable: Number($$props["tabindex"]) === 0 ? true : undefined
		});
	};

	$$props = exclude_internal_props($$props);
	return [size, title, attributes, $$restProps, labelled];
}

class Information extends SvelteComponentDev {
	constructor(options) {
		super(options);
		init(this, options, instance$C, create_fragment$C, safe_not_equal, { size: 0, title: 1 });

		dispatch_dev("SvelteRegisterComponent", {
			component: this,
			tagName: "Information",
			options,
			id: create_fragment$C.name
		});
	}

	get size() {
		throw new Error("<Information>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
	}

	set size(value) {
		throw new Error("<Information>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
	}

	get title() {
		throw new Error("<Information>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
	}

	set title(value) {
		throw new Error("<Information>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
	}
}

/* src/App.svelte generated by Svelte v3.49.0 */

const { console: console_1 } = globals;
const file$B = "src/App.svelte";

// (304:19) 
function create_if_block_9(ctx) {
	let h1;
	let t1;
	let h2;
	let t3;
	let h5;
	let t5;
	let hr;

	const block = {
		c: function create() {
			h1 = element("h1");
			h1.textContent = `${pluginemoji}`;
			t1 = space();
			h2 = element("h2");
			h2.textContent = `${pluginname}`;
			t3 = space();
			h5 = element("h5");
			h5.textContent = "This is a plugin for Nomie";
			t5 = space();
			hr = element("hr");
			set_style(h1, "text-align", "center");
			add_location(h1, file$B, 304, 8, 8338);
			set_style(h2, "text-align", "center");
			add_location(h2, file$B, 305, 8, 8395);
			set_style(h5, "text-align", "center");
			add_location(h5, file$B, 306, 8, 8451);
			add_location(hr, file$B, 307, 8, 8521);
		},
		m: function mount(target, anchor) {
			insert_dev(target, h1, anchor);
			insert_dev(target, t1, anchor);
			insert_dev(target, h2, anchor);
			insert_dev(target, t3, anchor);
			insert_dev(target, h5, anchor);
			insert_dev(target, t5, anchor);
			insert_dev(target, hr, anchor);
		},
		p: noop,
		i: noop,
		o: noop,
		d: function destroy(detaching) {
			if (detaching) detach_dev(h1);
			if (detaching) detach_dev(t1);
			if (detaching) detach_dev(h2);
			if (detaching) detach_dev(t3);
			if (detaching) detach_dev(h5);
			if (detaching) detach_dev(t5);
			if (detaching) detach_dev(hr);
		}
	};

	dispatch_dev("SvelteRegisterBlock", {
		block,
		id: create_if_block_9.name,
		type: "if",
		source: "(304:19) ",
		ctx
	});

	return block;
}

// (275:0) {#if mode == "modal"  || mode =="widget"}
function create_if_block_1(ctx) {
	let theme_1;
	let updating_theme;
	let t;
	let if_block_anchor;
	let current;

	function theme_1_theme_binding(value) {
		/*theme_1_theme_binding*/ ctx[19](value);
	}

	let theme_1_props = {};

	if (/*theme*/ ctx[2] !== void 0) {
		theme_1_props.theme = /*theme*/ ctx[2];
	}

	theme_1 = new Theme({ props: theme_1_props, $$inline: true });
	binding_callbacks.push(() => bind(theme_1, 'theme', theme_1_theme_binding));
	let if_block = /*inNomie*/ ctx[1] && create_if_block_2(ctx);

	const block = {
		c: function create() {
			create_component(theme_1.$$.fragment);
			t = space();
			if (if_block) if_block.c();
			if_block_anchor = empty();
		},
		m: function mount(target, anchor) {
			mount_component(theme_1, target, anchor);
			insert_dev(target, t, anchor);
			if (if_block) if_block.m(target, anchor);
			insert_dev(target, if_block_anchor, anchor);
			current = true;
		},
		p: function update(ctx, dirty) {
			const theme_1_changes = {};

			if (!updating_theme && dirty[0] & /*theme*/ 4) {
				updating_theme = true;
				theme_1_changes.theme = /*theme*/ ctx[2];
				add_flush_callback(() => updating_theme = false);
			}

			theme_1.$set(theme_1_changes);

			if (/*inNomie*/ ctx[1]) {
				if (if_block) {
					if_block.p(ctx, dirty);

					if (dirty[0] & /*inNomie*/ 2) {
						transition_in(if_block, 1);
					}
				} else {
					if_block = create_if_block_2(ctx);
					if_block.c();
					transition_in(if_block, 1);
					if_block.m(if_block_anchor.parentNode, if_block_anchor);
				}
			} else if (if_block) {
				group_outros();

				transition_out(if_block, 1, 1, () => {
					if_block = null;
				});

				check_outros();
			}
		},
		i: function intro(local) {
			if (current) return;
			transition_in(theme_1.$$.fragment, local);
			transition_in(if_block);
			current = true;
		},
		o: function outro(local) {
			transition_out(theme_1.$$.fragment, local);
			transition_out(if_block);
			current = false;
		},
		d: function destroy(detaching) {
			destroy_component(theme_1, detaching);
			if (detaching) detach_dev(t);
			if (if_block) if_block.d(detaching);
			if (detaching) detach_dev(if_block_anchor);
		}
	};

	dispatch_dev("SvelteRegisterBlock", {
		block,
		id: create_if_block_1.name,
		type: "if",
		source: "(275:0) {#if mode == \\\"modal\\\"  || mode ==\\\"widget\\\"}",
		ctx
	});

	return block;
}

// (277:0) {#if inNomie}
function create_if_block_2(ctx) {
	let current_block_type_index;
	let if_block;
	let if_block_anchor;
	let current;
	const if_block_creators = [create_if_block_3, create_if_block_8];
	const if_blocks = [];

	function select_block_type_1(ctx, dirty) {
		if (/*mode*/ ctx[3] == "modal") return 0;
		if (/*mode*/ ctx[3] == "widget") return 1;
		return -1;
	}

	if (~(current_block_type_index = select_block_type_1(ctx))) {
		if_block = if_blocks[current_block_type_index] = if_block_creators[current_block_type_index](ctx);
	}

	const block = {
		c: function create() {
			if (if_block) if_block.c();
			if_block_anchor = empty();
		},
		m: function mount(target, anchor) {
			if (~current_block_type_index) {
				if_blocks[current_block_type_index].m(target, anchor);
			}

			insert_dev(target, if_block_anchor, anchor);
			current = true;
		},
		p: function update(ctx, dirty) {
			let previous_block_index = current_block_type_index;
			current_block_type_index = select_block_type_1(ctx);

			if (current_block_type_index === previous_block_index) {
				if (~current_block_type_index) {
					if_blocks[current_block_type_index].p(ctx, dirty);
				}
			} else {
				if (if_block) {
					group_outros();

					transition_out(if_blocks[previous_block_index], 1, 1, () => {
						if_blocks[previous_block_index] = null;
					});

					check_outros();
				}

				if (~current_block_type_index) {
					if_block = if_blocks[current_block_type_index];

					if (!if_block) {
						if_block = if_blocks[current_block_type_index] = if_block_creators[current_block_type_index](ctx);
						if_block.c();
					} else {
						if_block.p(ctx, dirty);
					}

					transition_in(if_block, 1);
					if_block.m(if_block_anchor.parentNode, if_block_anchor);
				} else {
					if_block = null;
				}
			}
		},
		i: function intro(local) {
			if (current) return;
			transition_in(if_block);
			current = true;
		},
		o: function outro(local) {
			transition_out(if_block);
			current = false;
		},
		d: function destroy(detaching) {
			if (~current_block_type_index) {
				if_blocks[current_block_type_index].d(detaching);
			}

			if (detaching) detach_dev(if_block_anchor);
		}
	};

	dispatch_dev("SvelteRegisterBlock", {
		block,
		id: create_if_block_2.name,
		type: "if",
		source: "(277:0) {#if inNomie}",
		ctx
	});

	return block;
}

// (299:27) 
function create_if_block_8(ctx) {
	let p;

	const block = {
		c: function create() {
			p = element("p");
			p.textContent = "Widget Placeholder";
			add_location(p, file$B, 299, 0, 8271);
		},
		m: function mount(target, anchor) {
			insert_dev(target, p, anchor);
		},
		p: noop,
		i: noop,
		o: noop,
		d: function destroy(detaching) {
			if (detaching) detach_dev(p);
		}
	};

	dispatch_dev("SvelteRegisterBlock", {
		block,
		id: create_if_block_8.name,
		type: "if",
		source: "(299:27) ",
		ctx
	});

	return block;
}

// (278:0) {#if mode == "modal"}
function create_if_block_3(ctx) {
	let header;
	let t;
	let current_block_type_index;
	let if_block;
	let if_block_anchor;
	let current;

	header = new Header({
			props: {
				company: /*parent*/ ctx[0],
				platformName: pluginname,
				$$slots: {
					"skip-to-content": [create_skip_to_content_slot],
					default: [create_default_slot]
				},
				$$scope: { ctx }
			},
			$$inline: true
		});

	header.$on("click", /*showMain*/ ctx[13]);
	const if_block_creators = [create_if_block_4, create_if_block_5, create_if_block_6, create_if_block_7];
	const if_blocks = [];

	function select_block_type_2(ctx, dirty) {
		if (/*view*/ ctx[5] == "main") return 0;
		if (/*view*/ ctx[5] == "info") return 1;
		if (/*view*/ ctx[5] == "settings") return 2;
		if (/*view*/ ctx[5] == "workout") return 3;
		return -1;
	}

	if (~(current_block_type_index = select_block_type_2(ctx))) {
		if_block = if_blocks[current_block_type_index] = if_block_creators[current_block_type_index](ctx);
	}

	const block = {
		c: function create() {
			create_component(header.$$.fragment);
			t = space();
			if (if_block) if_block.c();
			if_block_anchor = empty();
		},
		m: function mount(target, anchor) {
			mount_component(header, target, anchor);
			insert_dev(target, t, anchor);

			if (~current_block_type_index) {
				if_blocks[current_block_type_index].m(target, anchor);
			}

			insert_dev(target, if_block_anchor, anchor);
			current = true;
		},
		p: function update(ctx, dirty) {
			const header_changes = {};
			if (dirty[0] & /*parent*/ 1) header_changes.company = /*parent*/ ctx[0];

			if (dirty[1] & /*$$scope*/ 16) {
				header_changes.$$scope = { dirty, ctx };
			}

			header.$set(header_changes);
			let previous_block_index = current_block_type_index;
			current_block_type_index = select_block_type_2(ctx);

			if (current_block_type_index === previous_block_index) {
				if (~current_block_type_index) {
					if_blocks[current_block_type_index].p(ctx, dirty);
				}
			} else {
				if (if_block) {
					group_outros();

					transition_out(if_blocks[previous_block_index], 1, 1, () => {
						if_blocks[previous_block_index] = null;
					});

					check_outros();
				}

				if (~current_block_type_index) {
					if_block = if_blocks[current_block_type_index];

					if (!if_block) {
						if_block = if_blocks[current_block_type_index] = if_block_creators[current_block_type_index](ctx);
						if_block.c();
					} else {
						if_block.p(ctx, dirty);
					}

					transition_in(if_block, 1);
					if_block.m(if_block_anchor.parentNode, if_block_anchor);
				} else {
					if_block = null;
				}
			}
		},
		i: function intro(local) {
			if (current) return;
			transition_in(header.$$.fragment, local);
			transition_in(if_block);
			current = true;
		},
		o: function outro(local) {
			transition_out(header.$$.fragment, local);
			transition_out(if_block);
			current = false;
		},
		d: function destroy(detaching) {
			destroy_component(header, detaching);
			if (detaching) detach_dev(t);

			if (~current_block_type_index) {
				if_blocks[current_block_type_index].d(detaching);
			}

			if (detaching) detach_dev(if_block_anchor);
		}
	};

	dispatch_dev("SvelteRegisterBlock", {
		block,
		id: create_if_block_3.name,
		type: "if",
		source: "(278:0) {#if mode == \\\"modal\\\"}",
		ctx
	});

	return block;
}

// (283:2) <HeaderUtilities>
function create_default_slot_1(ctx) {
	let headerglobalaction0;
	let t0;
	let headerglobalaction1;
	let t1;
	let headerglobalaction2;
	let current;

	headerglobalaction0 = new HeaderGlobalAction({
			props: {
				"aria-label": "Settings",
				icon: SettingsAdjust
			},
			$$inline: true
		});

	headerglobalaction0.$on("click", /*showSettings*/ ctx[15]);

	headerglobalaction1 = new HeaderGlobalAction({
			props: { "aria-label": "Theme", icon: Sun },
			$$inline: true
		});

	headerglobalaction1.$on("click", /*toggleTheme*/ ctx[12]);

	headerglobalaction2 = new HeaderGlobalAction({
			props: { "aria-label": "Theme", icon: Information },
			$$inline: true
		});

	headerglobalaction2.$on("click", /*showInformation*/ ctx[14]);

	const block = {
		c: function create() {
			create_component(headerglobalaction0.$$.fragment);
			t0 = space();
			create_component(headerglobalaction1.$$.fragment);
			t1 = space();
			create_component(headerglobalaction2.$$.fragment);
		},
		m: function mount(target, anchor) {
			mount_component(headerglobalaction0, target, anchor);
			insert_dev(target, t0, anchor);
			mount_component(headerglobalaction1, target, anchor);
			insert_dev(target, t1, anchor);
			mount_component(headerglobalaction2, target, anchor);
			current = true;
		},
		p: noop,
		i: function intro(local) {
			if (current) return;
			transition_in(headerglobalaction0.$$.fragment, local);
			transition_in(headerglobalaction1.$$.fragment, local);
			transition_in(headerglobalaction2.$$.fragment, local);
			current = true;
		},
		o: function outro(local) {
			transition_out(headerglobalaction0.$$.fragment, local);
			transition_out(headerglobalaction1.$$.fragment, local);
			transition_out(headerglobalaction2.$$.fragment, local);
			current = false;
		},
		d: function destroy(detaching) {
			destroy_component(headerglobalaction0, detaching);
			if (detaching) detach_dev(t0);
			destroy_component(headerglobalaction1, detaching);
			if (detaching) detach_dev(t1);
			destroy_component(headerglobalaction2, detaching);
		}
	};

	dispatch_dev("SvelteRegisterBlock", {
		block,
		id: create_default_slot_1.name,
		type: "slot",
		source: "(283:2) <HeaderUtilities>",
		ctx
	});

	return block;
}

// (279:0) <Header company={parent} platformName={pluginname} on:click={showMain}>
function create_default_slot(ctx) {
	let headerutilities;
	let current;

	headerutilities = new HeaderUtilities({
			props: {
				$$slots: { default: [create_default_slot_1] },
				$$scope: { ctx }
			},
			$$inline: true
		});

	const block = {
		c: function create() {
			create_component(headerutilities.$$.fragment);
		},
		m: function mount(target, anchor) {
			mount_component(headerutilities, target, anchor);
			current = true;
		},
		p: function update(ctx, dirty) {
			const headerutilities_changes = {};

			if (dirty[1] & /*$$scope*/ 16) {
				headerutilities_changes.$$scope = { dirty, ctx };
			}

			headerutilities.$set(headerutilities_changes);
		},
		i: function intro(local) {
			if (current) return;
			transition_in(headerutilities.$$.fragment, local);
			current = true;
		},
		o: function outro(local) {
			transition_out(headerutilities.$$.fragment, local);
			current = false;
		},
		d: function destroy(detaching) {
			destroy_component(headerutilities, detaching);
		}
	};

	dispatch_dev("SvelteRegisterBlock", {
		block,
		id: create_default_slot.name,
		type: "slot",
		source: "(279:0) <Header company={parent} platformName={pluginname} on:click={showMain}>",
		ctx
	});

	return block;
}

// (280:2) <svelte:fragment slot="skip-to-content">
function create_skip_to_content_slot(ctx) {
	let skiptocontent;
	let current;
	skiptocontent = new SkipToContent({ $$inline: true });

	const block = {
		c: function create() {
			create_component(skiptocontent.$$.fragment);
		},
		m: function mount(target, anchor) {
			mount_component(skiptocontent, target, anchor);
			current = true;
		},
		i: function intro(local) {
			if (current) return;
			transition_in(skiptocontent.$$.fragment, local);
			current = true;
		},
		o: function outro(local) {
			transition_out(skiptocontent.$$.fragment, local);
			current = false;
		},
		d: function destroy(detaching) {
			destroy_component(skiptocontent, detaching);
		}
	};

	dispatch_dev("SvelteRegisterBlock", {
		block,
		id: create_skip_to_content_slot.name,
		type: "slot",
		source: "(280:2) <svelte:fragment slot=\\\"skip-to-content\\\">",
		ctx
	});

	return block;
}

// (296:28) 
function create_if_block_7(ctx) {
	let workout;
	let updating_flesh;
	let updating_hair;
	let updating_pants;
	let updating_shirt;
	let current;

	function workout_flesh_binding(value) {
		/*workout_flesh_binding*/ ctx[23](value);
	}

	function workout_hair_binding(value) {
		/*workout_hair_binding*/ ctx[24](value);
	}

	function workout_pants_binding(value) {
		/*workout_pants_binding*/ ctx[25](value);
	}

	function workout_shirt_binding(value) {
		/*workout_shirt_binding*/ ctx[26](value);
	}

	let workout_props = {
		pluginname,
		pluginemoji,
		duration: /*woduration*/ ctx[10],
		target: /*wotarget*/ ctx[11],
		workouts: /*workouts*/ ctx[7],
		program: /*woprogram*/ ctx[8],
		equipment: /*woequipment*/ ctx[9]
	};

	if (/*config*/ ctx[6].colors.flesh !== void 0) {
		workout_props.flesh = /*config*/ ctx[6].colors.flesh;
	}

	if (/*config*/ ctx[6].colors.hair !== void 0) {
		workout_props.hair = /*config*/ ctx[6].colors.hair;
	}

	if (/*config*/ ctx[6].colors.pants !== void 0) {
		workout_props.pants = /*config*/ ctx[6].colors.pants;
	}

	if (/*config*/ ctx[6].colors.shirt !== void 0) {
		workout_props.shirt = /*config*/ ctx[6].colors.shirt;
	}

	workout = new Workout({ props: workout_props, $$inline: true });
	binding_callbacks.push(() => bind(workout, 'flesh', workout_flesh_binding));
	binding_callbacks.push(() => bind(workout, 'hair', workout_hair_binding));
	binding_callbacks.push(() => bind(workout, 'pants', workout_pants_binding));
	binding_callbacks.push(() => bind(workout, 'shirt', workout_shirt_binding));

	const block = {
		c: function create() {
			create_component(workout.$$.fragment);
		},
		m: function mount(target, anchor) {
			mount_component(workout, target, anchor);
			current = true;
		},
		p: function update(ctx, dirty) {
			const workout_changes = {};
			if (dirty[0] & /*woduration*/ 1024) workout_changes.duration = /*woduration*/ ctx[10];
			if (dirty[0] & /*wotarget*/ 2048) workout_changes.target = /*wotarget*/ ctx[11];
			if (dirty[0] & /*workouts*/ 128) workout_changes.workouts = /*workouts*/ ctx[7];
			if (dirty[0] & /*woprogram*/ 256) workout_changes.program = /*woprogram*/ ctx[8];
			if (dirty[0] & /*woequipment*/ 512) workout_changes.equipment = /*woequipment*/ ctx[9];

			if (!updating_flesh && dirty[0] & /*config*/ 64) {
				updating_flesh = true;
				workout_changes.flesh = /*config*/ ctx[6].colors.flesh;
				add_flush_callback(() => updating_flesh = false);
			}

			if (!updating_hair && dirty[0] & /*config*/ 64) {
				updating_hair = true;
				workout_changes.hair = /*config*/ ctx[6].colors.hair;
				add_flush_callback(() => updating_hair = false);
			}

			if (!updating_pants && dirty[0] & /*config*/ 64) {
				updating_pants = true;
				workout_changes.pants = /*config*/ ctx[6].colors.pants;
				add_flush_callback(() => updating_pants = false);
			}

			if (!updating_shirt && dirty[0] & /*config*/ 64) {
				updating_shirt = true;
				workout_changes.shirt = /*config*/ ctx[6].colors.shirt;
				add_flush_callback(() => updating_shirt = false);
			}

			workout.$set(workout_changes);
		},
		i: function intro(local) {
			if (current) return;
			transition_in(workout.$$.fragment, local);
			current = true;
		},
		o: function outro(local) {
			transition_out(workout.$$.fragment, local);
			current = false;
		},
		d: function destroy(detaching) {
			destroy_component(workout, detaching);
		}
	};

	dispatch_dev("SvelteRegisterBlock", {
		block,
		id: create_if_block_7.name,
		type: "if",
		source: "(296:28) ",
		ctx
	});

	return block;
}

// (294:29) 
function create_if_block_6(ctx) {
	let settings;
	let current;

	settings = new Settings({
			props: {
				pluginname,
				pluginemoji,
				settingsconfig: /*config*/ ctx[6]
			},
			$$inline: true
		});

	settings.$on("exitsettings", /*exitsettings_handler*/ ctx[21]);
	settings.$on("savesettings", /*savesettings_handler*/ ctx[22]);

	const block = {
		c: function create() {
			create_component(settings.$$.fragment);
		},
		m: function mount(target, anchor) {
			mount_component(settings, target, anchor);
			current = true;
		},
		p: function update(ctx, dirty) {
			const settings_changes = {};
			if (dirty[0] & /*config*/ 64) settings_changes.settingsconfig = /*config*/ ctx[6];
			settings.$set(settings_changes);
		},
		i: function intro(local) {
			if (current) return;
			transition_in(settings.$$.fragment, local);
			current = true;
		},
		o: function outro(local) {
			transition_out(settings.$$.fragment, local);
			current = false;
		},
		d: function destroy(detaching) {
			destroy_component(settings, detaching);
		}
	};

	dispatch_dev("SvelteRegisterBlock", {
		block,
		id: create_if_block_6.name,
		type: "if",
		source: "(294:29) ",
		ctx
	});

	return block;
}

// (292:25) 
function create_if_block_5(ctx) {
	let info;
	let current;

	info = new Info({
			props: {
				parent: /*parent*/ ctx[0],
				pluginname,
				pluginemoji
			},
			$$inline: true
		});

	info.$on("exitinfo", /*showMain*/ ctx[13]);

	const block = {
		c: function create() {
			create_component(info.$$.fragment);
		},
		m: function mount(target, anchor) {
			mount_component(info, target, anchor);
			current = true;
		},
		p: function update(ctx, dirty) {
			const info_changes = {};
			if (dirty[0] & /*parent*/ 1) info_changes.parent = /*parent*/ ctx[0];
			info.$set(info_changes);
		},
		i: function intro(local) {
			if (current) return;
			transition_in(info.$$.fragment, local);
			current = true;
		},
		o: function outro(local) {
			transition_out(info.$$.fragment, local);
			current = false;
		},
		d: function destroy(detaching) {
			destroy_component(info, detaching);
		}
	};

	dispatch_dev("SvelteRegisterBlock", {
		block,
		id: create_if_block_5.name,
		type: "if",
		source: "(292:25) ",
		ctx
	});

	return block;
}

// (290:0) {#if view == "main"}
function create_if_block_4(ctx) {
	let main;
	let current;

	main = new Main({
			props: { pluginname, pluginemoji },
			$$inline: true
		});

	main.$on("startworkout", /*startworkout_handler*/ ctx[20]);

	const block = {
		c: function create() {
			create_component(main.$$.fragment);
		},
		m: function mount(target, anchor) {
			mount_component(main, target, anchor);
			current = true;
		},
		p: noop,
		i: function intro(local) {
			if (current) return;
			transition_in(main.$$.fragment, local);
			current = true;
		},
		o: function outro(local) {
			transition_out(main.$$.fragment, local);
			current = false;
		},
		d: function destroy(detaching) {
			destroy_component(main, detaching);
		}
	};

	dispatch_dev("SvelteRegisterBlock", {
		block,
		id: create_if_block_4.name,
		type: "if",
		source: "(290:0) {#if view == \\\"main\\\"}",
		ctx
	});

	return block;
}

// (310:0) {#if loading}
function create_if_block$B(ctx) {
	let div;
	let p;

	const block = {
		c: function create() {
			div = element("div");
			p = element("p");
			p.textContent = "Loading....";
			add_location(p, file$B, 311, 0, 8568);
			attr_dev(div, "class", "startup");
			add_location(div, file$B, 310, 0, 8546);
		},
		m: function mount(target, anchor) {
			insert_dev(target, div, anchor);
			append_dev(div, p);
		},
		d: function destroy(detaching) {
			if (detaching) detach_dev(div);
		}
	};

	dispatch_dev("SvelteRegisterBlock", {
		block,
		id: create_if_block$B.name,
		type: "if",
		source: "(310:0) {#if loading}",
		ctx
	});

	return block;
}

function create_fragment$B(ctx) {
	let current_block_type_index;
	let if_block0;
	let t;
	let if_block1_anchor;
	let current;
	const if_block_creators = [create_if_block_1, create_if_block_9];
	const if_blocks = [];

	function select_block_type(ctx, dirty) {
		if (/*mode*/ ctx[3] == "modal" || /*mode*/ ctx[3] == "widget") return 0;
		if (!/*inNomie*/ ctx[1]) return 1;
		return -1;
	}

	if (~(current_block_type_index = select_block_type(ctx))) {
		if_block0 = if_blocks[current_block_type_index] = if_block_creators[current_block_type_index](ctx);
	}

	let if_block1 = /*loading*/ ctx[4] && create_if_block$B(ctx);

	const block = {
		c: function create() {
			if (if_block0) if_block0.c();
			t = space();
			if (if_block1) if_block1.c();
			if_block1_anchor = empty();
		},
		l: function claim(nodes) {
			throw new Error("options.hydrate only works if the component was compiled with the `hydratable: true` option");
		},
		m: function mount(target, anchor) {
			if (~current_block_type_index) {
				if_blocks[current_block_type_index].m(target, anchor);
			}

			insert_dev(target, t, anchor);
			if (if_block1) if_block1.m(target, anchor);
			insert_dev(target, if_block1_anchor, anchor);
			current = true;
		},
		p: function update(ctx, dirty) {
			let previous_block_index = current_block_type_index;
			current_block_type_index = select_block_type(ctx);

			if (current_block_type_index === previous_block_index) {
				if (~current_block_type_index) {
					if_blocks[current_block_type_index].p(ctx, dirty);
				}
			} else {
				if (if_block0) {
					group_outros();

					transition_out(if_blocks[previous_block_index], 1, 1, () => {
						if_blocks[previous_block_index] = null;
					});

					check_outros();
				}

				if (~current_block_type_index) {
					if_block0 = if_blocks[current_block_type_index];

					if (!if_block0) {
						if_block0 = if_blocks[current_block_type_index] = if_block_creators[current_block_type_index](ctx);
						if_block0.c();
					} else {
						if_block0.p(ctx, dirty);
					}

					transition_in(if_block0, 1);
					if_block0.m(t.parentNode, t);
				} else {
					if_block0 = null;
				}
			}

			if (/*loading*/ ctx[4]) {
				if (if_block1) ; else {
					if_block1 = create_if_block$B(ctx);
					if_block1.c();
					if_block1.m(if_block1_anchor.parentNode, if_block1_anchor);
				}
			} else if (if_block1) {
				if_block1.d(1);
				if_block1 = null;
			}
		},
		i: function intro(local) {
			if (current) return;
			transition_in(if_block0);
			current = true;
		},
		o: function outro(local) {
			transition_out(if_block0);
			current = false;
		},
		d: function destroy(detaching) {
			if (~current_block_type_index) {
				if_blocks[current_block_type_index].d(detaching);
			}

			if (detaching) detach_dev(t);
			if (if_block1) if_block1.d(detaching);
			if (detaching) detach_dev(if_block1_anchor);
		}
	};

	dispatch_dev("SvelteRegisterBlock", {
		block,
		id: create_fragment$B.name,
		type: "component",
		source: "",
		ctx
	});

	return block;
}

const pluginname = "7 Mins Workout";
const pluginemoji = "💪";

function instance$B($$self, $$props, $$invalidate) {
	let { $$slots: slots = {}, $$scope } = $$props;
	validate_slots('App', slots, []);
	var parent = "";

	const plugin = new NomiePlugin({
			name: pluginname,
			emoji: pluginemoji,
			description: "Starter Template for Nomie6 Plugins",
			uses: ["createNote", "getTrackable", "selectTrackables", "getLocation"],
			version: "1.0",
			addToCaptureMenu: true,
			addToMoreMenu: true,
			addToWidgets: true
		});

	let inNomie = false;
	let isSideNavOpen = false;
	let theme = "g10";
	let mode = "hidden";
	let loading = true;
	let view = "main";

	//plugin params
	let programduration = 0;

	let programtarget = 0;
	var config;
	let workouts;
	let woprogram;
	let woequipment;
	let woduration;
	let wotarget;

	// Load init params
	function loadInitParams() {
		$$invalidate(0, parent = getParentUrl());
		globalplugin.set(plugin);

		plugin.onUIOpened(async () => {
			$$invalidate(3, mode = 'modal');
		});

		plugin.onWidget(() => {
			if (plugin.prefs.theme == "light") {
				$$invalidate(2, theme = "white");
			} else if (plugin.prefs.theme == "dark") {
				$$invalidate(2, theme = "g100");
			} else {
				$$invalidate(2, theme = "g10");
			}

			$$invalidate(3, mode = "widget");
		});

		plugin.onRegistered(async () => {
			$$invalidate(1, inNomie = true);
			$$invalidate(4, loading = false);
			await plugin.storage.init();

			$$invalidate(6, config = await plugin.storage.getItem('configuration') || {
				trackers: ["none"],
				trackeroverrule: true,
				logentry: "Just finished <7minswo> exercise taking <duration> minutes.",
				colors: {
					flesh: "#d5ae83",
					hair: "#412323",
					pants: "#414141",
					shirt: "#42cbef"
				}
			});

			if (plugin.prefs.theme == "light") {
				$$invalidate(2, theme = "g10");
			} else if (plugin.prefs.theme == "dark") {
				$$invalidate(2, theme = "g90");
			} else {
				$$invalidate(2, theme = "g10");
			}
		});

		setTimeout(
			() => {
				if (loading) {
					$$invalidate(1, inNomie = false);
				}
			},
			700
		);
	}

	// change theme
	function toggleTheme() {
		console.log(theme);

		if (theme == "white") {
			$$invalidate(2, theme = "g10");
		} else if (theme == "g10") {
			$$invalidate(2, theme = "g80");
		} else if (theme == "g80") {
			$$invalidate(2, theme = "g90");
		} else if (theme == "g90") {
			$$invalidate(2, theme = "g100");
		} else {
			$$invalidate(2, theme = "white");
		}
	}

	// Get parent
	function getParentUrl() {
		var isInIframe = parent !== window, parentUrl = null;
		var parentfound = null;

		if (isInIframe) {
			parentUrl = document.referrer;
		}

		if (parentUrl.includes("nomie")) {
			parentfound = "Nomie";
		} else {
			parentfound = "Smarter4Ever";
		}

		return parentfound;
	}

	//view main page
	function showMain() {
		$$invalidate(5, view = "main");
		window.scrollTo(0, 0);
	}

	//view info page
	function showInformation() {
		$$invalidate(5, view = "info");
		window.scrollTo(0, 0);
	}

	//view settings page
	function showSettings() {
		$$invalidate(5, view = "settings");
		window.scrollTo(0, 0);
	}

	function saveSettings(payload) {
		$$invalidate(6, config = payload.detail);
		plugin.storage.setItem('configuration', config);
		showMain();
	}

	function exitSettings(payload) {
		console.log(payload.detail);
		$$invalidate(6, config = payload.detail);
		showMain();
	}

	const getRandomInt = (min, max) => {
		const bottom = Math.ceil(min);
		const top = Math.floor(max);
		return Math.floor(Math.random() * (top - bottom) + bottom);
	}; // Maximum is exclusive and minimum is inclusive

	function startWorkout(payload) {
		if (payload.detail[0] == 0) {
			programduration = 6.5;
		}

		if (payload.detail[0] == 1) {
			programduration = 13.16;
		}

		if (payload.detail[0] == 2) {
			programduration = 19.83;
		}

		if (payload.detail[0] == 3) {
			programduration = 26.5;
		}

		if (payload.detail[1] == 0) {
			programtarget = "full";
		}

		if (payload.detail[1] == 1) {
			programtarget = "upper";
		}

		if (payload.detail[1] == 2) {
			programtarget = "lower";
		}

		if (payload.detail[1] == 3) {
			programtarget = "core";
		}

		programtarget = payload.detail[1];
		calculateProgram(programtarget, programduration);
	}

	function calculateProgram(primaryTarget, duration) {
		const matchingPrograms = ProgramArray.filter(item => item.target === primaryTarget);
		const min = 0;
		const max = matchingPrograms.length;
		var program1;
		var program2;
		var program3;
		var program4;
		var merged;
		var FinalProgram;

		if (duration == 6.5) {
			FinalProgram = matchingPrograms[getRandomInt(min, max)];
		} else if (duration == 13.16) {
			program1 = matchingPrograms[getRandomInt(min, max)];
			program2 = matchingPrograms[getRandomInt(min, max)];

			merged = {
				id: 999,
				target: primaryTarget,
				routine: [...program1.routine, 0, ...program2.routine]
			};

			FinalProgram = merged;
		} else if (duration == 19.83) {
			program1 = matchingPrograms[getRandomInt(min, max)];
			program2 = matchingPrograms[getRandomInt(min, max)];
			program3 = matchingPrograms[getRandomInt(min, max)];

			merged = {
				id: 999,
				target: primaryTarget,
				routine: [...program1.routine, 0, ...program2.routine, 0, ...program3.routine]
			};

			FinalProgram = merged;
		} else if (duration == 26.5) {
			program1 = matchingPrograms[getRandomInt(min, max)];
			program2 = matchingPrograms[getRandomInt(min, max)];
			program3 = matchingPrograms[getRandomInt(min, max)];
			program4 = matchingPrograms[getRandomInt(min, max)];

			merged = {
				id: 999,
				target: primaryTarget,
				routine: [
					...program1.routine,
					0,
					...program2.routine,
					0,
					...program3.routine,
					0,
					...program4.routine
				]
			};

			FinalProgram = merged;
		}

		const equipment = FinalProgram.routine.indexOf(49) !== -1 || FinalProgram.routine.indexOf(50) !== -1
		? 'Chair'
		: 'Nothing';

		$$invalidate(10, woduration = duration);
		$$invalidate(11, wotarget = primaryTarget);
		$$invalidate(8, woprogram = FinalProgram);
		$$invalidate(9, woequipment = equipment);
		$$invalidate(7, workouts = WorkoutsArray);
		$$invalidate(5, view = "workout");
	}

	onMount(async () => {
		loadInitParams();
	});

	const writable_props = [];

	Object.keys($$props).forEach(key => {
		if (!~writable_props.indexOf(key) && key.slice(0, 2) !== '$$' && key !== 'slot') console_1.warn(`<App> was created with unknown prop '${key}'`);
	});

	function theme_1_theme_binding(value) {
		theme = value;
		$$invalidate(2, theme);
	}

	const startworkout_handler = e => {
		startWorkout(e);
	};

	const exitsettings_handler = e => {
		exitSettings(e);
	};

	const savesettings_handler = e => {
		saveSettings(e);
	};

	function workout_flesh_binding(value) {
		if ($$self.$$.not_equal(config.colors.flesh, value)) {
			config.colors.flesh = value;
			$$invalidate(6, config);
		}
	}

	function workout_hair_binding(value) {
		if ($$self.$$.not_equal(config.colors.hair, value)) {
			config.colors.hair = value;
			$$invalidate(6, config);
		}
	}

	function workout_pants_binding(value) {
		if ($$self.$$.not_equal(config.colors.pants, value)) {
			config.colors.pants = value;
			$$invalidate(6, config);
		}
	}

	function workout_shirt_binding(value) {
		if ($$self.$$.not_equal(config.colors.shirt, value)) {
			config.colors.shirt = value;
			$$invalidate(6, config);
		}
	}

	$$self.$capture_state = () => ({
		onMount,
		globalplugin,
		WorkoutsArray,
		ProgramArray,
		Header,
		HeaderUtilities,
		HeaderGlobalAction,
		SkipToContent,
		Content,
		Grid,
		Row,
		Column,
		Theme,
		Button,
		Main,
		Info,
		Settings,
		Workout,
		SettingsAdjust,
		Sun,
		Information,
		pluginname,
		pluginemoji,
		parent,
		plugin,
		inNomie,
		isSideNavOpen,
		theme,
		mode,
		loading,
		view,
		programduration,
		programtarget,
		config,
		workouts,
		woprogram,
		woequipment,
		woduration,
		wotarget,
		loadInitParams,
		toggleTheme,
		getParentUrl,
		showMain,
		showInformation,
		showSettings,
		saveSettings,
		exitSettings,
		getRandomInt,
		startWorkout,
		calculateProgram
	});

	$$self.$inject_state = $$props => {
		if ('parent' in $$props) $$invalidate(0, parent = $$props.parent);
		if ('inNomie' in $$props) $$invalidate(1, inNomie = $$props.inNomie);
		if ('isSideNavOpen' in $$props) isSideNavOpen = $$props.isSideNavOpen;
		if ('theme' in $$props) $$invalidate(2, theme = $$props.theme);
		if ('mode' in $$props) $$invalidate(3, mode = $$props.mode);
		if ('loading' in $$props) $$invalidate(4, loading = $$props.loading);
		if ('view' in $$props) $$invalidate(5, view = $$props.view);
		if ('programduration' in $$props) programduration = $$props.programduration;
		if ('programtarget' in $$props) programtarget = $$props.programtarget;
		if ('config' in $$props) $$invalidate(6, config = $$props.config);
		if ('workouts' in $$props) $$invalidate(7, workouts = $$props.workouts);
		if ('woprogram' in $$props) $$invalidate(8, woprogram = $$props.woprogram);
		if ('woequipment' in $$props) $$invalidate(9, woequipment = $$props.woequipment);
		if ('woduration' in $$props) $$invalidate(10, woduration = $$props.woduration);
		if ('wotarget' in $$props) $$invalidate(11, wotarget = $$props.wotarget);
	};

	if ($$props && "$$inject" in $$props) {
		$$self.$inject_state($$props.$$inject);
	}

	return [
		parent,
		inNomie,
		theme,
		mode,
		loading,
		view,
		config,
		workouts,
		woprogram,
		woequipment,
		woduration,
		wotarget,
		toggleTheme,
		showMain,
		showInformation,
		showSettings,
		saveSettings,
		exitSettings,
		startWorkout,
		theme_1_theme_binding,
		startworkout_handler,
		exitsettings_handler,
		savesettings_handler,
		workout_flesh_binding,
		workout_hair_binding,
		workout_pants_binding,
		workout_shirt_binding
	];
}

class App extends SvelteComponentDev {
	constructor(options) {
		super(options);
		init(this, options, instance$B, create_fragment$B, safe_not_equal, {}, null, [-1, -1]);

		dispatch_dev("SvelteRegisterComponent", {
			component: this,
			tagName: "App",
			options,
			id: create_fragment$B.name
		});
	}
}

const app = new App({
    target: document.body
});

/* src/workouts/workout-pushups.svelte generated by Svelte v3.49.0 */

const file$A = "src/workouts/workout-pushups.svelte";

// (107:0) {#if isPaused}
function create_if_block$A(ctx) {
	let svg;
	let path;

	const block = {
		c: function create() {
			svg = svg_element("svg");
			path = svg_element("path");
			attr_dev(path, "d", "M10 24h-6v-24h6v24zm10 0h-6v-24h6v24zm-11-23h-4v22h4v-22zm10 0h-4v22h4v-22z");
			add_location(path, file$A, 107, 129, 6032);
			attr_dev(svg, "viewBox", "-6 -5 36 36");
			attr_dev(svg, "width", "100%");
			attr_dev(svg, "height", "100%");
			attr_dev(svg, "xmlns", "http://www.w3.org/2000/svg");
			attr_dev(svg, "fill-rule", "evenodd");
			attr_dev(svg, "clip-rule", "evenodd");
			add_location(svg, file$A, 107, 0, 5903);
		},
		m: function mount(target, anchor) {
			insert_dev(target, svg, anchor);
			append_dev(svg, path);
		},
		d: function destroy(detaching) {
			if (detaching) detach_dev(svg);
		}
	};

	dispatch_dev("SvelteRegisterBlock", {
		block,
		id: create_if_block$A.name,
		type: "if",
		source: "(107:0) {#if isPaused}",
		ctx
	});

	return block;
}

function create_fragment$A(ctx) {
	let svg;
	let g3;
	let g2;
	let g0;
	let path0;
	let path1;
	let path2;
	let path3;
	let path4;
	let path5;
	let path6;
	let path7;
	let g1;
	let path8;
	let path9;
	let path10;
	let path11;
	let path12;
	let path13;
	let path14;
	let if_block = /*isPaused*/ ctx[1] && create_if_block$A(ctx);

	const block = {
		c: function create() {
			svg = svg_element("svg");
			g3 = svg_element("g");
			g2 = svg_element("g");
			g0 = svg_element("g");
			path0 = svg_element("path");
			path1 = svg_element("path");
			path2 = svg_element("path");
			path3 = svg_element("path");
			path4 = svg_element("path");
			path5 = svg_element("path");
			path6 = svg_element("path");
			path7 = svg_element("path");
			g1 = svg_element("g");
			path8 = svg_element("path");
			path9 = svg_element("path");
			path10 = svg_element("path");
			path11 = svg_element("path");
			path12 = svg_element("path");
			path13 = svg_element("path");
			path14 = svg_element("path");
			if (if_block) if_block.c();
			attr_dev(path0, "fill", "var(--hair)");
			attr_dev(path0, "d", "M735 222c-5 8-4 17-7 26-2 4 1 10-5 12s-10-3-14-6l5-11c1-5 3-10-6-8a4 4 0 0 1-5-2c-2-4-5-4-9-2-4 1-9 1-14-1a6 6 0 0 1-3-6c1-4 4-3 6-3h6c3 0 6-1 8-5 1-3-1-7-3-10-3-3-8-4-12-4-11 0-17-6-21-16 11-9 26-11 40-12 6-1 12-3 18 0 7 3 13 8 16 15ZM62 222c-5 7-7 15-10 23-1 4-1 6 4 8a40 40 0 0 1 8 4c7 4 7 10 0 14-10 6-34 4-42-5-5-6-6-15-6-23 0-14 0-28-5-41-1-2-1-4-3-5v-13c15-3 31-3 47-3a2 2 0 0 1 2 2c-9-2-14 4-17 12l-3 4c-5 7-3 11 5 21 5 6 9 9 16 2h4Z");
			add_location(path0, file$A, 41, 6, 803);
			attr_dev(path1, "fill", "var(--pants)");
			attr_dev(path1, "d", "M438 235c-9 3-15 11-25 12-23 1-45 4-68 2-15-1-29 2-44 4-11 2-13 1-17-10l-2-10c1-18-1-37-3-55 3-5 8-4 13-5 3-1 7-1 8-6 1-3 4-3 6-4l27-5a274 274 0 0 0 64-17 63 63 0 0 1 37-4c6 1 13 3 18 8-5 10-7 21-4 32v15a342 342 0 0 0-10 43Z");
			add_location(path1, file$A, 45, 6, 1305);
			attr_dev(path2, "fill", "var(--flesh)");
			attr_dev(path2, "d", "M279 178c2 18 4 37 3 55-21-4-42 0-63-3a50 50 0 0 1-9-2c-21-8-44-5-65-9-13-3-26-2-38-2-13-2-25 0-37 2-3 1-6 1-8 3h-4c-7 7-11 4-16-2-8-10-10-14-5-21l3-4c3-8 8-14 17-12h11a339 339 0 0 0 47-4c15 0 31-2 47-4 24-3 48-5 72 1 15 4 30 6 45 2Z");
			add_location(path2, file$A, 49, 6, 1591);
			attr_dev(path3, "fill", "var(--shirt)");
			attr_dev(path3, "d", "M438 235a342 342 0 0 1 10-43v-15c-3-11-1-22 4-32 6 3 13 3 18 9h3c11-3 21 5 32 1 10 1 20-6 31-3-1 3-5 1-6 4l-6 19c-2 19 3 36 7 54 2 9 5 17 5 26a273 273 0 0 0-43 3c-15 2-29-5-44-5l-5-1c-6 0-7-3-6-8 0-3 2-6 0-9Z");
			add_location(path3, file$A, 53, 6, 1886);
			attr_dev(path4, "fill", "var(--flesh)");
			attr_dev(path4, "d", "M536 255c0-9-3-17-5-26-4-18-9-35-7-54l6-19c1-3 5-1 6-4-11-3-21 4-31 3l2-8c2-4 4-8 10-8 15 0 31 0 45 8-1 2-4 3 1 4 12 2 25 3 35 12 6 5 9 9 6 18l-5 12c-1 4-1 10-6 11-4 2-5 4-7 7-5 7-11 8-18 4-4-2-6-1-6 3l-3 15c-1 7-3 15 2 22-1 6 2 8 8 8a227 227 0 0 1 55 10c3 1 5 2 5 5l-5 4c-24 5-48 0-72 1-5 0-8-3-9-8a88 88 0 0 0-7-20Z");
			add_location(path4, file$A, 57, 6, 2156);
			attr_dev(path5, "fill", "var(--shirt)");
			attr_dev(path5, "d", "M561 255c-5-7-3-15-2-22l3-15c0-4 2-5 6-3 7 4 13 3 18-4 2-3 3-5 7-7 5-1 5-7 6-11l5-12c3-9 0-13-6-18-10-9-23-10-35-12-5-1-2-2-1-4 14 1 29 2 42 7 17 6 31 16 43 29a148 148 0 0 1-9 44 133 133 0 0 1-26 24c-9 7-20 7-31 6l-20-2Z");
			add_location(path5, file$A, 61, 6, 2535);
			attr_dev(path6, "fill", "var(--flesh)");
			attr_dev(path6, "d", "M638 227a148 148 0 0 0 9-44c4 4 9 3 14 3 4 10 10 16 21 16 4 0 9 1 12 4 2 3 4 7 3 10-2 4-5 5-8 5h-6c-2 0-5-1-6 2a6 6 0 0 0 3 7c5 2 9 2 14 1 4-2 7-3 9 2a4 4 0 0 0 5 2c9-2 7 3 6 8l-5 11c-12 2-26-2-37 7l-4 2c-5-6-13-3-18-8l-2-2c-13-1-9-9-8-17 1-3 2-7-2-9Z");
			add_location(path6, file$A, 65, 6, 2817);
			attr_dev(path7, "fill", "var(--hair)");
			attr_dev(path7, "d", "M115 179a339 339 0 0 1-47 4c-1-8 1-10 10-10 12 0 25 0 37 6ZM70 219c12-2 24-4 37-2l-5 7c-7 11-7 12 4 19 2 2 4 4 4 7-1 3-3 5-5 6-12 4-23 2-34-2-4-2-5-6-5-11l4-24Z");
			add_location(path7, file$A, 69, 6, 3130);
			attr_dev(g0, "id", "pushup-2");
			attr_dev(g0, "class", "svelte-1naktm");
			add_location(g0, file$A, 40, 4, 779);
			attr_dev(path8, "fill", "var(--shirt)");
			attr_dev(path8, "d", "M509 111c-22 6-44 13-65 23-6 3-12-1-18 1l-23 4c-6 0-8-1-8-7l-2-8c-2-16-5-32-4-48a16 16 0 0 0-3-8c-6-11-8-23-7-36a121 121 0 0 0 29-6 9 9 0 0 1 2-1c25-1 46-13 68-20a46 46 0 0 1 13-2c3 0 5 0 6-3h48c3 6 9 3 14 4 14 3 24 13 38 17l3 7-6 26c-2 12-5 25-4 37-5 11-4 22-6 33-1 6 0 13-6 17-3-4-10-5-11-4-10 4-19 0-29 2-2-2-5-3-7 0-4-1-4-5-4-8a177 177 0 0 1 0-17c1-7-3-8-7-6s-8 1-11 3Z");
			add_location(path8, file$A, 75, 6, 3382);
			attr_dev(path9, "fill", "var(--hair)");
			attr_dev(path9, "d", "m600 28-3-7c16-6 32-16 49-20l1-1h12c24 5 26 25 30 44l4 28c2 9-1 13-10 12l-11-4 3-9c2-8-1-11-9-8-4 1-6 0-8-3-3-4-8-6-14-5l-10-1c-4-1-7-4-8-8-1-5 4-5 6-6 6-3 10-7 6-13-3-6-8-4-13-2-8 3-16 9-25 3Z");
			add_location(path9, file$A, 79, 6, 3817);
			attr_dev(path10, "fill", "var(--pants)");
			attr_dev(path10, "d", "M379 32c-1 13 1 25 7 36a16 16 0 0 1 3 8c-1 16 2 32 4 48a9 9 0 0 0-6 4c-6 10-15 15-25 18-14 5-27 11-41 14a274 274 0 0 0-62 23c-4 2-7 1-9-2l-10-14c1-3 8-3 4-9-9-13-16-28-22-43a5 5 0 0 1 3-5c16-8 30-21 46-30a578 578 0 0 0 55-37c16-11 34-17 53-11Z");
			add_location(path10, file$A, 83, 6, 4071);
			attr_dev(path11, "fill", "var(--flesh)");
			attr_dev(path11, "d", "M222 115c6 15 13 30 22 43 4 6-3 6-4 9-9 1-16 6-25 8-14 4-28 4-42 8l-22 11-32 12c-11 3-22 4-31 11-7 5-16 9-20 17-5-1-8 5-12 5-6-2-13-3-19-6-6-5-8-11-3-18 3-3 5-6 4-10 14-2 25-11 36-18l2-3c14-5 27-11 34-25a9 9 0 0 0 7-2c12-8 27-11 38-19 20-16 42-22 67-23ZM538 139c10-2 19 2 29-2 1-1 8 0 11 4-4 38-9 75-16 112l-2 20c-1 7 0 8 7 7 4-1 10-6 8 5 0 2 4 2 5 2 9-1 17 2 25 2 9 0 12 7 18 11 3 2 0 5 0 7 0 3-3 3-5 3-4 0-9-4-11 3h-8c-11-3-22-3-33-3a50 50 0 0 1-14-1c-11-3-14-7-14-18v-50c0-7-1-11-9-11l-8-2c-11-2-17-9-17-20-1-25 2-49 4-73 0-8 2-16 1-24 3-2 7-1 10-3 5-3 9-2 8 6a177 177 0 0 0 0 17c0 3 0 7 4 8l-9 50c-1 5-2 10 0 14 2 6 7 6 12 6s2-5 2-8c0-21 3-42 2-62Z");
			add_location(path11, file$A, 87, 6, 4376);
			attr_dev(path12, "fill", "var(--hair)");
			attr_dev(path12, "d", "M38 205c1 4-1 7-4 10-5 7-3 13 3 18 6 3 13 4 19 6 4 0 7-6 12-5 3 2 1 4 0 5-7 8-2 17 0 25 1 2 3 2 4 2 7 1 14 4 21 7s7 11 1 14c-14 8-30 13-47 9-11-3-19-9-23-21-5-14-13-26-19-39l-5-11c-1-5 1-8 5-12 10-9 22-5 33-8Z");
			add_location(path12, file$A, 91, 6, 5090);
			attr_dev(path13, "fill", "var(--flesh)");
			attr_dev(path13, "d", "M600 28c9 6 17 0 25-3 5-2 10-4 13 2 4 6 0 10-6 13-2 1-7 1-6 6 1 4 4 7 8 8l10 1c6-1 11 1 14 5 2 3 4 4 8 3 8-3 11 0 9 8l-3 9c-9 3-16 9-26 9-4 0-8 5-11 8s-6 5-10 2l-2-2c-8 4-15-1-21 0-6 0-9-2-12-6-1-12 2-25 4-37l6-26Z");
			add_location(path13, file$A, 95, 6, 5360);
			attr_dev(path14, "fill", "var(--hair)");
			attr_dev(path14, "d", "M88 217c9-7 20-8 31-11-3 8 0 12 7 15a25 25 0 0 1 6 3c6 4 5 11-1 13a50 50 0 0 1-28 4 12 12 0 0 1-10-9l-5-15ZM110 159c-7 14-20 20-34 25-5-16-3-18 13-22 6-2 13-2 19-6 2-2 2 1 2 3Z");
			add_location(path14, file$A, 99, 6, 5636);
			attr_dev(g1, "id", "pushup-1");
			attr_dev(g1, "class", "svelte-1naktm");
			add_location(g1, file$A, 74, 4, 3358);
			attr_dev(g2, "class", "shapes svelte-1naktm");
			add_location(g2, file$A, 39, 2, 732);
			attr_dev(g3, "class", "svelte-1naktm");
			toggle_class(g3, "paused", /*isPaused*/ ctx[1]);
			add_location(g3, file$A, 38, 2, 702);
			attr_dev(svg, "xmlns", "http://www.w3.org/2000/svg");
			attr_dev(svg, "viewBox", "0 0 734.9 313.6");
			attr_dev(svg, "height", "100%");
			attr_dev(svg, "width", "100%");
			attr_dev(svg, "class", "svelte-1naktm");
			add_location(svg, file$A, 37, 0, 606);
		},
		l: function claim(nodes) {
			throw new Error("options.hydrate only works if the component was compiled with the `hydratable: true` option");
		},
		m: function mount(target, anchor) {
			insert_dev(target, svg, anchor);
			append_dev(svg, g3);
			append_dev(g3, g2);
			append_dev(g2, g0);
			append_dev(g0, path0);
			append_dev(g0, path1);
			append_dev(g0, path2);
			append_dev(g0, path3);
			append_dev(g0, path4);
			append_dev(g0, path5);
			append_dev(g0, path6);
			append_dev(g0, path7);
			append_dev(g2, g1);
			append_dev(g1, path8);
			append_dev(g1, path9);
			append_dev(g1, path10);
			append_dev(g1, path11);
			append_dev(g1, path12);
			append_dev(g1, path13);
			append_dev(g1, path14);
			/*g2_binding*/ ctx[2](g2);
			if (if_block) if_block.m(svg, null);
		},
		p: function update(ctx, [dirty]) {
			if (dirty & /*isPaused*/ 2) {
				toggle_class(g3, "paused", /*isPaused*/ ctx[1]);
			}

			if (/*isPaused*/ ctx[1]) {
				if (if_block) ; else {
					if_block = create_if_block$A(ctx);
					if_block.c();
					if_block.m(svg, null);
				}
			} else if (if_block) {
				if_block.d(1);
				if_block = null;
			}
		},
		i: noop,
		o: noop,
		d: function destroy(detaching) {
			if (detaching) detach_dev(svg);
			/*g2_binding*/ ctx[2](null);
			if (if_block) if_block.d();
		}
	};

	dispatch_dev("SvelteRegisterBlock", {
		block,
		id: create_fragment$A.name,
		type: "component",
		source: "",
		ctx
	});

	return block;
}

function instance$A($$self, $$props, $$invalidate) {
	let { $$slots: slots = {}, $$scope } = $$props;
	validate_slots('Workout_pushups', slots, []);
	let { isPaused = false } = $$props;
	let { rootElement } = $$props;
	const writable_props = ['isPaused', 'rootElement'];

	Object.keys($$props).forEach(key => {
		if (!~writable_props.indexOf(key) && key.slice(0, 2) !== '$$' && key !== 'slot') console.warn(`<Workout_pushups> was created with unknown prop '${key}'`);
	});

	function g2_binding($$value) {
		binding_callbacks[$$value ? 'unshift' : 'push'](() => {
			rootElement = $$value;
			$$invalidate(0, rootElement);
		});
	}

	$$self.$$set = $$props => {
		if ('isPaused' in $$props) $$invalidate(1, isPaused = $$props.isPaused);
		if ('rootElement' in $$props) $$invalidate(0, rootElement = $$props.rootElement);
	};

	$$self.$capture_state = () => ({ isPaused, rootElement });

	$$self.$inject_state = $$props => {
		if ('isPaused' in $$props) $$invalidate(1, isPaused = $$props.isPaused);
		if ('rootElement' in $$props) $$invalidate(0, rootElement = $$props.rootElement);
	};

	if ($$props && "$$inject" in $$props) {
		$$self.$inject_state($$props.$$inject);
	}

	return [rootElement, isPaused, g2_binding];
}

class Workout_pushups extends SvelteComponentDev {
	constructor(options) {
		super(options);
		init(this, options, instance$A, create_fragment$A, safe_not_equal, { isPaused: 1, rootElement: 0 });

		dispatch_dev("SvelteRegisterComponent", {
			component: this,
			tagName: "Workout_pushups",
			options,
			id: create_fragment$A.name
		});

		const { ctx } = this.$$;
		const props = options.props || {};

		if (/*rootElement*/ ctx[0] === undefined && !('rootElement' in props)) {
			console.warn("<Workout_pushups> was created without expected prop 'rootElement'");
		}
	}

	get isPaused() {
		throw new Error("<Workout_pushups>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
	}

	set isPaused(value) {
		throw new Error("<Workout_pushups>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
	}

	get rootElement() {
		throw new Error("<Workout_pushups>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
	}

	set rootElement(value) {
		throw new Error("<Workout_pushups>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
	}
}

var workoutPushups = /*#__PURE__*/Object.freeze({
    __proto__: null,
    'default': Workout_pushups
});

/* src/workouts/workout-sideplank.svelte generated by Svelte v3.49.0 */

const file$z = "src/workouts/workout-sideplank.svelte";

// (71:4) {#if isPaused}
function create_if_block$z(ctx) {
	let svg;
	let path;

	const block = {
		c: function create() {
			svg = svg_element("svg");
			path = svg_element("path");
			attr_dev(path, "d", "M10 24h-6v-24h6v24zm10 0h-6v-24h6v24zm-11-23h-4v22h4v-22zm10 0h-4v22h4v-22z");
			add_location(path, file$z, 71, 133, 5132);
			attr_dev(svg, "viewBox", "-6 -5 36 36");
			attr_dev(svg, "width", "100%");
			attr_dev(svg, "height", "100%");
			attr_dev(svg, "xmlns", "http://www.w3.org/2000/svg");
			attr_dev(svg, "fill-rule", "evenodd");
			attr_dev(svg, "clip-rule", "evenodd");
			add_location(svg, file$z, 71, 4, 5003);
		},
		m: function mount(target, anchor) {
			insert_dev(target, svg, anchor);
			append_dev(svg, path);
		},
		d: function destroy(detaching) {
			if (detaching) detach_dev(svg);
		}
	};

	dispatch_dev("SvelteRegisterBlock", {
		block,
		id: create_if_block$z.name,
		type: "if",
		source: "(71:4) {#if isPaused}",
		ctx
	});

	return block;
}

function create_fragment$z(ctx) {
	let svg;
	let g2;
	let g1;
	let g0;
	let path0;
	let path1;
	let path2;
	let path3;
	let path4;
	let path5;
	let path6;
	let path7;
	let if_block = /*isPaused*/ ctx[1] && create_if_block$z(ctx);

	const block = {
		c: function create() {
			svg = svg_element("svg");
			g2 = svg_element("g");
			g1 = svg_element("g");
			g0 = svg_element("g");
			path0 = svg_element("path");
			path1 = svg_element("path");
			path2 = svg_element("path");
			path3 = svg_element("path");
			path4 = svg_element("path");
			path5 = svg_element("path");
			path6 = svg_element("path");
			path7 = svg_element("path");
			if (if_block) if_block.c();
			attr_dev(path0, "fill", "var(--shirt)");
			attr_dev(path0, "d", "m1884 1226 9-15a111 111 0 0 1 10-13 22 22 0 0 1 6-5 42 42 0 0 1 16-4 114 114 0 0 1 22 0 79 79 0 0 1 20 4l6 3-1 1c-3 1-6 5-5 7s0 5-1 7a29 29 0 0 0-1 10l1 1 9 2a86 86 0 0 1 13 3l6 1a48 48 0 0 0 11 2l9 1a25 25 0 0 1 6 1l11 2 11 2c1 0 2 0 3 2a162 162 0 0 1-11 33 29 29 0 0 0-2 8l-1 19-2 24-3 11a12 12 0 0 0-1 5c0 2-1 2-3 2-9-1-18-1-26-4a133 133 0 0 0-23-7 48 48 0 0 0-7-1c-14 0-27-4-40-8a419 419 0 0 1-15-3l-4 15c-1 3-2 4-4 4l-14-5a4 4 0 0 0-3 0 10 10 0 0 1-6 0l-5-2c-4-4-2-9-1-13 1-1 0-2-1-3a4 4 0 0 1-1-5c4-8 2-16 2-24v-19l-1-3h1c3 1 5 2 5 6l2 1 3-2 4-2a18 18 0 0 0 7-12 24 24 0 0 0 0-13 41 41 0 0 0-9-14h-2Z");
			attr_dev(path0, "transform", "translate(-1799 -1188)");
			add_location(path0, file$z, 27, 8, 633);
			attr_dev(path1, "d", "m2026 1334 3-12 2-23 1-19a29 29 0 0 1 2-8 162 162 0 0 0 11-34l1-1c8 3 16 4 23 8 7 6 16 8 23 14 2 2 4 2 5 1s1-3-1-5a23 23 0 0 0-2-2 25 25 0 0 0-6-5c-1 0-2 0-1-1h1l10 5 11 4 17 8c2 1 3 3 3 5 1 3 0 5-1 8v14c0 5-2 9-4 14v1a5 5 0 0 1-2 1l-12-2-3 1c-1 1 0 3 1 4 5 4 6 10 6 16a43 43 0 0 1-1 13l-3 6a4 4 0 0 1-3 1c-9 1-17 1-26-1l-32-6a24 24 0 0 1-8-3 6 6 0 0 0-4-1 19 19 0 0 1-11-1Z");
			attr_dev(path1, "transform", "translate(-1799 -1188)");
			attr_dev(path1, "fill", "var(--pants)");
			add_location(path1, file$z, 32, 8, 1354);
			attr_dev(path2, "fill", "var(--flesh)");
			attr_dev(path2, "d", "M2113 1338a43 43 0 0 0 1-12c0-6-1-12-6-16-1-1-2-2-1-4s2-1 3-1l12 2a5 5 0 0 0 2-1l4 2c10 2 19 5 28 10 5 2 10 4 15 3a44 44 0 0 1 9 1l16 2 22 8c11 4 23 7 34 7a39 39 0 0 1 6 0h5c2 2 2 2 0 3-1 1-3 1-2 2l1 10a14 14 0 0 1-9 0l-14-1-24-1-31-2c-8 0-15-3-23-5a97 97 0 0 0-22-5l-13-2a50 50 0 0 0-11 0h-2ZM1884 1226l2 1a41 41 0 0 1 9 13 24 24 0 0 1 1 13 18 18 0 0 1-8 12l-4 3-3 1-2-1c0-3-2-5-5-6l-1 1-8-3h-2l-9 2c-5 1-10 3-15 2a3 3 0 0 1-2-2c-1-1 1-1 1-2h3l-13-4a9 9 0 0 1-6-4 7 7 0 0 0-5-3c-4 0-6-3-5-6a53 53 0 0 0 6-22c0-6 4-8 9-6a4 4 0 0 0 4 0c4-2 7-2 11-1l9 3c0-2-2-2-2-2a8 8 0 0 0-1-1 2 2 0 0 1 0-3 2 2 0 0 1 3 0c4 1 9 3 11 7l7 7a13 13 0 0 0 7 4c4 1 6 1 8-2v-1ZM1876 1329l4 2a10 10 0 0 0 6 0 4 4 0 0 1 3 0l14 5a14 14 0 0 1-1 3 23 23 0 0 0-2 10l-2 10a41 41 0 0 0-3 10 2 2 0 0 0 2 3c4 3 6 7 8 12a2 2 0 0 1-1 3 2 2 0 0 1-4-1l-2-4-1-1a1 1 0 0 0 0 1c0 2 0 5 3 6a8 8 0 0 1 3 3v4a3 3 0 0 1-3 1l-3-2c1 2 0 3-1 4s-3 0-4-1a3 3 0 0 0-2 0c-3 1-6 1-8-1a3 3 0 0 0-2-1c-5 0-8-2-10-6v-4l2-8-1-6-1-7c-2-6 0-12 2-17l3-12 1-6Z");
			attr_dev(path2, "transform", "translate(-1799 -1188)");
			add_location(path2, file$z, 37, 8, 1843);
			attr_dev(path3, "fill", "var(--hair)");
			attr_dev(path3, "d", "M1818 1221c0-6 4-8 9-6a4 4 0 0 0 4 0c4-2 7-2 11-1l9 3c0-2-2-2-2-2l-10-4-6-4a27 27 0 0 1-7-2c-5-1-7-1-10 3l-1 2-1 1c-4 0-7 3-9 6a34 34 0 0 0-5 18l-1 6v5c1 4 4 5 8 6l11 4a80 80 0 0 0 17 4h6l-13-4a9 9 0 0 1-6-4 7 7 0 0 0-5-3c-4 0-6-3-5-7a53 53 0 0 0 6-21Z");
			attr_dev(path3, "transform", "translate(-1799 -1188)");
			add_location(path3, file$z, 42, 8, 2958);
			attr_dev(path4, "fill", "var(--flesh)");
			attr_dev(path4, "d", "M2124 1305c2-5 4-9 4-15v-13c0-3 2-5 1-8l3 2 14 8c5 3 9 5 14 6 9 3 18 3 27 5a158 158 0 0 1 15 6l36 16a138 138 0 0 0 15 5 34 34 0 0 0 6 1 19 19 0 0 1 10 4 3 3 0 0 0 3 0l-2 1a16 16 0 0 1-3 0c-3 0-3 0-4 2a47 47 0 0 0 0 6l1 4c1 2 0 1-1 2-5-1-9-3-13-6a13 13 0 0 0-4-1l-36-6c-10-1-20-3-29-7l-14-5-13-2c-9-1-17-2-25-5a23 23 0 0 0-5 0ZM2109 1256l-11-4-10-5h-2l1 1a25 25 0 0 1 7 5 23 23 0 0 1 2 2c2 2 2 3 1 5s-3 1-5-1c-7-6-16-8-23-14-7-5-15-5-23-8l-1 1-3-2-11-2-12-2a25 25 0 0 0-5-1l-9-1a48 48 0 0 1-11-2l-7-1a86 86 0 0 0-12-3l-9-2-1-1a29 29 0 0 1 1-10c1-2 2-4 1-7-1-2 2-6 5-7l1-1 18 6c9 3 19 4 28 8l36 16c6 3 13 7 20 8l12 2a5 5 0 0 1 2 1c7 4 12 8 16 15l4 4Z");
			attr_dev(path4, "transform", "translate(-1799 -1188)");
			add_location(path4, file$z, 47, 8, 3324);
			attr_dev(path5, "d", "M2310 1333c-1-5-3-9-8-11l-12-1h-11a8 8 0 0 0-3 0 13 13 0 0 0-4 1l-2 2a16 16 0 0 1-3-1c-3 0-3 0-4 3a47 47 0 0 0 0 5l1 4c1 1 0 1-1 2h1c1 2-1 1-1 2 2 2 2 2 0 3l-2 2 1 10a163 163 0 0 0 19 4 108 108 0 0 0 15 4c4 0 5-1 6-4a37 37 0 0 0 1-10c0-2 1-2 2-2a7 7 0 0 0 5-6l1-1v-4l-1-2Z");
			attr_dev(path5, "transform", "translate(-1799 -1188)");
			attr_dev(path5, "fill", "var(--hair)");
			add_location(path5, file$z, 52, 8, 4087);
			attr_dev(path6, "fill", "var(--shirt)");
			attr_dev(path6, "d", "M1884 1226v1-1Z");
			attr_dev(path6, "transform", "translate(-1799 -1188)");
			add_location(path6, file$z, 57, 8, 4473);
			attr_dev(path7, "fill", "var(--hair)");
			attr_dev(path7, "d", "M1818 1221c0-6 4-8 9-6a4 4 0 0 0 4 0c4-2 7-2 11 0l9 2-2-2-10-4-6-4a28 28 0 0 1-7-1c-5-2-7-2-10 3l-1 2h-1c-4 0-7 3-9 6a34 34 0 0 0-5 18l-1 6v6c1 3 4 4 8 5l11 4a79 79 0 0 0 17 4h6l-13-4a9 9 0 0 1-6-3 7 7 0 0 0-5-4c-4 0-6-3-5-6a53 53 0 0 0 6-22Z");
			attr_dev(path7, "transform", "translate(-1799 -1188)");
			add_location(path7, file$z, 62, 8, 4603);
			attr_dev(g0, "id", "sideplank");
			attr_dev(g0, "class", "svelte-1v0qdfy");
			add_location(g0, file$z, 24, 4, 589);
			attr_dev(g1, "class", "shapes svelte-1v0qdfy");
			add_location(g1, file$z, 23, 2, 542);
			attr_dev(g2, "class", "svelte-1v0qdfy");
			toggle_class(g2, "paused", /*isPaused*/ ctx[1]);
			toggle_class(g2, "flip", /*flipsvg*/ ctx[2]);
			add_location(g2, file$z, 22, 0, 491);
			attr_dev(svg, "xmlns", "http://www.w3.org/2000/svg");
			attr_dev(svg, "viewBox", "0 0 511.9 210.3");
			attr_dev(svg, "height", "100%");
			attr_dev(svg, "width", "100%");
			attr_dev(svg, "class", "svelte-1v0qdfy");
			add_location(svg, file$z, 21, 0, 397);
		},
		l: function claim(nodes) {
			throw new Error("options.hydrate only works if the component was compiled with the `hydratable: true` option");
		},
		m: function mount(target, anchor) {
			insert_dev(target, svg, anchor);
			append_dev(svg, g2);
			append_dev(g2, g1);
			append_dev(g1, g0);
			append_dev(g0, path0);
			append_dev(g0, path1);
			append_dev(g0, path2);
			append_dev(g0, path3);
			append_dev(g0, path4);
			append_dev(g0, path5);
			append_dev(g0, path6);
			append_dev(g0, path7);
			/*g1_binding*/ ctx[4](g1);
			if (if_block) if_block.m(svg, null);
		},
		p: function update(ctx, [dirty]) {
			if (dirty & /*isPaused*/ 2) {
				toggle_class(g2, "paused", /*isPaused*/ ctx[1]);
			}

			if (dirty & /*flipsvg*/ 4) {
				toggle_class(g2, "flip", /*flipsvg*/ ctx[2]);
			}

			if (/*isPaused*/ ctx[1]) {
				if (if_block) ; else {
					if_block = create_if_block$z(ctx);
					if_block.c();
					if_block.m(svg, null);
				}
			} else if (if_block) {
				if_block.d(1);
				if_block = null;
			}
		},
		i: noop,
		o: noop,
		d: function destroy(detaching) {
			if (detaching) detach_dev(svg);
			/*g1_binding*/ ctx[4](null);
			if (if_block) if_block.d();
		}
	};

	dispatch_dev("SvelteRegisterBlock", {
		block,
		id: create_fragment$z.name,
		type: "component",
		source: "",
		ctx
	});

	return block;
}

function instance$z($$self, $$props, $$invalidate) {
	let { $$slots: slots = {}, $$scope } = $$props;
	validate_slots('Workout_sideplank', slots, []);
	let { direction = "right" } = $$props;
	let { isPaused = false } = $$props;
	let { rootElement } = $$props;
	let flipsvg = false;

	if (direction == "left") {
		flipsvg = true;
	}

	const writable_props = ['direction', 'isPaused', 'rootElement'];

	Object.keys($$props).forEach(key => {
		if (!~writable_props.indexOf(key) && key.slice(0, 2) !== '$$' && key !== 'slot') console.warn(`<Workout_sideplank> was created with unknown prop '${key}'`);
	});

	function g1_binding($$value) {
		binding_callbacks[$$value ? 'unshift' : 'push'](() => {
			rootElement = $$value;
			$$invalidate(0, rootElement);
		});
	}

	$$self.$$set = $$props => {
		if ('direction' in $$props) $$invalidate(3, direction = $$props.direction);
		if ('isPaused' in $$props) $$invalidate(1, isPaused = $$props.isPaused);
		if ('rootElement' in $$props) $$invalidate(0, rootElement = $$props.rootElement);
	};

	$$self.$capture_state = () => ({
		direction,
		isPaused,
		rootElement,
		flipsvg
	});

	$$self.$inject_state = $$props => {
		if ('direction' in $$props) $$invalidate(3, direction = $$props.direction);
		if ('isPaused' in $$props) $$invalidate(1, isPaused = $$props.isPaused);
		if ('rootElement' in $$props) $$invalidate(0, rootElement = $$props.rootElement);
		if ('flipsvg' in $$props) $$invalidate(2, flipsvg = $$props.flipsvg);
	};

	if ($$props && "$$inject" in $$props) {
		$$self.$inject_state($$props.$$inject);
	}

	return [rootElement, isPaused, flipsvg, direction, g1_binding];
}

class Workout_sideplank extends SvelteComponentDev {
	constructor(options) {
		super(options);

		init(this, options, instance$z, create_fragment$z, safe_not_equal, {
			direction: 3,
			isPaused: 1,
			rootElement: 0
		});

		dispatch_dev("SvelteRegisterComponent", {
			component: this,
			tagName: "Workout_sideplank",
			options,
			id: create_fragment$z.name
		});

		const { ctx } = this.$$;
		const props = options.props || {};

		if (/*rootElement*/ ctx[0] === undefined && !('rootElement' in props)) {
			console.warn("<Workout_sideplank> was created without expected prop 'rootElement'");
		}
	}

	get direction() {
		throw new Error("<Workout_sideplank>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
	}

	set direction(value) {
		throw new Error("<Workout_sideplank>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
	}

	get isPaused() {
		throw new Error("<Workout_sideplank>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
	}

	set isPaused(value) {
		throw new Error("<Workout_sideplank>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
	}

	get rootElement() {
		throw new Error("<Workout_sideplank>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
	}

	set rootElement(value) {
		throw new Error("<Workout_sideplank>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
	}
}

var workoutSideplank = /*#__PURE__*/Object.freeze({
    __proto__: null,
    'default': Workout_sideplank
});

/* src/workouts/workout-agilitycircles.svelte generated by Svelte v3.49.0 */

const file$y = "src/workouts/workout-agilitycircles.svelte";

// (186:0) {#if isPaused}
function create_if_block$y(ctx) {
	let svg;
	let path;

	const block = {
		c: function create() {
			svg = svg_element("svg");
			path = svg_element("path");
			attr_dev(path, "d", "M10 24h-6v-24h6v24zm10 0h-6v-24h6v24zm-11-23h-4v22h4v-22zm10 0h-4v22h4v-22z");
			add_location(path, file$y, 186, 129, 9140);
			attr_dev(svg, "viewBox", "-6 -5 36 36");
			attr_dev(svg, "width", "100%");
			attr_dev(svg, "height", "100%");
			attr_dev(svg, "xmlns", "http://www.w3.org/2000/svg");
			attr_dev(svg, "fill-rule", "evenodd");
			attr_dev(svg, "clip-rule", "evenodd");
			attr_dev(svg, "class", "svelte-14v9oqw");
			add_location(svg, file$y, 186, 0, 9011);
		},
		m: function mount(target, anchor) {
			insert_dev(target, svg, anchor);
			append_dev(svg, path);
		},
		d: function destroy(detaching) {
			if (detaching) detach_dev(svg);
		}
	};

	dispatch_dev("SvelteRegisterBlock", {
		block,
		id: create_if_block$y.name,
		type: "if",
		source: "(186:0) {#if isPaused}",
		ctx
	});

	return block;
}

function create_fragment$y(ctx) {
	let svg;
	let g4;
	let g0;
	let path0;
	let path1;
	let g3;
	let g1;
	let path2;
	let path3;
	let path4;
	let path5;
	let path6;
	let path7;
	let path8;
	let path9;
	let path10;
	let path11;
	let path12;
	let path13;
	let g2;
	let path14;
	let path15;
	let path16;
	let path17;
	let path18;
	let path19;
	let path20;
	let path21;
	let path22;
	let path23;
	let path24;
	let if_block = /*isPaused*/ ctx[1] && create_if_block$y(ctx);

	const block = {
		c: function create() {
			svg = svg_element("svg");
			g4 = svg_element("g");
			g0 = svg_element("g");
			path0 = svg_element("path");
			path1 = svg_element("path");
			g3 = svg_element("g");
			g1 = svg_element("g");
			path2 = svg_element("path");
			path3 = svg_element("path");
			path4 = svg_element("path");
			path5 = svg_element("path");
			path6 = svg_element("path");
			path7 = svg_element("path");
			path8 = svg_element("path");
			path9 = svg_element("path");
			path10 = svg_element("path");
			path11 = svg_element("path");
			path12 = svg_element("path");
			path13 = svg_element("path");
			g2 = svg_element("g");
			path14 = svg_element("path");
			path15 = svg_element("path");
			path16 = svg_element("path");
			path17 = svg_element("path");
			path18 = svg_element("path");
			path19 = svg_element("path");
			path20 = svg_element("path");
			path21 = svg_element("path");
			path22 = svg_element("path");
			path23 = svg_element("path");
			path24 = svg_element("path");
			if (if_block) if_block.c();
			attr_dev(path0, "fill", "var(--shirt)");
			attr_dev(path0, "d", "M124 427H70c-1 0-3 0-3-2-1-5 1-10 3-16l4-1h43c4 0 5 2 5 5l2 8 1 4-1 2Z");
			add_location(path0, file$y, 81, 6, 1659);
			attr_dev(path1, "fill", "var(--book)");
			attr_dev(path1, "d", "M70 427h54c0 10 0 10-10 10H74c-2 0-5 1-6-2a6 6 0 0 1 2-6v-2ZM125 425l-1-4 1 4ZM124 427l1-2c1 1 1 2-1 2Z");
			add_location(path1, file$y, 85, 6, 1791);
			attr_dev(g0, "id", "book");
			add_location(g0, file$y, 80, 4, 1639);
			attr_dev(path2, "fill", "var(--hair)");
			attr_dev(path2, "d", "M91 0c3 2 6 3 8 6 12 10 14 23 12 37-3 1-2 5-3 7l-3-16c-1-3-2-4-5-2-11 8-24 8-37 6-1 0-4-1-3 1 1 6-3 10-3 15l-2 1a1 1 0 0 1 0-1l-1-2-1-1a76 76 0 0 1-2-35c1-6 4-9 10-11 5-1 10-2 14-5Z");
			add_location(path2, file$y, 92, 8, 2045);
			attr_dev(path3, "fill", "var(--flesh)");
			attr_dev(path3, "d", "M179 216c-5 9-14 12-22 16-3 2-7 3-9 8-5 2-11 4-13 9l-11 23a3 3 0 0 0-3 3c-4 3-9 3-14-1v-4l5-5c3 0 4-2 5-4a2 2 0 0 0-1-2c-3-1-4 2-6 3v1l-5 1c-2 2-3 2-4 0s-1-4 2-5 5-3 7-5c1 0 3 0 4-2l-1-2c-2-1-5-1-5 2a24 24 0 0 1-4 0l-3-1a3 3 0 0 1 0-4l4-4c3-1 2-3 0-5l-7-7c-3-2-3-5-1-7s5-2 7 1c1 3 4 3 6 3 3 0 5-1 7 2s5 2 7 0c4-2 8-2 10-7 4-2 7-6 10-10 3-2 7-3 5-8-4-10-5-21-5-32 9 0 16-4 22-10 2-1 3-4 6-4l4 27 3 11");
			add_location(path3, file$y, 96, 8, 2295);
			attr_dev(path4, "fill", "var(--flesh)");
			attr_dev(path4, "d", "M5 162c9-1 15 5 22 8 3 1 7 2 7 7l-7 21c-2 5-1 12-1 18-2 14-6 27-6 41a100 100 0 0 0 2 23 42 42 0 0 1 0 16c0 5-1 10 1 14a6 6 0 0 1-2 9c-3 1-5 1-8-2-7-6-8-14-12-22a6 6 0 0 1 0-5c6-12 3-24 3-36-1-16-5-32-4-48 1-7 2-14 5-21 2-7 1-14 2-21l-2-2Z");
			add_location(path4, file$y, 100, 8, 2764);
			attr_dev(path5, "fill", "var(--flesh)");
			attr_dev(path5, "d", "M87 369h3c-2 11 0 23-6 33v7a88 88 0 0 1-3 40c-4 12-3 24-1 36-1 4-4 3-7 3-4-1-7-1-7 5-4-4-2-8-4-11 1-6-2-12-3-17l-7-37a36 36 0 0 1 2-20c3-9 3-19 1-29-1-3-3-7-2-10l17 4c6 1 12 0 17-4ZM111 362l5 3c11 10 22 10 34 5l1 22v6c-4 8-3 17-3 26 0 10-4 18-10 26-4 5-9 10-7 18-4 0-9-3-12 2-1 1-2 2-4 1-2 0-2-2-1-4 0-3 2-7-1-10 1-9 2-18 0-28a22 22 0 0 1 1-16c7-13 5-26 0-38-2-4-2-9-3-13Z");
			add_location(path5, file$y, 104, 8, 3072);
			attr_dev(path6, "fill", "var(--hair)");
			attr_dev(path6, "d", "M113 457c3 3 1 7 1 10-1 2-1 4 1 4 2 1 3 0 4-1 3-5 8-2 12-2 3 15 3 32 8 47 1 5 1 9-4 12a14 14 0 0 1-15 0c-6-3-10-9-10-15a76 76 0 0 0-5-29c-4-11 3-18 8-26ZM62 482c2 3 0 7 4 11 0-6 3-6 7-5 3 0 6 1 7-3 2 1 4 3 3 6-1 11 1 21 4 31a36 36 0 0 1 2 6c1 13-6 19-19 15-12-5-18-17-14-30l4-25 2-6Z");
			add_location(path6, file$y, 108, 8, 3514);
			attr_dev(path7, "fill", "var(--pants)");
			attr_dev(path7, "d", "M147 273c-6-1-11 4-17 5a9 9 0 0 1-6 2c-8 4-17 7-26 8-16 1-31 1-44-9-5-4-10-8-16-10l-1 12 7 76c1 5 4 8 8 10l1 2 17 4c6 1 12 0 17-4h3c2-1 4-3 4-6l2-18c-1-5 0-9 1-14 2 4 0 9 1 14-2 9 2 14 11 16l2 1c2 0 4 2 5 3 11 10 22 10 34 5 2-2 2-4 3-7 2-30 1-60-6-90Z");
			add_location(path7, file$y, 112, 8, 3866);
			attr_dev(path8, "fill", "var(--flesh)");
			attr_dev(path8, "d", "M60 70c-3 0-3-4-5-5a1 1 0 0 0 0-1l-5-12 3-1 1 1 1 2a1 1 0 0 0 0 1 14 14 0 0 0 3 9l2 6Z");
			add_location(path8, file$y, 116, 8, 4187);
			attr_dev(path9, "fill", "var(--flesh)");
			attr_dev(path9, "d", "m60 70-2-6a23 23 0 0 0-1-9c0-6 4-10 3-16-1-2 2-1 3-1 13 2 26 2 37-6 3-2 4-1 5 2l3 16c1-2 0-6 3-7 3-2 5-2 5 2 0 8 0 15-5 22-4 4-3 12 1 15 6 2 7 9 3 14-2 2-3 3-3 6-10 10-23 13-35 7a22 22 0 0 1-12-19l-1-6-4-14Z");
			add_location(path9, file$y, 120, 8, 4343);
			attr_dev(path10, "fill", "var(--shirt)");
			attr_dev(path10, "d", "M112 102c0-3 1-4 3-6 4-5 3-12-3-14 3-1 7-3 10 1-3 2-3 5-3 7 1 6-2 10-7 12Z");
			add_location(path10, file$y, 124, 8, 4620);
			attr_dev(path11, "fill", "var(--pants)");
			attr_dev(path11, "d", "M57 55a23 23 0 0 1 1 9 14 14 0 0 1-3-9ZM55 54Z");
			add_location(path11, file$y, 128, 8, 4764);
			attr_dev(path12, "fill", "var(--shirt)");
			attr_dev(path12, "d", "m175 147-12-31c-2-7-6-13-13-16l-28-17c-3 2-3 5-3 7 1 6-2 10-7 12-10 10-23 13-35 7a22 22 0 0 1-12-19l-1-6c-3-1-5 2-8 2a19 19 0 0 1-4 4c-7 4-13 7-19 12-17 16-24 37-28 60 9-1 15 5 22 8 3 1 7 2 7 7 5 1 4 5 4 8a423 423 0 0 1-4 74c0 5 0 8 4 11 6 1 11 5 16 9 13 11 28 10 44 9 9-1 18-4 26-8v-5c2 0 4 0 6 3 6-1 11-5 17-5 2-2 4-2 4-5-1-9 0-19-3-28-5 2-11 4-13 9l-11 24v2h-3c-4 3-9 3-13-1-2-2-2-3-1-4l5-5-2-2-5 1c-2 2-3 3-4 0-1-2-1-4 2-5s5-3 7-5a2 2 0 0 0-2-2 24 24 0 0 1-4 0l-3-1a3 3 0 0 1 0-4l4-4c3-1 2-3 0-5l-7-7c-3-2-3-5-1-7s5-1 7 1c1 3 4 3 6 3 3 0 5-1 7 2s5 2 7 0c4-2 8-2 10-7a17 17 0 0 0-2 0 17 17 0 0 1 2 0c5-2 7-6 10-10 1-11-1-21-1-32 0-2-3-6 1-8 9 0 16-4 22-9 2-2 3-4 6-5 5-3 5-7 3-12Z");
			add_location(path12, file$y, 132, 8, 4880);
			attr_dev(path13, "fill", "var(--shirt)");
			attr_dev(path13, "d", "M110 263v-1c2-1 3-4 6-3a2 2 0 0 1 1 2c-1 2-2 4-5 4l-2-2ZM108 252c0-3 3-3 5-2l1 2c-1 2-2 2-4 2a2 2 0 0 0-2-2ZM124 275c2 0 4 0 6 3a9 9 0 0 1-6 2ZM124 272v3h-3a3 3 0 0 1 3-3Z");
			add_location(path13, file$y, 136, 8, 5633);
			attr_dev(g1, "id", "agility-circle-2");
			attr_dev(g1, "class", "svelte-14v9oqw");
			add_location(g1, file$y, 91, 6, 2011);
			attr_dev(path14, "d", "M58 272c17 1 34 7 50 12 14 5 28 4 42-2a8 8 0 0 1 2-1c-4 25-13 49-16 73-1 4-4 5-5 7-10 5-20 6-30 3-2-2-3-1-4 0-1 3-1 6-4 7-11 1-22 2-33-3l-4-7c-7-27-6-54-2-81v-3c2-1 4-3 4-5Z");
			attr_dev(path14, "fill", "var(--pants)");
			add_location(path14, file$y, 142, 8, 5917);
			attr_dev(path15, "fill", "var(--flesh)");
			attr_dev(path15, "d", "M101 364c10 3 20 2 30-3 1 8-2 15-4 22s-3 13-1 19c3 15 0 30-5 44-4 14-9 28-10 43-1 3-1 3-2 2-5-2-10-2-15 2-1-1 0-3-2-4 4-4 5-8 5-13l-2-39a40 40 0 0 1 3-18c2-7 2-14 0-21-2-11 1-23 3-34Z");
			add_location(path15, file$y, 146, 8, 6160);
			attr_dev(path16, "fill", "var(--flesh)");
			attr_dev(path16, "d", "M58 272c0 2-2 4-4 5a23 23 0 0 1-3-2c-4-2-5 0-5 4l1 14a29 29 0 0 1 0 13c-2 3-3-1-4-1-1-1-1-4-3-4 0-2 0-3-2-3-4-10-7-20-6-32 1-13-6-25-10-37-3-11-8-22-7-34a48 48 0 0 1 5-22l2-5c9 3 13 11 20 16 0 2 0 4 2 5-5 3-7 7-4 13s2 11 2 17v20c0 6 2 11 5 15s3 1 4-1c1 3 0 7 4 8 2 0 1 3 1 5 1 2 0 4 2 6Z");
			add_location(path16, file$y, 150, 8, 6413);
			attr_dev(path17, "fill", "var(--hair)");
			attr_dev(path17, "d", "m99 61-1-25c-1-14 7-23 21-24 12-1 23 3 33 9 5 3 6 9 6 15a70 70 0 0 1-1 25c-2 2-5 3-5-2v-3c0-3-1-4-5-2a44 44 0 0 1-19 3c-7 0-14 1-20-3l1 7c1 4-6 6-5 10v3a3 3 0 0 1-2-3c0-4-1-7-3-10Z");
			add_location(path17, file$y, 154, 8, 6770);
			attr_dev(path18, "fill", "var(--flesh)");
			attr_dev(path18, "d", "M60 368c11 5 22 4 33 3 0 10 1 19-4 28-1 2 0 5 1 7 2 9 0 17-4 25-6 11-10 22-7 34-1 2-1 5-5 2a9 9 0 0 0-10 0c-2 3-2-1-3-1 5-8 2-17 0-26-4-15-5-30 0-46 2-6 0-13 0-20a33 33 0 0 1-1-6Z");
			add_location(path18, file$y, 158, 8, 7019);
			attr_dev(path19, "fill", "var(--flesh)");
			attr_dev(path19, "d", "M167 182a74 74 0 0 0 24-5h8a15 15 0 0 0-1 9c2 9 1 18 2 27 1 10-6 17-12 24a46 46 0 0 0-13 24 11 11 0 0 1-1 3c-2 4-4 4-7 0l-8-14c0-5-4-8-5-12 0-8-4-17-3-25h5c2 3-2 7 4 9 3 7 7 8 10 2 3-5 5-11 2-18a47 47 0 0 1-5-24Z");
			add_location(path19, file$y, 162, 8, 7268);
			attr_dev(path20, "fill", "var(--hair)");
			attr_dev(path20, "d", "m92 489 3 4c4-4 9-4 14-2 1 1 1 1 2-2 2 13 11 24 11 38a19 19 0 0 1-16 18c-5 1-11-1-12-7-6-15-5-30-4-46a4 4 0 0 1 2-3ZM61 466c1 0 1 4 4 1a9 9 0 0 1 9 0c4 3 4 0 5-2 3 1 3 4 3 6 1 13 1 27-1 40-2 6-4 10-11 11-5 1-13-3-15-9-3-5-4-10-3-16 4-10 7-20 9-31Z");
			add_location(path20, file$y, 166, 8, 7550);
			attr_dev(path21, "fill", "var(--shirt)");
			attr_dev(path21, "d", "M149 108z");
			add_location(path21, file$y, 170, 8, 7866);
			attr_dev(path22, "fill", "var(--flesh)");
			attr_dev(path22, "d", "M104 74a3 3 0 0 1-2-3c0-4-1-7-3-10-4-1-5 1-4 5 1 7 3 14 9 20 1 4-2 4-5 5v6c-2 16 12 29 26 28 9-1 17-6 23-13l1-4c5-2 1-7 2-10-2-1-2-2-2-4l7-20c1-4 3-9 1-13-2 2-5 3-5-2v-3c0-3-1-4-5-2a44 44 0 0 1-19 3c-7 0-14 1-20-3l1 8-5 3v9-3M40 301c2 0 2 3 3 4 1 0 2 4 4 1v4c-1 1-3 0-4-1a11 11 0 0 1-3-8ZM38 298c1 0 2 1 2 3-2-1-2-2-2-3Z");
			add_location(path22, file$y, 171, 8, 7917);
			attr_dev(path23, "fill", "var(--shirt)");
			attr_dev(path23, "d", "m201 168-9-28c-4-13-9-24-23-29-7-3-10-10-18-13-1 3 3 8-2 10l-1 4c-6 7-14 12-23 13-14 1-28-12-26-28v-6c-16 4-31 11-46 21-6 4-11 9-13 17-2 6-5 11-9 16a51 51 0 0 0-9 23c9 3 13 11 20 16l5 1c2 3 4 1 6 0l5-8c-1 26-4 51-7 76 1 3 0 7 4 8 2 0 1 3 1 5 1 2 0 4 2 6 17 1 34 7 50 12 14 5 28 4 42-2a8 8 0 0 1 2-1 5 5 0 0 1 3-2c4 0 3-4 4-6v-23c0-5-4-9-4-12-1-8-5-17-3-25h4a2 2 0 0 0 2-1 3 3 0 0 0 1-1 3 3 0 0 1-1 1 2 2 0 0 1-2 1c2 3-2 7 4 9 2-5 0-10 1-15l3-21c0-2 0-4 3-4a74 74 0 0 0 24-5h8c2-2 4-5 2-9Z");
			add_location(path23, file$y, 175, 8, 8307);
			attr_dev(path24, "fill", "var(--flesh)");
			attr_dev(path24, "d", "M53 185c-2 5-7 1-9 4-2-1-2-3-2-5l4 1c3 3 5 1 7 0Z");
			add_location(path24, file$y, 179, 8, 8865);
			attr_dev(g2, "id", "agility-circle-1");
			attr_dev(g2, "class", "svelte-14v9oqw");
			add_location(g2, file$y, 141, 6, 5883);
			attr_dev(g3, "class", "shapes svelte-14v9oqw");
			add_location(g3, file$y, 90, 4, 1962);
			attr_dev(g4, "class", "svelte-14v9oqw");
			toggle_class(g4, "paused", /*isPaused*/ ctx[1]);
			add_location(g4, file$y, 79, 2, 1607);
			attr_dev(svg, "xmlns", "http://www.w3.org/2000/svg");
			attr_dev(svg, "viewBox", "0 0 201.8 545.1");
			attr_dev(svg, "height", "100%");
			attr_dev(svg, "width", "100%");
			attr_dev(svg, "class", "svelte-14v9oqw");
			add_location(svg, file$y, 78, 0, 1511);
		},
		l: function claim(nodes) {
			throw new Error("options.hydrate only works if the component was compiled with the `hydratable: true` option");
		},
		m: function mount(target, anchor) {
			insert_dev(target, svg, anchor);
			append_dev(svg, g4);
			append_dev(g4, g0);
			append_dev(g0, path0);
			append_dev(g0, path1);
			append_dev(g4, g3);
			append_dev(g3, g1);
			append_dev(g1, path2);
			append_dev(g1, path3);
			append_dev(g1, path4);
			append_dev(g1, path5);
			append_dev(g1, path6);
			append_dev(g1, path7);
			append_dev(g1, path8);
			append_dev(g1, path9);
			append_dev(g1, path10);
			append_dev(g1, path11);
			append_dev(g1, path12);
			append_dev(g1, path13);
			append_dev(g3, g2);
			append_dev(g2, path14);
			append_dev(g2, path15);
			append_dev(g2, path16);
			append_dev(g2, path17);
			append_dev(g2, path18);
			append_dev(g2, path19);
			append_dev(g2, path20);
			append_dev(g2, path21);
			append_dev(g2, path22);
			append_dev(g2, path23);
			append_dev(g2, path24);
			/*g3_binding*/ ctx[2](g3);
			if (if_block) if_block.m(g4, null);
		},
		p: function update(ctx, [dirty]) {
			if (/*isPaused*/ ctx[1]) {
				if (if_block) ; else {
					if_block = create_if_block$y(ctx);
					if_block.c();
					if_block.m(g4, null);
				}
			} else if (if_block) {
				if_block.d(1);
				if_block = null;
			}

			if (dirty & /*isPaused*/ 2) {
				toggle_class(g4, "paused", /*isPaused*/ ctx[1]);
			}
		},
		i: noop,
		o: noop,
		d: function destroy(detaching) {
			if (detaching) detach_dev(svg);
			/*g3_binding*/ ctx[2](null);
			if (if_block) if_block.d();
		}
	};

	dispatch_dev("SvelteRegisterBlock", {
		block,
		id: create_fragment$y.name,
		type: "component",
		source: "",
		ctx
	});

	return block;
}

function instance$y($$self, $$props, $$invalidate) {
	let { $$slots: slots = {}, $$scope } = $$props;
	validate_slots('Workout_agilitycircles', slots, []);
	let { isPaused = false } = $$props;
	let { rootElement } = $$props;
	const writable_props = ['isPaused', 'rootElement'];

	Object.keys($$props).forEach(key => {
		if (!~writable_props.indexOf(key) && key.slice(0, 2) !== '$$' && key !== 'slot') console.warn(`<Workout_agilitycircles> was created with unknown prop '${key}'`);
	});

	function g3_binding($$value) {
		binding_callbacks[$$value ? 'unshift' : 'push'](() => {
			rootElement = $$value;
			$$invalidate(0, rootElement);
		});
	}

	$$self.$$set = $$props => {
		if ('isPaused' in $$props) $$invalidate(1, isPaused = $$props.isPaused);
		if ('rootElement' in $$props) $$invalidate(0, rootElement = $$props.rootElement);
	};

	$$self.$capture_state = () => ({ isPaused, rootElement });

	$$self.$inject_state = $$props => {
		if ('isPaused' in $$props) $$invalidate(1, isPaused = $$props.isPaused);
		if ('rootElement' in $$props) $$invalidate(0, rootElement = $$props.rootElement);
	};

	if ($$props && "$$inject" in $$props) {
		$$self.$inject_state($$props.$$inject);
	}

	return [rootElement, isPaused, g3_binding];
}

class Workout_agilitycircles extends SvelteComponentDev {
	constructor(options) {
		super(options);
		init(this, options, instance$y, create_fragment$y, safe_not_equal, { isPaused: 1, rootElement: 0 });

		dispatch_dev("SvelteRegisterComponent", {
			component: this,
			tagName: "Workout_agilitycircles",
			options,
			id: create_fragment$y.name
		});

		const { ctx } = this.$$;
		const props = options.props || {};

		if (/*rootElement*/ ctx[0] === undefined && !('rootElement' in props)) {
			console.warn("<Workout_agilitycircles> was created without expected prop 'rootElement'");
		}
	}

	get isPaused() {
		throw new Error("<Workout_agilitycircles>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
	}

	set isPaused(value) {
		throw new Error("<Workout_agilitycircles>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
	}

	get rootElement() {
		throw new Error("<Workout_agilitycircles>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
	}

	set rootElement(value) {
		throw new Error("<Workout_agilitycircles>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
	}
}

var workoutAgilitycircles = /*#__PURE__*/Object.freeze({
    __proto__: null,
    'default': Workout_agilitycircles
});

/* src/workouts/workout-alternatingsupermans.svelte generated by Svelte v3.49.0 */

const file$x = "src/workouts/workout-alternatingsupermans.svelte";

// (200:0) {#if isPaused}
function create_if_block$x(ctx) {
	let svg;
	let path;

	const block = {
		c: function create() {
			svg = svg_element("svg");
			path = svg_element("path");
			attr_dev(path, "d", "M10 24h-6v-24h6v24zm10 0h-6v-24h6v24zm-11-23h-4v22h4v-22zm10 0h-4v22h4v-22z");
			add_location(path, file$x, 200, 129, 15876);
			attr_dev(svg, "viewBox", "-6 -5 36 36");
			attr_dev(svg, "width", "100%");
			attr_dev(svg, "height", "100%");
			attr_dev(svg, "xmlns", "http://www.w3.org/2000/svg");
			attr_dev(svg, "fill-rule", "evenodd");
			attr_dev(svg, "clip-rule", "evenodd");
			add_location(svg, file$x, 200, 0, 15747);
		},
		m: function mount(target, anchor) {
			insert_dev(target, svg, anchor);
			append_dev(svg, path);
		},
		d: function destroy(detaching) {
			if (detaching) detach_dev(svg);
		}
	};

	dispatch_dev("SvelteRegisterBlock", {
		block,
		id: create_if_block$x.name,
		type: "if",
		source: "(200:0) {#if isPaused}",
		ctx
	});

	return block;
}

function create_fragment$x(ctx) {
	let svg;
	let t;
	let g4;
	let g3;
	let g0;
	let path0;
	let path1;
	let path2;
	let path3;
	let path4;
	let path5;
	let path6;
	let path7;
	let path8;
	let path9;
	let path10;
	let g1;
	let path11;
	let path12;
	let path13;
	let path14;
	let path15;
	let path16;
	let path17;
	let path18;
	let path19;
	let path20;
	let g2;
	let path21;
	let path22;
	let path23;
	let path24;
	let path25;
	let path26;
	let path27;
	let path28;
	let path29;
	let path30;
	let path31;
	let if_block = /*isPaused*/ ctx[1] && create_if_block$x(ctx);

	const block = {
		c: function create() {
			svg = svg_element("svg");
			t = text(">\n  ");
			g4 = svg_element("g");
			g3 = svg_element("g");
			g0 = svg_element("g");
			path0 = svg_element("path");
			path1 = svg_element("path");
			path2 = svg_element("path");
			path3 = svg_element("path");
			path4 = svg_element("path");
			path5 = svg_element("path");
			path6 = svg_element("path");
			path7 = svg_element("path");
			path8 = svg_element("path");
			path9 = svg_element("path");
			path10 = svg_element("path");
			g1 = svg_element("g");
			path11 = svg_element("path");
			path12 = svg_element("path");
			path13 = svg_element("path");
			path14 = svg_element("path");
			path15 = svg_element("path");
			path16 = svg_element("path");
			path17 = svg_element("path");
			path18 = svg_element("path");
			path19 = svg_element("path");
			path20 = svg_element("path");
			g2 = svg_element("g");
			path21 = svg_element("path");
			path22 = svg_element("path");
			path23 = svg_element("path");
			path24 = svg_element("path");
			path25 = svg_element("path");
			path26 = svg_element("path");
			path27 = svg_element("path");
			path28 = svg_element("path");
			path29 = svg_element("path");
			path30 = svg_element("path");
			path31 = svg_element("path");
			if (if_block) if_block.c();
			attr_dev(path0, "fill", "var(--shirt)");
			attr_dev(path0, "d", "M267.53,74a33,33,0,0,0,3.27-1.27c2.9-1.5,4.94-1.49,6.93,1.81,1.78,3,7.74,3.33,10.72,1.29,1.51-1,2.89-2,4.87-1.2,1.06.45,2.13-.17,3.1-.55,14.19-5.57,28.9-9.52,43.43-14,1.38-.43,3.55.75,4.12-1.7h14.32c.26.38.44.93.8,1.11,7.85,3.81,14.37,9.84,22.32,13.48-1.4,5.69,2.94,7.9,6.45,10.61l5.39,4.07,3.69,2.82c2.35,1.79,4.58,3.74,7.35,4.9l7.18,5.72a4.85,4.85,0,0,1-1.14,1.7c-2.41,2.42-5.55,3.87-7.84,6.48-5.19,5.9-5.22,6.24,1.33,9.87.07,0,.08.22.11.33-.71.63-1.66,1.12-2.1,1.9-1.35,2.38-2.9,1.94-5.05,1.06-4.36-1.81-9.36-1.44-13.6-3.84-1.75-1-3.64-1.72-5.44-2.6a12.43,12.43,0,0,0-8.66-.81c-12,2.46-23.38,7.19-35.27,10-7.09,1.69-14.2.91-21.25-.47a18.81,18.81,0,0,0-6.73-.17c-9.92,1.62-20,.91-29.94,1.58-3,.2-4.76-1.82-6.29-4-.66-1-1.21-2-1.82-3a57,57,0,0,1-2.38-23.49A79.26,79.26,0,0,0,266,80.71C265.78,78.38,265.62,75.92,267.53,74Z");
			add_location(path0, file$x, 64, 8, 1012);
			attr_dev(path1, "fill", "var(--flesh)");
			attr_dev(path1, "d", "M515.78,115.57c1.38,1.07,3.13,1,4.69,1.29a4.17,4.17,0,0,1,3.18,2.3v2.15c-14.36,3.36-28.75.33-43.1,0-6.74-.15-12.94,1.57-19.27,3-8.38,1.94-16.91,2.45-25.42,3.24a3.74,3.74,0,0,1-1.77-.09c-8.17-3.44-17.26-3.1-25.5-6.23l-4.66-1.79c0-.12,0-.3-.11-.34-6.55-3.63-6.52-4-1.33-9.87,2.29-2.61,5.43-4.06,7.84-6.48a4.85,4.85,0,0,0,1.14-1.7c3.78,1.14,7.42,2.86,11.48,2.89a25,25,0,0,0,13.38,2.44c3.3-.28,6.78-.62,9.95.1,11.2,2.53,22.59,2.55,33.94,3.33,9.16.64,18.52-.23,27.33,3.54A26.58,26.58,0,0,0,515.78,115.57Z");
			add_location(path1, file$x, 68, 8, 1904);
			attr_dev(path2, "fill", "var(--flesh)");
			attr_dev(path2, "d", "M187.29,124.5c-4.58,0-9.19-.36-13.69-.47-7.53-.2-15-2.53-22.63-.69-3.58.87-7.06-.36-10.39-1.71a110.6,110.6,0,0,0-26.72-7.22c-11.43-1.57-22.28-5.79-33.36-9-.9-.26-1.84-.41-2.76-.61a50.54,50.54,0,0,0-11.37-2.79c-4.12-1-8.3-.8-12.48-.7-4.68-.73-7.42-3.76-9.22-7.85C42.23,88,44.46,83.78,50.26,83c1-.13,2-.16,1.55-1.62,4.12,0,7.91,2.18,12.08,1.93C69,85.48,74.55,86,80,86.75c1.85.25,3.77.59,5.52-.51,5.72,1.84,11.53.26,17.34.36a32.35,32.35,0,0,0-14.93-3.18c-3.3-.77-5.3-2.92-6.6-6-2.24-5.23.67-9.54,6.28-9.21.83,0,1.67,0,2.5.07,6.55,1,13.09,2.19,19.67,3,7.42.93,14.87,1.62,22.32,2.25,8.12.69,15,4.6,21.59,8.76,7.09,4.48,14.39,6.16,22.51,4.35,4.39-1,8.75-2.13,13.14-3.13,1.07-.25,2.23-1.2,3.27.1-1.15,3.39-2,7-6.69,7.26-1.39.09-1.57,1.9-1.94,3.14C180.9,104.67,183.23,114.68,187.29,124.5Z");
			add_location(path2, file$x, 72, 8, 2473);
			attr_dev(path3, "fill", "var(--pants)");
			attr_dev(path3, "d", "M187.29,124.5c-4.06-9.82-6.39-19.83-3.3-30.43.37-1.24.55-3,1.94-3.14,4.7-.31,5.54-3.87,6.69-7.26.69-1.6,2.3-1.58,3.62-1.93a112.46,112.46,0,0,1,17.11-3.53,44.19,44.19,0,0,0,16.59-5.08c9.11-4.89,18.8-5.53,28.78-3.51a17.81,17.81,0,0,1,8.81,4.4c-1.91,1.9-1.75,4.36-1.56,6.69a79.26,79.26,0,0,1-.57,14.85,57,57,0,0,0,2.38,23.49c-3.2,1.57-6.49,3-9.58,4.76-6.17,3.55-12.85,4-19.71,3.68q-23.56-.94-47.14-1.86A6.51,6.51,0,0,1,187.29,124.5Z");
			add_location(path3, file$x, 76, 8, 3323);
			attr_dev(path4, "fill", "var(--hair)");
			attr_dev(path4, "d", "M51.81,81.37c.45,1.46-.56,1.49-1.55,1.62-5.8.79-8,5-5.59,10.51,1.8,4.09,4.54,7.12,9.22,7.85.23,1.05-.58,1.43-1.21,2-1.55,1.3-3.14,2.57-4.57,4-6.8,6.74-7,8.32-2.24,16.64,2.22,3.89,1.79,4.76-2.69,5.44-6.82,1-16.29-7-16.52-14.1-.08-2.38.08-4.76.18-7.14.27-6.67.46-13.32-1.49-19.85a28.05,28.05,0,0,1-.79-6.37c-.31-5.3-.09-4.74,5-5.55C37.8,75.05,44.73,78.22,51.81,81.37Z");
			add_location(path4, file$x, 80, 8, 3822);
			attr_dev(path5, "fill", "var(--hair)");
			attr_dev(path5, "d", "M85.53,86.24c-1.75,1.1-3.67.76-5.52.51C74.55,86,69,85.48,63.89,83.3c.87-4,.51-8,0-12a47.1,47.1,0,0,1-.12-6.4c.12-5.1.41-4.89,5.54-5C76.24,59.79,82,62.33,87.55,66c1,.63,2.15,1.06,2.57,2.32-.83,0-1.67,0-2.5-.07-5.61-.33-8.52,4-6.28,9.21,1.3,3,3.3,5.18,6.6,6C88.17,85.24,86.32,85.29,85.53,86.24Z");
			add_location(path5, file$x, 84, 8, 4256);
			attr_dev(path6, "fill", "var(--hair)");
			attr_dev(path6, "d", "M66.37,102.05a50.54,50.54,0,0,1,11.37,2.79c0,1.79,1.09,4-1.61,4.75-2.48.69-5,.9-6.72-1.6A17.1,17.1,0,0,1,66.37,102.05Z");
			add_location(path6, file$x, 88, 8, 4617);
			attr_dev(path7, "fill", "var(--hair)");
			attr_dev(path7, "d", "M423,104c-4.06,0-7.7-1.75-11.48-2.89l-7.18-5.71c-1.55-4.42-3.74-8-9.31-7.5a8.06,8.06,0,0,1-1.73-.23l-5.39-4.07c.68-3,1.36-6.12,2-9.18L398.84,72c9.84-2.69,19.12,1.33,24,10.44.95,1.77,1.71,3.64,2.55,5.47a38.63,38.63,0,0,1-.78,13.72A4.71,4.71,0,0,0,423,104Z");
			add_location(path7, file$x, 92, 8, 4804);
			attr_dev(path8, "fill", "var(--flesh)");
			attr_dev(path8, "d", "M389.9,74.39c-.68,3.06-1.36,6.13-2,9.18-3.51-2.71-7.85-4.92-6.45-10.61C384.23,73.47,387,74.42,389.9,74.39Z");
			add_location(path8, file$x, 96, 8, 5127);
			attr_dev(path9, "fill", "var(--flesh)");
			attr_dev(path9, "d", "M393.25,87.64a8.06,8.06,0,0,0,1.73.23c5.57-.54,7.76,3.08,9.31,7.5-2.77-1.17-5-3.12-7.35-4.91Z");
			add_location(path9, file$x, 100, 8, 5303);
			attr_dev(path10, "fill", "var(--flesh)");
			attr_dev(path10, "d", "M424.58,101.61a38.63,38.63,0,0,0,.78-13.72c5,0,9.79,1.55,14.48,2.89,6.16,1.77,12.47.55,18.57,2a5.93,5.93,0,0,0,4.4,1.45.42.42,0,0,0,.47,0c7.74,2.58,15.94,2.53,23.86,4.07l1.93.22c.93.88.65,2.67,2.27,3v.89c-2.88,1.73-7.2-.19-9.3,3.66-.15.28-1.14.21-1.72.13-7.62-1-15.43-.77-22.75-3.63a22.28,22.28,0,0,0-10.19-1A153.56,153.56,0,0,1,424.58,101.61Z");
			add_location(path10, file$x, 104, 8, 5466);
			attr_dev(g0, "id", "flat");
			attr_dev(g0, "class", "svelte-fxqa08");
			add_location(g0, file$x, 63, 6, 990);
			attr_dev(path11, "fill", "var(--flesh)");
			attr_dev(path11, "d", "M381.11,91.62c2.83-2.73,1.93-6.91,3.87-10,.93-1.5,1.63-3.13,2.44-4.7a23.74,23.74,0,0,0,13.36,2.75c6.25-.42,11.87,1.83,17.54,3.89,2.45.89,4.88,1.84,7.31,2.76l1.43.78a94.91,94.91,0,0,0,13,5.81c3.06,1.15,6.31-.13,9.43,1.31,9.73,4.52,20.16,6.91,30.52,9.46a4,4,0,0,1,2.81,2.36c1.44,2.72.11,3.22-2.08,3.06-2-.14-3.8-.69-5.3,1.5-.87,1.26-2.77.49-4.07.14-7.42-2-15.14-2.8-22.13-6.59-4.08-2.21-9.09-1.39-13.68-1.92-8.73-1-17.52-1.54-26.21-2.76-5.5-.77-10.88-2.41-16.31-3.66-2.18-1.26-4.71-1.31-7-2.07C384.36,93.19,382.16,93.68,381.11,91.62Z");
			add_location(path11, file$x, 110, 8, 5911);
			attr_dev(path12, "fill", "var(--flesh)");
			attr_dev(path12, "d", "M56.33,39.64c-4.87-6.47-3.86-6.2.19-13.25,2.11-3.68,4.59-4.06,8.16-1.88a8.2,8.2,0,0,0,4.78.92C75.3,28.27,81.12,31.14,87,33.94c1.59.76,42.18,10.21,56.28,22.78,9.71,8.66,21.81,11.55,34.43,13,6.36.74,12.83.35,19.1,1.9a57.69,57.69,0,0,0-1.42,11.62,229.86,229.86,0,0,0,2.53,36.5c-9.64-.08-19.26-.27-28.28-4.38-1.93-.88,2,0,0,0-3.23,0-11.23-3.21-14.49-3.5-6.66-.59-19.38.8-27.5-2.11-7.14-2.56-32.78-5.88-40-8.29s-53.22-4.56-60.81-5c-5.31-2-10.11-12.28-9-16.9.95-4,65.38-5.26,72.13-4.92,14.38,2.47,28.76,4.81,43.38,5.24.21.28.45.49.72.1,0,0-.25-.29-.38-.44-2.06-3.16-5.54-4.5-8.7-5.66-14.92-5.45-27.85-14.47-41.49-22.24C75.2,47,66.37,38.8,56.33,39.64Z");
			add_location(path12, file$x, 114, 8, 6512);
			attr_dev(path13, "fill", "var(--pants)");
			attr_dev(path13, "d", "M197.89,119.76a229.86,229.86,0,0,1-2.53-36.5,57.69,57.69,0,0,1,1.42-11.62c4.72-.41,9.24.86,13.58,2.24C215,75.37,220,75,224.49,77.26c.71.35,1.3-.35,1.93-.63a59.05,59.05,0,0,1,27.37-5.18c6.73.38,12.17,3.71,17.16,7.93,2.3,5.17,2.7,10.81,3.7,16.26A134.37,134.37,0,0,1,277.32,119c0,7.66-.31,8.06-7.73,8.92a16.82,16.82,0,0,0-10.07,1.57,23,23,0,0,1-16.68,1c-12.06-3.57-24.48-4.69-36.88-5.85C202.22,124.31,199.33,123.46,197.89,119.76Z");
			add_location(path13, file$x, 118, 8, 7226);
			attr_dev(path14, "fill", "var(--hair)");
			attr_dev(path14, "d", "M35.32,97c-1.27,2.84-4.3,3.91-6.17,6.23-3.41,4.21-6.41,8.45-7,14.1-.52,5-1.6,9.87-2.32,14.82-1,6.71-1.79,7.48-8.57,7.6l-3.42-4.58c-.64-4-3.15-7.27-4.75-10.89C.21,117.74-1,111.33,1,104.19a63,63,0,0,0,2.62-23,28.85,28.85,0,0,1,.41-5.7c.77-6.12.84-5.7,6.77-6.34,8.77-1,16.4,1.94,23.94,5.7A8.25,8.25,0,0,1,30.4,77c-4.17.39-5.93,2.18-5.42,6.39C26,91.48,27.54,94.71,35.32,97Z");
			add_location(path14, file$x, 122, 8, 7722);
			attr_dev(path15, "fill", "var(--hair)");
			attr_dev(path15, "d", "M394.54,94.88,387.93,90c.49-2.83,2.06-5.53,1.11-8.55l12.21-3.83c9.5-1.66,16.21,3,20.95,10.32,4.63,7.15,5,15,.51,22.62-2.8,1.31-4.95-.86-7.38-1.45a32.83,32.83,0,0,1-4-1.54l-7.13-5.88C400.57,94.62,401.44,94.26,394.54,94.88Z");
			add_location(path15, file$x, 126, 8, 8160);
			attr_dev(path16, "fill", "var(--flesh)");
			attr_dev(path16, "d", "M495.1,47.45c-2.77.19-4.81,2-6.88,3.45-7.09,5-13.52,10.86-21,15.43-6.21,3.8-9.58,10.48-14.47,15.64-5.07,5.34-9.94,11.1-15.86,15.34-5.35,3.84-12,5.83-18.07,8.72-3.54,1.69-7,3.55-11,4.15a30.58,30.58,0,0,0-4.61.92c-1.6.56-2.36-.14-2.53-1.44-.31-2.4-.27-4.84-.54-7.25-.4-3.74,2-7.14,1.25-10.91a31.94,31.94,0,0,0,4-1.47c2.22-1.16,5.26-1,6.51-3.79,1.53,1.37,2.61-.26,3.85-.62,6.33-1.81,9.81-7.84,15.45-10.6,12.13-5.94,22.66-14.36,34-21.55a40.84,40.84,0,0,0,4.31-3.17c8.25-6.92,19-8.59,28.21-13.39a2.91,2.91,0,0,1,3.61.58c1.18,1.19.26,2.13-.52,3.08a3.87,3.87,0,0,0-.94,2.63Z");
			add_location(path16, file$x, 130, 8, 8450);
			attr_dev(path17, "fill", "var(--hair)");
			attr_dev(path17, "d", "M69.46,27.88c-5.19-4.33-6.5-4.6-9.69-1.95-3.65,3-4,8-1,12.82-.5,1.14-1.42,1-2.42.89a31.45,31.45,0,0,0-7.79.7,12.69,12.69,0,0,0-10.69,8.78c-.62,1.69-1.06,4.2-4,3.55-3.11-.69-5-3-4.65-6.19.9-7.64,2.26-15.07,8.75-20.4C43,21.94,45.74,15.92,49.59,10.8a33.25,33.25,0,0,1,3.29-3.73c.66-.66,1.57-1.27,2.55-.52C62.61,12,68.22,18.52,69.46,27.88Z");
			add_location(path17, file$x, 134, 8, 9087);
			attr_dev(path18, "fill", "var(--shirt)");
			attr_dev(path18, "d", "M411.34,107.55c-1.91,3.34-6,4.3-8.13,7.38-1.4,2-21.27,10.46-28.54,6a3.23,3.23,0,0,0-2.76-.27c-10.1,3-20.51,5-30.38,8.74-9.72,3.67-19.54,3.77-29.49,1.71a21.53,21.53,0,0,0-7.43.11c-9.12,1.2-18.34.57-27.48,1.41-3.61.33-6.13-1.4-7.54-4.73,7.42-.86,7.76-1.26,7.73-8.92a134.37,134.37,0,0,0-2.67-23.33c-1-5.45-1.4-11.09-3.7-16.26,2.67-1.68,4.59-1.69,6.63,1.41s8.48,3.48,11.65,1.15c.47-.35.95-1,1.41-1,9.69.11,17.64-5.69,26.7-7.76,10.33-2.37,19.64.22,29.34-4,14.64-1.13,28.41,3.57,32.38,4.51,8.87,2.09,14.29,3.87,13.79,6.53-1.33-.17-5.55-.86-6.45-.63-.5.21-1.11.73-1.48.6-1.68-.62-3-.32-3.51,1.43-.64,2.06-.32,4.31,1.63,5.28,1.76.88,3.59.25,5.41.94,2.2,1.64,3.89-1.43,6.09.21,4.83-1.76,13.61-3.82,16.8-1.51C418.32,83.56,409,105.59,411.34,107.55Z");
			add_location(path18, file$x, 138, 8, 9491);
			attr_dev(path19, "fill", "var(--flesh)");
			attr_dev(path19, "d", "M386.4,79.6c-.14,2.08,1.83,1.11,2.64,1.83.95,3-.62,5.72-1.11,8.55-1.82-.7-3.13-2.19-4.89-3.07-2-1-2.27-3.22-1.63-5.28.53-1.75,1.83-2,3.51-1.43C385.29,80.33,385.9,79.81,386.4,79.6Z");
			add_location(path19, file$x, 142, 8, 10298);
			attr_dev(path20, "fill", "red");
			attr_dev(path20, "d", "M133.67,79.58c.13.15.41.4.38.44-.27.39-.51.18-.72-.1Z");
			add_location(path20, file$x, 146, 8, 10547);
			attr_dev(g1, "id", "right");
			attr_dev(g1, "class", "svelte-fxqa08");
			add_location(g1, file$x, 109, 6, 5888);
			attr_dev(path21, "fill", "var(--flesh)");
			attr_dev(path21, "d", "M510.77,132c-2.21-1.68-4.94-1.67-7.46-1.94-8.62-.93-17.32-.76-25.93-2.24-7.17-1.24-14.11,1.56-21.19,2.2-7.33.67-14.79,1.79-22,1.07-6.55-.65-12.88-3.55-19.33-5.37-3.78-1.07-7.61-2-11-4.12a31.3,31.3,0,0,0-4.07-2.35c-1.57-.63-1.68-1.66-.95-2.75,1.35-2,3-3.82,4.38-5.8,2.16-3.08,6.22-4,8.13-7.38a29.84,29.84,0,0,0,4,1.54c2.43.6,4.58,2.76,7.38,1.45.25,2,2.14,1.53,3.31,2.08,6,2.81,12.54.58,18.6,2.22,13,3.55,26.51,4.18,39.76,6.24a41.37,41.37,0,0,0,5.33.46c10.76.25,19.92,6.06,30,8.55a2.92,2.92,0,0,1,2.33,2.82c.1,1.67-1.21,1.77-2.43,2a3.82,3.82,0,0,0-2.43,1.35Z");
			add_location(path21, file$x, 153, 8, 10693);
			attr_dev(path22, "fill", "var(--hair)");
			attr_dev(path22, "d", "M56.69,39.19C54,40.7,50.9,39.75,48,40.48,42.76,41.82,37.83,43.42,34,47.59c-3.4,3.67-7.2,6.95-10.74,10.48-4.79,4.79-5.91,4.92-11.41,1V53.31c1.9-3.61,1.83-7.7,2.72-11.56C16.13,34.81,19,28.93,24.9,24.46A62.85,62.85,0,0,0,40.74,7.64a28.2,28.2,0,0,1,3.74-4.31c4.28-4.45,4.08-4.07,9.22-1,7.59,4.49,12,11.38,15.76,18.89a8.2,8.2,0,0,1-4.78-.91c-3.57-2.19-6.05-1.81-8.16,1.87C52.47,29.19,51.81,32.72,56.69,39.19Z");
			add_location(path22, file$x, 157, 8, 11319);
			attr_dev(path23, "fill", "var(--shirt)");
			attr_dev(path23, "d", "M411.34,103.3c-1.91,3.34-6,4.3-8.13,7.38-1.4,2-3,3.79-4.38,5.8-.73,1.09-.62,2.12.95,2.75a31.3,31.3,0,0,1,4.07,2.35c-.91.93-1.79,1.88-2.72,2.79a2.7,2.7,0,0,1-2.88.77c-8.06-2.29-16.31-4-23.58-8.47a3.31,3.31,0,0,0-2.76-.27c-10.1,3-20.51,5-30.38,8.75-9.72,3.66-19.54,3.77-29.49,1.7a21.53,21.53,0,0,0-7.43.11c-9.12,1.2-18.34.58-27.48,1.41-3.61.33-6.13-1.4-7.54-4.72,7.42-.86,7.76-1.27,7.73-8.92a134.15,134.15,0,0,0-2.67-23.33c-1-5.46-1.4-11.1-3.7-16.27,2.67-1.68,4.59-1.68,6.63,1.41s8.48,3.48,11.65,1.15c.47-.35.95-1,1.41-1,9.69.12,17.64-5.68,26.7-7.76,10.33-2.37,20.06-6.54,29.76-10.73a18.89,18.89,0,0,1,7.67-1.4c9.65,0,19.31,0,29,0,1.19,0,2.42-.13,3.3.94,0,1.76.09,3.54-.08,5.29-.34,3.64,2.34,7,1,10.67-1.33-.17-.69,1.48-1.59,1.71-.5.22-1.11.73-1.48.6-1.68-.61-3-.31-3.51,1.43-.64,2.06-.32,4.31,1.63,5.28,1.76.88,3.07,2.38,4.89,3.07l6.61,4.9c2.38,3.46,6.48,4.48,9.67,6.79Z");
			add_location(path23, file$x, 161, 8, 11791);
			attr_dev(path24, "fill", "var(--flesh)");
			attr_dev(path24, "d", "M56.69,39.19c-4.88-6.47-4.22-10-.17-17,2.11-3.68,4.59-4.06,8.16-1.87a8.2,8.2,0,0,0,4.78.91C75.3,24,81.12,26.9,87,29.7c1.59.75,42.18,10.21,56.28,22.77,9.71,8.67,21.81,11.56,34.43,13,6.36.75,12.83.36,19.1,1.9A57.7,57.7,0,0,0,195.36,79a229.86,229.86,0,0,0,2.53,36.5c-9.64-.09-19.26-.28-28.28-4.38-1.93-.88-4-.4-6-.43a12,12,0,0,1-8.5-3.07c-6.58-6.18-15.17-8.12-23.29-11q-10.73-3.84-21.52-7.45c-7.26-2.43-14.8-3.18-22.39-3.6-5.31-2-8-6.24-6.88-10.86.95-4,2.16-4.61,8.91-4.27,14.38,2.47,28.76,4.81,43.38,5.24.21.28.45.49.72.1,0,0-.25-.28-.38-.43-2.06-3.16-5.54-4.51-8.7-5.67-14.92-5.45-27.85-14.46-41.49-22.24C75.2,42.72,66.72,38.35,56.69,39.19Z");
			add_location(path24, file$x, 165, 8, 12730);
			attr_dev(path25, "fill", "var(--pants)");
			attr_dev(path25, "d", "M197.89,115.52A229.86,229.86,0,0,1,195.36,79a57.7,57.7,0,0,1,1.42-11.63c4.72-.41,9.24.86,13.58,2.25C215,71.12,220,70.8,224.49,73c.71.35,1.3-.35,1.93-.63a58.92,58.92,0,0,1,27.37-5.17c6.73.38,12.17,3.7,17.16,7.92,2.3,5.17,2.7,10.81,3.7,16.27a134.15,134.15,0,0,1,2.67,23.33c0,7.65-.31,8.06-7.73,8.92a16.67,16.67,0,0,0-10.07,1.57,23,23,0,0,1-16.68,1c-12.06-3.56-24.48-4.68-36.88-5.84C202.22,120.07,199.33,119.22,197.89,115.52Z");
			add_location(path25, file$x, 169, 8, 13439);
			attr_dev(path26, "fill", "var(--flesh)");
			attr_dev(path26, "d", "M388,73.64c1.3-3.71-1.38-7-1-10.67.17-1.75.06-3.53.08-5.29a23.81,23.81,0,0,0,13.17-3.54c5.39-3.18,11.43-3.7,17.42-4.4,2.59-.3,5.18-.54,7.77-.81L427,49a94.27,94.27,0,0,0,14.25-.66c3.25-.34,5.58-3,9-3.06C461,44.94,471.4,42.39,481.81,40a4.05,4.05,0,0,1,3.57.84c2.51,1.78,1.54,2.83-.49,3.67-1.84.77-3.71,1.09-4.07,3.72-.21,1.51-2.25,1.69-3.57,2-7.53,1.52-14.78,4.3-22.73,4-4.64-.14-8.75,2.84-13.09,4.42-8.25,3-16.34,6.49-24.66,9.3C411.51,69.76,406,70.7,400.55,72c-2.51-.16-4.79.93-7.2,1.3C391.59,73.59,389.85,75,388,73.64Z");
			add_location(path26, file$x, 173, 8, 13931);
			attr_dev(path27, "fill", "var(--hair)");
			attr_dev(path27, "d", "M394.54,90.63l-6.61-4.9c.49-2.83,2.06-5.53,1.11-8.55l12.21-3.83c9.5-1.66,16.21,3,20.95,10.33,4.63,7.14,5,15,.51,22.61-2.8,1.31-4.95-.85-7.38-1.45a29.84,29.84,0,0,1-4-1.54l-7.13-5.88C400.57,90.37,401.44,90,394.54,90.63Z");
			add_location(path27, file$x, 177, 8, 14519);
			attr_dev(path28, "fill", "var(--hair)");
			attr_dev(path28, "d", "M90,70.43c-6.75-.34-8,.24-8.91,4.27-1.09,4.62,1.57,8.83,6.88,10.86.29,1.2-.54,1.63-1.39,2.16A31.44,31.44,0,0,0,80.72,93a12.67,12.67,0,0,0-3.26,13.43c.52,1.73,1.68,4-1.06,5.25-2.9,1.32-5.8.64-7.44-2.15-3.88-6.64-7.26-13.4-5.27-21.56,1.55-6.36.11-12.8.11-19.2a34.43,34.43,0,0,1,.38-5c.14-.92.5-2,1.73-2C74.93,61.87,83.33,63.69,90,70.43Z");
			add_location(path28, file$x, 181, 8, 14806);
			attr_dev(path29, "fill", "var(--flesh)");
			attr_dev(path29, "d", "M386.4,75.35c-.14,2.08,1.83,1.11,2.64,1.83.95,3-.62,5.72-1.11,8.55-1.82-.69-3.13-2.19-4.89-3.07-2-1-2.27-3.22-1.63-5.28.53-1.74,1.83-2,3.51-1.43C385.29,76.08,385.9,75.57,386.4,75.35Z");
			add_location(path29, file$x, 185, 8, 15209);
			attr_dev(path30, "fill", "var(--flesh)");
			attr_dev(path30, "d", "M394.54,90.63c6.9-.62,6-.26,9.67,6.79C401,95.11,396.92,94.09,394.54,90.63Z");
			add_location(path30, file$x, 189, 8, 15461);
			attr_dev(path31, "fill", "red");
			attr_dev(path31, "d", "M133.67,75.34c.13.15.41.39.38.43-.27.39-.51.18-.72-.1Z");
			add_location(path31, file$x, 193, 8, 15605);
			attr_dev(g2, "id", "left");
			attr_dev(g2, "class", "svelte-fxqa08");
			add_location(g2, file$x, 152, 6, 10671);
			attr_dev(g3, "class", "shapes svelte-fxqa08");
			add_location(g3, file$x, 62, 4, 941);
			attr_dev(g4, "class", "svelte-fxqa08");
			toggle_class(g4, "paused", /*isPaused*/ ctx[1]);
			add_location(g4, file$x, 61, 2, 909);
			attr_dev(svg, "xmlns", "http://www.w3.org/2000/svg");
			attr_dev(svg, "viewBox", "0 0 523.65 139.72");
			attr_dev(svg, "height", "100%");
			attr_dev(svg, "width", "100%");
			attr_dev(svg, "class", "svelte-fxqa08");
			add_location(svg, file$x, 60, 0, 810);
		},
		l: function claim(nodes) {
			throw new Error("options.hydrate only works if the component was compiled with the `hydratable: true` option");
		},
		m: function mount(target, anchor) {
			insert_dev(target, svg, anchor);
			append_dev(svg, t);
			append_dev(svg, g4);
			append_dev(g4, g3);
			append_dev(g3, g0);
			append_dev(g0, path0);
			append_dev(g0, path1);
			append_dev(g0, path2);
			append_dev(g0, path3);
			append_dev(g0, path4);
			append_dev(g0, path5);
			append_dev(g0, path6);
			append_dev(g0, path7);
			append_dev(g0, path8);
			append_dev(g0, path9);
			append_dev(g0, path10);
			append_dev(g3, g1);
			append_dev(g1, path11);
			append_dev(g1, path12);
			append_dev(g1, path13);
			append_dev(g1, path14);
			append_dev(g1, path15);
			append_dev(g1, path16);
			append_dev(g1, path17);
			append_dev(g1, path18);
			append_dev(g1, path19);
			append_dev(g1, path20);
			append_dev(g3, g2);
			append_dev(g2, path21);
			append_dev(g2, path22);
			append_dev(g2, path23);
			append_dev(g2, path24);
			append_dev(g2, path25);
			append_dev(g2, path26);
			append_dev(g2, path27);
			append_dev(g2, path28);
			append_dev(g2, path29);
			append_dev(g2, path30);
			append_dev(g2, path31);
			/*g3_binding*/ ctx[2](g3);
			if (if_block) if_block.m(g4, null);
		},
		p: function update(ctx, [dirty]) {
			if (/*isPaused*/ ctx[1]) {
				if (if_block) ; else {
					if_block = create_if_block$x(ctx);
					if_block.c();
					if_block.m(g4, null);
				}
			} else if (if_block) {
				if_block.d(1);
				if_block = null;
			}

			if (dirty & /*isPaused*/ 2) {
				toggle_class(g4, "paused", /*isPaused*/ ctx[1]);
			}
		},
		i: noop,
		o: noop,
		d: function destroy(detaching) {
			if (detaching) detach_dev(svg);
			/*g3_binding*/ ctx[2](null);
			if (if_block) if_block.d();
		}
	};

	dispatch_dev("SvelteRegisterBlock", {
		block,
		id: create_fragment$x.name,
		type: "component",
		source: "",
		ctx
	});

	return block;
}

function instance$x($$self, $$props, $$invalidate) {
	let { $$slots: slots = {}, $$scope } = $$props;
	validate_slots('Workout_alternatingsupermans', slots, []);
	let { isPaused = false } = $$props;
	let { rootElement } = $$props;
	const writable_props = ['isPaused', 'rootElement'];

	Object.keys($$props).forEach(key => {
		if (!~writable_props.indexOf(key) && key.slice(0, 2) !== '$$' && key !== 'slot') console.warn(`<Workout_alternatingsupermans> was created with unknown prop '${key}'`);
	});

	function g3_binding($$value) {
		binding_callbacks[$$value ? 'unshift' : 'push'](() => {
			rootElement = $$value;
			$$invalidate(0, rootElement);
		});
	}

	$$self.$$set = $$props => {
		if ('isPaused' in $$props) $$invalidate(1, isPaused = $$props.isPaused);
		if ('rootElement' in $$props) $$invalidate(0, rootElement = $$props.rootElement);
	};

	$$self.$capture_state = () => ({ isPaused, rootElement });

	$$self.$inject_state = $$props => {
		if ('isPaused' in $$props) $$invalidate(1, isPaused = $$props.isPaused);
		if ('rootElement' in $$props) $$invalidate(0, rootElement = $$props.rootElement);
	};

	if ($$props && "$$inject" in $$props) {
		$$self.$inject_state($$props.$$inject);
	}

	return [rootElement, isPaused, g3_binding];
}

class Workout_alternatingsupermans extends SvelteComponentDev {
	constructor(options) {
		super(options);
		init(this, options, instance$x, create_fragment$x, safe_not_equal, { isPaused: 1, rootElement: 0 });

		dispatch_dev("SvelteRegisterComponent", {
			component: this,
			tagName: "Workout_alternatingsupermans",
			options,
			id: create_fragment$x.name
		});

		const { ctx } = this.$$;
		const props = options.props || {};

		if (/*rootElement*/ ctx[0] === undefined && !('rootElement' in props)) {
			console.warn("<Workout_alternatingsupermans> was created without expected prop 'rootElement'");
		}
	}

	get isPaused() {
		throw new Error("<Workout_alternatingsupermans>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
	}

	set isPaused(value) {
		throw new Error("<Workout_alternatingsupermans>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
	}

	get rootElement() {
		throw new Error("<Workout_alternatingsupermans>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
	}

	set rootElement(value) {
		throw new Error("<Workout_alternatingsupermans>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
	}
}

var workoutAlternatingsupermans = /*#__PURE__*/Object.freeze({
    __proto__: null,
    'default': Workout_alternatingsupermans
});

/* src/workouts/workout-balancereaches.svelte generated by Svelte v3.49.0 */

const file$w = "src/workouts/workout-balancereaches.svelte";

// (107:0) {#if isPaused}
function create_if_block$w(ctx) {
	let svg;
	let path;

	const block = {
		c: function create() {
			svg = svg_element("svg");
			path = svg_element("path");
			attr_dev(path, "d", "M10 24h-6v-24h6v24zm10 0h-6v-24h6v24zm-11-23h-4v22h4v-22zm10 0h-4v22h4v-22z");
			add_location(path, file$w, 107, 129, 6370);
			attr_dev(svg, "viewBox", "-6 -5 36 36");
			attr_dev(svg, "width", "100%");
			attr_dev(svg, "height", "100%");
			attr_dev(svg, "xmlns", "http://www.w3.org/2000/svg");
			attr_dev(svg, "fill-rule", "evenodd");
			attr_dev(svg, "clip-rule", "evenodd");
			add_location(svg, file$w, 107, 0, 6241);
		},
		m: function mount(target, anchor) {
			insert_dev(target, svg, anchor);
			append_dev(svg, path);
		},
		d: function destroy(detaching) {
			if (detaching) detach_dev(svg);
		}
	};

	dispatch_dev("SvelteRegisterBlock", {
		block,
		id: create_if_block$w.name,
		type: "if",
		source: "(107:0) {#if isPaused}",
		ctx
	});

	return block;
}

function create_fragment$w(ctx) {
	let svg;
	let g3;
	let g2;
	let g0;
	let path0;
	let path1;
	let path2;
	let path3;
	let path4;
	let path5;
	let g1;
	let path6;
	let path7;
	let path8;
	let path9;
	let path10;
	let path11;
	let path12;
	let if_block = /*isPaused*/ ctx[1] && create_if_block$w(ctx);

	const block = {
		c: function create() {
			svg = svg_element("svg");
			g3 = svg_element("g");
			g2 = svg_element("g");
			g0 = svg_element("g");
			path0 = svg_element("path");
			path1 = svg_element("path");
			path2 = svg_element("path");
			path3 = svg_element("path");
			path4 = svg_element("path");
			path5 = svg_element("path");
			g1 = svg_element("g");
			path6 = svg_element("path");
			path7 = svg_element("path");
			path8 = svg_element("path");
			path9 = svg_element("path");
			path10 = svg_element("path");
			path11 = svg_element("path");
			path12 = svg_element("path");
			if (if_block) if_block.c();
			attr_dev(path0, "fill", "var(--hair)");
			attr_dev(path0, "d", "M125 35c-2-8-4-16-4-23 1-5 5-10 10-11 1 0 3 1 5-1h6l4 1 5 1h3c3 0 4 1 3 3a7 7 0 0 1-3 5l-4-2c-2 0-4 1-3 3s0 3-2 3a6 6 0 0 0-3 5 7 7 0 0 1-3 6c-2 1-3 0-4-2a9 9 0 0 0 0-2c-1-2-3-3-5-2s-2 2-1 5a38 38 0 0 1 0 6c1 2-2 5-4 5ZM144 265l-7-1-9-1c-2 0-3-1-2-3l1-9c0-2 1-4 3-4 1 1 2 3 5 2 2 0 5 0 7-2a4 4 0 0 1 4 1 55 55 0 0 0 13 6 15 15 0 0 0 6 1l3 1-1 4c-2 3-6 4-9 4l-4 1ZM119 227a99 99 0 0 0 4 19 13 13 0 0 1 0 2c1 3-1 4-3 3-7-3-12-7-15-14l-6-12v-1c4-2 8-5 13-6 0 3-1 5 2 6 1 1 3 3 5 3Z");
			add_location(path0, file$w, 50, 8, 1008);
			attr_dev(path1, "fill", "var(--shirt)");
			attr_dev(path1, "d", "M118 142c-2-1-2-3-2-5 0-12-2-25-4-37l-3-21c0-6-1-11 1-17 2-9 6-17 14-23a26 26 0 0 1 12 7 47 47 0 0 0 6 4c1 4 3 6 6 9a26 26 0 0 1 6 15v17a481 481 0 0 0 11 43c1 4 1 4-3 6 0-1-1-2-2-1l-6 1a51 51 0 0 1-2-6l-8-22-3-8a10 10 0 0 1-3-7l1-9-2-9-1-1-7 1c-1 1-2 3-5 3-4 0-5 2-3 6a19 19 0 0 1 2 8 13 13 0 0 0 1 6l9 18 6 14c2 3 4 6 4 9-6 2-11 2-17 1l-8-2Z");
			add_location(path1, file$w, 54, 8, 1555);
			attr_dev(path2, "fill", "var(--flesh)");
			attr_dev(path2, "d", "M119 227c-2 0-4-2-5-3-3-1-2-3-2-6l9-9 8-8c4-2 3-6 2-10v-9c6 3 12 1 18 1l2-2v-3l2-1h13l1 9c1 6 0 7-5 10l-13 7c-3 2-4 5-4 8l-3 20a30 30 0 0 0 0 16c-2 2-5 2-7 2-3 1-4-1-5-2a161 161 0 0 0-3-26l-1-2a3 3 0 0 0-2 2l-5 6ZM143 143c0-4-2-6-4-9l-6-14-9-18a13 13 0 0 1-1-6 19 19 0 0 0-2-8c-2-4-1-6 4-6 2 0 3-2 5-3l6-1 1 1 2 9-1 9a10 10 0 0 0 3 7l3 8 8 22a49 49 0 0 0 2 6 6 6 0 0 0 1 3c3 7 7 12 9 20a2 2 0 0 0 1 1 3 3 0 0 1 1 3c-2 0-1 1-1 1v4c0 1 0 3-2 3l-1-2-1-6-1 7-1 2-2-2a19 19 0 0 0-1-6l-1 5c0 1 1 3-2 3l-1-3v-8h-1a24 24 0 0 0 0 6l-1 2-2-1a3 3 0 0 1-1-1c0-5 1-10-2-15a2 2 0 0 1 0-1 12 12 0 0 0 1-6c-1-2 0-5-3-6Z");
			add_location(path2, file$w, 58, 8, 1967);
			attr_dev(path3, "fill", "var(--pants)");
			attr_dev(path3, "d", "M143 143c3 1 2 4 3 6a12 12 0 0 1-1 6 2 2 0 0 0 0 1c3 5 2 10 2 15a3 3 0 0 0 1 1c0 1 1 2 2 1l1-2a24 24 0 0 1 0-6h1v8l1 3c3 0 2-2 2-3l1-5a19 19 0 0 1 1 6c0 1 0 2 2 2s1-1 1-2l1-7 1 6c0 1 0 2 2 2l1-3v-4s-1-1 1-1l1 8-1 2h-13l-2 1v3l-2 2c-6 0-12 2-18-1-5-5-5-12-7-18-2-7-5-14-6-22 3-1 6 1 8 2 6 1 11 1 17-1Z");
			add_location(path3, file$w, 62, 8, 2640);
			attr_dev(path4, "fill", "var(--flesh)");
			attr_dev(path4, "d", "M142 50a47 47 0 0 1-6-4 26 26 0 0 0-12-7l1-4c2 0 5-3 4-5a38 38 0 0 0 0-6c-1-3-1-4 1-5s4 0 5 2a9 9 0 0 1 0 2c1 2 2 3 4 2a7 7 0 0 0 3-6 6 6 0 0 1 3-5c2 0 3-1 2-3s1-3 3-3l5 2c-1 2 1 4 1 6a10 10 0 0 1 0 2c-1 3 0 6 2 8v3l-1 5c0 1 0 3-2 4l-1 1c0 3-1 4-4 4-6-1-7 0-8 6v1Z");
			add_location(path4, file$w, 66, 8, 3010);
			attr_dev(path5, "fill", "var(--pants)");
			attr_dev(path5, "d", "M165 164a2 2 0 0 1-2-1c-1-8-5-13-8-20a6 6 0 0 1-1-3l6-1c1-1 2 0 2 1l3 24Z");
			add_location(path5, file$w, 70, 8, 3344);
			attr_dev(g0, "id", "standing");
			attr_dev(g0, "class", "svelte-1hplzz5");
			add_location(g0, file$w, 49, 6, 982);
			attr_dev(path6, "fill", "var(--flesh)");
			attr_dev(path6, "d", "m236 103 18 4c6 1 11 3 17 3 7 2 13 3 20 1 5-1 11 0 17 2l4 2v1l-7 1h-12l-1 1 1 1 5 1 2 2a2 2 0 0 1-3 1c-6-1-13 0-18-4a7 7 0 0 0-4-1l-26-1-20-1h-1l5-7 3-6Z");
			add_location(path6, file$w, 76, 8, 3527);
			attr_dev(path7, "fill", "var(--shirt)");
			attr_dev(path7, "d", "m236 103-3 6-5 7c-1 3-4 4-8 3h-19c-4 0-7 1-9 4-5 7-12 10-20 12-11 1-22 2-32 5h-3l-3-9a7 7 0 0 1 5-4l13-3c2 0 3-2 2-3l-5-14-3-1a153 153 0 0 1-14 8c-4 2-6 5-8 7a24 24 0 0 1-8-6c-2-3-4-5-7-6l1-1 4-1c11 1 21-3 30-8l12-7 11-3a191 191 0 0 1 20 0 3 3 0 0 1 2 1c-3 2-3 6-3 10a26 26 0 0 0 3 14h2a29 29 0 0 1 9-8c2-1 5-1 7 1 1 1 2 4 4 3a54 54 0 0 0 8-2l2-2c3 1 4-1 4-3a2 2 0 0 1 3-2l6 1 2 1Z");
			add_location(path7, file$w, 80, 8, 3750);
			attr_dev(path8, "fill", "var(--flesh)");
			attr_dev(path8, "d", "m144 162 4 11 6 20a10 10 0 0 1-2 9c-3 4-4 9-4 14-1 7-4 13-6 20a18 18 0 0 0 0 10 13 13 0 0 1-6 2c-2 0-4 0-5-2l-1-26a29 29 0 0 1 6-20c3-4 2-6-1-10l-11-17a11 11 0 0 1-1-2 15 15 0 0 1 7-4c5-1 10-2 14-5ZM124 121c2-2 4-5 8-7a153 153 0 0 0 14-7c1-1 2-1 3 1l5 13c1 1 0 3-2 3l-13 3a7 7 0 0 0-5 4l-2 1-17 15-8 8c-2 1-4 3-5 6-1 6-5 10-10 13-2 1-5 0-6-3-1-2-4-4-4-7 0-2 0-3 2-3 2-1 5-2 5-5a10 10 0 0 0 3-2c5-3 8-7 12-11l20-22Z");
			add_location(path8, file$w, 84, 8, 4201);
			attr_dev(path9, "fill", "var(--pants)");
			attr_dev(path9, "d", "m124 121-20 22c-4 4-7 8-12 11a10 10 0 0 1-3 2l-5 1c-1 1-2 1-2-1a43 43 0 0 0-1-4c-2-7-4-13-8-19l2-2 13-7c4-2 8-4 11-8a16 16 0 0 1 10-7c3 1 5 3 7 6a24 24 0 0 0 8 6Z");
			add_location(path9, file$w, 88, 8, 4685);
			attr_dev(path10, "fill", "var(--flesh)");
			attr_dev(path10, "d", "M228 101a2 2 0 0 0-3 2c0 2-1 4-4 3l-2 2a54 54 0 0 1-8 2c-2 1-3-2-4-3-2-2-5-3-7-1a29 29 0 0 0-9 8h-2a26 26 0 0 1-3-14c0-4 0-8 3-10 4 0 6-3 10-4 1 2 4 2 6 0l4-5c1-1 3-2 4-1s2 3 1 5a9 9 0 0 1-1 2c-2 1 0 2 1 3a7 7 0 0 0 6-1 6 6 0 0 1 6-1c1 0 2 1 3-1a2 2 0 0 1 4 0 6 6 0 0 1 1 5c-3 2-4 6-7 7-1 1 0 1 1 2ZM73 133c4 6 6 12 8 19H69a8 8 0 0 1-6-1c-9-5-19-6-29-8l-9-1c-3-1-6 1-9 2-3-6-3-7 1-10a100 100 0 0 0 22-2c7-2 13-1 19 2 5 3 10 3 15-1Z");
			add_location(path10, file$w, 92, 8, 4917);
			attr_dev(path11, "fill", "var(--pants)");
			attr_dev(path11, "d", "m107 155 8-8 17-15 2-1 3 9 7 19v3c-4 3-9 4-14 5a15 15 0 0 0-7 4c-3 1-3 0-5-2l-11-14Z");
			add_location(path11, file$w, 96, 8, 5418);
			attr_dev(path12, "fill", "var(--hair)");
			attr_dev(path12, "d", "M234 92a6 6 0 0 0-1-5 2 2 0 0 0-4 0c-1 2-2 1-3 1a6 6 0 0 0-6 1 7 7 0 0 1-6 1c-2-1-3-2-1-3a9 9 0 0 0 1-2c1-2 1-4-1-5s-3 0-4 1l-4 5c-1 2-5 2-6 0 4-6 8-12 14-17 4-3 9-3 13 1a75 75 0 0 1 11 11 4 4 0 0 1 1 3 4 4 0 0 0 2 3c2 1 2 3-1 4a9 9 0 0 1-5 1ZM131 246c1 2 3 2 5 2a13 13 0 0 0 6-2 3 3 0 0 1 3 0 58 58 0 0 0 11 6 19 19 0 0 0 8 1c1 0 2 0 3 2s-1 2-1 3a13 13 0 0 1-7 4 37 37 0 0 1-16 1 59 59 0 0 0-10-1 12 12 0 0 1-3 0c-4-1-4-1-3-5l1-7c0-2 0-4 3-4ZM17 134c-4 3-4 4-1 10l-4 8c-2 4-4 7-4 12a2 2 0 0 1-2 2l-2-1a12 12 0 0 1-4-7 33 33 0 0 1 1-12 72 72 0 0 0 2-14c0-2 1-2 3-2l8 2 3 2Z");
			add_location(path12, file$w, 100, 8, 5572);
			attr_dev(g1, "id", "balance-right");
			attr_dev(g1, "class", "svelte-1hplzz5");
			add_location(g1, file$w, 75, 6, 3496);
			attr_dev(g2, "class", "shapes svelte-1hplzz5");
			add_location(g2, file$w, 48, 4, 933);
			attr_dev(g3, "class", "svelte-1hplzz5");
			toggle_class(g3, "paused", /*isPaused*/ ctx[1]);
			toggle_class(g3, "flip", /*flipsvg*/ ctx[2]);
			add_location(g3, file$w, 47, 2, 880);
			attr_dev(svg, "xmlns", "http://www.w3.org/2000/svg");
			attr_dev(svg, "viewBox", "0 0 312 265.4");
			attr_dev(svg, "height", "100%");
			attr_dev(svg, "width", "100%");
			attr_dev(svg, "class", "svelte-1hplzz5");
			add_location(svg, file$w, 46, 0, 786);
		},
		l: function claim(nodes) {
			throw new Error("options.hydrate only works if the component was compiled with the `hydratable: true` option");
		},
		m: function mount(target, anchor) {
			insert_dev(target, svg, anchor);
			append_dev(svg, g3);
			append_dev(g3, g2);
			append_dev(g2, g0);
			append_dev(g0, path0);
			append_dev(g0, path1);
			append_dev(g0, path2);
			append_dev(g0, path3);
			append_dev(g0, path4);
			append_dev(g0, path5);
			append_dev(g2, g1);
			append_dev(g1, path6);
			append_dev(g1, path7);
			append_dev(g1, path8);
			append_dev(g1, path9);
			append_dev(g1, path10);
			append_dev(g1, path11);
			append_dev(g1, path12);
			/*g2_binding*/ ctx[4](g2);
			if (if_block) if_block.m(g3, null);
		},
		p: function update(ctx, [dirty]) {
			if (/*isPaused*/ ctx[1]) {
				if (if_block) ; else {
					if_block = create_if_block$w(ctx);
					if_block.c();
					if_block.m(g3, null);
				}
			} else if (if_block) {
				if_block.d(1);
				if_block = null;
			}

			if (dirty & /*isPaused*/ 2) {
				toggle_class(g3, "paused", /*isPaused*/ ctx[1]);
			}

			if (dirty & /*flipsvg*/ 4) {
				toggle_class(g3, "flip", /*flipsvg*/ ctx[2]);
			}
		},
		i: noop,
		o: noop,
		d: function destroy(detaching) {
			if (detaching) detach_dev(svg);
			/*g2_binding*/ ctx[4](null);
			if (if_block) if_block.d();
		}
	};

	dispatch_dev("SvelteRegisterBlock", {
		block,
		id: create_fragment$w.name,
		type: "component",
		source: "",
		ctx
	});

	return block;
}

function instance$w($$self, $$props, $$invalidate) {
	let { $$slots: slots = {}, $$scope } = $$props;
	validate_slots('Workout_balancereaches', slots, []);
	let { direction = "right" } = $$props;
	let { isPaused = false } = $$props;
	let { rootElement } = $$props;
	let flipsvg = false;

	if (direction == "left") {
		flipsvg = true;
	}

	const writable_props = ['direction', 'isPaused', 'rootElement'];

	Object.keys($$props).forEach(key => {
		if (!~writable_props.indexOf(key) && key.slice(0, 2) !== '$$' && key !== 'slot') console.warn(`<Workout_balancereaches> was created with unknown prop '${key}'`);
	});

	function g2_binding($$value) {
		binding_callbacks[$$value ? 'unshift' : 'push'](() => {
			rootElement = $$value;
			$$invalidate(0, rootElement);
		});
	}

	$$self.$$set = $$props => {
		if ('direction' in $$props) $$invalidate(3, direction = $$props.direction);
		if ('isPaused' in $$props) $$invalidate(1, isPaused = $$props.isPaused);
		if ('rootElement' in $$props) $$invalidate(0, rootElement = $$props.rootElement);
	};

	$$self.$capture_state = () => ({
		direction,
		isPaused,
		rootElement,
		flipsvg
	});

	$$self.$inject_state = $$props => {
		if ('direction' in $$props) $$invalidate(3, direction = $$props.direction);
		if ('isPaused' in $$props) $$invalidate(1, isPaused = $$props.isPaused);
		if ('rootElement' in $$props) $$invalidate(0, rootElement = $$props.rootElement);
		if ('flipsvg' in $$props) $$invalidate(2, flipsvg = $$props.flipsvg);
	};

	if ($$props && "$$inject" in $$props) {
		$$self.$inject_state($$props.$$inject);
	}

	return [rootElement, isPaused, flipsvg, direction, g2_binding];
}

class Workout_balancereaches extends SvelteComponentDev {
	constructor(options) {
		super(options);

		init(this, options, instance$w, create_fragment$w, safe_not_equal, {
			direction: 3,
			isPaused: 1,
			rootElement: 0
		});

		dispatch_dev("SvelteRegisterComponent", {
			component: this,
			tagName: "Workout_balancereaches",
			options,
			id: create_fragment$w.name
		});

		const { ctx } = this.$$;
		const props = options.props || {};

		if (/*rootElement*/ ctx[0] === undefined && !('rootElement' in props)) {
			console.warn("<Workout_balancereaches> was created without expected prop 'rootElement'");
		}
	}

	get direction() {
		throw new Error("<Workout_balancereaches>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
	}

	set direction(value) {
		throw new Error("<Workout_balancereaches>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
	}

	get isPaused() {
		throw new Error("<Workout_balancereaches>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
	}

	set isPaused(value) {
		throw new Error("<Workout_balancereaches>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
	}

	get rootElement() {
		throw new Error("<Workout_balancereaches>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
	}

	set rootElement(value) {
		throw new Error("<Workout_balancereaches>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
	}
}

var workoutBalancereaches = /*#__PURE__*/Object.freeze({
    __proto__: null,
    'default': Workout_balancereaches
});

/* src/workouts/workout-bicycles.svelte generated by Svelte v3.49.0 */

const file$v = "src/workouts/workout-bicycles.svelte";

// (106:4) {#if isPaused}
function create_if_block$v(ctx) {
	let svg;
	let path;

	const block = {
		c: function create() {
			svg = svg_element("svg");
			path = svg_element("path");
			attr_dev(path, "d", "M10 24h-6v-24h6v24zm10 0h-6v-24h6v24zm-11-23h-4v22h4v-22zm10 0h-4v22h4v-22z");
			add_location(path, file$v, 106, 133, 7863);
			attr_dev(svg, "viewBox", "-6 -5 36 36");
			attr_dev(svg, "width", "100%");
			attr_dev(svg, "height", "100%");
			attr_dev(svg, "xmlns", "http://www.w3.org/2000/svg");
			attr_dev(svg, "fill-rule", "evenodd");
			attr_dev(svg, "clip-rule", "evenodd");
			add_location(svg, file$v, 106, 4, 7734);
		},
		m: function mount(target, anchor) {
			insert_dev(target, svg, anchor);
			append_dev(svg, path);
		},
		d: function destroy(detaching) {
			if (detaching) detach_dev(svg);
		}
	};

	dispatch_dev("SvelteRegisterBlock", {
		block,
		id: create_if_block$v.name,
		type: "if",
		source: "(106:4) {#if isPaused}",
		ctx
	});

	return block;
}

function create_fragment$v(ctx) {
	let svg;
	let g3;
	let g2;
	let g0;
	let path0;
	let path1;
	let path2;
	let path3;
	let path4;
	let path5;
	let g1;
	let path6;
	let path7;
	let path8;
	let path9;
	let path10;
	let path11;
	let path12;
	let path13;
	let if_block = /*isPaused*/ ctx[1] && create_if_block$v(ctx);

	const block = {
		c: function create() {
			svg = svg_element("svg");
			g3 = svg_element("g");
			g2 = svg_element("g");
			g0 = svg_element("g");
			path0 = svg_element("path");
			path1 = svg_element("path");
			path2 = svg_element("path");
			path3 = svg_element("path");
			path4 = svg_element("path");
			path5 = svg_element("path");
			g1 = svg_element("g");
			path6 = svg_element("path");
			path7 = svg_element("path");
			path8 = svg_element("path");
			path9 = svg_element("path");
			path10 = svg_element("path");
			path11 = svg_element("path");
			path12 = svg_element("path");
			path13 = svg_element("path");
			if (if_block) if_block.c();
			attr_dev(path0, "fill", "var(--shirt)");
			attr_dev(path0, "d", "M70 48c1 1 0 3-1 5-1 1-1 3 1 4a4 4 0 0 1 1 1l13 4c1 0 10 2 11 1l3-1 1 3a37 37 0 0 0 0 14c0 3 1 7 3 9a8 8 0 0 1 3 5 2 2 0 0 0 2 2 11 11 0 0 1 5 2l-2 1c-3 2-6 3-10 1a132 132 0 0 0-19 0l-29 2h-7c-4-1-5-5-7-4a5 5 0 0 1-1 0c-3 0-4 0-5-2a22 22 0 0 1 3 0l1-2a3 3 0 0 1 2-3c4-2 4-6 1-8-3-3-6-6-10-7l-2-1a2 2 0 0 1 2 0 2 2 0 0 0 3-1 16 16 0 0 1 1-1 3 3 0 0 0 4-1 6 6 0 0 1 3-1 57 57 0 0 0 10-2 3 3 0 0 0 2-3 12 12 0 0 0-1-5 26 26 0 0 1-2-8 4 4 0 0 1 2-3 5 5 0 0 0 3-4 7 7 0 0 1 3-4l1 3 3 4a8 8 0 0 0 7 0 6 6 0 0 1 2 0Z");
			add_location(path0, file$v, 51, 6, 1019);
			attr_dev(path1, "fill", "var(--flesh)");
			attr_dev(path1, "d", "M70 48a6 6 0 0 0-2 0 8 8 0 0 1-7 0l-3-4-1-3a1 1 0 0 0 1-1l2-5-5 2a30 30 0 0 0-10 6v2c1 1 2 2 1 4a1 1 0 0 0 0 1 22 22 0 0 1 3 3 26 26 0 0 0 2 7 12 12 0 0 1 1 5 3 3 0 0 1-2 3 57 57 0 0 1-10 2 6 6 0 0 0-3 1 3 3 0 0 1-4 1l-2-4-2-1a16 16 0 0 0-3-1 11 11 0 0 1-5 0c-2-1-5 1-5 4a18 18 0 0 1 1 3l1 1h9l2 1c4 1 7 4 10 7 3 2 3 6-1 8a3 3 0 0 0-2 3l-1 2a22 22 0 0 0-3 0l-5-1c-8-1-15-4-23-7l-2-1a22 22 0 0 0-2-4v-4l3-6a62 62 0 0 1 6-10 1 1 0 0 0 1-1 6 6 0 0 1 0-4 4 4 0 0 0 0-4 24 24 0 0 1-1-5v-1l2 1c1 1 0 2 2 3a31 31 0 0 1 1 4v1l3 1 2 3c1 1 3 2 4 1h5v-2c-2-1-4-3-3-6a8 8 0 0 0-1-3 2 2 0 0 1 2-3 45 45 0 0 1 5-2 10 10 0 0 0 8-6 4 4 0 0 0 0-4 31 31 0 0 0 10-5 53 53 0 0 1 18-10l4-1a3 3 0 0 1 3 0 17 17 0 0 1 3 4 6 6 0 0 1 0 6 77 77 0 0 0-3 9 42 42 0 0 1-4 10ZM96 51l-1-6-4-18a19 19 0 0 1 2-12c1-2 4-3 6-3h3a12 12 0 0 1 9 3l11 6 18 9a20 20 0 0 0 9 2 6 6 0 0 0 2 2 1 1 0 0 1 1 0 13 13 0 0 1 1 5 3 3 0 0 1-2 3 9 9 0 0 1-4 0 6 6 0 0 0-2 0h-2l-13-3a10 10 0 0 0-4 0 15 15 0 0 1-9 0l-2-1 1 1 9 12v1l2 6c1 1 1 1-1 1l-9 1c-6 1-6 1-8-4a3 3 0 0 0-3-2 13 13 0 0 1-4 0l-6-3Z");
			add_location(path1, file$v, 55, 6, 1590);
			attr_dev(path2, "fill", "var(--pants)");
			attr_dev(path2, "d", "m96 51 6 3a13 13 0 0 0 4 0 3 3 0 0 1 3 2c2 5 2 4 8 4l9-1c2 0 2 0 1-1l-2-6 2 1 2 1c3-2 6-2 9-2v3a40 40 0 0 0-1 5c0 1 1 2 2 1l1 1a8 8 0 0 1-1 3c-2 4-1 7 2 9 1 1 2 2 3 1a6 6 0 0 1 3-1 5 5 0 0 1-1 2 3 3 0 0 1-3 2c-3 0-4 1-6 3a2 2 0 0 1-2 1 3 3 0 0 0-4 2l-2 5c-2 4-5 6-9 7a70 70 0 0 1-8 1 11 11 0 0 0-5-2 2 2 0 0 1-2-2 8 8 0 0 0-3-5c-2-2-3-6-3-9a37 37 0 0 1 0-14l-1-3-1-3a1 1 0 0 1 0-1 14 14 0 0 0-1-7Z");
			add_location(path2, file$v, 59, 6, 2700);
			attr_dev(path3, "fill", "var(--flesh)");
			attr_dev(path3, "d", "M147 74a6 6 0 0 0-3 1c-1 1-2 0-3-1-3-2-4-5-2-9a8 8 0 0 0 1-3l-1-1c-1 1-2 0-2-1a40 40 0 0 1 1-5v-3a3 3 0 0 1 1 0 54 54 0 0 1 8-1l3-1c2 0 2 1 3 2a2 2 0 0 0 3 1 11 11 0 0 0 3-4l4-5h1l4-1a12 12 0 0 1 4-1c3 0 5-1 8-3a148 148 0 0 1 15-6c6-3 11-5 16-10l1-1h2c2 1 3 5 3 7a11 11 0 0 1-3 5l-1 1-4 2-14 10a16 16 0 0 1-3 3l-11 5-8 2c-4 1-8 4-11 6l-15 11Z");
			add_location(path3, file$v, 63, 6, 3159);
			attr_dev(path4, "fill", "var(--hair)");
			attr_dev(path4, "d", "m163 44-4 5a11 11 0 0 1-3 4 2 2 0 0 1-3-1c-1-1-1-2-3-2a10 10 0 0 1-3-4 5 5 0 0 0-2-3v-1a6 6 0 0 1 2 0 9 9 0 0 0 4 0 3 3 0 0 0 2-3 13 13 0 0 0-1-5 1 1 0 0 0-1 0 6 6 0 0 1-2-2l2-1a30 30 0 0 0 5-1 19 19 0 0 0 10-5 39 39 0 0 1 3-3c2-1 4-1 5 2 1 4 0 7-2 10a27 27 0 0 1-9 10ZM213 35l1-1a11 11 0 0 0 3-5c0-2-1-6-3-7h-2c-1 0-2 0-1-1 4-3 6-7 8-12a15 15 0 0 0 2-3 20 20 0 0 1 1-3c0-1 1-3 3-3s3 2 3 3a15 15 0 0 1 1 11 46 46 0 0 0-1 16 8 8 0 0 1 0 5l-2 1-9-2a1 1 0 0 0-2 1 2 2 0 0 1-2 0ZM39 35a4 4 0 0 1 0 4 10 10 0 0 1-8 6 45 45 0 0 0-5 2 2 2 0 0 0-2 3 8 8 0 0 1 1 3c-1 3 1 5 3 6v2h-5c-1 1-3 0-3-1l-3-3-3-1v-1a31 31 0 0 0-1-4l-1-2 1-3a3 3 0 0 0 2-3 4 4 0 0 1 1-2c4-4 8-6 13-6l5-1h4a7 7 0 0 1 1 1Z");
			add_location(path4, file$v, 67, 6, 3563);
			attr_dev(path5, "fill", "var(--pants)");
			attr_dev(path5, "d", "M125 51v1-1Z");
			add_location(path5, file$v, 71, 6, 4309);
			attr_dev(g0, "id", "bike-left");
			attr_dev(g0, "class", "svelte-1yevd9i");
			add_location(g0, file$v, 50, 4, 994);
			attr_dev(path6, "fill", "var(--hair)");
			attr_dev(path6, "d", "M158 0a7 7 0 0 1 3 5c2 6 2 11-2 17l-2 7-2 8a11 11 0 0 1 0 2c-1 3-2 3-5 2a3 3 0 0 0-1-1 11 11 0 0 1-8-2 3 3 0 0 0-2-1l-1-1a6 6 0 0 1 2-1 5 5 0 0 0 2-7 4 4 0 0 1 0-3l-1-1a5 5 0 0 1-3-1 2 2 0 0 1 0-1h1a2 2 0 0 0 1-1h1v-1h1a11 11 0 0 0 3-2v-1l1-1a26 26 0 0 0 7-11 8 8 0 0 1 3-5ZM223 34a5 5 0 0 1 1-4c4-4 6-9 7-14l2-6c1-3 3-4 6-1 2 2 3 5 3 8l1 2v6a23 23 0 0 0-2 8v10c0 3-1 4-4 4l-10-1a7 7 0 0 1-1-1l3-2c2-1 3-2 1-5a10 10 0 0 0-7-4Z");
			add_location(path6, file$v, 74, 6, 4394);
			attr_dev(path7, "fill", "var(--shirt)");
			attr_dev(path7, "d", "M22 74a16 16 0 0 1-1-4c1-3 2-4 4-3h1l2 1 2 3c1 1 1 2 3 1a43 43 0 0 1 4-3 23 23 0 0 0 6-5 3 3 0 0 0 1-1 16 16 0 0 1 3-8l1-1c1-1 1-3 3-3h1l3-6 2 1 3 3a30 30 0 0 0 5 6 3 3 0 0 0 3 1v3a7 7 0 0 0-1 1 1 1 0 0 0 0 2l3 1a2 2 0 0 1 3 1l8 1a74 74 0 0 0 8 0l1 2 5 4c4 3 8 6 9 11a97 97 0 0 1 3 16l-9 3a4 4 0 0 1-3 0 7 7 0 0 0-5-1 55 55 0 0 1-16 1l-24-5-9-4a53 53 0 0 1-8-3 8 8 0 0 1-3-3 3 3 0 0 1-1-2c1-2 0-3-1-3a7 7 0 0 1-4-4l-2-3Z");
			add_location(path7, file$v, 78, 6, 4881);
			attr_dev(path8, "fill", "var(--pants)");
			attr_dev(path8, "d", "M107 98a97 97 0 0 0-3-16c-1-5-5-8-9-11l-5-4-1-2a1 1 0 0 0 0-1c-2-1-1-2-1-3 2-2 2-2-1-4l-1-1a2 2 0 0 1-1-3 8 8 0 0 0-1-4l-2-5v-4a16 16 0 0 0 7 4c6 2 13 1 19 0 2 0 2 1 3 2a24 24 0 0 0 3 5l2 2c3 1 4 4 4 6s1 3 4 3l9-1a10 10 0 0 1 5 0l4 6a108 108 0 0 1 2 13c1 2 1 4-1 5-5 3-11 5-16 9a51 51 0 0 0-5 5 3 3 0 0 1-2 1l-12-1-1-1Z");
			add_location(path8, file$v, 82, 6, 5363);
			attr_dev(path9, "fill", "var(--flesh)");
			attr_dev(path9, "d", "M68 56a3 3 0 0 1-2-1 30 30 0 0 1-6-6l-3-3-2-1 3-6-6 2-9 4c-1 0-2 0-1 1a3 3 0 0 1 1 3v1c3 1 3 3 4 5a16 16 0 0 0-3 8 3 3 0 0 1-1 1 23 23 0 0 1-6 5 43 43 0 0 0-4 3c-2 1-2 0-3-1l-2-3-2-1h-1c-2-1-3 0-4 3a16 16 0 0 0 1 4l-7-2a4 4 0 0 1-3-5 54 54 0 0 1 1-7 20 20 0 0 0-1-4l1-6h1a13 13 0 0 1 7-3v-1a2 2 0 0 0-1 0 16 16 0 0 0-3 1l-2-1 1-1a12 12 0 0 1 2-1 62 62 0 0 0 8-2 19 19 0 0 1 6-2 4 4 0 0 0 3-1l5-3a71 71 0 0 0 9-5 7 7 0 0 0 1 0c6-4 12-6 19-9a4 4 0 0 1 4 1c2 2 4 5 3 8l-2 12c-1 5-4 9-6 13Zm-36 7c-2-1-1-2-1-4a12 12 0 0 1 1-3c1 0 2-1 1-2h-2a6 6 0 0 0-3 2l-3 2a4 4 0 0 0-2 5l4 4a1 1 0 0 0 1-1 35 35 0 0 0 4-3Zm7-16c-1 4 0 5 3 6Zm-6 15c3-1 3-2 2-4l-2 4ZM21 50a11 11 0 0 0-4 2v1h1l3-3Zm1 6-2 1v1a1 1 0 0 0 1 0l1-2ZM143 85c2-1 2-3 1-5a108 108 0 0 0-2-13c-1-2-2-5-4-6a1 1 0 0 1 0-1l15-4a45 45 0 0 1 7 0 3 3 0 0 0 2-1 9 9 0 0 1 5-1l10-1c4 0 7-2 11-3l17-6a47 47 0 0 0 18-10 10 10 0 0 1 7 4c2 3 1 4-1 5l-3 2-14 7-8 5c-4 3-8 6-13 7a39 39 0 0 1-10 2c-6-1-11 2-16 5l-21 14h-1ZM108 44c-6 1-13 2-19 0a16 16 0 0 1-7-4l-2-6c-2-5-3-11-1-17v-1a14 14 0 0 1 2-1c5-2 10-3 15 0a7 7 0 0 0 2 0v1h1l4 1c5 0 9 2 14 3a12 12 0 0 0 3 1h1a2 2 0 0 0 1 0c5 2 11 3 16 2a5 5 0 0 0 3 1l1 1a4 4 0 0 0 0 3 5 5 0 0 1-2 7 6 6 0 0 0-2 1 57 57 0 0 0-11-2h-9a33 33 0 0 0-4 1H99a4 4 0 0 0 2 2 86 86 0 0 1 6 6l1 1Z");
			add_location(path9, file$v, 86, 6, 5744);
			attr_dev(path10, "fill", "var(--hair)");
			attr_dev(path10, "d", "M35 39a4 4 0 0 1-3 1 19 19 0 0 0-6 2 62 62 0 0 1-8 2 12 12 0 0 0-2 1l-1 1 2 1a16 16 0 0 1 3-1 2 2 0 0 1 2 0l-1 1a13 13 0 0 0-7 3h-1a9 9 0 0 1 4-8c3-2 6-5 10-5a11 11 0 0 1 7 0Z");
			add_location(path10, file$v, 90, 6, 7073);
			attr_dev(path11, "fill", "var(--flesh)");
			attr_dev(path11, "d", "M22 74Z");
			add_location(path11, file$v, 94, 6, 7309);
			attr_dev(path12, "fill", "var(--hair)");
			attr_dev(path12, "d", "M32 63a35 35 0 0 1-4 3 1 1 0 0 1-1 1l-4-4a4 4 0 0 1 2-5l3-2a6 6 0 0 1 3-2h2l-1 2a12 12 0 0 0-1 3c0 2-1 3 1 4ZM39 47l3 6c-3-1-4-2-3-6ZM33 62l2-4c1 2 0 3-2 4Z");
			add_location(path12, file$v, 95, 6, 7356);
			attr_dev(path13, "fill", "var(--pants)");
			attr_dev(path13, "d", "m21 50-3 3h-1v-1a11 11 0 0 1 4-2ZM22 56l-1 2a1 1 0 0 1-1 0v-1l2-1Z");
			add_location(path13, file$v, 99, 6, 7573);
			attr_dev(g1, "id", "bike-right");
			attr_dev(g1, "class", "svelte-1yevd9i");
			add_location(g1, file$v, 73, 4, 4368);
			attr_dev(g2, "class", "shapes svelte-1yevd9i");
			add_location(g2, file$v, 49, 2, 947);
			attr_dev(g3, "class", "svelte-1yevd9i");
			toggle_class(g3, "paused", /*isPaused*/ ctx[1]);
			toggle_class(g3, "flip", /*flipsvg*/ ctx[2]);
			add_location(g3, file$v, 48, 0, 896);
			attr_dev(svg, "xmlns", "http://www.w3.org/2000/svg");
			attr_dev(svg, "viewBox", "0 0 242.9 101.2");
			attr_dev(svg, "height", "100%");
			attr_dev(svg, "width", "100%");
			attr_dev(svg, "class", "svelte-1yevd9i");
			add_location(svg, file$v, 47, 0, 802);
		},
		l: function claim(nodes) {
			throw new Error("options.hydrate only works if the component was compiled with the `hydratable: true` option");
		},
		m: function mount(target, anchor) {
			insert_dev(target, svg, anchor);
			append_dev(svg, g3);
			append_dev(g3, g2);
			append_dev(g2, g0);
			append_dev(g0, path0);
			append_dev(g0, path1);
			append_dev(g0, path2);
			append_dev(g0, path3);
			append_dev(g0, path4);
			append_dev(g0, path5);
			append_dev(g2, g1);
			append_dev(g1, path6);
			append_dev(g1, path7);
			append_dev(g1, path8);
			append_dev(g1, path9);
			append_dev(g1, path10);
			append_dev(g1, path11);
			append_dev(g1, path12);
			append_dev(g1, path13);
			/*g2_binding*/ ctx[4](g2);
			if (if_block) if_block.m(g3, null);
		},
		p: function update(ctx, [dirty]) {
			if (/*isPaused*/ ctx[1]) {
				if (if_block) ; else {
					if_block = create_if_block$v(ctx);
					if_block.c();
					if_block.m(g3, null);
				}
			} else if (if_block) {
				if_block.d(1);
				if_block = null;
			}

			if (dirty & /*isPaused*/ 2) {
				toggle_class(g3, "paused", /*isPaused*/ ctx[1]);
			}

			if (dirty & /*flipsvg*/ 4) {
				toggle_class(g3, "flip", /*flipsvg*/ ctx[2]);
			}
		},
		i: noop,
		o: noop,
		d: function destroy(detaching) {
			if (detaching) detach_dev(svg);
			/*g2_binding*/ ctx[4](null);
			if (if_block) if_block.d();
		}
	};

	dispatch_dev("SvelteRegisterBlock", {
		block,
		id: create_fragment$v.name,
		type: "component",
		source: "",
		ctx
	});

	return block;
}

function instance$v($$self, $$props, $$invalidate) {
	let { $$slots: slots = {}, $$scope } = $$props;
	validate_slots('Workout_bicycles', slots, []);
	let { direction = "right" } = $$props;
	let { isPaused = false } = $$props;
	let { rootElement } = $$props;
	let flipsvg = false;

	if (direction == "left") {
		flipsvg = true;
	}

	const writable_props = ['direction', 'isPaused', 'rootElement'];

	Object.keys($$props).forEach(key => {
		if (!~writable_props.indexOf(key) && key.slice(0, 2) !== '$$' && key !== 'slot') console.warn(`<Workout_bicycles> was created with unknown prop '${key}'`);
	});

	function g2_binding($$value) {
		binding_callbacks[$$value ? 'unshift' : 'push'](() => {
			rootElement = $$value;
			$$invalidate(0, rootElement);
		});
	}

	$$self.$$set = $$props => {
		if ('direction' in $$props) $$invalidate(3, direction = $$props.direction);
		if ('isPaused' in $$props) $$invalidate(1, isPaused = $$props.isPaused);
		if ('rootElement' in $$props) $$invalidate(0, rootElement = $$props.rootElement);
	};

	$$self.$capture_state = () => ({
		direction,
		isPaused,
		rootElement,
		flipsvg
	});

	$$self.$inject_state = $$props => {
		if ('direction' in $$props) $$invalidate(3, direction = $$props.direction);
		if ('isPaused' in $$props) $$invalidate(1, isPaused = $$props.isPaused);
		if ('rootElement' in $$props) $$invalidate(0, rootElement = $$props.rootElement);
		if ('flipsvg' in $$props) $$invalidate(2, flipsvg = $$props.flipsvg);
	};

	if ($$props && "$$inject" in $$props) {
		$$self.$inject_state($$props.$$inject);
	}

	return [rootElement, isPaused, flipsvg, direction, g2_binding];
}

class Workout_bicycles extends SvelteComponentDev {
	constructor(options) {
		super(options);

		init(this, options, instance$v, create_fragment$v, safe_not_equal, {
			direction: 3,
			isPaused: 1,
			rootElement: 0
		});

		dispatch_dev("SvelteRegisterComponent", {
			component: this,
			tagName: "Workout_bicycles",
			options,
			id: create_fragment$v.name
		});

		const { ctx } = this.$$;
		const props = options.props || {};

		if (/*rootElement*/ ctx[0] === undefined && !('rootElement' in props)) {
			console.warn("<Workout_bicycles> was created without expected prop 'rootElement'");
		}
	}

	get direction() {
		throw new Error("<Workout_bicycles>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
	}

	set direction(value) {
		throw new Error("<Workout_bicycles>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
	}

	get isPaused() {
		throw new Error("<Workout_bicycles>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
	}

	set isPaused(value) {
		throw new Error("<Workout_bicycles>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
	}

	get rootElement() {
		throw new Error("<Workout_bicycles>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
	}

	set rootElement(value) {
		throw new Error("<Workout_bicycles>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
	}
}

var workoutBicycles = /*#__PURE__*/Object.freeze({
    __proto__: null,
    'default': Workout_bicycles
});

/* src/workouts/workout-burpees.svelte generated by Svelte v3.49.0 */

const file$u = "src/workouts/workout-burpees.svelte";

// (145:4) {#if isPaused}
function create_if_block$u(ctx) {
	let svg;
	let path;

	const block = {
		c: function create() {
			svg = svg_element("svg");
			path = svg_element("path");
			attr_dev(path, "d", "M10 24h-6v-24h6v24zm10 0h-6v-24h6v24zm-11-23h-4v22h4v-22zm10 0h-4v22h4v-22z");
			add_location(path, file$u, 145, 133, 7142);
			attr_dev(svg, "viewBox", "-6 -5 36 36");
			attr_dev(svg, "width", "100%");
			attr_dev(svg, "height", "100%");
			attr_dev(svg, "xmlns", "http://www.w3.org/2000/svg");
			attr_dev(svg, "fill-rule", "evenodd");
			attr_dev(svg, "clip-rule", "evenodd");
			add_location(svg, file$u, 145, 4, 7013);
		},
		m: function mount(target, anchor) {
			insert_dev(target, svg, anchor);
			append_dev(svg, path);
		},
		d: function destroy(detaching) {
			if (detaching) detach_dev(svg);
		}
	};

	dispatch_dev("SvelteRegisterBlock", {
		block,
		id: create_if_block$u.name,
		type: "if",
		source: "(145:4) {#if isPaused}",
		ctx
	});

	return block;
}

function create_fragment$u(ctx) {
	let svg;
	let t;
	let g4;
	let g3;
	let g0;
	let path0;
	let path1;
	let path2;
	let path3;
	let path4;
	let path5;
	let path6;
	let g1;
	let path7;
	let path8;
	let path9;
	let path10;
	let path11;
	let g2;
	let path12;
	let path13;
	let path14;
	let path15;
	let path16;
	let path17;
	let if_block = /*isPaused*/ ctx[1] && create_if_block$u(ctx);

	const block = {
		c: function create() {
			svg = svg_element("svg");
			t = text("//350 300\n");
			g4 = svg_element("g");
			g3 = svg_element("g");
			g0 = svg_element("g");
			path0 = svg_element("path");
			path1 = svg_element("path");
			path2 = svg_element("path");
			path3 = svg_element("path");
			path4 = svg_element("path");
			path5 = svg_element("path");
			path6 = svg_element("path");
			g1 = svg_element("g");
			path7 = svg_element("path");
			path8 = svg_element("path");
			path9 = svg_element("path");
			path10 = svg_element("path");
			path11 = svg_element("path");
			g2 = svg_element("g");
			path12 = svg_element("path");
			path13 = svg_element("path");
			path14 = svg_element("path");
			path15 = svg_element("path");
			path16 = svg_element("path");
			path17 = svg_element("path");
			if (if_block) if_block.c();
			attr_dev(path0, "fill", "var(--flesh)");
			attr_dev(path0, "d", "M224 313a37 37 0 0 1-1 4 29 29 0 0 0-2 10c1 8-2 15-3 22l-2 18c-1 3 0 4 2 3 2 0 3-1 4 1 0 2 2 2 3 2 3-1 6 0 9 1 3 0 4 2 6 4v3l-3 1c-1-1-3-1-2 1h-4c-6-2-12-1-18-1-5-2-6-4-6-10a87 87 0 0 0 0-18c-1-2-1-3-3-3-8-1-11-4-10-12l2-33c0-2 1-5 3-7 6 0 6 0 4 6a22 22 0 0 0 0 3c0 2 1 3 4 3h12c2 0 4 0 5 2Zm-18-1c-3 9-4 17-5 26a6 6 0 0 0 0 3 3 3 0 0 0 4 2c2-1 1-2 1-3l1-17a23 23 0 0 0-1-11Z");
			add_location(path0, file$u, 66, 6, 1223);
			attr_dev(path1, "fill", "var(--hair)");
			attr_dev(path1, "d", "M268 289c-3 2-6 1-9 0l1-3c0-4-1-5-4-4-1 1-2 0-3-1a6 6 0 0 0-4-2 15 15 0 0 1-5 0c-1-1-3-1-3-3-1-2 1-2 2-3 2-1 4-2 3-5-2-2-3-1-5-1-3 1-6 4-9 2l-1-4c6-2 11-5 17-6 7-2 12 0 15 7a50 50 0 0 1 3 17c0 2 0 3 2 4Z");
			add_location(path1, file$u, 70, 6, 1660);
			attr_dev(path2, "fill", "var(--shirt)");
			attr_dev(path2, "d", "m231 265 1 4a3 3 0 0 0-1 3c0 6-3 13-2 20a2 2 0 0 1-1 3 73 73 0 0 0-2 12c0 2 0 4-2 6-1-2-3-2-5-2h-12c-3 0-4-1-4-3a22 22 0 0 1 0-3c2-6 2-6-4-6a5 5 0 0 0-1-1h-16c-9 1-17 5-25 8a52 52 0 0 1-6 1c-2 1-2-1-3-2l-2-9c-2-10-1-21-4-31 4-2 9-6 15-4l8-2c18-5 37-4 55 1 2 1 5 1 7 4a4 4 0 0 0 4 1Z");
			add_location(path2, file$u, 74, 6, 1924);
			attr_dev(path3, "fill", "var(--flesh)");
			attr_dev(path3, "d", "M116 317c-1 2-4 2-5 3-5 2-9 4-14 4l-7 3a54 54 0 0 1-18 5 18 18 0 0 0-7 2 115 115 0 0 1-19 8c-5 1-9 1-12 4a23 23 0 0 0-8 6 15 15 0 0 0-2 1c-3 1-8 1-11-2-1-1-2-3 0-5l2-5a33 33 0 0 0 14-8c5-2 11-4 13-10a76 76 0 0 0 17-8c8-5 16-9 25-8 6 0 9-4 13-8l6-2 13 20Z");
			add_location(path3, file$u, 78, 6, 2268);
			attr_dev(path4, "fill", "var(--pants)");
			attr_dev(path4, "d", "m116 317-13-20a14 14 0 0 1 4-7 196 196 0 0 0 19-17 24 24 0 0 1 16-8c3 10 2 21 4 31 1 3 3 6 2 9-7 7-17 11-27 14-1 1-2 1-2-1-1-2-2-1-3-1Z");
			add_location(path4, file$u, 82, 6, 2584);
			attr_dev(path5, "fill", "var(--hair)");
			attr_dev(path5, "d", "m15 341-2 5v5c3 2 8 3 11 2a15 15 0 0 1 3-1c-1 3-2 6-1 10l2 3a35 35 0 0 1 8 3 3 3 0 0 1 0 5c-6 3-12 5-19 3-3-1-6-2-7-6l-9-18c-3-6 0-9 7-10a46 46 0 0 1 7-1ZM34 346c3-3 8-3 12-4-1 3 0 4 3 5 2 1 4 2 3 5s-2 2-4 3a24 24 0 0 1-4 0c-5 1-7 0-9-6l-1-3ZM43 323c-3 6-9 8-14 10-2-6-1-7 5-8l7-2h2Z");
			add_location(path5, file$u, 86, 6, 2781);
			attr_dev(path6, "fill", "var(--flesh)");
			attr_dev(path6, "d", "M228 295a2 2 0 0 0 1-3c-1-7 2-13 2-20a3 3 0 0 1 1-3c3 2 6-1 9-2 2 0 3-1 5 1 1 3-1 4-3 5-1 1-3 1-2 3 0 2 2 2 3 3a15 15 0 0 0 5 0 6 6 0 0 1 4 2c1 1 2 2 3 1 3-1 4 0 4 4l-1 3c-5 3-11 3-15 7a2 2 0 0 1-2 1c-5-2-9-1-14-2Z");
			add_location(path6, file$u, 90, 6, 3125);
			attr_dev(g0, "id", "burpee-3");
			attr_dev(g0, "class", "svelte-plry6p");
			add_location(g0, file$u, 65, 4, 1199);
			attr_dev(path7, "fill", "var(--flesh)");
			attr_dev(path7, "d", "M196 301a41 41 0 0 0-19-3l-4-1c-2 0-5 0-5-2-1-2 1-3 2-4a67 67 0 0 1 5-6c5-5 10-10 17-12 4 2 8 7 13 8s5 5 5 9c0 2 1 3 3 3a12 12 0 0 0 5-2c5-2 13-1 17 3l-3 17v9c2 7-1 13-3 19-1 3 0 5 3 5a2 2 0 0 1 0 1c2 0 5 0 5 2-1 3-4 3-6 2-4-1-4 2-4 5l-2 11c-1 4 0 6 5 7a78 78 0 0 0 14 3 5 5 0 0 1 3 1c1 1 3 1 2 3 0 2-1 3-3 2-2 0-3 1-3 2h-3c-5-2-10-1-16-2-4-2-8-3-9-8a21 21 0 0 0-1-10c0-4 1-8-1-12v-2a2 2 0 0 0 1-2c0-11-2-22 0-33-4 2-5 5-6 8-3 8-8 14-11 21a48 48 0 0 0-4 11c-1 4-4 7-9 6a6 6 0 0 1-5-7c1-4 3-8 1-12 2 0 1-2 2-4 3-5 5-9 5-15 0-5 3-10 6-15l4-4c2-2 1-3-1-2Z");
			add_location(path7, file$u, 96, 6, 3432);
			attr_dev(path8, "fill", "var(--shirt)");
			attr_dev(path8, "d", "M235 294c-4-4-12-5-17-3a12 12 0 0 1-5 2c-2 0-3-1-3-3 0-4 0-8-5-9s-9-6-13-8c-1-3-4-3-6-4-12-5-24-10-38-7-4 1-8-2-10-6a8 8 0 0 0-2-3c0-1-2-3 0-3 9-4 17-9 26-12 10-4 20-4 31-3a100 100 0 0 1 32 8l9 1 2 3 1 13 1 7c3 9 0 17-3 26v1Z");
			add_location(path8, file$u, 100, 6, 4046);
			attr_dev(path9, "fill", "var(--pants)");
			attr_dev(path9, "d", "M136 253a8 8 0 0 1 2 3c2 4 6 7 10 6 14-3 26 2 38 7 2 1 5 1 6 4-7 2-12 7-17 12a67 67 0 0 0-5 6c-1 1-3 2-2 4 0 2 3 2 5 2l4 1-4 4c-1 2-3 3-5 0h-3c-1 2-3 2-5 0l-26-25a10 10 0 0 1-3-7c0-6 1-12 5-17Z");
			add_location(path9, file$u, 104, 6, 4333);
			attr_dev(path10, "fill", "var(--hair)");
			attr_dev(path10, "d", "M180 341c2 4 0 8-1 12a6 6 0 0 0 5 7c5 1 8-2 9-6a48 48 0 0 1 4-11c4 1 7 3 11 3a5 5 0 0 1 5 3v2c-6 3-12 3-17 4 3 4 8 6 18 8a21 21 0 0 1 1 10c-13 3-26 0-39-1-2-1-3-2-3-5s0-7 2-10v-3c0-5 2-10 3-14 0-1 1-1 2 1ZM236 244c-1-2 0-3 1-4a58 58 0 0 1 11-10c4-4 10-3 14 0 7 6 10 14 15 20 1 2 0 4-2 5h-5a9 9 0 0 0-2-5c0-1-2-2-3-1-2 3-6 3-9 5-1 1-3 2-4 0-2-2 1-2 1-4 2-1 3-3 1-5a4 4 0 0 0-6 0c-2 2-4 5-6 5l-5-6a2 2 0 0 0-1 0Z");
			add_location(path10, file$u, 108, 6, 4588);
			attr_dev(path11, "fill", "var(--flesh)");
			attr_dev(path11, "d", "M236 244a2 2 0 0 1 1 0l5 6c2 0 4-3 6-5a4 4 0 0 1 6 0c2 2 1 4-1 6 0 1-3 2-1 4 1 1 3 0 4-1 3-2 7-2 9-5 1-1 3 0 3 1a9 9 0 0 1 2 5c-3 3-4 6-7 7l-2 2c-2 9-10 6-15 9-2 1-3-1-4-2s-1-4-4-4l-1-6-1-14-2-3h2Z");
			add_location(path11, file$u, 112, 6, 5059);
			attr_dev(g1, "id", "burpee-2");
			attr_dev(g1, "class", "svelte-plry6p");
			add_location(g1, file$u, 95, 4, 3408);
			attr_dev(path12, "fill", "var(--flesh)");
			attr_dev(path12, "d", "m187 82-1-52-1-24a14 14 0 0 1 0-6h3l6 6c0 6 0 13 2 19a9 9 0 0 1 0 5c-2 7 0 12 2 18 3 11 6 22 7 33l-1 7c3-1 5 1 8 1 1 4 2 7 1 11a2 2 0 0 0 1 1c6 7-1 13-2 19 0 2-2 2-3 2-2 0-5-1-6 1-2-3 0-6-1-9-5 2-13-2-14-7a4 4 0 0 0-2-4 3 3 0 0 1 0-2c4-6 3-13 1-19Z");
			add_location(path12, file$u, 118, 6, 5349);
			attr_dev(path13, "fill", "var(--hair)");
			attr_dev(path13, "d", "M170 363c2-2 2-5 3-8l3-4v6c0 4 4 6 5 4a91 91 0 0 1 9-7l1-2h2c3 8 10 12 18 16l5 3c4 3 4 7 0 9a64 64 0 0 1-8 3h-11l-7-3a28 28 0 0 0-11-5c-4-1-7-3-9-6Z");
			add_location(path13, file$u, 122, 6, 5659);
			attr_dev(path14, "fill", "var(--shirt)");
			attr_dev(path14, "d", "M186 103a4 4 0 0 1 2 3c1 6 9 10 14 8 1 3-1 6 1 9 5 6 12 12 15 21a28 28 0 0 1 2 14 173 173 0 0 0 0 45c1 6 1 6-4 8-8 2-17 4-26 3-5-1-10 0-14-3v-4c5-8 4-17 5-25 0-10-3-20-4-30v-15c0-7 3-13 5-19 1-3-2-5 0-7 4-1 3-5 4-8Z");
			add_location(path14, file$u, 126, 6, 5868);
			attr_dev(path15, "fill", "var(--pants)");
			attr_dev(path15, "d", "M176 211c4 3 9 2 14 3 9 1 18-1 26-3 1 3 2 5 1 8-1 1 0 2 1 2 1 10-1 19-2 29l-1 19c-1 2-2 4-4 4 0-4-1-5-5-5a130 130 0 0 0-15 1c-4 0-7 0-7 5-3-1-4-2-4-5a94 94 0 0 0-5-31 37 37 0 0 1 1-27Z");
			add_location(path15, file$u, 130, 6, 6145);
			attr_dev(path16, "fill", "var(--flesh)");
			attr_dev(path16, "d", "M184 274c0-5 3-5 7-5a130 130 0 0 1 15-1c4 0 5 1 5 5-3 10-6 19-12 28-4 6-4 14-3 21-3 6-5 12-5 19v11l-1 2a91 91 0 0 0-9 7c-1 2-5 0-5-4v-6a153 153 0 0 0-1-31 32 32 0 0 1 4-21 9 9 0 0 0 2-6 21 21 0 0 1 2-12c2-2 2-5 1-7Z");
			add_location(path16, file$u, 134, 6, 6391);
			attr_dev(path17, "fill", "var(--hair)");
			attr_dev(path17, "d", "M191 341c0-7 2-13 5-19 1-1 2 0 2 1 2 3 6 5 10 5l9 2c1 0 3 0 3 2s1 4-1 6a15 15 0 0 1-12 2c-5 0-11-1-16 1ZM212 89c-3-1-5-3-8-1l1-7a18 18 0 0 0 6 0c4 0 4 2 3 5a36 36 0 0 1-2 3ZM186 103c-1 3 0 7-4 8-3-7-5-15-2-23a9 9 0 0 1 7-6c2 6 3 13-1 19a3 3 0 0 0 0 2Z");
			add_location(path17, file$u, 138, 6, 6668);
			attr_dev(g2, "id", "burpee-1");
			attr_dev(g2, "class", "svelte-plry6p");
			add_location(g2, file$u, 117, 4, 5325);
			attr_dev(g3, "class", "shapes svelte-plry6p");
			add_location(g3, file$u, 64, 2, 1152);
			attr_dev(g4, "class", "svelte-plry6p");
			toggle_class(g4, "paused", /*isPaused*/ ctx[1]);
			toggle_class(g4, "flip", /*flipsvg*/ ctx[2]);
			add_location(g4, file$u, 63, 0, 1101);
			attr_dev(svg, "xmlns", "http://www.w3.org/2000/svg");
			attr_dev(svg, "viewBox", "0 0 277.2 383.2");
			attr_dev(svg, "height", "100%");
			attr_dev(svg, "width", "100%");
			attr_dev(svg, "class", "svelte-plry6p");
			add_location(svg, file$u, 62, 0, 997);
		},
		l: function claim(nodes) {
			throw new Error("options.hydrate only works if the component was compiled with the `hydratable: true` option");
		},
		m: function mount(target, anchor) {
			insert_dev(target, svg, anchor);
			append_dev(svg, t);
			append_dev(svg, g4);
			append_dev(g4, g3);
			append_dev(g3, g0);
			append_dev(g0, path0);
			append_dev(g0, path1);
			append_dev(g0, path2);
			append_dev(g0, path3);
			append_dev(g0, path4);
			append_dev(g0, path5);
			append_dev(g0, path6);
			append_dev(g3, g1);
			append_dev(g1, path7);
			append_dev(g1, path8);
			append_dev(g1, path9);
			append_dev(g1, path10);
			append_dev(g1, path11);
			append_dev(g3, g2);
			append_dev(g2, path12);
			append_dev(g2, path13);
			append_dev(g2, path14);
			append_dev(g2, path15);
			append_dev(g2, path16);
			append_dev(g2, path17);
			/*g3_binding*/ ctx[4](g3);
			if (if_block) if_block.m(g4, null);
		},
		p: function update(ctx, [dirty]) {
			if (/*isPaused*/ ctx[1]) {
				if (if_block) ; else {
					if_block = create_if_block$u(ctx);
					if_block.c();
					if_block.m(g4, null);
				}
			} else if (if_block) {
				if_block.d(1);
				if_block = null;
			}

			if (dirty & /*isPaused*/ 2) {
				toggle_class(g4, "paused", /*isPaused*/ ctx[1]);
			}

			if (dirty & /*flipsvg*/ 4) {
				toggle_class(g4, "flip", /*flipsvg*/ ctx[2]);
			}
		},
		i: noop,
		o: noop,
		d: function destroy(detaching) {
			if (detaching) detach_dev(svg);
			/*g3_binding*/ ctx[4](null);
			if (if_block) if_block.d();
		}
	};

	dispatch_dev("SvelteRegisterBlock", {
		block,
		id: create_fragment$u.name,
		type: "component",
		source: "",
		ctx
	});

	return block;
}

function instance$u($$self, $$props, $$invalidate) {
	let { $$slots: slots = {}, $$scope } = $$props;
	validate_slots('Workout_burpees', slots, []);
	let { direction = "right" } = $$props;
	let { isPaused = false } = $$props;
	let { rootElement } = $$props;
	let flipsvg = false;

	if (direction == "left") {
		flipsvg = true;
	}

	const writable_props = ['direction', 'isPaused', 'rootElement'];

	Object.keys($$props).forEach(key => {
		if (!~writable_props.indexOf(key) && key.slice(0, 2) !== '$$' && key !== 'slot') console.warn(`<Workout_burpees> was created with unknown prop '${key}'`);
	});

	function g3_binding($$value) {
		binding_callbacks[$$value ? 'unshift' : 'push'](() => {
			rootElement = $$value;
			$$invalidate(0, rootElement);
		});
	}

	$$self.$$set = $$props => {
		if ('direction' in $$props) $$invalidate(3, direction = $$props.direction);
		if ('isPaused' in $$props) $$invalidate(1, isPaused = $$props.isPaused);
		if ('rootElement' in $$props) $$invalidate(0, rootElement = $$props.rootElement);
	};

	$$self.$capture_state = () => ({
		direction,
		isPaused,
		rootElement,
		flipsvg
	});

	$$self.$inject_state = $$props => {
		if ('direction' in $$props) $$invalidate(3, direction = $$props.direction);
		if ('isPaused' in $$props) $$invalidate(1, isPaused = $$props.isPaused);
		if ('rootElement' in $$props) $$invalidate(0, rootElement = $$props.rootElement);
		if ('flipsvg' in $$props) $$invalidate(2, flipsvg = $$props.flipsvg);
	};

	if ($$props && "$$inject" in $$props) {
		$$self.$inject_state($$props.$$inject);
	}

	return [rootElement, isPaused, flipsvg, direction, g3_binding];
}

class Workout_burpees extends SvelteComponentDev {
	constructor(options) {
		super(options);

		init(this, options, instance$u, create_fragment$u, safe_not_equal, {
			direction: 3,
			isPaused: 1,
			rootElement: 0
		});

		dispatch_dev("SvelteRegisterComponent", {
			component: this,
			tagName: "Workout_burpees",
			options,
			id: create_fragment$u.name
		});

		const { ctx } = this.$$;
		const props = options.props || {};

		if (/*rootElement*/ ctx[0] === undefined && !('rootElement' in props)) {
			console.warn("<Workout_burpees> was created without expected prop 'rootElement'");
		}
	}

	get direction() {
		throw new Error("<Workout_burpees>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
	}

	set direction(value) {
		throw new Error("<Workout_burpees>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
	}

	get isPaused() {
		throw new Error("<Workout_burpees>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
	}

	set isPaused(value) {
		throw new Error("<Workout_burpees>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
	}

	get rootElement() {
		throw new Error("<Workout_burpees>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
	}

	set rootElement(value) {
		throw new Error("<Workout_burpees>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
	}
}

var workoutBurpees = /*#__PURE__*/Object.freeze({
    __proto__: null,
    'default': Workout_burpees
});

/* src/workouts/workout-crossbodyv.svelte generated by Svelte v3.49.0 */

const file$t = "src/workouts/workout-crossbodyv.svelte";

// (53:4) {#if isPaused}
function create_if_block$t(ctx) {
	let svg;
	let path;

	const block = {
		c: function create() {
			svg = svg_element("svg");
			path = svg_element("path");
			attr_dev(path, "d", "M10 24h-6v-24h6v24zm10 0h-6v-24h6v24zm-11-23h-4v22h4v-22zm10 0h-4v22h4v-22z");
			add_location(path, file$t, 53, 133, 4011);
			attr_dev(svg, "viewBox", "-6 -5 36 36");
			attr_dev(svg, "width", "100%");
			attr_dev(svg, "height", "100%");
			attr_dev(svg, "xmlns", "http://www.w3.org/2000/svg");
			attr_dev(svg, "fill-rule", "evenodd");
			attr_dev(svg, "clip-rule", "evenodd");
			add_location(svg, file$t, 53, 4, 3882);
		},
		m: function mount(target, anchor) {
			insert_dev(target, svg, anchor);
			append_dev(svg, path);
		},
		d: function destroy(detaching) {
			if (detaching) detach_dev(svg);
		}
	};

	dispatch_dev("SvelteRegisterBlock", {
		block,
		id: create_if_block$t.name,
		type: "if",
		source: "(53:4) {#if isPaused}",
		ctx
	});

	return block;
}

function create_fragment$t(ctx) {
	let svg;
	let g1;
	let g0;
	let path0;
	let path1;
	let path2;
	let path3;
	let path4;
	let path5;
	let path6;
	let path7;
	let if_block = /*isPaused*/ ctx[1] && create_if_block$t(ctx);

	const block = {
		c: function create() {
			svg = svg_element("svg");
			g1 = svg_element("g");
			g0 = svg_element("g");
			path0 = svg_element("path");
			path1 = svg_element("path");
			path2 = svg_element("path");
			path3 = svg_element("path");
			path4 = svg_element("path");
			path5 = svg_element("path");
			path6 = svg_element("path");
			path7 = svg_element("path");
			if (if_block) if_block.c();
			attr_dev(path0, "fill", "var(--flesh)");
			attr_dev(path0, "d", "M172 365c-9 13-18 25-31 35a23 23 0 0 0-6 8c-2 4-6 6-9 8-17 13-36 23-54 34l-5 2c-11 2-13 11-14 19 0 4-1 7-4 9a3 3 0 0 0-1 3c2 8 1 11-7 13v1c-7-1-15 4-22 0l-2 1c-5 1-7-1-7-5 0-3-1-4-3-4-4 0-6-2-7-5v-4c3-5 4-11 8-16a35 35 0 0 0 8-8l60-47a30 30 0 0 0 6-7c8-12 20-20 31-28l9-6a16 16 0 0 0 6-6l14-16 1 1c10-4 18-1 26 5 6 5 7 8 3 13Z");
			add_location(path0, file$t, 18, 6, 474);
			attr_dev(path1, "fill", "var(--hair)");
			attr_dev(path1, "d", "M475 0c3 2 6 1 9 2 18 3 35 9 49 21l31 26a15 15 0 0 1 5 10c0 4 0 7-4 9-8 6-15 14-22 21-2 2-5 4-9 3-1-3 1-6 3-8s4-4 3-7-4-3-7-3c-6 0-12 2-18 1l-2 2c-5 6-11 8-18 7-4-4-2-9-1-14a16 16 0 0 0-1-12l-11-22c-5-8-12-13-18-19-7-6-7-11 2-16a6 6 0 0 0 1-1ZM563 270c0-3 2-4 4-4 4-1 6-3 8-6a190 190 0 0 0 18-27c2-3 4-7 8-7 5 0 7 5 9 8 1 2 1 6 3 8v10c-4 6-7 12-12 17l-1 5c0 6 1 12-1 18-3 9-9 12-17 8l-12-4-6-4c3-3 7-4 10-5 4-1 4-2 3-6-2-7-7-10-14-11Z");
			add_location(path1, file$t, 22, 6, 862);
			attr_dev(path2, "d", "M172 365c3-5 3-8-3-13-8-6-16-9-26-5l-1-1c4-7 5-16 10-22 2-1 2-3 2-5 1-3 1-7 4-9 7-4 7-11 8-18a54 54 0 0 1 5-15c2-4-2-8 1-11l3 2c4 6 10 7 15 6 11-2 22-4 33-8 5-2 7-5 7-11l-2-8c2-8-4-13-6-19-1-4-5-7-6-11 9-6 16-13 26-17 11-3 22-3 33-5 2 0 3 0 2 3-3 10-1 19 5 28h2c0 3-1 4-4 4a81 81 0 0 0-10 0c-3 0-4 2-2 4 7 4 9 14 19 14l1 2c4 7 12 8 19 9l6 1c4 4 9 1 13-1s7-3 12-3c4 8 2 14-3 20-2 2-4 5-4 8a59 59 0 0 1-2 12c-2 4-4 8-2 12 3 9 4 18 4 27 0 5 1 10 5 14-2 2-5 3-8 3-8 0-17 1-25-1-7-2-14 0-21 2-15 3-28 0-42-4-12-4-25-7-37-7-8 0-14 4-19 10a6 6 0 0 0-1 3c-1 8-3 9-11 10Z");
			attr_dev(path2, "fill", "var(--shirt)");
			add_location(path2, file$t, 26, 6, 1357);
			attr_dev(path3, "fill", "var(--flesh)");
			attr_dev(path3, "d", "M284 226h-2c-6-9-8-18-5-28 1-3 0-3-2-3 15-1 28-7 40-15 9-7 21-8 31-11l53-14c10-3 19-9 29-13s21-8 32-9c6 0 10-3 14-8l12-18c4-7 8-14 9-23 7 1 13-1 18-7l2-2c6 1 12-1 18-1 3 0 5 0 7 3s-1 5-3 7-4 5-3 8a90 90 0 0 0-21 26l-15 29-19 32c-7 12-18 21-29 29-9 7-18 12-23 22-5 9-8 19-10 29l-7 16c-4-5-7-10-12-13-7-4-13-10-18-17-3-4-8-9-6-16 7-8 17-14 22-24a26 26 0 0 1 7-8l27-21c1-1 4-3 3-4-1-2-4-2-6-1-4 1-9 2-14 0-5-3-9-1-13 2-17 12-34 22-53 29l-39 16c-7 5-16 7-24 8Zm158-72a21 21 0 0 0-11 4 3 3 0 0 0-1 2c0 2 1 2 2 2a47 47 0 0 0 8 1c3-1 5-4 6-7s-3-2-4-2Z");
			add_location(path3, file$t, 30, 6, 1981);
			attr_dev(path4, "fill", "var(--hair)");
			attr_dev(path4, "d", "m166 257-19-10c-12-7-14-22-13-33 2-11 13-18 25-21 10-3 20-1 30 0a12 12 0 0 0 3 0c3-1 6-3 8 0a17 17 0 0 1 6 12v3c-3 8-10 12-18 14-6 1-11 4-12 10 0 6 5 8 9 10 4 1 4 3 2 5s-1 5 0 8c0 1 1 3-1 4-1 1-3 0-4-1-4-3-8-4-13-2a14 14 0 0 1-3 1Z");
			add_location(path4, file$t, 34, 6, 2587);
			attr_dev(path5, "fill", "var(--flesh)");
			attr_dev(path5, "d", "M166 257a14 14 0 0 0 3-1c5-2 9-1 13 2 1 1 3 2 4 1 2-1 1-3 1-4-2-3-1-5 0-8s2-4-2-5c-4-2-10-4-9-10s6-9 12-10c8-2 15-6 18-14l10 8a2 2 0 0 0 0 1c1 4 5 7 6 11 2 6 8 11 6 19l2 8c0 6-2 9-7 11-11 4-22 6-33 8-5 1-11 0-15-6l-3-2a4 4 0 0 0-2-3c-3-1-4-3-4-6Z");
			add_location(path5, file$t, 38, 6, 2879);
			attr_dev(path6, "d", "M374 229c-2 7 3 12 6 16 5 7 11 13 18 17 5 3 8 8 12 13l7-16 10 1c3 1 6 2 7 5 0 6-2 12-5 18a8 8 0 0 0 0 7c3 6 3 9-4 12-2 2-2 3-1 5v2c-1 13-3 14-15 11l-7-1c-2-1-3 0-5 1-11 2-17 13-26 18-11 7-23 8-35 11-4-4-5-9-5-14 0-9-1-18-4-27-2-4 0-8 2-12a59 59 0 0 0 2-12c0-3 2-6 4-8 5-6 7-13 3-20 3 2 7 3 9-2h3c6 2 8-1 11-5l4-7c3-4 3-11 9-13Z");
			attr_dev(path6, "fill", "var(--pants)");
			add_location(path6, file$t, 42, 6, 3187);
			attr_dev(path7, "fill", "var(--flesh)");
			attr_dev(path7, "d", "M424 307c-1-2-1-3 1-5 7-3 7-6 4-12a8 8 0 0 1 0-7c3-6 5-12 5-18 17 3 35 0 52 6h14c8-2 17-1 26 1 12 1 25 2 37-2 7 1 12 4 14 11 1 4 1 5-3 6-3 1-7 2-10 5-13 0-26 1-39 6s-27 6-41 3c-10-3-20-1-30 1a220 220 0 0 1-30 5Z");
			add_location(path7, file$t, 46, 6, 3576);
			attr_dev(g0, "id", "crossbody");
			attr_dev(g0, "class", "svelte-tabugc");
			add_location(g0, file$t, 17, 4, 425);
			attr_dev(g1, "class", "svelte-tabugc");
			toggle_class(g1, "paused", /*isPaused*/ ctx[1]);
			toggle_class(g1, "flip", /*flipsvg*/ ctx[2]);
			add_location(g1, file$t, 16, 0, 372);
			attr_dev(svg, "xmlns", "http://www.w3.org/2000/svg");
			attr_dev(svg, "viewBox", "0 0 612.9 500.1");
			attr_dev(svg, "class", "svelte-tabugc");
			add_location(svg, file$t, 15, 0, 305);
		},
		l: function claim(nodes) {
			throw new Error("options.hydrate only works if the component was compiled with the `hydratable: true` option");
		},
		m: function mount(target, anchor) {
			insert_dev(target, svg, anchor);
			append_dev(svg, g1);
			append_dev(g1, g0);
			append_dev(g0, path0);
			append_dev(g0, path1);
			append_dev(g0, path2);
			append_dev(g0, path3);
			append_dev(g0, path4);
			append_dev(g0, path5);
			append_dev(g0, path6);
			append_dev(g0, path7);
			/*g0_binding*/ ctx[4](g0);
			if (if_block) if_block.m(svg, null);
		},
		p: function update(ctx, [dirty]) {
			if (dirty & /*isPaused*/ 2) {
				toggle_class(g1, "paused", /*isPaused*/ ctx[1]);
			}

			if (dirty & /*flipsvg*/ 4) {
				toggle_class(g1, "flip", /*flipsvg*/ ctx[2]);
			}

			if (/*isPaused*/ ctx[1]) {
				if (if_block) ; else {
					if_block = create_if_block$t(ctx);
					if_block.c();
					if_block.m(svg, null);
				}
			} else if (if_block) {
				if_block.d(1);
				if_block = null;
			}
		},
		i: noop,
		o: noop,
		d: function destroy(detaching) {
			if (detaching) detach_dev(svg);
			/*g0_binding*/ ctx[4](null);
			if (if_block) if_block.d();
		}
	};

	dispatch_dev("SvelteRegisterBlock", {
		block,
		id: create_fragment$t.name,
		type: "component",
		source: "",
		ctx
	});

	return block;
}

function instance$t($$self, $$props, $$invalidate) {
	let { $$slots: slots = {}, $$scope } = $$props;
	validate_slots('Workout_crossbodyv', slots, []);
	let { direction = "right" } = $$props;
	let { isPaused = false } = $$props;
	let { rootElement } = $$props;
	let flipsvg = false;

	if (direction == "left") {
		flipsvg = true;
	}

	const writable_props = ['direction', 'isPaused', 'rootElement'];

	Object.keys($$props).forEach(key => {
		if (!~writable_props.indexOf(key) && key.slice(0, 2) !== '$$' && key !== 'slot') console.warn(`<Workout_crossbodyv> was created with unknown prop '${key}'`);
	});

	function g0_binding($$value) {
		binding_callbacks[$$value ? 'unshift' : 'push'](() => {
			rootElement = $$value;
			$$invalidate(0, rootElement);
		});
	}

	$$self.$$set = $$props => {
		if ('direction' in $$props) $$invalidate(3, direction = $$props.direction);
		if ('isPaused' in $$props) $$invalidate(1, isPaused = $$props.isPaused);
		if ('rootElement' in $$props) $$invalidate(0, rootElement = $$props.rootElement);
	};

	$$self.$capture_state = () => ({
		direction,
		isPaused,
		rootElement,
		flipsvg
	});

	$$self.$inject_state = $$props => {
		if ('direction' in $$props) $$invalidate(3, direction = $$props.direction);
		if ('isPaused' in $$props) $$invalidate(1, isPaused = $$props.isPaused);
		if ('rootElement' in $$props) $$invalidate(0, rootElement = $$props.rootElement);
		if ('flipsvg' in $$props) $$invalidate(2, flipsvg = $$props.flipsvg);
	};

	if ($$props && "$$inject" in $$props) {
		$$self.$inject_state($$props.$$inject);
	}

	return [rootElement, isPaused, flipsvg, direction, g0_binding];
}

class Workout_crossbodyv extends SvelteComponentDev {
	constructor(options) {
		super(options);

		init(this, options, instance$t, create_fragment$t, safe_not_equal, {
			direction: 3,
			isPaused: 1,
			rootElement: 0
		});

		dispatch_dev("SvelteRegisterComponent", {
			component: this,
			tagName: "Workout_crossbodyv",
			options,
			id: create_fragment$t.name
		});

		const { ctx } = this.$$;
		const props = options.props || {};

		if (/*rootElement*/ ctx[0] === undefined && !('rootElement' in props)) {
			console.warn("<Workout_crossbodyv> was created without expected prop 'rootElement'");
		}
	}

	get direction() {
		throw new Error("<Workout_crossbodyv>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
	}

	set direction(value) {
		throw new Error("<Workout_crossbodyv>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
	}

	get isPaused() {
		throw new Error("<Workout_crossbodyv>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
	}

	set isPaused(value) {
		throw new Error("<Workout_crossbodyv>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
	}

	get rootElement() {
		throw new Error("<Workout_crossbodyv>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
	}

	set rootElement(value) {
		throw new Error("<Workout_crossbodyv>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
	}
}

var workoutCrossbodyv = /*#__PURE__*/Object.freeze({
    __proto__: null,
    'default': Workout_crossbodyv
});

/* src/workouts/workout-crunches.svelte generated by Svelte v3.49.0 */

const file$s = "src/workouts/workout-crunches.svelte";

// (110:4) {#if isPaused}
function create_if_block$s(ctx) {
	let svg;
	let path;

	const block = {
		c: function create() {
			svg = svg_element("svg");
			path = svg_element("path");
			attr_dev(path, "d", "M10 24h-6v-24h6v24zm10 0h-6v-24h6v24zm-11-23h-4v22h4v-22zm10 0h-4v22h4v-22z");
			add_location(path, file$s, 110, 133, 6255);
			attr_dev(svg, "viewBox", "-6 -5 36 36");
			attr_dev(svg, "width", "100%");
			attr_dev(svg, "height", "100%");
			attr_dev(svg, "xmlns", "http://www.w3.org/2000/svg");
			attr_dev(svg, "fill-rule", "evenodd");
			attr_dev(svg, "clip-rule", "evenodd");
			add_location(svg, file$s, 110, 4, 6126);
		},
		m: function mount(target, anchor) {
			insert_dev(target, svg, anchor);
			append_dev(svg, path);
		},
		d: function destroy(detaching) {
			if (detaching) detach_dev(svg);
		}
	};

	dispatch_dev("SvelteRegisterBlock", {
		block,
		id: create_if_block$s.name,
		type: "if",
		source: "(110:4) {#if isPaused}",
		ctx
	});

	return block;
}

function create_fragment$s(ctx) {
	let svg;
	let g3;
	let g2;
	let g0;
	let path0;
	let path1;
	let path2;
	let path3;
	let path4;
	let path5;
	let path6;
	let g1;
	let path7;
	let path8;
	let path9;
	let path10;
	let path11;
	let path12;
	let path13;
	let path14;
	let if_block = /*isPaused*/ ctx[1] && create_if_block$s(ctx);

	const block = {
		c: function create() {
			svg = svg_element("svg");
			g3 = svg_element("g");
			g2 = svg_element("g");
			g0 = svg_element("g");
			path0 = svg_element("path");
			path1 = svg_element("path");
			path2 = svg_element("path");
			path3 = svg_element("path");
			path4 = svg_element("path");
			path5 = svg_element("path");
			path6 = svg_element("path");
			g1 = svg_element("g");
			path7 = svg_element("path");
			path8 = svg_element("path");
			path9 = svg_element("path");
			path10 = svg_element("path");
			path11 = svg_element("path");
			path12 = svg_element("path");
			path13 = svg_element("path");
			path14 = svg_element("path");
			if (if_block) if_block.c();
			attr_dev(path0, "fill", "var(--flesh)");
			attr_dev(path0, "d", "m193 20 2-2 18-15 6-3h3l5 4h2c4-1 8 1 10 5l5 5c2 3 2 7 2 11a45 45 0 0 0 3 14c3 6 4 13 5 20l3 11a4 4 0 0 0 1 3v1a57 57 0 0 0 3 8l1 3a3 3 0 0 0 0 4l1 1-3 4a7 7 0 0 1-11-5c0-2 0-4-2-4l-1-1a83 83 0 0 0-9-16c-1-1-2-2-4-1l-3-5-11-15a27 27 0 0 0-1 4c-2 8-6 15-12 21a12 12 0 0 0-1 1c-3 2-3 2-5-1a63 63 0 0 1-7-15c-1-7-3-13-2-20 0-4 1-8 4-10l1-2-3-5ZM0 91l6-8c2-3 5-4 8-5l4-2c6-1 12-1 17 1 0 3 3 2 4 2l2 1a6 6 0 0 1 2 0l14 7a2 2 0 0 1 2 3l-2 1c-2 0-5 0-5 3a1 1 0 0 1 0 1c-4 1-6 5-9 6a1 1 0 0 0-1 2l-19 2a34 34 0 0 1-13-2 6 6 0 0 1-4-2l-6-8Z");
			add_location(path0, file$s, 51, 4, 1005);
			attr_dev(path1, "fill", "var(--shirt)");
			attr_dev(path1, "d", "M42 103a1 1 0 0 1 1-2c3-1 5-5 9-6a1 1 0 0 0 0-1c0-3 3-3 5-3l2-1a2 2 0 0 0-2-3l-14-7a6 6 0 0 0-2 0l-2-1-2-1 2-1a34 34 0 0 0 8-1 11 11 0 0 0 3-1 97 97 0 0 0 15-12l10-10c6-6 13-8 20-8a163 163 0 0 1 22 0c5 0 8 3 12 4a68 68 0 0 0 9 4c3 0 6 1 8-2 1-2 3-2 5-2l5 2a4 4 0 0 1 0 2l-5 14a6 6 0 0 0 0 6 4 4 0 0 1 1 4c-3 5-2 10-2 15a2 2 0 0 0 1 2l5 2v1l-1 3a4 4 0 0 1-4 0 46 46 0 0 0-5-3c-3-2-6-2-9-2a247 247 0 0 0-35 0c-11 0-21 3-31 5l-18 2-11 1Z");
			add_location(path1, file$s, 55, 4, 1590);
			attr_dev(path2, "fill", "var(--pants)");
			attr_dev(path2, "d", "m156 96-5-2a2 2 0 0 1-1-2c0-5-1-10 2-15a4 4 0 0 0-1-4 6 6 0 0 1 0-6l5-14a4 4 0 0 0 0-3 3 3 0 0 1 2-1c5-1 10-4 14-7l7-8c3-5 8-9 12-13l2-1 3 5-1 2c-3 2-4 6-5 10 0 7 2 13 3 20a63 63 0 0 0 7 15c2 3 2 3 5 1a12 12 0 0 1 1-1v2c1 3 1 6-3 8l-20 10a50 50 0 0 1-27 4Z");
			add_location(path2, file$s, 59, 4, 2078);
			attr_dev(path3, "fill", "var(--hair)");
			attr_dev(path3, "d", "M233 67c2-1 3 0 4 1a83 83 0 0 1 9 16l1 1c2 0 2 2 2 4a7 7 0 0 0 11 5l3-4-1-1a3 3 0 0 1 0-4l-1-3a57 57 0 0 1-3-8v-1l12 4a18 18 0 0 1 5 2c2 1 2 3 1 5a9 9 0 0 1-6 2l-3 1 1 1c9 6 18 11 28 12a6 6 0 0 1 3 2 4 4 0 0 1-1 6c-2 2-5 2-8 2-12 2-25 1-37 0l-7-1a3 3 0 0 1-3-3 19 19 0 0 1 1-7 58 58 0 0 0 2-11c0-2 0-2-2-2a44 44 0 0 1-7 1 13 13 0 0 1-5 0c-2-1-3-2-2-5a44 44 0 0 0 2-7 5 5 0 0 0 0-3 5 5 0 0 1 1-5Z");
			add_location(path3, file$s, 63, 4, 2388);
			attr_dev(path4, "fill", "var(--flesh)");
			attr_dev(path4, "d", "M65 63a97 97 0 0 1-15 12 11 11 0 0 1-3 1 34 34 0 0 1-9 1l-1 1 2 1c-1 0-4 1-4-2h5a20 20 0 0 1-2-2c-1-1-2-3-1-5s2-2 3-2h3l2-1a3 3 0 0 0-1-3 5 5 0 0 0-1-1 21 21 0 0 1-7-2 5 5 0 0 0-5-1c-1 1-2-1-2-2a7 7 0 0 1 0-3 47 47 0 0 1 3-8h6l5 1h4l4-2c1 0 3 0 3 2l1 1c3 0 5 1 6 3l1 1c4 0 4 1 4 4l-1 6Z");
			add_location(path4, file$s, 67, 4, 2836);
			attr_dev(path5, "fill", "var(--hair)");
			attr_dev(path5, "d", "M32 47a47 47 0 0 0-3 8 7 7 0 0 0 0 3c0 1 1 3 2 2a5 5 0 0 1 5 1 21 21 0 0 0 7 2 5 5 0 0 1 1 1 3 3 0 0 1 1 3l-2 1h-3l-3 2 1 5a20 20 0 0 0 2 2h-5c-5-2-11-2-17-1a25 25 0 0 1 0-5l3-18 2-8c1-2 3-2 5-1 2 0 3 2 4 3Z");
			add_location(path5, file$s, 71, 4, 3176);
			attr_dev(path6, "fill", "var(--flesh)");
			attr_dev(path6, "d", "m39 79 2 1-2-1Z");
			add_location(path6, file$s, 75, 4, 3436);
			attr_dev(g0, "id", "crunch-1");
			attr_dev(g0, "class", "svelte-jgmud6");
			add_location(g0, file$s, 50, 2, 983);
			attr_dev(path7, "fill", "var(--hair)");
			attr_dev(path7, "d", "M267 111a16 16 0 0 0-5 0l-16-2c-1 0-2-1-2-3-1-3 0-6 1-10a69 69 0 0 0 1-9l-1-1-7 1a11 11 0 0 1-6 0c-2-1-3-2-2-4a44 44 0 0 0 2-8 6 6 0 0 0 0-3 4 4 0 0 1 1-5h3c4 6 8 11 10 17l1 1c2 0 2 1 2 3a12 12 0 0 0 1 3 8 8 0 0 0 10 3l3-4c1-1-1-1-1-2v-2c1-2-1-4-1-6l-3-6v-1a69 69 0 0 0 16 6l2 1v3a11 11 0 0 1-7 4h-2a4 4 0 0 0 2 2c8 5 17 10 27 11a11 11 0 0 1 4 3v1c-3 4-7 6-12 6l-5 1h-13Z");
			add_location(path7, file$s, 78, 4, 3516);
			attr_dev(path8, "fill", "var(--pants)");
			attr_dev(path8, "d", "M270 111h12Z");
			add_location(path8, file$s, 82, 4, 3940);
			attr_dev(path9, "fill", "var(--shirt)");
			attr_dev(path9, "d", "M87 45c5 2 9 4 14 4a22 22 0 0 1 12 3c4 2 8 2 12 1a3 3 0 0 1 2-1l10 1c5 1 11 2 16-2h1a66 66 0 0 1-1 14c-1 6-2 12-1 18a11 11 0 0 1 0 7 27 27 0 0 0-2 12c0 3 0 3-2 2-7 0-13-2-19-1l-13 1a112 112 0 0 1-18-1l-11-1a32 32 0 0 1-14-4c-6-2-11-5-16-9a8 8 0 0 0-6-3c-3 0-3-2-4-4h7a5 5 0 0 0 4-3c3-5 1-10-1-15 0-2-2-4-4-6h3c2 0 2 1 3 2s2 1 3-1a9 9 0 0 1 3-2l9-3a20 20 0 0 0 7-2 12 12 0 0 0 5-6 1 1 0 0 1 1-1Z");
			add_location(path9, file$s, 83, 4, 3990);
			attr_dev(path10, "fill", "var(--flesh)");
			attr_dev(path10, "d", "M258 73v1l3 6c0 2 2 3 1 6v2s2 1 1 2l-3 4a8 8 0 0 1-10-3 12 12 0 0 1-1-3c0-2 0-3-2-3l-1-1c-2-6-6-12-10-17h-3l-5-8-7-10c-1-1-1-2-2 0l-5 13-2 1-2 4c-1 2-2 2-3 0-5-7-10-15-13-23v-2c4-2 6-5 4-10 0-4-2-8-7-10l2-2 20-17a13 13 0 0 1 4-2c4-1 7-1 9 2a3 3 0 0 0 4 1c4-1 7 1 9 3a81 81 0 0 1 5 8 13 13 0 0 1 2 7 49 49 0 0 0 4 19c2 3 2 7 3 11l4 18a5 5 0 0 0 1 3Z");
			add_location(path10, file$s, 87, 4, 4438);
			attr_dev(path11, "fill", "var(--pants)");
			attr_dev(path11, "d", "M191 22c5 2 7 6 7 10a1 1 0 0 0 0 1c2 4 0 7-4 9v2c3 8 8 16 13 23 1 2 2 2 3 0l2-4 2-1a69 69 0 0 1 1 11c0 3-1 4-4 5a23 23 0 0 0-13 9c-6 10-16 13-27 15a90 90 0 0 1-14 1l-7-1a27 27 0 0 1 2-12 11 11 0 0 0 0-7c-1-6 0-12 1-18a66 66 0 0 0 1-14l11-2a3 3 0 0 0 2-1c0-1 1-2 2-1s1 0 1-1l3-6c3-6 8-11 13-15 2-1 3-3 5-3Z");
			add_location(path11, file$s, 91, 4, 4840);
			attr_dev(path12, "fill", "var(--flesh)");
			attr_dev(path12, "d", "m53 58 4 6c2 5 4 10 1 15a5 5 0 0 1-4 3h-7l-7-3-17-8a8 8 0 0 1-4-5l-2-9a8 8 0 0 1 4-7l9-5a7 7 0 0 0 2-2 4 4 0 0 1 4-1c4 0 6 2 9 4a10 10 0 0 1 5 9 2 2 0 0 0 1 1 20 20 0 0 1 2 2Z");
			add_location(path12, file$s, 95, 4, 5199);
			attr_dev(path13, "fill", "var(--flesh)");
			attr_dev(path13, "d", "M87 45a1 1 0 0 0-1 1 12 12 0 0 1-5 6 20 20 0 0 1-7 2l-9 3a9 9 0 0 0-3 2c-1 2-2 2-3 1l-2-2-1-1 3-4 1-1-5-4a5 5 0 0 1-3-5c1-3 3-5 6-3l3 2c2 1 2 0 3-1a2 2 0 0 0 0-3 24 24 0 0 1-5-7 5 5 0 0 0-2-3c-2-1-3-2-1-4a30 30 0 0 1 7-5h1l6 4a4 4 0 0 1 2 1c1 4 4 4 7 5 3 0 3 1 2 3l1 2c2 1 3 3 3 5a3 3 0 0 0 1 3 5 5 0 0 1 1 3Z");
			add_location(path13, file$s, 99, 4, 5428);
			attr_dev(path14, "fill", "var(--hair)");
			attr_dev(path14, "d", "M64 19h-1a30 30 0 0 0-7 5c-2 2-1 3 1 4a5 5 0 0 1 2 3 24 24 0 0 0 5 7 2 2 0 0 1 0 3c-1 1-1 2-3 1l-3-2c-3-2-5 0-6 3a5 5 0 0 0 3 5l5 4-1 2-3 3a3 3 0 0 1-3-1 27 27 0 0 0-3-1 10 10 0 0 0-5-9c-3-2-5-4-9-4-2-6 0-10 4-14l12-11 7-5c1-2 3-1 4 1a12 12 0 0 1 1 6Z");
			add_location(path14, file$s, 103, 4, 5791);
			attr_dev(g1, "id", "crunch-2");
			attr_dev(g1, "class", "svelte-jgmud6");
			add_location(g1, file$s, 77, 2, 3494);
			attr_dev(g2, "class", "shapes svelte-jgmud6");
			add_location(g2, file$s, 49, 2, 938);
			attr_dev(g3, "class", "svelte-jgmud6");
			toggle_class(g3, "paused", /*isPaused*/ ctx[1]);
			toggle_class(g3, "flip", /*flipsvg*/ ctx[2]);
			add_location(g3, file$s, 48, 0, 887);
			attr_dev(svg, "xmlns", "http://www.w3.org/2000/svg");
			attr_dev(svg, "viewBox", "0 0 300.5 111.4");
			attr_dev(svg, "height", "100%");
			attr_dev(svg, "width", "100%");
			attr_dev(svg, "class", "svelte-jgmud6");
			add_location(svg, file$s, 47, 0, 793);
		},
		l: function claim(nodes) {
			throw new Error("options.hydrate only works if the component was compiled with the `hydratable: true` option");
		},
		m: function mount(target, anchor) {
			insert_dev(target, svg, anchor);
			append_dev(svg, g3);
			append_dev(g3, g2);
			append_dev(g2, g0);
			append_dev(g0, path0);
			append_dev(g0, path1);
			append_dev(g0, path2);
			append_dev(g0, path3);
			append_dev(g0, path4);
			append_dev(g0, path5);
			append_dev(g0, path6);
			append_dev(g2, g1);
			append_dev(g1, path7);
			append_dev(g1, path8);
			append_dev(g1, path9);
			append_dev(g1, path10);
			append_dev(g1, path11);
			append_dev(g1, path12);
			append_dev(g1, path13);
			append_dev(g1, path14);
			/*g2_binding*/ ctx[4](g2);
			if (if_block) if_block.m(g3, null);
		},
		p: function update(ctx, [dirty]) {
			if (/*isPaused*/ ctx[1]) {
				if (if_block) ; else {
					if_block = create_if_block$s(ctx);
					if_block.c();
					if_block.m(g3, null);
				}
			} else if (if_block) {
				if_block.d(1);
				if_block = null;
			}

			if (dirty & /*isPaused*/ 2) {
				toggle_class(g3, "paused", /*isPaused*/ ctx[1]);
			}

			if (dirty & /*flipsvg*/ 4) {
				toggle_class(g3, "flip", /*flipsvg*/ ctx[2]);
			}
		},
		i: noop,
		o: noop,
		d: function destroy(detaching) {
			if (detaching) detach_dev(svg);
			/*g2_binding*/ ctx[4](null);
			if (if_block) if_block.d();
		}
	};

	dispatch_dev("SvelteRegisterBlock", {
		block,
		id: create_fragment$s.name,
		type: "component",
		source: "",
		ctx
	});

	return block;
}

function instance$s($$self, $$props, $$invalidate) {
	let { $$slots: slots = {}, $$scope } = $$props;
	validate_slots('Workout_crunches', slots, []);
	let { direction = "right" } = $$props;
	let { isPaused = false } = $$props;
	let { rootElement } = $$props;
	let flipsvg = false;

	if (direction == "left") {
		flipsvg = true;
	}

	const writable_props = ['direction', 'isPaused', 'rootElement'];

	Object.keys($$props).forEach(key => {
		if (!~writable_props.indexOf(key) && key.slice(0, 2) !== '$$' && key !== 'slot') console.warn(`<Workout_crunches> was created with unknown prop '${key}'`);
	});

	function g2_binding($$value) {
		binding_callbacks[$$value ? 'unshift' : 'push'](() => {
			rootElement = $$value;
			$$invalidate(0, rootElement);
		});
	}

	$$self.$$set = $$props => {
		if ('direction' in $$props) $$invalidate(3, direction = $$props.direction);
		if ('isPaused' in $$props) $$invalidate(1, isPaused = $$props.isPaused);
		if ('rootElement' in $$props) $$invalidate(0, rootElement = $$props.rootElement);
	};

	$$self.$capture_state = () => ({
		direction,
		isPaused,
		rootElement,
		flipsvg
	});

	$$self.$inject_state = $$props => {
		if ('direction' in $$props) $$invalidate(3, direction = $$props.direction);
		if ('isPaused' in $$props) $$invalidate(1, isPaused = $$props.isPaused);
		if ('rootElement' in $$props) $$invalidate(0, rootElement = $$props.rootElement);
		if ('flipsvg' in $$props) $$invalidate(2, flipsvg = $$props.flipsvg);
	};

	if ($$props && "$$inject" in $$props) {
		$$self.$inject_state($$props.$$inject);
	}

	return [rootElement, isPaused, flipsvg, direction, g2_binding];
}

class Workout_crunches extends SvelteComponentDev {
	constructor(options) {
		super(options);

		init(this, options, instance$s, create_fragment$s, safe_not_equal, {
			direction: 3,
			isPaused: 1,
			rootElement: 0
		});

		dispatch_dev("SvelteRegisterComponent", {
			component: this,
			tagName: "Workout_crunches",
			options,
			id: create_fragment$s.name
		});

		const { ctx } = this.$$;
		const props = options.props || {};

		if (/*rootElement*/ ctx[0] === undefined && !('rootElement' in props)) {
			console.warn("<Workout_crunches> was created without expected prop 'rootElement'");
		}
	}

	get direction() {
		throw new Error("<Workout_crunches>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
	}

	set direction(value) {
		throw new Error("<Workout_crunches>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
	}

	get isPaused() {
		throw new Error("<Workout_crunches>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
	}

	set isPaused(value) {
		throw new Error("<Workout_crunches>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
	}

	get rootElement() {
		throw new Error("<Workout_crunches>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
	}

	set rootElement(value) {
		throw new Error("<Workout_crunches>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
	}
}

var workoutCrunches = /*#__PURE__*/Object.freeze({
    __proto__: null,
    'default': Workout_crunches
});

/* src/workouts/workout-curtsylunges.svelte generated by Svelte v3.49.0 */

const file$r = "src/workouts/workout-curtsylunges.svelte";

// (246:4) {#if isPaused}
function create_if_block$r(ctx) {
	let svg;
	let path;

	const block = {
		c: function create() {
			svg = svg_element("svg");
			path = svg_element("path");
			attr_dev(path, "d", "M10 24h-6v-24h6v24zm10 0h-6v-24h6v24zm-11-23h-4v22h4v-22zm10 0h-4v22h4v-22z");
			add_location(path, file$r, 246, 133, 17208);
			attr_dev(svg, "viewBox", "-6 -5 36 36");
			attr_dev(svg, "width", "100%");
			attr_dev(svg, "height", "100%");
			attr_dev(svg, "xmlns", "http://www.w3.org/2000/svg");
			attr_dev(svg, "fill-rule", "evenodd");
			attr_dev(svg, "clip-rule", "evenodd");
			add_location(svg, file$r, 246, 4, 17079);
		},
		m: function mount(target, anchor) {
			insert_dev(target, svg, anchor);
			append_dev(svg, path);
		},
		d: function destroy(detaching) {
			if (detaching) detach_dev(svg);
		}
	};

	dispatch_dev("SvelteRegisterBlock", {
		block,
		id: create_if_block$r.name,
		type: "if",
		source: "(246:4) {#if isPaused}",
		ctx
	});

	return block;
}

function create_fragment$r(ctx) {
	let svg;
	let t;
	let g6;
	let g5;
	let g0;
	let path0;
	let path1;
	let path2;
	let path3;
	let g1;
	let path4;
	let path5;
	let path6;
	let path7;
	let path8;
	let path9;
	let path10;
	let g2;
	let path11;
	let path12;
	let path13;
	let path14;
	let path15;
	let path16;
	let path17;
	let path18;
	let g3;
	let path19;
	let path20;
	let path21;
	let path22;
	let path23;
	let path24;
	let path25;
	let g4;
	let path26;
	let path27;
	let path28;
	let path29;
	let path30;
	let path31;
	let path32;
	let path33;
	let if_block = /*isPaused*/ ctx[1] && create_if_block$r(ctx);

	const block = {
		c: function create() {
			svg = svg_element("svg");
			t = text(">\n");
			g6 = svg_element("g");
			g5 = svg_element("g");
			g0 = svg_element("g");
			path0 = svg_element("path");
			path1 = svg_element("path");
			path2 = svg_element("path");
			path3 = svg_element("path");
			g1 = svg_element("g");
			path4 = svg_element("path");
			path5 = svg_element("path");
			path6 = svg_element("path");
			path7 = svg_element("path");
			path8 = svg_element("path");
			path9 = svg_element("path");
			path10 = svg_element("path");
			g2 = svg_element("g");
			path11 = svg_element("path");
			path12 = svg_element("path");
			path13 = svg_element("path");
			path14 = svg_element("path");
			path15 = svg_element("path");
			path16 = svg_element("path");
			path17 = svg_element("path");
			path18 = svg_element("path");
			g3 = svg_element("g");
			path19 = svg_element("path");
			path20 = svg_element("path");
			path21 = svg_element("path");
			path22 = svg_element("path");
			path23 = svg_element("path");
			path24 = svg_element("path");
			path25 = svg_element("path");
			g4 = svg_element("g");
			path26 = svg_element("path");
			path27 = svg_element("path");
			path28 = svg_element("path");
			path29 = svg_element("path");
			path30 = svg_element("path");
			path31 = svg_element("path");
			path32 = svg_element("path");
			path33 = svg_element("path");
			if (if_block) if_block.c();
			attr_dev(path0, "d", "M202 157c-2 0-2-2-1-3 4-14 8-27 14-40 3-8 9-11 16-14l31-11 9 11c2 1 1 5 4 5a70 70 0 0 0 23 0c7-1 11-6 13-13l37 17c7 3 8 10 11 15l11 31c1 4 2 8-2 10-5-3-9 0-12 3-6 4-12 6-18 8l-4-5-1 22-2 47c-1 14 1 29 2 44 1 6-1 7-6 6a20 20 0 0 0-3 0l-24 1-68-5c-3 0-5-1-7 1a1 1 0 0 1-1 0c-1-3-2-6-1-10l7-52c2-17 0-33 1-49 0-6 2-12 1-18l-5 6c-8-5-17-4-25-7Z");
			attr_dev(path0, "fill", "var(--shirt)");
			add_location(path0, file$r, 111, 6, 1845);
			attr_dev(path1, "fill", "var(--pants)");
			attr_dev(path1, "d", "M225 287c2-2 4-1 7-1l68 5 24-1 1 7c-2 12-4 24-3 37a207 207 0 0 0-2 30c0 3 0 5-4 5s-5 4-8 5c-11 0-21 0-31-6a4 4 0 0 0-4 0c-11 5-23 2-35 1-7-1-9-4-9-11-1-24-5-47-4-71Z");
			add_location(path1, file$r, 115, 6, 2247);
			attr_dev(path2, "fill", "var(--flesh)");
			attr_dev(path2, "d", "M238 369c12 1 24 4 35-1a4 4 0 0 1 4 0c10 6 20 6 31 6l-5 29a89 89 0 0 0 1 17c3 18-3 34-7 51-4 14-8 29-8 44a14 14 0 0 1-1 6c-5-4-10-4-16 1v-17c4-13 3-27 2-40-1-12-2-23 0-34 1-7 3-14 1-22a192 192 0 0 1-3-26c-2 15-6 30-4 45 2 10 3 20 1 29-3 18-4 35 0 52 1 3 1 7-3 9-5-2-10-1-14 2 1-24-8-46-12-69-2-12-3-24-1-36 3-15 1-31-1-46ZM338 176c6-2 12-4 18-8 3-3 7-6 12-3 2 14-1 29 2 43 5 23-2 45-4 67-1 14-4 27-1 41 2 12-6 24-18 27l-9 2c-5-2-4-5-1-8s7-6 8-12c0-2 3-4 0-5-4-2-5 1-7 3a77 77 0 0 1-4 8 3 3 0 0 1-3 1 2 2 0 0 1-1-3c3-8 2-17 9-23s11-14 10-25l-1-37c-1-16 0-32-6-47-2-7-1-14-4-21ZM202 157c8 3 18 2 25 7l-1 9c-1 12-8 23-7 35a112 112 0 0 1-8 46c-4 10-6 22-2 32s6 20 6 31c0 2 1 4-2 5-2 1-3-1-4-2s-2-4-4-2c-2 1-1 3 0 5l4 8c1 1 1 4-1 5s-4 0-5-1a11 11 0 0 0-6-4l-4-6-3-8c-4-9-3-17 0-25 4-12 4-23 2-35-2-19 1-39 4-58l1-7c3-11 4-23 5-35ZM311 92c-2 7-6 12-13 13a70 70 0 0 1-23 0c-3 0-2-4-4-5l-9-11c7-5 8-15 2-23l-4-12c-1-2-2-5 2-6l3 6c0-10 0-17 3-23 2-4 4-7 8-5a34 34 0 0 0 21 0c3-1 8-1 8 3 1 6 6 11 6 18 0 1-1 3 1 4 3 0 2-3 3-4 3 3 3 12-1 16s-5 9-7 14c-2 6-2 11 4 15Z");
			add_location(path2, file$r, 119, 6, 2474);
			attr_dev(path3, "fill", "var(--hair)");
			attr_dev(path3, "d", "M252 520c4-3 9-4 14-2 0 4 0 7 6 4 6-5 11-5 16-1 5 8 10 16 9 25-1 13-18 19-28 12-1-1-2-2-4-1-17 8-26 1-23-18 1-7 3-14 10-19ZM315 47c-1 1 0 4-3 4-2-1-1-3-1-4 0-7-5-12-6-18 0-4-5-4-8-3a34 34 0 0 1-21 0c-4-2-6 1-8 5-3 6-3 13-3 23l-3-6c-2-10 2-21-2-32-1-3 1-5 4-6 10-6 21-9 33-6 4 1 6 4 10 6 16 10 7 24 8 37Z");
			add_location(path3, file$r, 123, 6, 3591);
			attr_dev(g0, "id", "curtsy-lunge-1");
			attr_dev(g0, "class", "svelte-98ztq2");
			add_location(g0, file$r, 110, 4, 1815);
			attr_dev(path4, "fill", "var(--hair)");
			attr_dev(path4, "d", "M152 3c6 2 13 2 15 10 11 1 9 10 9 17l-2 9h-3a12 12 0 0 0-3-7 7 7 0 0 1-1-5c0-7-4-10-10-8a52 52 0 0 1-21 1c-6-1-7 1-8 7 0 4-1 9-7 11l1-23c0-5 3-8 8-9 4-1 8 0 12-3Z");
			add_location(path4, file$r, 129, 6, 3992);
			attr_dev(path5, "fill", "var(--shirt)");
			attr_dev(path5, "d", "M169 88c5 0 9 2 14 3l21 2c7 0 12 3 17 7a31 31 0 0 0 9 11c7 10 16 18 23 27l3 3c4 5 4 5-2 7a13 13 0 0 0-2 1c-11 2-21 6-29 15-3 1-5 1-6-3a18 18 0 0 0 0-4l-2-2-2 2c3 4-1 8-1 12-1 26 1 52-1 77 0 4 0 8-3 10a38 38 0 0 0-20 15c-1 1-2 3 0 4 9 1 2 3 0 5-5 1-9 0-12-4-7-11-17-14-29-15-5-1-10-2-14-6 5-1 9 2 13 3 2 0 4 2 5 0s1-5-2-6c-7-1-12-6-19-7-6 0-10-4-15-8-4-3-5-8-6-13l-11-38c-3-12-5-12-13-4l-6 6c-1 1-2 2-4 1-1-4 0-8-2-13-2-4-6-3-9-5-4-3-6-8-11-9v-4c9-7 15-16 21-25 7-10 18-15 29-21a49 49 0 0 0 12-9 13 13 0 0 1 9-4c0 6 7 11 13 12 10 1 18-2 26-5 6-2 6-9 9-14 3-2-4-1-3-4Z");
			add_location(path5, file$r, 133, 6, 4215);
			attr_dev(path6, "fill", "var(--pants)");
			attr_dev(path6, "d", "M147 261c12 1 22 4 29 15 3 4 8 5 13 4 0 5 2 6 5 2 1-1 2-3 4-3h4l-3 6c-1 2-3 3 0 5s3 0 4-2l3-1v4a123 123 0 0 1-11 34c-1 3-1 5 1 7 3 6 7 11 9 18-5 0-9 3-13 6-5 4-10 5-16 6l-15 4c-4 0-5 4-6 7-2 4-5 6-9 3-1-2-4-3-6-3-10-4-18-9-25-17 1-7 4-12 7-18 2-6 2-11-1-17-7-17-13-33-13-52 4 0 5 3 7 5a70 70 0 0 0 8 9c2 1 4 2 6 0s0-3-2-5a42 42 0 0 1-7-8c-1-1-2-2-1-3a3 3 0 0 1 3 0l4 3 12 7a3 3 0 0 0 5-1c1-2 0-3-1-4s-4-2-4-5l4 1c3 1 7 3 9 0 2-4-4-4-4-7Z");
			add_location(path6, file$r, 137, 6, 4843);
			attr_dev(path7, "fill", "var(--flesh)");
			attr_dev(path7, "d", "m161 366 15-4c6-1 11-2 16-6 4-3 8-6 13-6a35 35 0 0 1 7 18 20 20 0 0 0 4 11c5 7 5 16 4 25 0 5 0 11 4 15 10 12 11 27 14 41 2 11 2 21 7 31 2 5 4 11 8 15a12 12 0 0 1 4 7h-13c-4 0-5 2-4 6a16 16 0 0 0 1 5v4c-2 3-3-1-4 0-3-3-3-7-3-10-1-11-7-19-12-28l-29-52c-3-7-3-14-2-22 0-7-2-12-6-17-9-10-17-21-24-33ZM147 261c0 3 6 3 4 7-2 3-6 1-9 0l-4-1c0 3 2 4 4 5s2 3 1 4a3 3 0 0 1-5 1l-12-7-4-3a3 3 0 0 0-3 0c-1 1 0 2 1 3a42 42 0 0 0 7 8c2 2 4 3 2 5s-4 1-6 0a70 70 0 0 1-8-9c-2-2-3-5-6-5-11-4-18-15-29-20-16-7-30-18-43-30a45 45 0 0 1-7-9c-2-3-1-7 1-10l22-36a9 9 0 0 0 0-2c5 1 8 6 11 9 3 2 7 1 9 5 2 5 1 9 2 13-2 5-4 9-8 12-3 1-2 3-1 5 5 10 11 19 21 24 9 5 18 9 28 7 5 4 9 8 15 8 7 1 12 6 19 7 3 1 3 4 2 6s-3 0-5 0c-4-1-8-4-13-3 4 4 9 5 14 6ZM198 279c-2 0-3 2-4 3-3 4-5 3-5-2 1-2 8-4-1-6-2 0-1-2 0-3a38 38 0 0 1 20-15h7c7 0 10-4 12-10l2-10c3-14 10-27 9-42 0-3 0-6-2-8-6-7-9-15-13-22 8-9 18-13 29-15 4 6 5 14 7 21l2 8c5 9 5 18 2 27-4 16-9 31-15 46-2 5-5 9-9 14-7 9-19 13-26 24-2 2-4 2-7 2v-2c2-3 5-5 6-9a2 2 0 0 0 1-2 2 2 0 0 0 2-2h-1l-1 2a2 2 0 0 0-1 2c-4 1-5 4-6 7l-3 1c-1 2-2 4-4 2s-1-3 0-5l3-6c1-2 4-3 2-6-2 2-6 1-6 6ZM169 88c-1 3 5 2 4 5-3 4-4 11-10 13-8 3-16 6-26 5-6-1-12-6-13-12 4-1 6-5 6-9 1-10-3-19-7-27-3-4-5-9-1-14a4 4 0 0 0 0-4 8 8 0 0 1-1-7c6-2 7-7 7-11 1-6 2-8 8-7a52 52 0 0 0 21-1c6-2 10 1 10 8a7 7 0 0 0 1 5 12 12 0 0 1 4 7c-2 4 0 8-1 13l3-4c2 0 5 0 4 3-2 6-2 11-7 16a15 15 0 0 0-2 21ZM115 356c7 8 15 13 25 17l6 3c-1 5-5 8-8 11a96 96 0 0 0-20 33c-4 9-9 17-15 24-12 15-27 27-36 45l-4 4a7 7 0 0 0-5-4c-3-2-7-2-7-7a13 13 0 0 1 3-5c10-10 15-22 19-35 4-11 8-21 16-30 8-10 12-22 16-34l8-21a2 2 0 0 1 2-1Z");
			add_location(path7, file$r, 141, 6, 5342);
			attr_dev(path8, "fill", "var(--hair)");
			attr_dev(path8, "d", "M237 528c1-1 2 3 4 0v-4a16 16 0 0 1-1-5c-1-4 0-6 4-6h13l13 26a12 12 0 0 0 7 6c5 2 6 5 6 10s-5 5-9 5c-12 1-25 0-36-6-5-3-7-6-5-11l4-15ZM51 482c0 5 4 5 7 7a7 7 0 0 1 5 4 243 243 0 0 0-6 24 5 5 0 0 1-3 3c-7 3-14 4-21 2-5-1-7-4-6-9 0-4 1-7 4-9 6-5 11-10 15-17 1-2 2-5 5-5Z");
			add_location(path8, file$r, 145, 6, 7000);
			attr_dev(path9, "fill", "var(--pants)");
			attr_dev(path9, "d", "m174 48-3 4V39h3v9Z");
			add_location(path9, file$r, 149, 6, 7329);
			attr_dev(path10, "fill", "var(--shirt)");
			attr_dev(path10, "d", "M198 279c0-5 4-4 6-6 2 3-1 4-2 6Z");
			add_location(path10, file$r, 150, 6, 7388);
			attr_dev(g1, "id", "curtsy-lunge-2");
			attr_dev(g1, "class", "svelte-98ztq2");
			add_location(g1, file$r, 128, 4, 3962);
			attr_dev(path11, "fill", "var(--flesh)");
			attr_dev(path11, "d", "m118 296-14 17c-5 5-11 8-16 11-4 2-8 2-12-1-8-8-10-23-3-33 5-9 12-17 17-27l10 1c6 3 10 2 14-2 7-7 13-15 22-20 7-4 9-10 7-15l-3-7c1-5 2-9 8-10 4-1 6-9 5-13-1-6-4-11-6-16-2-3-3-6 2-7 2 0 0 3 2 3 1-3-1-7 1-10 4-3 4-6 4-10-1-6 1-8 7-7 8 1 16 2 24-1h4a8 8 0 0 1 9 6c2 8 6 16 4 24 2-2 2-6 2-9 3 0 5 1 5 5-1 6-2 11-7 14l-2 3c1 6-3 11-4 17-1 2 1 3 2 4a9 9 0 0 1 2 6c1 6-2 10-7 13l-8 6c1 4 5 7 9 10 7 5 16 7 24 12 6 4 13 8 20 6 7-3 14-2 21-3l1-1 10 22c1 2 1 3 3 3v14c-3 5-6 11-11 15-2 2-5 3-8 2a59 59 0 0 1-18-8l-18-13a8 8 0 0 0-1-2c-17-17-34-33-53-48-2-1-3-2-5 0-10 5-15 15-21 23l-22 26Z");
			add_location(path11, file$r, 153, 6, 7498);
			attr_dev(path12, "fill", "var(--hair)");
			attr_dev(path12, "d", "M249 518c6 11 8 24 18 33 6 5 4 10-4 13h-11l-12-3c-9-3-16-7-18-17v-5c3-6 3-11 2-17 2 0 2 3 3 4 1 2 3 3 5 3 3-1 1-3 1-5s1-5 3-4c4 0 8-3 13-2Z");
			add_location(path12, file$r, 157, 6, 8139);
			attr_dev(path13, "fill", "var(--shirt)");
			attr_dev(path13, "d", "M220 297c-6 21-13 42-14 64v14c0 3-1 7-6 7l-1-1-40-17c-11-5-22-9-35-4l-22 5c-2 0-4 0-5 2-3-4-1-7 0-10 8-14 13-29 19-45 2-5 2-10 2-16l21-26c7-8 12-18 22-23 2-2 3-1 5 0 18 15 36 31 53 48a8 8 0 0 1 1 2Z");
			add_location(path13, file$r, 161, 6, 8339);
			attr_dev(path14, "fill", "var(--pants)");
			attr_dev(path14, "d", "M97 367c1-2 3-2 5-2l22-5c13-5 24-1 35 4l40 17 1 1-1 3c-3-1-7-3-11-2-14 5-23 14-29 27-3 6 1 13 7 15 6 1 12 1 17 5-5 10-9 20-6 32 2 4 2 9 3 13 0 3 1 5-2 7s-6 2-8 1a38 38 0 0 1-5-3l-1-2c0-3 4-6 2-8-3-3-6-4-9-5a29 29 0 0 0-3-1h-3c-2 4-5 3-7 2-9 0-17 2-25 4-2-15 1-30 3-46 1-4 0-6-4-8a51 51 0 0 1-21-49Z");
			add_location(path14, file$r, 165, 6, 8599);
			attr_dev(path15, "fill", "var(--flesh)");
			attr_dev(path15, "d", "M183 430c-5-4-11-4-17-5-6-2-10-9-7-15 6-13 15-22 29-27 4-1 7 1 11 2 6 4 12 6 18 11 10 6 13 15 13 26v14a7 7 0 0 0 0 5c6 12 5 26 5 39 1 11 2 22 11 31l3 7c-5-1-9 2-13 1-2 0-3 3-3 5s2 4-1 5c-2 0-4-1-5-3-1-1-1-4-3-4a20 20 0 0 0-2-10c-6-11-11-23-18-34l-1-1a18 18 0 0 0-1-3c-6-12-10-24-5-38l-2-2c-2-4-6-4-9-4a2 2 0 0 0-1 0h-1ZM119 470c8-2 16-4 25-4 2 1 5 2 7-2h3a29 29 0 0 1 3 1c3 1 6 2 9 5 2 2-2 5-2 8l1 2c-6 7-9 16-15 23l-7 15c-3 9-10 14-19 13-6-1-13-2-18-7-3-3-8-4-12-6l-34-17a57 57 0 0 0-19-6c-2-4-3-8-9-6-1 1-1-1-2-2-3-6 0-12 7-12a13 13 0 0 0 7-1c15 4 30 6 45 7a41 41 0 0 1 20 7c3 2 4 1 5-2l5-16Z");
			add_location(path15, file$r, 169, 6, 8959);
			attr_dev(path16, "fill", "var(--shirt)");
			attr_dev(path16, "d", "m262 262-1 1c-7 1-14 0-21 3-7 2-14-3-20-6-8-5-17-7-24-12-4-3-8-6-9-10l8-6c5-3 8-7 7-13a9 9 0 0 0-2-6c-1-1-3-2-2-4 5 1 9 6 15 7 4 4 9 5 13 6 0 2 1 3 3 3 7-1 12 3 17 5 8 5 11 12 12 21 0 4 3 7 4 11Z");
			add_location(path16, file$r, 173, 6, 9615);
			attr_dev(path17, "fill", "var(--hair)");
			attr_dev(path17, "d", "M206 170c0 3 0 7-2 9 2-8-2-16-4-24a8 8 0 0 0-9-6h-4c-8 3-16 2-24 1-6-1-8 1-7 7 0 4 0 7-4 10-2 3 0 7-1 10-2 0 0-3-2-3-2-12-1-24 0-36a12 12 0 0 1 5-9c12-9 26-11 39-4 9 5 19 11 16 26-1 6-4 13-3 19ZM44 474a13 13 0 0 1-7 1c-7 0-10 6-7 12 1 1 1 3 2 2 6-2 7 2 9 6-7 1-9 8-13 13-2 2 0 3 0 4 3 8 1 11-7 13a46 46 0 0 1-8 2c-5 0-9-1-11-6s-3-9 0-14a26 26 0 0 1 2-3c6-6 10-13 10-22a30 30 0 0 1 3-13c2-5 6-6 11-4a113 113 0 0 0 11 4c2 1 5 2 5 5Z");
			add_location(path17, file$r, 177, 6, 9872);
			attr_dev(path18, "fill", "var(--shirt)");
			attr_dev(path18, "d", "m140 220 3 7c2 5 0 11-7 15-9 5-15 13-22 20-4 4-8 5-14 2l-10-1c1-14 10-24 21-31 9-6 20-7 29-12Z");
			add_location(path18, file$r, 181, 6, 10363);
			attr_dev(g2, "id", "curtsy-lunge-3");
			attr_dev(g2, "class", "svelte-98ztq2");
			add_location(g2, file$r, 152, 4, 7468);
			attr_dev(path19, "fill", "var(--hair)");
			attr_dev(path19, "d", "M385 0c-6 2-13 2-15 10-11 1-8 10-9 17l2 9h3a12 12 0 0 1 3-7 7 7 0 0 0 2-5c0-7 3-9 9-8a52 52 0 0 0 21 1c6-1 7 1 8 7 0 4 2 9 7 11l-1-23c0-5-3-8-7-9-5-1-9 0-13-3Z");
			add_location(path19, file$r, 187, 6, 10556);
			attr_dev(path20, "fill", "var(--shirt)");
			attr_dev(path20, "d", "M368 85c-5 0-9 2-13 3l-22 2c-7 0-12 3-17 7a31 31 0 0 1-9 11c-6 10-15 18-23 27l-3 3c-4 5-3 5 2 7a14 14 0 0 1 2 1c11 2 21 6 29 15 4 1 6 1 6-3a18 18 0 0 1 1-4l2-2 1 2c-3 4 1 8 1 12l1 77c1 4 1 8 4 10a38 38 0 0 1 20 15c1 1 1 3-1 4-8 1-1 3 0 5 5 1 9 0 12-4 7-11 18-14 30-15 4-1 9-2 14-6-6-1-10 2-14 3-2 0-3 2-5 0-1-2 0-5 3-6 6-1 11-6 18-7 6 0 11-4 15-8 4-3 5-8 7-13l10-38c3-12 5-12 13-4l6 6c1 1 2 2 4 1 1-4 0-8 2-13 3-4 7-3 9-5 4-3 6-8 11-9 2-1 2-2 0-4-8-7-15-16-21-25-7-10-18-15-29-21a49 49 0 0 1-12-9 12 12 0 0 0-9-4c0 6-7 11-13 12-9 1-17-2-26-5-6-2-6-9-9-13-2-3 4-2 3-5Z");
			add_location(path20, file$r, 191, 6, 10776);
			attr_dev(path21, "fill", "var(--pants)");
			attr_dev(path21, "d", "M391 258c-12 1-23 4-30 15-3 4-7 5-12 4-1 5-3 6-6 2-1-1-2-3-4-3h-4l3 6c1 2 3 4 1 5s-4 0-5-2l-3-1v4a123 123 0 0 0 11 34v7c-4 6-8 11-10 18 5 0 9 3 13 6 5 4 11 5 17 6l14 4c4 0 5 4 7 7 2 4 4 6 9 3 1-2 3-3 5-3 10-4 19-9 25-17 0-7-4-12-6-17-3-7-3-12 0-18 8-17 14-33 13-52-4 0-5 3-7 5a70 70 0 0 1-8 9c-2 1-4 2-6 0-1-2 1-3 2-5a42 42 0 0 0 8-8v-3a3 3 0 0 0-3 0l-4 3-12 7a3 3 0 0 1-4-1c-2-1-1-3 1-4s3-2 3-5l-4 1c-3 1-7 3-9 0-2-4 4-4 5-7Z");
			add_location(path21, file$r, 195, 6, 11405);
			attr_dev(path22, "fill", "var(--flesh)");
			attr_dev(path22, "d", "m376 363-14-4c-6-1-12-2-17-6-4-3-8-6-13-6a35 35 0 0 0-7 18 20 20 0 0 1-4 11c-5 8-5 16-4 25 0 5 0 11-3 15-10 12-12 27-14 41-2 11-3 21-7 31-3 5-5 11-9 15a12 12 0 0 0-3 7h12c5 0 5 2 5 6a16 16 0 0 1-2 5v4c2 3 3-1 5 0 3-3 2-7 2-10 1-11 8-19 12-27l29-53c4-7 3-14 3-22-1-6 1-11 6-17 8-10 17-21 23-33ZM391 258c-1 3-7 3-5 7 2 3 6 1 9 0l4-1c0 3-2 4-3 5s-3 3-1 4a3 3 0 0 0 4 1l12-7 4-3a3 3 0 0 1 3 0v3a42 42 0 0 1-8 8c-1 2-3 3-2 5 2 2 4 1 6 0a70 70 0 0 0 8-9c2-2 3-5 7-5 11-4 17-15 28-19 16-8 30-18 43-30a46 46 0 0 0 7-10c3-3 1-7-1-10l-22-36a9 9 0 0 1 0-2c-5 1-7 6-11 9-2 2-7 2-9 5-2 5-1 9-2 13 2 5 4 9 9 12 2 1 2 3 0 5-5 10-11 19-21 24-8 5-17 9-28 7-4 4-9 8-15 8-7 1-12 6-18 7-3 1-4 4-3 6s3 0 5 0c4-1 8-4 14-3-5 4-10 5-14 6ZM339 276c2 0 3 2 4 3 3 4 5 3 6-2-2-2-8-4 0-6 2 0 1-2 1-3a38 38 0 0 0-20-15h-8c-7 0-10-4-12-10l-2-10c-3-14-9-27-9-42 1-3 1-6 3-8 6-7 8-15 12-22-8-9-18-13-29-15-4 7-5 14-7 22l-2 7c-5 9-4 18-2 27 5 16 9 31 15 46 2 5 6 9 9 14 7 9 20 14 27 24 1 2 3 2 6 2v-2c-1-3-5-5-6-9a2 2 0 0 1-1-2 2 2 0 0 1-2-2h1l1 2a2 2 0 0 1 1 2c4 1 6 4 6 7l3 1c1 2 3 4 5 2s0-3-1-5l-3-6c-1-2-4-3-2-6 2 2 6 1 6 6ZM368 85c1 3-5 2-3 5 3 4 3 11 9 13 8 3 17 6 26 5 6-1 13-6 13-12-4-1-5-5-6-9-1-10 3-19 8-27 2-4 4-9 1-14a4 4 0 0 1 0-4 8 8 0 0 0 0-7c-5-2-7-7-7-11-1-6-2-8-8-7a52 52 0 0 1-21-1c-6-1-9 1-9 8a7 7 0 0 1-2 5 12 12 0 0 0-3 7v13c-2-1-2-3-2-4-3 0-5 0-4 3 1 6 1 11 6 16a15 15 0 0 1 2 21ZM422 353c-6 8-15 13-25 17-2 0-4 1-5 3 1 5 4 8 7 11 10 9 16 21 21 33 3 9 8 17 15 24 12 15 27 27 35 45l5 4a7 7 0 0 1 4-4c3-2 7-2 7-7a13 13 0 0 0-3-5c-9-10-15-22-19-35-3-11-8-21-15-30-9-10-13-22-17-34l-8-21a2 2 0 0 0-2-1Z");
			add_location(path22, file$r, 199, 6, 11893);
			attr_dev(path23, "fill", "var(--hair)");
			attr_dev(path23, "d", "M301 525c-2-1-3 3-5 0v-4a16 16 0 0 0 2-5c0-4 0-6-5-6h-12l-14 26a12 12 0 0 1-7 6c-4 2-6 6-5 10s4 5 8 5c12 1 25 0 36-6 5-3 7-6 6-11-2-5-4-10-4-15ZM486 479c0 5-4 5-7 7a7 7 0 0 0-4 4 240 240 0 0 1 5 24 5 5 0 0 0 3 3c7 3 14 4 22 2 5-1 7-4 6-9-1-4-2-7-5-9-6-5-11-10-14-17-1-2-3-5-6-5Z");
			add_location(path23, file$r, 203, 6, 13543);
			attr_dev(path24, "fill", "var(--pants)");
			attr_dev(path24, "d", "M364 45c0 1 0 3 2 4V36h-3l1 9Z");
			add_location(path24, file$r, 207, 6, 13882);
			attr_dev(path25, "fill", "var(--shirt)");
			attr_dev(path25, "d", "M339 276c0-5-4-4-6-6-2 3 2 4 2 6Z");
			add_location(path25, file$r, 208, 6, 13952);
			attr_dev(g3, "id", "curtsy-lunge-4");
			attr_dev(g3, "class", "svelte-98ztq2");
			add_location(g3, file$r, 186, 4, 10526);
			attr_dev(path26, "fill", "var(--flesh)");
			attr_dev(path26, "d", "m420 293 15 17c4 5 10 8 16 11 3 2 7 2 11-1 8-8 10-23 3-33-5-9-12-17-17-27l-10 1c-6 3-10 2-14-2-7-7-13-15-22-20-7-4-9-10-6-15l2-7c-1-5-2-9-8-10-4-1-6-9-5-13 1-6 4-11 7-16 1-3 2-6-3-7-1 0 0 3-2 3-1-3 2-7-1-10s-4-6-3-10c0-6-2-8-8-7-8 1-16 2-23-1h-5a8 8 0 0 0-8 6c-2 8-7 16-5 24-2-2-2-6-2-9-3 0-5 1-4 5 0 6 1 11 6 14l2 3c0 6 3 11 4 17 1 2 0 3-1 4a9 9 0 0 0-3 6c0 6 2 10 8 13l7 6c-1 4-4 7-8 10-8 5-17 7-25 12-6 4-13 8-20 6-7-3-14-2-21-3l-1-1-10 22-2 3v14c2 5 5 11 10 15 2 2 5 3 8 3a59 59 0 0 0 18-9l19-13a8 8 0 0 1 1-2c16-17 34-33 52-48 2-1 3-2 5 0 10 5 15 15 22 23l21 26Z");
			add_location(path26, file$r, 211, 6, 14062);
			attr_dev(path27, "fill", "var(--hair)");
			attr_dev(path27, "d", "M290 516c-6 10-9 23-19 32-6 5-4 10 4 13h11c4-2 8-2 13-3 9-3 15-7 17-17v-5c-3-6-3-11-2-17l-3 4c-1 2-2 3-5 3-2-1-1-3-1-5s0-5-2-4c-5 0-9-3-13-1Z");
			add_location(path27, file$r, 215, 6, 14691);
			attr_dev(path28, "fill", "var(--shirt)");
			attr_dev(path28, "d", "M319 294c5 21 12 42 13 64v14c1 3 1 7 7 7l1-1 39-17c11-5 23-9 35-4l23 5c1 0 3 0 5 2 2-4 1-7-1-10-8-14-13-29-19-44l-2-17-21-26c-7-8-12-18-22-23-2-2-3-1-5 0-18 15-36 31-52 48a8 8 0 0 0-1 2Z");
			add_location(path28, file$r, 219, 6, 14893);
			attr_dev(path29, "fill", "var(--pants)");
			attr_dev(path29, "d", "M442 364c-2-2-4-2-5-2l-23-5c-12-5-24-1-35 4l-40 17-1 1 1 3c4-1 7-3 11-2 14 5 24 14 30 27 3 6-1 13-8 15-5 2-12 1-17 5 6 10 9 20 6 32l-2 13c-1 3-1 5 1 7s6 2 9 1a37 37 0 0 0 5-3v-2c0-3-4-6-1-8 2-3 5-4 8-5a27 27 0 0 1 4-1h3c1 4 4 3 6 3 9-1 17 1 26 3 1-15-2-30-4-46 0-4 1-5 4-8 17-12 24-29 22-49Z");
			add_location(path29, file$r, 223, 6, 15141);
			attr_dev(path30, "fill", "var(--flesh)");
			attr_dev(path30, "d", "M355 427c6-4 12-3 17-5 7-2 11-9 8-15-6-13-16-22-30-27-4-1-7 1-11 2-5 4-12 6-18 11-9 6-13 15-13 26v14a7 7 0 0 1 0 5c-5 12-5 26-5 39 0 11-2 22-10 31-2 2-3 5-3 8 4-1 8 1 13 1 2-1 2 2 2 4s-1 4 1 5c3 0 4-1 5-3 1-1 1-4 3-4a20 20 0 0 1 2-10l19-34 1-1a18 18 0 0 1 0-3c6-12 11-24 6-37-1-2 0-3 1-3 2-3 6-4 9-4a2 2 0 0 1 1 0h1ZM420 467c-9-2-17-4-26-4-2 1-5 2-6-2h-3a27 27 0 0 0-4 1c-3 1-6 2-8 5-3 2 1 5 1 8v2c6 7 9 16 14 23l7 15c3 9 11 14 19 13 7-1 13-2 18-7 3-3 8-4 12-6l34-17a57 57 0 0 1 19-6c2-4 4-8 9-6 1 1 2-1 2-2 4-6 0-12-7-12a13 13 0 0 1-7-1c-15 4-30 6-45 7a41 41 0 0 0-19 7c-3 2-5 1-6-2-2-6-4-10-4-16Z");
			add_location(path30, file$r, 227, 6, 15494);
			attr_dev(path31, "fill", "var(--shirt)");
			attr_dev(path31, "d", "m276 259 1 1c7 1 14 0 21 3 7 2 14-3 20-6 8-5 17-7 25-12 4-3 7-6 8-10l-7-6c-6-3-8-7-8-13a9 9 0 0 1 2-6c1-1 3-2 2-4-5 1-9 6-15 7-3 4-8 5-13 6 0 2-1 3-3 3-7-1-12 3-17 5-8 5-11 12-12 21 0 4-3 7-4 11Z");
			add_location(path31, file$r, 231, 6, 16154);
			attr_dev(path32, "fill", "var(--hair)");
			attr_dev(path32, "d", "M332 167c0 3 0 7 2 9-2-8 3-16 5-24a8 8 0 0 1 8-6h5c7 3 15 2 23 1 6-1 8 1 8 7-1 4 0 7 3 10s0 7 2 10l1-3c2-12 1-24 0-35a12 12 0 0 0-5-10c-12-9-26-11-39-4-8 5-19 11-16 26 1 6 4 13 3 19ZM494 471a13 13 0 0 0 7 1c7 0 10 6 7 12 0 1-1 3-2 2-6-2-7 2-9 6 8 1 10 8 14 13 1 2 0 3-1 4-3 8-1 11 7 13a45 45 0 0 0 8 2c5 0 9-1 11-6s4-9 0-14a26 26 0 0 0-2-3c-6-6-9-13-9-22a30 30 0 0 0-4-13c-2-5-6-6-11-4a116 116 0 0 1-11 4c-2 1-4 2-5 5Z");
			add_location(path32, file$r, 235, 6, 16411);
			attr_dev(path33, "fill", "var(--shirt)");
			attr_dev(path33, "d", "m398 217-2 7c-3 5-1 11 6 15 9 5 15 13 22 20 4 4 8 5 14 2l10-1c-1-14-9-24-21-31-9-6-20-7-29-12Z");
			add_location(path33, file$r, 239, 6, 16890);
			attr_dev(g4, "id", "curtsy-lunge-5");
			attr_dev(g4, "class", "svelte-98ztq2");
			add_location(g4, file$r, 210, 4, 14032);
			attr_dev(g5, "class", "shapes svelte-98ztq2");
			add_location(g5, file$r, 109, 2, 1768);
			attr_dev(g6, "class", "svelte-98ztq2");
			toggle_class(g6, "paused", /*isPaused*/ ctx[1]);
			toggle_class(g6, "flip", /*flipsvg*/ ctx[2]);
			add_location(g6, file$r, 108, 0, 1717);
			attr_dev(svg, "xmlns", "http://www.w3.org/2000/svg");
			attr_dev(svg, "viewBox", "0 0 538.2 564.5");
			attr_dev(svg, "height", "100%");
			attr_dev(svg, "width", "100%");
			attr_dev(svg, "class", "svelte-98ztq2");
			add_location(svg, file$r, 107, 0, 1622);
		},
		l: function claim(nodes) {
			throw new Error("options.hydrate only works if the component was compiled with the `hydratable: true` option");
		},
		m: function mount(target, anchor) {
			insert_dev(target, svg, anchor);
			append_dev(svg, t);
			append_dev(svg, g6);
			append_dev(g6, g5);
			append_dev(g5, g0);
			append_dev(g0, path0);
			append_dev(g0, path1);
			append_dev(g0, path2);
			append_dev(g0, path3);
			append_dev(g5, g1);
			append_dev(g1, path4);
			append_dev(g1, path5);
			append_dev(g1, path6);
			append_dev(g1, path7);
			append_dev(g1, path8);
			append_dev(g1, path9);
			append_dev(g1, path10);
			append_dev(g5, g2);
			append_dev(g2, path11);
			append_dev(g2, path12);
			append_dev(g2, path13);
			append_dev(g2, path14);
			append_dev(g2, path15);
			append_dev(g2, path16);
			append_dev(g2, path17);
			append_dev(g2, path18);
			append_dev(g5, g3);
			append_dev(g3, path19);
			append_dev(g3, path20);
			append_dev(g3, path21);
			append_dev(g3, path22);
			append_dev(g3, path23);
			append_dev(g3, path24);
			append_dev(g3, path25);
			append_dev(g5, g4);
			append_dev(g4, path26);
			append_dev(g4, path27);
			append_dev(g4, path28);
			append_dev(g4, path29);
			append_dev(g4, path30);
			append_dev(g4, path31);
			append_dev(g4, path32);
			append_dev(g4, path33);
			/*g5_binding*/ ctx[4](g5);
			if (if_block) if_block.m(g6, null);
		},
		p: function update(ctx, [dirty]) {
			if (/*isPaused*/ ctx[1]) {
				if (if_block) ; else {
					if_block = create_if_block$r(ctx);
					if_block.c();
					if_block.m(g6, null);
				}
			} else if (if_block) {
				if_block.d(1);
				if_block = null;
			}

			if (dirty & /*isPaused*/ 2) {
				toggle_class(g6, "paused", /*isPaused*/ ctx[1]);
			}

			if (dirty & /*flipsvg*/ 4) {
				toggle_class(g6, "flip", /*flipsvg*/ ctx[2]);
			}
		},
		i: noop,
		o: noop,
		d: function destroy(detaching) {
			if (detaching) detach_dev(svg);
			/*g5_binding*/ ctx[4](null);
			if (if_block) if_block.d();
		}
	};

	dispatch_dev("SvelteRegisterBlock", {
		block,
		id: create_fragment$r.name,
		type: "component",
		source: "",
		ctx
	});

	return block;
}

function instance$r($$self, $$props, $$invalidate) {
	let { $$slots: slots = {}, $$scope } = $$props;
	validate_slots('Workout_curtsylunges', slots, []);
	let { direction = "right" } = $$props;
	let { isPaused = false } = $$props;
	let { rootElement } = $$props;
	let flipsvg = false;

	if (direction == "left") {
		flipsvg = true;
	}

	const writable_props = ['direction', 'isPaused', 'rootElement'];

	Object.keys($$props).forEach(key => {
		if (!~writable_props.indexOf(key) && key.slice(0, 2) !== '$$' && key !== 'slot') console.warn(`<Workout_curtsylunges> was created with unknown prop '${key}'`);
	});

	function g5_binding($$value) {
		binding_callbacks[$$value ? 'unshift' : 'push'](() => {
			rootElement = $$value;
			$$invalidate(0, rootElement);
		});
	}

	$$self.$$set = $$props => {
		if ('direction' in $$props) $$invalidate(3, direction = $$props.direction);
		if ('isPaused' in $$props) $$invalidate(1, isPaused = $$props.isPaused);
		if ('rootElement' in $$props) $$invalidate(0, rootElement = $$props.rootElement);
	};

	$$self.$capture_state = () => ({
		direction,
		isPaused,
		rootElement,
		flipsvg
	});

	$$self.$inject_state = $$props => {
		if ('direction' in $$props) $$invalidate(3, direction = $$props.direction);
		if ('isPaused' in $$props) $$invalidate(1, isPaused = $$props.isPaused);
		if ('rootElement' in $$props) $$invalidate(0, rootElement = $$props.rootElement);
		if ('flipsvg' in $$props) $$invalidate(2, flipsvg = $$props.flipsvg);
	};

	if ($$props && "$$inject" in $$props) {
		$$self.$inject_state($$props.$$inject);
	}

	return [rootElement, isPaused, flipsvg, direction, g5_binding];
}

class Workout_curtsylunges extends SvelteComponentDev {
	constructor(options) {
		super(options);

		init(this, options, instance$r, create_fragment$r, safe_not_equal, {
			direction: 3,
			isPaused: 1,
			rootElement: 0
		});

		dispatch_dev("SvelteRegisterComponent", {
			component: this,
			tagName: "Workout_curtsylunges",
			options,
			id: create_fragment$r.name
		});

		const { ctx } = this.$$;
		const props = options.props || {};

		if (/*rootElement*/ ctx[0] === undefined && !('rootElement' in props)) {
			console.warn("<Workout_curtsylunges> was created without expected prop 'rootElement'");
		}
	}

	get direction() {
		throw new Error("<Workout_curtsylunges>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
	}

	set direction(value) {
		throw new Error("<Workout_curtsylunges>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
	}

	get isPaused() {
		throw new Error("<Workout_curtsylunges>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
	}

	set isPaused(value) {
		throw new Error("<Workout_curtsylunges>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
	}

	get rootElement() {
		throw new Error("<Workout_curtsylunges>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
	}

	set rootElement(value) {
		throw new Error("<Workout_curtsylunges>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
	}
}

var workoutCurtsylunges = /*#__PURE__*/Object.freeze({
    __proto__: null,
    'default': Workout_curtsylunges
});

/* src/workouts/workout-diagonallunges.svelte generated by Svelte v3.49.0 */

const file$q = "src/workouts/workout-diagonallunges.svelte";

// (258:4) {#if isPaused}
function create_if_block$q(ctx) {
	let svg;
	let path;

	const block = {
		c: function create() {
			svg = svg_element("svg");
			path = svg_element("path");
			attr_dev(path, "d", "M10 24h-6v-24h6v24zm10 0h-6v-24h6v24zm-11-23h-4v22h4v-22zm10 0h-4v22h4v-22z");
			add_location(path, file$q, 258, 133, 15728);
			attr_dev(svg, "viewBox", "-6 -5 36 36");
			attr_dev(svg, "width", "100%");
			attr_dev(svg, "height", "100%");
			attr_dev(svg, "xmlns", "http://www.w3.org/2000/svg");
			attr_dev(svg, "fill-rule", "evenodd");
			attr_dev(svg, "clip-rule", "evenodd");
			add_location(svg, file$q, 258, 4, 15599);
		},
		m: function mount(target, anchor) {
			insert_dev(target, svg, anchor);
			append_dev(svg, path);
		},
		d: function destroy(detaching) {
			if (detaching) detach_dev(svg);
		}
	};

	dispatch_dev("SvelteRegisterBlock", {
		block,
		id: create_if_block$q.name,
		type: "if",
		source: "(258:4) {#if isPaused}",
		ctx
	});

	return block;
}

function create_fragment$q(ctx) {
	let svg;
	let t;
	let g6;
	let g5;
	let g0;
	let path0;
	let path1;
	let path2;
	let path3;
	let path4;
	let path5;
	let path6;
	let path7;
	let g1;
	let path8;
	let path9;
	let path10;
	let path11;
	let g2;
	let path12;
	let path13;
	let path14;
	let path15;
	let path16;
	let path17;
	let path18;
	let g3;
	let path19;
	let path20;
	let path21;
	let path22;
	let path23;
	let path24;
	let path25;
	let path26;
	let g4;
	let path27;
	let path28;
	let path29;
	let path30;
	let path31;
	let path32;
	let path33;
	let if_block = /*isPaused*/ ctx[1] && create_if_block$q(ctx);

	const block = {
		c: function create() {
			svg = svg_element("svg");
			t = text(">\n");
			g6 = svg_element("g");
			g5 = svg_element("g");
			g0 = svg_element("g");
			path0 = svg_element("path");
			path1 = svg_element("path");
			path2 = svg_element("path");
			path3 = svg_element("path");
			path4 = svg_element("path");
			path5 = svg_element("path");
			path6 = svg_element("path");
			path7 = svg_element("path");
			g1 = svg_element("g");
			path8 = svg_element("path");
			path9 = svg_element("path");
			path10 = svg_element("path");
			path11 = svg_element("path");
			g2 = svg_element("g");
			path12 = svg_element("path");
			path13 = svg_element("path");
			path14 = svg_element("path");
			path15 = svg_element("path");
			path16 = svg_element("path");
			path17 = svg_element("path");
			path18 = svg_element("path");
			g3 = svg_element("g");
			path19 = svg_element("path");
			path20 = svg_element("path");
			path21 = svg_element("path");
			path22 = svg_element("path");
			path23 = svg_element("path");
			path24 = svg_element("path");
			path25 = svg_element("path");
			path26 = svg_element("path");
			g4 = svg_element("g");
			path27 = svg_element("path");
			path28 = svg_element("path");
			path29 = svg_element("path");
			path30 = svg_element("path");
			path31 = svg_element("path");
			path32 = svg_element("path");
			path33 = svg_element("path");
			if (if_block) if_block.c();
			attr_dev(path0, "fill", "var(--hair)");
			attr_dev(path0, "d", "M50 565a66 66 0 0 0 3 15c1 6-1 11-6 15-6 6-14 8-22 9-1 0-3-1-3 1H8c-4-3-5-8-2-12 11-9 14-23 21-35 3 1 6 3 9 2 5-1 6 2 6 6 0 1-2 2 0 3s3 0 5-1c1-1 1-3 3-3ZM275 557c-2 0-2 2-2 3-2 5-5 8-11 7a44 44 0 0 1-8-1c-9-2-10-5-7-13l-1-5c-4-5-6-11-13-12 2-4 4-7 9-6l2-2c4-6 1-11-6-12-3 0-6 0-8-2 3-5 9-5 13-7 11-4 14-2 17 9a7 7 0 0 1 0 3c-1 13 7 23 15 32Z");
			add_location(path0, file$q, 111, 6, 1877);
			attr_dev(path1, "fill", "var(--flesh)");
			attr_dev(path1, "d", "M76 251c2-4-2-6-3-10-1-5-2-9-5-13-2-2-3-5-3-8-2-4-1-7 3-8 1 4 1 8 6 12l-2-13c-2-5 1-8 4-11a2 2 0 0 0 0-1c2-8 3-9 10-6a26 26 0 0 0 16 0l7-1c5-1 7 3 7 6 0 4 2 7 4 10l2 6v10l4-9c4 2 4 6 1 11l-6 12c-3 7 2 11 6 13 5 3 6 7 8 11-2 3-4 14-2 16 11 10 20 21 33 29h5c4-3 9-2 13-2 3 7 9 12 13 19 3 5 7 10 8 16a25 25 0 0 1-5 23c-4 4-10 5-15 2-7-5-14-9-19-15-3-5-5-10-10-13l-17-20c-7-10-15-20-24-28-2-2-5-3-7-1l-20 17c-13 10-21 23-33 34a9 9 0 0 0-3 1c-7 7-15 11-24 16-14 8-18 5-26-10-3-5-2-11-1-17l11-24c5 0 11-1 16 1 8 3 15 1 23-3l24-13a41 41 0 0 0 12-11c-8-2-12-8-16-13a7 7 0 0 1 2-10c1-1 3-2 3-5Z");
			add_location(path1, file$q, 115, 6, 2280);
			attr_dev(path2, "fill", "var(--shirt)");
			attr_dev(path2, "d", "M55 339c12-11 20-24 33-34l20-17c2-2 5-1 7 1 9 8 17 18 24 28l17 20c1 8 1 17 6 24 1 2 0 5 2 7a26 26 0 0 0 4 11c0 5 4 9 6 13l5 9c0 2 2 5-1 6-10-2-20-3-29-6-13-5-24-1-35 4-13 7-26 13-40 18-5 0-5-4-5-8 1-15-2-30-6-45l-8-31Z");
			add_location(path2, file$q, 119, 6, 2927);
			attr_dev(path3, "fill", "var(--pants)");
			attr_dev(path3, "d", "M74 423c14-5 27-11 40-18 11-5 22-9 35-4 9 3 19 4 29 6 2 21-5 39-23 51-2 2-3 3-3 6 2 14 5 27 4 41v6c-9-2-19-5-28-3-4 0-4-4-6-3a29 29 0 0 0-13 6c-3 2 1 5 1 8a15 15 0 0 1 0 2 30 30 0 0 1-5 3c-3 1-5 2-8 0s-3-5-2-8l2-12c3-12 0-23-5-33 5-4 12-4 18-5a8 8 0 0 0 5-5c2-5 2-9-1-13-10-14-23-28-39-22l-1-3Z");
			add_location(path3, file$q, 123, 6, 3207);
			attr_dev(path4, "fill", "var(--flesh)");
			attr_dev(path4, "d", "M75 426c16-6 29 8 39 22 3 4 3 8 1 13a8 8 0 0 1-5 4c-6 2-13 2-18 6-4-1-8 2-11 3s-3 3-2 5c5 15-1 28-8 40l-17 31c-3 5-3 10-4 15-2 0-2 2-3 3-2 1-3 2-5 1s0-2 0-3c0-4-1-7-6-6-3 1-6-1-9-2a9 9 0 0 1 2-5c9-11 10-23 10-36 1-12 1-23 6-34v-16c0-9 0-18 6-25 4-5 10-8 16-11l8-5ZM110 521a15 15 0 0 0 0-2c0-3-4-6-1-8a29 29 0 0 1 13-6c2-1 2 3 6 3 9-2 19 1 28 3 0 6 3 11 4 16 1 3 3 3 5 2 10-6 21-8 32-8s22-4 33-7c2 2 5 2 8 2 7 1 10 6 6 12l-2 2c-5-1-7 2-9 6-11 1-20 7-30 12a183 183 0 0 1-28 13l-8 4c-5 5-12 6-19 6-8 1-14-4-17-12-5-14-13-26-21-38Z");
			add_location(path4, file$q, 127, 6, 3563);
			attr_dev(path5, "fill", "var(--shirt)");
			attr_dev(path5, "d", "M76 251c0 3-2 4-3 5a7 7 0 0 0-2 10c4 5 8 11 16 13a41 41 0 0 1-12 11l-24 13c-8 4-15 6-23 3-5-2-11-1-16-1 5-8 4-17 8-25 3-6 16-14 23-14h3c8-6 19-7 26-14l4-1Z");
			add_location(path5, file$q, 131, 6, 4152);
			attr_dev(path6, "fill", "var(--hair)");
			attr_dev(path6, "d", "m126 215-4 9v-10l-2-6c-2-3-4-6-4-10 0-3-2-7-7-6l-7 1a26 26 0 0 1-16 0c-7-3-8-2-10 6a2 2 0 0 1 0 1c-3 3-6 6-4 11l2 13c-5-4-5-8-6-12v-20a10 10 0 0 0-1-8c-2-3-1-6 2-8 13-7 25-11 40-6 3 1 6 3 7 6l4 3c5 1 7 4 7 10-2 9 1 18-1 26Z");
			add_location(path6, file$q, 135, 6, 4369);
			attr_dev(path7, "fill", "var(--shirt)");
			attr_dev(path7, "d", "M184 305c-4 0-9-1-13 2h-5c-13-8-22-19-33-29-2-2 0-13 2-16 16 6 33 10 43 26 4 5 6 10 6 17Z");
			add_location(path7, file$q, 139, 6, 4653);
			attr_dev(g0, "id", "diagonal-lunge-3");
			attr_dev(g0, "class", "svelte-1pmyie3");
			add_location(g0, file$q, 110, 4, 1845);
			attr_dev(path8, "d", "M204 155c-2-1-2-3-1-4l14-40c3-8 9-11 16-14l31-11 9 11c2 1 1 5 4 5a70 70 0 0 0 23 0c7-1 11-6 13-13l37 17c7 3 9 10 11 15l11 31c2 4 3 8-2 10-5-3-9 0-12 3-5 4-12 7-18 9l-3-5-1 21c-1 16-3 31-3 47l2 44c1 6 0 7-5 7a19 19 0 0 0-4 0h-23l-69-5c-3 0-5-1-7 1a1 1 0 0 1-1 0l-1-9 7-53c2-16 0-33 1-49 0-6 2-11 1-18l-4 6c-8-5-17-4-26-6Z");
			attr_dev(path8, "fill", "var(--shirt)");
			add_location(path8, file$q, 145, 6, 4843);
			attr_dev(path9, "d", "M227 284c2-2 4-1 7-1l69 5h23l1 6c-2 12-4 24-3 37a205 205 0 0 0-2 30c0 3 0 5-3 5s-6 4-9 5c-11 0-21 0-31-6a4 4 0 0 0-3 0c-12 5-24 3-36 1-7 0-9-4-9-11-1-24-5-47-4-71Z");
			attr_dev(path9, "fill", "var(--pants)");
			add_location(path9, file$q, 149, 6, 5225);
			attr_dev(path10, "fill", "var(--flesh)");
			attr_dev(path10, "d", "M240 366c12 2 24 4 36-1a4 4 0 0 1 3 0c10 6 20 6 31 6-2 10-4 19-4 29a90 90 0 0 0 0 17c3 18-2 34-7 51-4 15-8 29-8 44a14 14 0 0 1-1 6c-5-4-10-4-16 1v-17c4-13 3-27 2-40-1-11-2-23 0-34 1-7 3-14 2-21a193 193 0 0 1-4-27c-2 15-6 30-4 46 2 9 3 19 1 28-3 18-4 35 0 52 1 3 1 7-2 9-6-2-11-1-15 2 1-24-8-46-12-69-2-12-3-24-1-36 3-15 1-31-1-46ZM340 174c6-2 13-5 18-9 3-3 7-6 12-3 2 14-1 29 2 43 5 23-2 45-4 67-1 14-3 27-1 41 2 13-6 24-18 27l-9 2c-5-2-4-5-1-8s7-6 8-11c1-2 3-5 0-6-4-2-5 1-6 3a77 77 0 0 1-5 8 3 3 0 0 1-3 1 2 2 0 0 1-1-3c3-7 2-17 9-23s11-14 10-25l-1-37c-1-16 1-32-5-47-3-7-2-14-5-20ZM204 155c9 2 18 1 26 6l-2 9c-1 12-8 23-7 35a112 112 0 0 1-8 46c-4 10-6 22-2 32s6 21 6 31c0 2 1 5-2 5-2 1-3-1-4-2s-2-4-4-2c-2 1-1 3 0 5l4 8c1 2 1 4-1 5s-3 0-5-1a11 11 0 0 0-6-4l-4-6-3-8c-4-9-3-17 0-25 4-12 4-23 3-34-2-20 0-40 3-59l1-7c4-11 4-23 5-34ZM313 89c-2 7-6 12-13 13a70 70 0 0 1-23 0c-3 0-2-4-4-5l-9-11c7-5 8-15 2-23l-4-12c-1-2-1-5 2-6l3 6c0-9 0-16 4-23 2-4 3-7 7-5a34 34 0 0 0 21 0c3-1 8-1 8 3 1 6 6 11 6 18 0 1-1 3 1 4 3 0 2-3 3-4 3 3 4 12-1 16-4 4-5 9-7 14-2 6-2 11 4 15Z");
			add_location(path10, file$q, 153, 6, 5450);
			attr_dev(path11, "fill", "var(--hair)");
			attr_dev(path11, "d", "M254 517c4-3 9-4 15-2 0 4 0 8 5 4 6-5 11-5 16-1 6 8 10 16 9 25-1 13-18 19-28 12-1-1-2-2-4-1-17 8-26 1-23-18 1-7 3-14 10-19ZM317 44c-1 1 0 4-3 4-2-1-1-3-1-4 0-7-5-12-6-18 0-4-5-4-8-3a34 34 0 0 1-21 0c-4-2-5 1-7 5-4 7-4 14-4 23l-3-6c-2-10 2-21-2-32-1-2 2-4 4-6 10-6 21-9 33-6 4 1 7 4 10 6 16 10 7 25 8 37Z");
			add_location(path11, file$q, 157, 6, 6576);
			attr_dev(g1, "id", "diagonal-lunge-1");
			attr_dev(g1, "class", "svelte-1pmyie3");
			add_location(g1, file$q, 144, 4, 4811);
			attr_dev(path12, "fill", "var(--hair)");
			attr_dev(path12, "d", "M34 567c4-2 4-7 7-9 8-7 14-16 20-24a10 10 0 0 1 3-3h6c2 0 5 1 5 3 1 4 4 5 7 6l1 3-5 24a5 5 0 0 1-2 4c-11 7-23 10-36 6l-6-3ZM154 44c-4-10-3-11 7-16l13-5h10c3 2 6 1 8 3 2 1 5 1 5 3 2 4 5 6 9 7 2 1 3 2 3 5-1 10 1 19-1 29-1 3-1 7-5 11 2-8 2-16-4-22v-2c0-9-3-11-11-9-7 2-13 2-19 0s-8 0-9 7v2c-5 3-4 7-3 12 0 2 2 5 0 8-2-1-2-4-3-5l-1-17v-2l1-6c1-1 2-2 0-3Z");
			add_location(path12, file$q, 163, 6, 6979);
			attr_dev(path13, "fill", "var(--shirt)");
			attr_dev(path13, "d", "M93 191c-2-2-3-4-2-7 8-13 11-28 16-43 3-12 12-16 23-19l24-6c3 3 0 7 3 11 8 9 28 11 39 4 5-3 7-8 12-10a163 163 0 0 1 20 8c11 4 16 12 19 23l11 45c2 5 1 7-4 8-1-4-4-3-6-2-7 2-15 3-21 7-4 1-3 4-3 7 0 13-4 25-7 38-1 2-2 5-1 7 4 14 1 27-4 40-1 4-1 8-5 10-18 0-36-2-53-9l-7-2c-11-4-22-1-33-5-2-2-1-5-1-8v-21c-1-10 1-20 3-30 2-11 1-22 1-33l-1-2-15-9a10 10 0 0 0-8-2Z");
			add_location(path13, file$q, 167, 6, 7390);
			attr_dev(path14, "fill", "var(--pants)");
			attr_dev(path14, "d", "M114 296c11 3 22 1 33 5l7 2c17 7 35 9 53 9-3 9-7 18-12 26a13 13 0 0 0-2 10 302 302 0 0 0 10 35 37 37 0 0 1-10 5c-3 1-5 2-3 6 1 4-1 5-4 6-4 0-9-1-13 1l-11 10a22 22 0 0 1-16 4l8-19c2-4 1-5-3-6a51 51 0 0 1-27-11v-3c4-12 0-22-3-33-3-16-8-31-7-47Z");
			add_location(path14, file$q, 171, 6, 7810);
			attr_dev(path15, "fill", "var(--flesh)");
			attr_dev(path15, "d", "M124 379a51 51 0 0 0 27 11c4 1 5 2 3 6l-8 19a70 70 0 0 0-10 31c-1 13-6 24-14 34-12 14-23 29-33 44-3 5-3 11-7 16-3-1-6-2-7-6 0-2-3-3-5-3h-6l2-5c12-8 14-22 18-35 5-16 9-31 18-46a9 9 0 0 1 1-1c7-8 8-18 10-28a66 66 0 0 1 6-21c3-5 4-11 5-16ZM208 121c-5 2-7 7-12 10-11 7-31 5-39-4-3-4 0-8-3-11 7-4 6-10 5-16 0-8-7-13-8-21 0-3-1-6 3-7 1 1 1 4 3 5 2-3 0-6 0-8-1-5-2-9 3-12v-2c1-7 3-9 9-7s12 2 19 0c8-2 11 0 11 9v2c6 6 6 14 4 22 4-4 4-8 5-11 3 0 4 2 3 4-1 7-2 14-8 18a2 2 0 0 0-2 2l-2 11c-2 7 1 12 9 16ZM227 210c6-4 14-5 21-8 2 0 5-1 6 3 3 12 1 25 4 37 6 20 3 40 1 60-2 12 0 24 2 36 2 10-4 21-14 25-3 1-7 1-10 3-2 1-5 0-7-2s1-4 2-6c4-3 7-7 9-13 0-2 1-4-2-5-2 0-3 1-4 3l-7 11c-4 1-5-1-4-5a43 43 0 0 0 3-13 10 10 0 0 1 4-7c13-10 12-23 11-37-1-13-4-25-2-38 1-1 0-2-1-3-6-13-9-27-12-41ZM173 401c4-2 9-1 13-1 3-1 5-2 4-6-2-4 0-5 3-6a37 37 0 0 0 10-5l6 32c1 5 5 8 8 13 10 14 14 30 17 47a47 47 0 0 0 13 23c1 1 3 2 3 5-1 1-2 3-4 3-6-2-8 2-10 6-6-12-15-23-23-33l-14-18c-5-6-9-13-10-20-2-14-7-28-16-40Z");
			add_location(path15, file$q, 175, 6, 8114);
			attr_dev(path16, "fill", "var(--hair)");
			attr_dev(path16, "d", "M236 512c2-4 4-8 10-6 2 0 3-2 4-3 3 0 6 2 7 4a66 66 0 0 1 5 10 86 86 0 0 0 11 23c2 3 3 5 2 8s-4 3-7 2c-13-1-26-3-33-17-1-2-2-4-1-6 2-5 2-10 2-15Z");
			add_location(path16, file$q, 179, 6, 9159);
			attr_dev(path17, "fill", "var(--flesh)");
			attr_dev(path17, "d", "M93 191a10 10 0 0 1 8 2l15 9c-2 10-7 20-11 29a36 36 0 0 0-2 11c0 11-6 21-11 31-6 12-9 24-2 37v8c-1 4-2 8-1 12 0 1 0 3-2 4s-3-1-4-3-2-4-4-2 0 3 0 5l3 7-1 4c-1 1-3 0-5-1-8-7-11-16-13-26a11 11 0 0 1 2-7 85 85 0 0 0 9-37c1-22 8-43 16-65 2-5 4-11 3-18Z");
			add_location(path17, file$q, 183, 6, 9365);
			attr_dev(path18, "fill", "var(--pants)");
			attr_dev(path18, "d", "M154 44c2 1 1 2 0 3v-3ZM153 53v2a2 2 0 0 1 0-2Z");
			add_location(path18, file$q, 187, 6, 9674);
			attr_dev(g2, "id", "diagonal-lunge-2");
			attr_dev(g2, "class", "svelte-1pmyie3");
			add_location(g2, file$q, 162, 4, 6947);
			attr_dev(path19, "fill", "var(--hair)");
			attr_dev(path19, "d", "M484 557a66 66 0 0 1-3 15c-2 6 1 12 5 16 7 6 15 7 23 9 1 0 3-1 3 1h14c4-4 5-9 2-12-11-10-14-24-21-35l-9 2c-5-1-6 1-6 5 0 2 2 3 0 4s-3 0-5-1l-3-4ZM259 549c2 1 1 3 2 4 2 5 5 7 10 7a44 44 0 0 0 9-1c9-2 10-5 7-13l1-6c4-4 6-11 13-12-2-3-4-6-9-5l-2-2c-4-6-1-12 6-12 3 0 6 0 8-2-3-6-9-5-13-7-11-4-14-2-17 9a7 7 0 0 0 0 2c1 14-7 23-15 33Z");
			add_location(path19, file$q, 193, 6, 9822);
			attr_dev(path20, "fill", "var(--flesh)");
			attr_dev(path20, "d", "M458 244c-2-4 2-7 2-10 1-5 2-10 6-14 2-1 3-5 3-7 2-4 1-7-4-9-1 4-1 9-5 12l2-12c2-5-1-8-4-12-2-8-3-9-11-7a26 26 0 0 1-15 0l-7-1c-5 0-7 3-7 7s-2 7-4 10l-2 6v9l-4-8c-4 2-4 5-1 10 3 4 4 9 6 13 3 6-3 11-6 12-5 3-6 8-8 12 2 2 4 13 2 15-11 10-20 21-33 29l-5 1c-4-3-9-2-13-3-3 8-9 13-13 19-3 6-7 11-8 17a25 25 0 0 0 5 22c4 5 10 6 15 2 6-4 14-8 19-15 3-4 5-9 10-12l16-21 25-28c2-2 5-2 7 0l20 16c13 10 21 24 33 34a9 9 0 0 1 2 1c8 7 16 12 25 17 14 7 18 4 26-10 3-6 2-11 1-17-3-9-7-17-11-24-6 0-12-2-16 0-8 4-16 1-23-2l-24-14a41 41 0 0 1-12-11c8-1 12-8 16-13a7 7 0 0 0-2-10c-1-1-3-2-3-4Z");
			add_location(path20, file$q, 197, 6, 10213);
			attr_dev(path21, "fill", "var(--shirt)");
			attr_dev(path21, "d", "M479 331c-12-10-20-24-33-34l-20-16c-2-2-5-2-7 0l-25 28-16 21c-1 8-1 16-6 24-1 2 0 5-2 6a26 26 0 0 1-5 11c1 6-3 9-5 14l-5 9c-1 2-2 4 1 5 10-2 20-3 29-6 13-4 24-1 35 5 13 7 26 13 40 17 5 0 5-3 5-7-1-15 2-30 6-45l8-32Z");
			add_location(path21, file$q, 201, 6, 10850);
			attr_dev(path22, "fill", "var(--pants)");
			attr_dev(path22, "d", "M460 415c-14-4-27-10-40-17-11-6-22-9-35-5-9 3-19 4-29 6-2 22 5 39 23 52 2 1 3 3 2 5-1 14-4 28-4 42l1 5c9-1 19-4 28-3 3 1 3-3 6-3a29 29 0 0 1 13 6c3 2-1 5-1 8a16 16 0 0 0 0 2 31 31 0 0 0 5 3c2 1 5 2 8 0s3-5 2-8l-2-12c-3-12 0-22 5-33-5-3-12-3-18-5a8 8 0 0 1-5-5c-3-4-3-9 0-13 11-14 24-28 40-21l1-4Z");
			add_location(path22, file$q, 205, 6, 11127);
			attr_dev(path23, "fill", "var(--flesh)");
			attr_dev(path23, "d", "M459 419c-16-7-29 7-39 21-3 4-3 9-1 13a8 8 0 0 0 5 5c6 2 13 2 18 5 4-1 8 2 11 3s3 4 2 6c-5 15 1 27 8 40l17 31c3 5 3 10 4 14l3 4c2 1 3 2 5 1s0-2 0-4c0-4 1-6 6-5l9-2a9 9 0 0 0-2-6c-9-10-10-23-11-36 0-11 0-23-5-34-2-4 0-10 0-16 0-8 0-17-6-24-4-6-10-9-16-12l-8-4ZM424 513a16 16 0 0 1 0-2c0-3 4-6 1-8a29 29 0 0 0-13-6c-3 0-3 4-6 3-9-1-19 2-28 3 0 6-3 11-4 17-1 2-3 3-5 1-10-5-21-7-32-7s-22-5-33-7c-2 2-5 2-8 2-7 0-10 6-7 12l3 2c5-1 7 2 9 5 11 2 20 7 30 12a183 183 0 0 0 28 13l8 5c5 4 12 6 19 6 8 0 14-5 17-13 5-14 13-25 21-38Z");
			add_location(path23, file$q, 209, 6, 11485);
			attr_dev(path24, "fill", "var(--shirt)");
			attr_dev(path24, "d", "M458 244c0 2 2 3 3 4a7 7 0 0 1 2 10c-4 5-8 12-16 13a41 41 0 0 0 12 12l24 13c8 3 15 6 23 2 5-2 10 0 16 0-5-8-4-18-8-26-4-6-16-14-23-13h-3c-8-7-19-8-26-14l-4-1Z");
			add_location(path24, file$q, 213, 6, 12068);
			attr_dev(path25, "fill", "var(--hair)");
			attr_dev(path25, "d", "m408 208 4 8v-9l2-6c2-3 4-6 4-10s2-7 7-7l7 1a26 26 0 0 0 15 0c8-2 9-1 11 7 3 4 6 7 4 12l-2 12c4-3 5-8 5-12 1-6 2-13 0-20a10 10 0 0 1 2-7c1-4 1-7-3-8-12-8-25-12-39-7-3 1-6 3-8 7 0 2-2 2-3 2-5 2-7 5-7 10 2 9-1 18 1 27Z");
			add_location(path25, file$q, 217, 6, 12288);
			attr_dev(path26, "fill", "var(--shirt)");
			attr_dev(path26, "d", "M350 297c4 1 9 0 13 3l5-1c13-7 22-19 33-29 2-2 0-13-2-15-16 5-33 10-43 25-4 5-6 11-6 17Z");
			add_location(path26, file$q, 221, 6, 12565);
			attr_dev(g3, "id", "diagonal-lunge-5");
			attr_dev(g3, "class", "svelte-1pmyie3");
			add_location(g3, file$q, 192, 4, 9790);
			attr_dev(path27, "fill", "var(--hair)");
			attr_dev(path27, "d", "M504 576c-4-2-4-7-7-9-9-7-14-16-20-24a10 10 0 0 0-4-3h-6c-2 0-4 1-5 3 0 4-3 5-6 6-1 1-2 2-1 3l5 24a5 5 0 0 0 2 4c11 7 23 10 36 6l6-3ZM384 53c3-10 3-11-7-16l-14-5h-10c-2 2-5 1-8 3-1 1-4 1-5 3-1 4-4 6-8 7-2 1-3 2-3 5 1 10-2 19 1 29 1 3 1 7 4 11-1-8-1-16 4-22l1-2c0-9 3-11 11-9 6 2 12 2 19 0 6-2 8 0 9 7v2c5 3 3 7 3 12-1 2-2 5 0 8 2-1 2-4 3-5l1-17c-1 0-2-1-1-2v-6c-2-1-2-2 0-3Z");
			add_location(path27, file$q, 227, 6, 12754);
			attr_dev(path28, "fill", "var(--shirt)");
			attr_dev(path28, "d", "M445 200c2-2 3-4 2-7-8-13-11-28-16-43-4-12-12-16-23-19l-25-6c-2 3 1 7-3 11-8 9-28 11-38 4-5-3-7-8-12-10a162 162 0 0 0-21 8c-10 4-15 12-18 23l-12 45c-1 5 0 7 5 8 1-4 4-3 6-2 7 2 15 3 21 7 3 1 3 4 3 7-1 13 3 25 7 38l1 7c-4 14-1 27 3 40 2 4 1 8 6 10 18 0 36-2 52-9l8-2c10-4 22-1 33-5l1-8v-21c1-10-1-20-3-30-2-11-2-22-2-33l2-2 15-9a10 10 0 0 1 8-2Z");
			add_location(path28, file$q, 231, 6, 13189);
			attr_dev(path29, "fill", "var(--pants)");
			attr_dev(path29, "d", "M424 305c-11 3-23 1-33 5l-8 2c-17 7-34 9-52 9 2 9 7 18 12 26a13 13 0 0 1 2 10 302 302 0 0 1-10 35 37 37 0 0 0 10 5c3 1 5 2 3 6s0 5 4 6c4 0 9-1 13 1l11 10a22 22 0 0 0 15 4c-1-7-5-13-7-19-2-4-1-5 3-6a51 51 0 0 0 26-11c1-1 2-2 1-3-5-12 0-22 2-33 4-16 9-31 8-47Z");
			add_location(path29, file$q, 235, 6, 13595);
			attr_dev(path30, "fill", "var(--flesh)");
			attr_dev(path30, "d", "M413 388a51 51 0 0 1-26 11c-4 1-5 2-3 6 2 6 6 12 7 19a70 70 0 0 1 10 31c1 13 7 24 15 34l33 44c3 5 3 11 7 16 3-1 6-2 6-6 1-2 3-3 5-3h6l-1-5c-13-8-14-22-18-35-5-16-9-32-18-46a9 9 0 0 0-1-1c-7-8-9-18-10-28a66 66 0 0 0-6-21c-3-5-4-11-6-16ZM330 130c5 2 7 7 12 10 10 7 30 5 38-4 4-4 1-8 3-11-7-4-5-10-5-16 1-8 8-13 8-21 1-3 2-6-2-7-1 1-1 4-3 5-2-3-1-6 0-8 0-5 2-9-3-12v-2c-1-7-3-9-9-7-7 2-13 2-19 0-8-2-11 0-11 9l-1 2c-5 6-5 14-4 22-3-4-3-7-4-11-3 0-4 2-3 4 1 7 1 14 8 18a2 2 0 0 1 1 2l3 11c2 7-1 12-9 16ZM311 219c-6-4-14-5-21-8-2 0-5-1-6 3-4 12-1 25-5 37-5 20-3 40 0 60 2 12 0 24-2 36-2 10 4 21 14 25l9 3c3 1 6 0 8-2s-1-4-2-6c-4-3-8-7-9-13-1-2-1-4 1-5 3 0 4 1 5 3l7 11c4 1 5-1 4-5a43 43 0 0 1-4-13 10 10 0 0 0-3-7c-13-10-13-23-12-37 1-13 5-25 2-38l2-3c6-13 9-27 12-41ZM365 410c-4-2-9-1-13-1-4-1-6-2-4-6s0-5-3-6a37 37 0 0 1-10-5l-6 32-8 13c-10 14-14 30-18 47a47 47 0 0 1-12 23c-1 2-3 2-3 5 1 1 2 3 4 3 6-2 8 2 10 6 6-12 15-23 23-33l14-18c5-6 8-13 10-20 2-14 7-28 16-40Z");
			add_location(path30, file$q, 239, 6, 13915);
			attr_dev(path31, "fill", "var(--hair)");
			attr_dev(path31, "d", "M302 521c-2-4-4-8-10-6-2 0-3-2-4-3-3 0-6 2-7 4a66 66 0 0 0-5 10 86 86 0 0 1-12 23c-1 3-2 5-1 8s4 3 7 2c13-1 26-3 33-17 1-2 2-4 1-6-2-5-2-10-2-15Z");
			add_location(path31, file$q, 243, 6, 14940);
			attr_dev(path32, "fill", "var(--flesh)");
			attr_dev(path32, "d", "M445 200a10 10 0 0 0-8 2l-15 9c2 10 7 20 11 29l1 11c1 11 6 21 11 31 6 12 10 24 3 37v8c1 4 2 8 1 12 0 1 0 3 2 4s3-1 4-3 2-4 4-2 0 3-1 5l-3 7 2 4c1 1 3 0 4-1 8-7 12-16 13-26a11 11 0 0 0-1-7 85 85 0 0 1-10-37c-1-22-7-43-15-65-2-5-4-11-3-18Z");
			add_location(path32, file$q, 247, 6, 15146);
			attr_dev(path33, "fill", "var(--pants)");
			attr_dev(path33, "d", "M384 53c-2 1-2 2 0 3v-3ZM384 62c-1 1 0 2 1 2a2 2 0 0 0-1-2Z");
			add_location(path33, file$q, 251, 6, 15445);
			attr_dev(g4, "id", "diagonal-lunge-4");
			attr_dev(g4, "class", "svelte-1pmyie3");
			add_location(g4, file$q, 226, 4, 12722);
			attr_dev(g5, "class", "shapes svelte-1pmyie3");
			add_location(g5, file$q, 109, 2, 1798);
			attr_dev(g6, "class", "svelte-1pmyie3");
			toggle_class(g6, "paused", /*isPaused*/ ctx[1]);
			toggle_class(g6, "flip", /*flipsvg*/ ctx[2]);
			add_location(g6, file$q, 108, 0, 1747);
			attr_dev(svg, "xmlns", "http://www.w3.org/2000/svg");
			attr_dev(svg, "viewBox", "0 0 533.9 605.1");
			attr_dev(svg, "height", "100%");
			attr_dev(svg, "width", "100%");
			attr_dev(svg, "class", "svelte-1pmyie3");
			add_location(svg, file$q, 107, 0, 1652);
		},
		l: function claim(nodes) {
			throw new Error("options.hydrate only works if the component was compiled with the `hydratable: true` option");
		},
		m: function mount(target, anchor) {
			insert_dev(target, svg, anchor);
			append_dev(svg, t);
			append_dev(svg, g6);
			append_dev(g6, g5);
			append_dev(g5, g0);
			append_dev(g0, path0);
			append_dev(g0, path1);
			append_dev(g0, path2);
			append_dev(g0, path3);
			append_dev(g0, path4);
			append_dev(g0, path5);
			append_dev(g0, path6);
			append_dev(g0, path7);
			append_dev(g5, g1);
			append_dev(g1, path8);
			append_dev(g1, path9);
			append_dev(g1, path10);
			append_dev(g1, path11);
			append_dev(g5, g2);
			append_dev(g2, path12);
			append_dev(g2, path13);
			append_dev(g2, path14);
			append_dev(g2, path15);
			append_dev(g2, path16);
			append_dev(g2, path17);
			append_dev(g2, path18);
			append_dev(g5, g3);
			append_dev(g3, path19);
			append_dev(g3, path20);
			append_dev(g3, path21);
			append_dev(g3, path22);
			append_dev(g3, path23);
			append_dev(g3, path24);
			append_dev(g3, path25);
			append_dev(g3, path26);
			append_dev(g5, g4);
			append_dev(g4, path27);
			append_dev(g4, path28);
			append_dev(g4, path29);
			append_dev(g4, path30);
			append_dev(g4, path31);
			append_dev(g4, path32);
			append_dev(g4, path33);
			/*g5_binding*/ ctx[4](g5);
			if (if_block) if_block.m(g6, null);
		},
		p: function update(ctx, [dirty]) {
			if (/*isPaused*/ ctx[1]) {
				if (if_block) ; else {
					if_block = create_if_block$q(ctx);
					if_block.c();
					if_block.m(g6, null);
				}
			} else if (if_block) {
				if_block.d(1);
				if_block = null;
			}

			if (dirty & /*isPaused*/ 2) {
				toggle_class(g6, "paused", /*isPaused*/ ctx[1]);
			}

			if (dirty & /*flipsvg*/ 4) {
				toggle_class(g6, "flip", /*flipsvg*/ ctx[2]);
			}
		},
		i: noop,
		o: noop,
		d: function destroy(detaching) {
			if (detaching) detach_dev(svg);
			/*g5_binding*/ ctx[4](null);
			if (if_block) if_block.d();
		}
	};

	dispatch_dev("SvelteRegisterBlock", {
		block,
		id: create_fragment$q.name,
		type: "component",
		source: "",
		ctx
	});

	return block;
}

function instance$q($$self, $$props, $$invalidate) {
	let { $$slots: slots = {}, $$scope } = $$props;
	validate_slots('Workout_diagonallunges', slots, []);
	let { direction = "right" } = $$props;
	let { isPaused = false } = $$props;
	let { rootElement } = $$props;
	let flipsvg = false;

	if (direction == "left") {
		flipsvg = true;
	}

	const writable_props = ['direction', 'isPaused', 'rootElement'];

	Object.keys($$props).forEach(key => {
		if (!~writable_props.indexOf(key) && key.slice(0, 2) !== '$$' && key !== 'slot') console.warn(`<Workout_diagonallunges> was created with unknown prop '${key}'`);
	});

	function g5_binding($$value) {
		binding_callbacks[$$value ? 'unshift' : 'push'](() => {
			rootElement = $$value;
			$$invalidate(0, rootElement);
		});
	}

	$$self.$$set = $$props => {
		if ('direction' in $$props) $$invalidate(3, direction = $$props.direction);
		if ('isPaused' in $$props) $$invalidate(1, isPaused = $$props.isPaused);
		if ('rootElement' in $$props) $$invalidate(0, rootElement = $$props.rootElement);
	};

	$$self.$capture_state = () => ({
		direction,
		isPaused,
		rootElement,
		flipsvg
	});

	$$self.$inject_state = $$props => {
		if ('direction' in $$props) $$invalidate(3, direction = $$props.direction);
		if ('isPaused' in $$props) $$invalidate(1, isPaused = $$props.isPaused);
		if ('rootElement' in $$props) $$invalidate(0, rootElement = $$props.rootElement);
		if ('flipsvg' in $$props) $$invalidate(2, flipsvg = $$props.flipsvg);
	};

	if ($$props && "$$inject" in $$props) {
		$$self.$inject_state($$props.$$inject);
	}

	return [rootElement, isPaused, flipsvg, direction, g5_binding];
}

class Workout_diagonallunges extends SvelteComponentDev {
	constructor(options) {
		super(options);

		init(this, options, instance$q, create_fragment$q, safe_not_equal, {
			direction: 3,
			isPaused: 1,
			rootElement: 0
		});

		dispatch_dev("SvelteRegisterComponent", {
			component: this,
			tagName: "Workout_diagonallunges",
			options,
			id: create_fragment$q.name
		});

		const { ctx } = this.$$;
		const props = options.props || {};

		if (/*rootElement*/ ctx[0] === undefined && !('rootElement' in props)) {
			console.warn("<Workout_diagonallunges> was created without expected prop 'rootElement'");
		}
	}

	get direction() {
		throw new Error("<Workout_diagonallunges>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
	}

	set direction(value) {
		throw new Error("<Workout_diagonallunges>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
	}

	get isPaused() {
		throw new Error("<Workout_diagonallunges>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
	}

	set isPaused(value) {
		throw new Error("<Workout_diagonallunges>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
	}

	get rootElement() {
		throw new Error("<Workout_diagonallunges>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
	}

	set rootElement(value) {
		throw new Error("<Workout_diagonallunges>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
	}
}

var workoutDiagonallunges = /*#__PURE__*/Object.freeze({
    __proto__: null,
    'default': Workout_diagonallunges
});

/* src/workouts/workout-divebomberpushup.svelte generated by Svelte v3.49.0 */

const file$p = "src/workouts/workout-divebomberpushup.svelte";

// (222:4) {#if isPaused}
function create_if_block$p(ctx) {
	let svg;
	let path;

	const block = {
		c: function create() {
			svg = svg_element("svg");
			path = svg_element("path");
			attr_dev(path, "d", "M10 24h-6v-24h6v24zm10 0h-6v-24h6v24zm-11-23h-4v22h4v-22zm10 0h-4v22h4v-22z");
			add_location(path, file$p, 222, 133, 12417);
			attr_dev(svg, "viewBox", "-6 -5 36 36");
			attr_dev(svg, "width", "100%");
			attr_dev(svg, "height", "100%");
			attr_dev(svg, "xmlns", "http://www.w3.org/2000/svg");
			attr_dev(svg, "fill-rule", "evenodd");
			attr_dev(svg, "clip-rule", "evenodd");
			add_location(svg, file$p, 222, 4, 12288);
		},
		m: function mount(target, anchor) {
			insert_dev(target, svg, anchor);
			append_dev(svg, path);
		},
		d: function destroy(detaching) {
			if (detaching) detach_dev(svg);
		}
	};

	dispatch_dev("SvelteRegisterBlock", {
		block,
		id: create_if_block$p.name,
		type: "if",
		source: "(222:4) {#if isPaused}",
		ctx
	});

	return block;
}

function create_fragment$p(ctx) {
	let svg;
	let t;
	let g6;
	let g5;
	let g0;
	let path0;
	let path1;
	let path2;
	let path3;
	let g1;
	let path4;
	let path5;
	let path6;
	let path7;
	let path8;
	let g2;
	let path9;
	let path10;
	let path11;
	let path12;
	let path13;
	let path14;
	let path15;
	let g3;
	let path16;
	let path17;
	let path18;
	let path19;
	let path20;
	let path21;
	let path22;
	let path23;
	let g4;
	let path24;
	let path25;
	let path26;
	let path27;
	let path28;
	let path29;
	let if_block = /*isPaused*/ ctx[1] && create_if_block$p(ctx);

	const block = {
		c: function create() {
			svg = svg_element("svg");
			t = text(">\n");
			g6 = svg_element("g");
			g5 = svg_element("g");
			g0 = svg_element("g");
			path0 = svg_element("path");
			path1 = svg_element("path");
			path2 = svg_element("path");
			path3 = svg_element("path");
			g1 = svg_element("g");
			path4 = svg_element("path");
			path5 = svg_element("path");
			path6 = svg_element("path");
			path7 = svg_element("path");
			path8 = svg_element("path");
			g2 = svg_element("g");
			path9 = svg_element("path");
			path10 = svg_element("path");
			path11 = svg_element("path");
			path12 = svg_element("path");
			path13 = svg_element("path");
			path14 = svg_element("path");
			path15 = svg_element("path");
			g3 = svg_element("g");
			path16 = svg_element("path");
			path17 = svg_element("path");
			path18 = svg_element("path");
			path19 = svg_element("path");
			path20 = svg_element("path");
			path21 = svg_element("path");
			path22 = svg_element("path");
			path23 = svg_element("path");
			g4 = svg_element("g");
			path24 = svg_element("path");
			path25 = svg_element("path");
			path26 = svg_element("path");
			path27 = svg_element("path");
			path28 = svg_element("path");
			path29 = svg_element("path");
			if (if_block) if_block.c();
			attr_dev(path0, "fill", "var(--shirt)");
			attr_dev(path0, "d", "M464 259c-17-9-33-23-55-22-6-5-13-4-20-5-9 0-12-4-9-13 2-4 3-9 6-12 21-12 31-33 40-54 5-14 5-29 9-43 15 4 26 14 37 23 29 24 63 40 94 62 17 13 27 31 30 53l2 9a103 103 0 0 1-6 30c-4-1-8 0-11-2-11-9-19-3-25 6s-13 9-20 0c-1-2-3-4-6-4-11-6-20-15-33-17-8-3-14-10-24-9Z");
			add_location(path0, file$p, 94, 6, 1585);
			attr_dev(path1, "fill", "var(--pants)");
			attr_dev(path1, "d", "M435 110c-4 14-4 29-9 43-9 21-19 42-40 54-3-6-8-1-12-2h-3c-3 0-7-2-8 3a24 24 0 0 1-3 0c-25-6-44 8-63 21-7 5-15 10-25 9-9-14-11-30-13-45-1-9 0-18 8-23 5-4 5-8 1-12-2-6-1-10 5-14 20-14 39-29 60-42 32-22 68-22 94-1 4 3 6 5 8 9Z");
			add_location(path1, file$p, 98, 6, 1909);
			attr_dev(path2, "fill", "var(--flesh)");
			attr_dev(path2, "d", "M268 158c4 4 4 8-1 12-8 5-9 14-8 23 2 15 4 31 13 45-18 12-36 23-58 27-32 7-59 24-89 35-9 4-19 5-26 12-7-1-11 3-15 6-7 4-13 9-20 12-6 4-14 5-20 0-6-4-6-10-6-16 1-8 7-14 13-16 20-5 20-24 26-38 32-10 57-33 88-46 11-5 22-8 34-10 15-2 30-7 41-20 9-9 16-20 28-26ZM473 261c10-1 16 6 24 9-1 27-1 28 37 30-2-4-5-8-4-13 3 0 5 2 6 4 7 9 13 9 20 0s14-15 26-6c2 2 7 1 10 2 4 5 3 10 1 16a293 293 0 0 0-8 36c-1 4-4 10 5 11-8 4-7 12-5 18 2 7 8 1 11 2 14 3 29 1 42 9 5 3 9 7 6 11-3 5-6 13-14 11-17-6-36-4-54-5-9 0-15-4-16-13-4-18-8-36-10-55-2-11-6-13-15-11-10 1-19 2-29 0-22-4-26-7-30-29l-2-10-2-3 1-14Z");
			add_location(path2, file$p, 102, 6, 2195);
			attr_dev(path3, "fill", "var(--hair)");
			attr_dev(path3, "d", "M77 260c-6 14-6 33-26 38-6 2-12 8-13 16 0 6 0 12 6 16 6 5 14 4 20 0 7-3 13-8 20-12 4-3 8-7 15-6-2 10 6 9 11 10 5 2 11 2 11 9 1 8-7 8-12 9-11 2-23 5-33-4-4-1-4 1-3 4 5 12 11 21 25 21 6 0 10 3 11 9 0 5-4 8-8 10-23 14-51 9-69-12L4 332c-6-7-4-12 4-16 10-6 19-12 29-16 9-3 11-8 4-15-6-6-5-10 4-14 10-5 20-11 32-11ZM590 350c-9-1-6-7-5-11a293 293 0 0 1 8-36c2-6 3-11-1-16a103 103 0 0 0 7-30c12 9 22 19 30 32 10 14 7 28-5 39-10 10-23 15-34 22Z");
			add_location(path3, file$p, 106, 6, 2843);
			attr_dev(g0, "id", "d-pushup-3");
			attr_dev(g0, "class", "svelte-15rrfqg");
			add_location(g0, file$p, 93, 4, 1559);
			attr_dev(path4, "fill", "var(--pants)");
			attr_dev(path4, "d", "M289 0c10 6 20 12 32 14l2 4c0 40-10 77-27 113-1 3-5 3-7 5l-7 1v-1 1c-25 0-40 19-59 32l-32-66c9-44 29-81 73-99 2-1 5-1 5-4Z");
			add_location(path4, file$p, 112, 6, 3372);
			attr_dev(path5, "fill", "var(--shirt)");
			attr_dev(path5, "d", "M289 136c2-2 6-2 7-5 17-36 27-73 27-113l-2-4c12-2 19 8 28 12 28 11 56 26 84 39s54 27 75 51c3 8 4 17 10 24v30c1 13-6 13-13 9-10-5-20-2-29-3-3 0-6 1-6 5 1 13-9 11-16 12-2-2-2-6-4-6-34-5-61-28-94-37-18-4-36-11-55-8-6 1-9-2-12-6Z");
			add_location(path5, file$p, 116, 6, 3556);
			attr_dev(path6, "fill", "var(--flesh)");
			attr_dev(path6, "d", "M454 193c7-1 17 1 16-12 0-4 3-5 6-5 9 1 19-2 29 3 7 4 15 4 13-9v-30l9 2c8 0 16 2 16 11s-9 7-15 7c-2 0-5 1-6 3 0 3 2 5 4 7 8 3 15 8 23 10s8 5 5 11l-6 9c-26-9-31-5-29 21 1 12 7 22 16 29l29 95c5 17 17 21 32 23 14 1 29 4 42 10 5 3 9 10 8 11-5 4-6 14-15 11-18-7-36-5-54-5-8-1-14-4-19-11-10-17-22-33-29-51-7-15-18-21-33-20-14 0-20-7-24-19-10-28-19-55-16-85l-2-16Zm27 31c-2 21 2 38 5 56 2 14 8 16 20 12-7-22-11-45-25-68ZM191 103l32 66c-11 2-14 12-19 19-10 14-22 24-37 33-21 12-35 31-52 48a112 112 0 0 1-18 14c-5 4-10 8-11 15-7 1-10 7-12 12-3 12-19 12-22 24l-6 2c-13 1-18-7-17-27l6-3 9-11c5-9 15-14 14-26 25-22 36-57 64-76l1-1c32-15 45-45 58-75 2-5 3-11 10-14Z");
			add_location(path6, file$p, 120, 6, 3843);
			attr_dev(path7, "fill", "var(--hair)");
			attr_dev(path7, "d", "M29 309c-1 20 4 28 17 27l6-2c3-12 19-12 22-24 2-5 5-11 12-12 6 12 14 23 30 23 4 0 8 1 8 6s-2 7-7 8c-17 4-34 7-47-10-2 16 5 25 18 29l15 4c5 1 11 0 11 8 0 7-5 12-10 12-10-1-19 5-28 6-19 3-33-1-46-15L6 346c-7-6-9-12 0-19 8-6 13-16 23-18ZM548 200l6-9c3-6 3-9-5-11s-15-7-23-11c-2-1-4-3-4-6 1-2 4-3 6-3 6 0 15 2 15-7 0-10-8-11-16-11l-9-2c-6-7-7-16-10-24 18 1 36-3 54 2 16 5 22 15 21 31-1 20-10 37-16 54-5 12-12 3-18 0ZM58 269c1 12-9 17-14 26l-9 11c-9-11-5-19 6-26 6-4 10-10 17-11Z");
			add_location(path7, file$p, 124, 6, 4557);
			attr_dev(path8, "fill", "var(--shirt)");
			attr_dev(path8, "d", "M282 137v-1 1z");
			add_location(path8, file$p, 128, 6, 5092);
			attr_dev(g1, "id", "d-pushup-2");
			attr_dev(g1, "class", "svelte-15rrfqg");
			add_location(g1, file$p, 111, 4, 3346);
			attr_dev(path9, "fill", "var(--shirt)");
			attr_dev(path9, "d", "M516 199c-22 6-44 13-65 22-6 3-12 0-18 1-8 2-16 4-23 4-6 0-8-1-8-7l-2-8c-2-16-5-31-4-47a16 16 0 0 0-3-8c-6-12-8-24-7-37a121 121 0 0 0 29-6 9 9 0 0 1 2-1c25-1 46-13 68-20a46 46 0 0 1 13-2c2 0 5 0 6-3h48c3 6 9 3 14 5 14 3 24 13 38 16l3 8c-4 8-4 17-6 26-2 12-5 24-4 37-5 10-4 22-6 32-1 6 0 13-6 18-3-5-10-5-11-5-10 4-19 0-29 2-2-1-5-2-7 0-4-1-4-4-4-7a177 177 0 0 1 0-18c1-7-3-8-8-6l-10 4Z");
			add_location(path9, file$p, 131, 6, 5179);
			attr_dev(path10, "fill", "var(--hair)");
			attr_dev(path10, "d", "m607 116-3-8c16-6 32-16 49-19l1-2h12c24 6 26 26 30 44l4 29c2 10-1 13-10 11l-11-4c1-3 3-5 3-8 2-9-1-11-9-9-4 1-6 0-8-2-3-5-8-7-14-6-3 1-6 0-10-1s-7-3-8-7c-1-5 4-5 6-7 6-3 10-7 6-13-3-6-8-4-13-2-8 3-16 9-25 4Z");
			add_location(path10, file$p, 135, 6, 5626);
			attr_dev(path11, "fill", "var(--pants)");
			attr_dev(path11, "d", "M386 119c-1 13 1 25 7 37a16 16 0 0 1 3 8c-1 16 2 31 4 47a9 9 0 0 0-6 5c-6 9-15 14-25 18-14 4-27 10-41 13a274 274 0 0 0-62 24c-4 2-7 0-9-3l-10-13c0-4 8-3 4-9-9-14-16-29-22-44a5 5 0 0 1 3-5c16-8 30-20 46-30a579 579 0 0 0 55-36c16-12 34-18 53-12Z");
			add_location(path11, file$p, 139, 6, 5894);
			attr_dev(path12, "fill", "var(--flesh)");
			attr_dev(path12, "d", "M229 202c6 15 13 30 22 44 4 6-4 5-4 9-9 0-16 6-25 8-14 3-28 3-42 8-8 2-14 8-22 11l-32 12c-11 2-22 3-31 11-7 5-16 8-20 17-5-1-8 5-12 4-6-1-13-2-19-6s-8-11-3-17c3-3 5-7 4-11 14-2 25-10 36-17l2-4c14-4 27-10 34-25a9 9 0 0 0 7-1c12-8 27-12 38-20 20-16 42-22 67-23ZM545 226c10-2 19 2 29-2 1 0 8 0 11 5-4 37-9 74-16 111l-2 21c-1 7 0 8 7 6 3 0 10-6 8 5 0 3 3 2 5 2l25 2c9 1 12 7 18 11 3 2 0 5 0 8 0 2-3 2-5 2-4 0-9-4-11 3h-8c-11-2-22-3-33-2a50 50 0 0 1-14-2c-11-3-14-7-14-18v-50c0-7-1-11-9-11l-8-1c-11-3-17-9-17-21-1-24 2-48 4-73 0-8 2-15 1-23l10-4c5-2 9-1 8 6a177 177 0 0 0 0 18c0 3 0 6 4 7l-9 51c-1 4-2 9 0 14s7 6 12 5 2-5 2-8c-1-20 3-41 2-62Z");
			add_location(path12, file$p, 143, 6, 6199);
			attr_dev(path13, "fill", "var(--hair)");
			attr_dev(path13, "d", "M45 292c1 4-1 8-4 11-5 6-3 13 3 17s13 5 19 6c4 1 7-5 12-4 3 1 1 3 0 4-7 9-2 17 0 26l4 1 21 7c7 2 7 11 1 14-14 8-30 14-47 9-11-3-19-9-23-21-5-13-13-26-19-39l-5-10c-1-6 1-9 5-13 10-8 22-5 33-8Z");
			add_location(path13, file$p, 147, 6, 6898);
			attr_dev(path14, "fill", "var(--flesh)");
			attr_dev(path14, "d", "M607 116c9 5 17-1 24-4 6-2 11-4 14 2 4 6-1 10-6 13-2 2-7 2-6 7 1 4 4 6 8 7s7 2 10 1c6-1 11 1 14 6 2 2 4 3 8 2 8-2 10 0 9 9 0 3-2 5-3 8-9 3-16 9-26 9-4 1-8 5-11 9s-6 4-10 1l-2-2c-8 5-14-1-21 0-6 1-9-1-12-5-1-13 2-25 4-37 2-9 2-18 6-26Z");
			add_location(path14, file$p, 151, 6, 7150);
			attr_dev(path15, "fill", "var(--hair)");
			attr_dev(path15, "d", "M95 305c9-8 20-9 31-11-3 7 0 11 7 14a25 25 0 0 1 6 3c6 4 5 11-1 14a50 50 0 0 1-28 3 12 12 0 0 1-10-8l-5-15ZM117 246c-7 15-20 21-34 25-5-15-3-18 13-22 6-1 13-1 18-5 3-2 3 1 3 2Z");
			add_location(path15, file$p, 155, 6, 7446);
			attr_dev(g2, "id", "d-pushup-1");
			attr_dev(g2, "class", "svelte-15rrfqg");
			add_location(g2, file$p, 130, 4, 5153);
			attr_dev(path16, "fill", "var(--hair)");
			attr_dev(path16, "d", "M744 336c-5 8-4 17-7 25-2 5 1 11-5 12s-10-2-14-6l5-10c1-5 3-11-6-8a4 4 0 0 1-4-2c-3-5-6-4-10-3-4 2-9 2-13 0a6 6 0 0 1-4-7c1-3 4-2 6-2h6c3 0 7-1 8-5 1-3 0-7-3-10s-8-4-12-4c-11 0-17-7-21-16 12-10 26-11 40-13 6 0 12-2 18 1 7 3 13 8 16 15ZM71 336l-10 23c-1 3-1 6 4 7a39 39 0 0 1 8 5c7 4 7 10 0 14-10 6-34 4-42-5-5-6-6-15-6-23 0-14 0-28-5-41-1-2-1-4-3-5v-13c15-4 31-3 47-3a2 2 0 0 1 2 2c-9-2-14 4-17 12l-3 4c-5 7-3 11 5 21 5 6 10 9 16 2h4Z");
			add_location(path16, file$p, 161, 6, 7716);
			attr_dev(path17, "fill", "var(--pants)");
			attr_dev(path17, "d", "M447 349c-9 3-15 11-25 12-23 1-45 3-68 2-15-1-29 1-44 4-11 2-13 1-16-10l-3-10c1-18-1-37-3-55 3-5 8-4 13-5 3-1 7-1 8-6 1-3 4-3 6-4l27-5a273 273 0 0 0 64-17 63 63 0 0 1 37-4c6 1 13 3 18 8-5 10-7 21-4 32v15a342 342 0 0 0-10 43Z");
			add_location(path17, file$p, 165, 6, 8211);
			attr_dev(path18, "fill", "var(--flesh)");
			attr_dev(path18, "d", "M288 292c2 18 4 37 3 55-21-5-42 0-63-3a50 50 0 0 1-9-3c-21-7-44-4-65-8-13-3-25-2-38-2-13-2-25 0-37 2-3 1-6 1-8 3h-4c-6 7-11 4-16-2-8-10-10-14-5-21l3-4c3-8 8-14 17-13h11a338 338 0 0 0 47-3c16 0 31-3 47-5 24-3 48-4 72 2 15 4 30 6 45 2Z");
			add_location(path18, file$p, 169, 6, 8497);
			attr_dev(path19, "fill", "var(--shirt)");
			attr_dev(path19, "d", "M447 349a342 342 0 0 1 10-43c2-5 1-10 0-15-3-11-1-22 4-32 6 3 13 3 18 9h3c11-3 21 4 32 1 11 1 20-6 31-3-1 3-5 1-6 4-1 7-5 13-6 19-2 19 3 36 7 54 2 9 5 17 5 26a273 273 0 0 0-43 3c-15 2-29-5-44-5l-5-1c-6 0-7-3-6-8 0-3 2-6 0-9Z");
			add_location(path19, file$p, 173, 6, 8792);
			attr_dev(path20, "fill", "var(--flesh)");
			attr_dev(path20, "d", "M545 369c0-9-3-17-5-26-4-18-9-35-7-54l6-19c1-3 5-1 6-4-11-3-21 4-31 3l2-8c2-4 4-8 10-8 15 0 31 0 45 8-1 2-4 3 1 4 12 2 25 3 35 12 7 5 9 9 6 18l-5 12c-1 4-1 10-6 11-3 1-5 4-7 6-5 8-11 9-18 5-4-2-6-1-6 3l-3 15c-1 7-3 15 2 22 0 6 2 8 8 8a228 228 0 0 1 56 10c2 1 4 1 4 5l-5 4c-24 5-48 0-72 1-5 0-8-3-9-8a88 88 0 0 0-7-20Z");
			add_location(path20, file$p, 177, 6, 9078);
			attr_dev(path21, "fill", "var(--shirt)");
			attr_dev(path21, "d", "M570 369c-5-7-3-15-1-22l2-15c0-4 2-5 6-3 7 4 13 3 18-5l7-6c5-1 5-7 6-11l5-12c3-9 1-13-6-18-10-9-23-10-35-12-5-1-2-2-1-4 15 1 29 2 42 7 17 6 31 15 43 29a148 148 0 0 1-9 43 133 133 0 0 1-26 25c-9 7-20 7-31 6l-20-2Z");
			add_location(path21, file$p, 181, 6, 9457);
			attr_dev(path22, "fill", "var(--flesh)");
			attr_dev(path22, "d", "M647 340a148 148 0 0 0 9-43c4 3 9 2 14 3 4 9 10 16 21 16 4 0 9 1 12 4s4 7 3 10c-1 4-5 5-8 5h-6c-2 0-5-1-6 2a6 6 0 0 0 4 7c4 2 9 2 13 0 4-1 7-2 10 3a4 4 0 0 0 4 2c9-3 7 3 6 8l-5 10c-12 3-26-1-37 8l-4 1c-5-5-13-2-18-7l-2-2c-13-1-9-9-8-17 1-3 2-8-2-10Z");
			add_location(path22, file$p, 185, 6, 9731);
			attr_dev(path23, "fill", "var(--hair)");
			attr_dev(path23, "d", "M124 293a338 338 0 0 1-47 3c-1-7 2-9 10-9 13-1 25 0 37 6ZM79 333c12-2 24-4 37-2l-5 7c-7 11-7 12 4 19 2 2 4 4 4 7s-3 5-5 6c-12 4-23 2-34-2-4-2-5-6-5-11l4-24Z");
			add_location(path23, file$p, 189, 6, 10042);
			attr_dev(g3, "id", "d-pushup-4");
			attr_dev(g3, "class", "svelte-15rrfqg");
			add_location(g3, file$p, 160, 4, 7690);
			attr_dev(path24, "fill", "var(--flesh)");
			attr_dev(path24, "d", "M628 208c-11 17-23 35-30 54-12 33-26 65-21 101 0 8 3 10 11 13 15 8 33 3 48 12 8 6 10 9 1 15l-6 7h-8c-8-6-17-5-26-5-46-3-39-6-46-40-7-35-6-70 1-106 13-14 21-30 22-50 0-16 3-18 19-16 3 0 6 1 9-1 8-3 14 1 18 7 3 3 3 8 8 9Z");
			add_location(path24, file$p, 195, 6, 10292);
			attr_dev(path25, "fill", "var(--hair)");
			attr_dev(path25, "d", "M120 342c0 5-1 9-7 9-9 1-13 7-18 13-6 7-5 11 3 15s6 10 0 14c-8 5-17 7-26 2s-14-13-13-24c0-14 2-29-6-43v-22a33 33 0 0 1 24-1c11 3 11-2 11-10v-25c0-4 1-9 7-7 11 3 24 1 35 8-7 4-14 7-17 16-3 10 8 14 8 23-6 1-13 0-19 2-8 2-14 7-13 17s10 8 16 7c7-2 11 1 15 6ZM713 100c-6 3-12 5-19 3-1-16-3-16-15-8l-18 9c-3 2-6 3-9 0s0-5 2-8c3-4 8-9 1-14-6-4-12-3-16 4-9 13-20 15-34 8 1-17 13-27 23-39 6-7 12-14 23-16 21-4 30 12 42 25 7 9 11 21 20 28Z");
			add_location(path25, file$p, 199, 6, 10573);
			attr_dev(path26, "fill", "var(--shirt)");
			attr_dev(path26, "d", "M628 208c-5-1-5-6-8-9-4-6-10-10-18-7-3 2-6 1-9 1-15-2-19 0-19 16-1 20-9 36-22 50-12 17-29 29-39 46-12 1-18-6-23-15-10-23-13-51-37-66v-3c17-5 26-19 37-30l2-3c2-2 4-4 4-8l12-29c10-20 29-28 48-36 14-6 30-9 45-13 9 3 18 4 22 14 5 13 10 25 19 36 4 21-7 38-14 56Z");
			add_location(path26, file$p, 203, 6, 11063);
			attr_dev(path27, "fill", "var(--flesh)");
			attr_dev(path27, "d", "M120 342c-4-5-8-8-15-6-6 1-15 3-16-7s5-15 13-17c6-2 12-1 19-2 0-9-11-13-8-23 3-9 10-12 17-16 22 3 43 2 65-3a71 71 0 0 1 39 4c36 14 70 5 104-11a26 26 0 0 1 3-1c3 9 8 18 1 27v4c6 16 4 33 3 50a353 353 0 0 1-70 8c-7 0-14-2-21-1-45 2-89-7-134-6Zm55-39c-14-3-26-3-37-2-3 0-6 1-7 5 0 2 0 4 2 4 13-3 27 3 42-7Z");
			add_location(path27, file$p, 207, 6, 11382);
			attr_dev(path28, "fill", "var(--pants)");
			attr_dev(path28, "d", "M345 340c1-16 3-33-3-49v-4c7-9 2-18-1-27 21-3 40-9 58-21 16-11 34-19 54-15 24 15 27 43 37 66l-15 18c-16 7-29 19-46 24-24 8-47 19-74 16-6-1-9-2-10-8Z");
			add_location(path28, file$p, 211, 6, 11746);
			attr_dev(path29, "fill", "var(--flesh)");
			attr_dev(path29, "d", "M642 152c-9-11-14-23-19-36-4-10-13-11-22-14l4-8c14 7 25 5 34-8 4-7 10-8 16-4 7 5 2 10-1 14-2 3-5 5-2 9 3 2 6 1 9-1l18-9c12-8 14-8 15 8-13 18-22 42-49 45l-3 4ZM475 308l15-18c5 9 11 16 23 15 4 6 11 3 17 6 7 3 7 7 3 11-10 9-51 1-57-10l-1-4Z");
			add_location(path29, file$p, 215, 6, 11956);
			attr_dev(g4, "id", "d-pushup-5");
			attr_dev(g4, "class", "svelte-15rrfqg");
			add_location(g4, file$p, 194, 4, 10266);
			attr_dev(g5, "class", "shapes svelte-15rrfqg");
			add_location(g5, file$p, 92, 2, 1512);
			attr_dev(g6, "class", "svelte-15rrfqg");
			toggle_class(g6, "paused", /*isPaused*/ ctx[1]);
			toggle_class(g6, "flip", /*flipsvg*/ ctx[2]);
			add_location(g6, file$p, 91, 0, 1461);
			attr_dev(svg, "xmlns", "http://www.w3.org/2000/svg");
			attr_dev(svg, "viewBox", "0 0 743.9 410.2");
			attr_dev(svg, "height", "100%");
			attr_dev(svg, "width", "100%");
			attr_dev(svg, "class", "svelte-15rrfqg");
			add_location(svg, file$p, 90, 0, 1366);
		},
		l: function claim(nodes) {
			throw new Error("options.hydrate only works if the component was compiled with the `hydratable: true` option");
		},
		m: function mount(target, anchor) {
			insert_dev(target, svg, anchor);
			append_dev(svg, t);
			append_dev(svg, g6);
			append_dev(g6, g5);
			append_dev(g5, g0);
			append_dev(g0, path0);
			append_dev(g0, path1);
			append_dev(g0, path2);
			append_dev(g0, path3);
			append_dev(g5, g1);
			append_dev(g1, path4);
			append_dev(g1, path5);
			append_dev(g1, path6);
			append_dev(g1, path7);
			append_dev(g1, path8);
			append_dev(g5, g2);
			append_dev(g2, path9);
			append_dev(g2, path10);
			append_dev(g2, path11);
			append_dev(g2, path12);
			append_dev(g2, path13);
			append_dev(g2, path14);
			append_dev(g2, path15);
			append_dev(g5, g3);
			append_dev(g3, path16);
			append_dev(g3, path17);
			append_dev(g3, path18);
			append_dev(g3, path19);
			append_dev(g3, path20);
			append_dev(g3, path21);
			append_dev(g3, path22);
			append_dev(g3, path23);
			append_dev(g5, g4);
			append_dev(g4, path24);
			append_dev(g4, path25);
			append_dev(g4, path26);
			append_dev(g4, path27);
			append_dev(g4, path28);
			append_dev(g4, path29);
			/*g5_binding*/ ctx[4](g5);
			if (if_block) if_block.m(g6, null);
		},
		p: function update(ctx, [dirty]) {
			if (/*isPaused*/ ctx[1]) {
				if (if_block) ; else {
					if_block = create_if_block$p(ctx);
					if_block.c();
					if_block.m(g6, null);
				}
			} else if (if_block) {
				if_block.d(1);
				if_block = null;
			}

			if (dirty & /*isPaused*/ 2) {
				toggle_class(g6, "paused", /*isPaused*/ ctx[1]);
			}

			if (dirty & /*flipsvg*/ 4) {
				toggle_class(g6, "flip", /*flipsvg*/ ctx[2]);
			}
		},
		i: noop,
		o: noop,
		d: function destroy(detaching) {
			if (detaching) detach_dev(svg);
			/*g5_binding*/ ctx[4](null);
			if (if_block) if_block.d();
		}
	};

	dispatch_dev("SvelteRegisterBlock", {
		block,
		id: create_fragment$p.name,
		type: "component",
		source: "",
		ctx
	});

	return block;
}

function instance$p($$self, $$props, $$invalidate) {
	let { $$slots: slots = {}, $$scope } = $$props;
	validate_slots('Workout_divebomberpushup', slots, []);
	let { direction = "right" } = $$props;
	let { isPaused = false } = $$props;
	let { rootElement } = $$props;
	let flipsvg = false;

	if (direction == "left") {
		flipsvg = true;
	}

	const writable_props = ['direction', 'isPaused', 'rootElement'];

	Object.keys($$props).forEach(key => {
		if (!~writable_props.indexOf(key) && key.slice(0, 2) !== '$$' && key !== 'slot') console.warn(`<Workout_divebomberpushup> was created with unknown prop '${key}'`);
	});

	function g5_binding($$value) {
		binding_callbacks[$$value ? 'unshift' : 'push'](() => {
			rootElement = $$value;
			$$invalidate(0, rootElement);
		});
	}

	$$self.$$set = $$props => {
		if ('direction' in $$props) $$invalidate(3, direction = $$props.direction);
		if ('isPaused' in $$props) $$invalidate(1, isPaused = $$props.isPaused);
		if ('rootElement' in $$props) $$invalidate(0, rootElement = $$props.rootElement);
	};

	$$self.$capture_state = () => ({
		direction,
		isPaused,
		rootElement,
		flipsvg
	});

	$$self.$inject_state = $$props => {
		if ('direction' in $$props) $$invalidate(3, direction = $$props.direction);
		if ('isPaused' in $$props) $$invalidate(1, isPaused = $$props.isPaused);
		if ('rootElement' in $$props) $$invalidate(0, rootElement = $$props.rootElement);
		if ('flipsvg' in $$props) $$invalidate(2, flipsvg = $$props.flipsvg);
	};

	if ($$props && "$$inject" in $$props) {
		$$self.$inject_state($$props.$$inject);
	}

	return [rootElement, isPaused, flipsvg, direction, g5_binding];
}

class Workout_divebomberpushup extends SvelteComponentDev {
	constructor(options) {
		super(options);

		init(this, options, instance$p, create_fragment$p, safe_not_equal, {
			direction: 3,
			isPaused: 1,
			rootElement: 0
		});

		dispatch_dev("SvelteRegisterComponent", {
			component: this,
			tagName: "Workout_divebomberpushup",
			options,
			id: create_fragment$p.name
		});

		const { ctx } = this.$$;
		const props = options.props || {};

		if (/*rootElement*/ ctx[0] === undefined && !('rootElement' in props)) {
			console.warn("<Workout_divebomberpushup> was created without expected prop 'rootElement'");
		}
	}

	get direction() {
		throw new Error("<Workout_divebomberpushup>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
	}

	set direction(value) {
		throw new Error("<Workout_divebomberpushup>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
	}

	get isPaused() {
		throw new Error("<Workout_divebomberpushup>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
	}

	set isPaused(value) {
		throw new Error("<Workout_divebomberpushup>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
	}

	get rootElement() {
		throw new Error("<Workout_divebomberpushup>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
	}

	set rootElement(value) {
		throw new Error("<Workout_divebomberpushup>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
	}
}

var workoutDivebomberpushup = /*#__PURE__*/Object.freeze({
    __proto__: null,
    'default': Workout_divebomberpushup
});

/* src/workouts/workout-doublecrunches.svelte generated by Svelte v3.49.0 */

const file$o = "src/workouts/workout-doublecrunches.svelte";

// (108:4) {#if isPaused}
function create_if_block$o(ctx) {
	let svg;
	let path;

	const block = {
		c: function create() {
			svg = svg_element("svg");
			path = svg_element("path");
			attr_dev(path, "d", "M10 24h-6v-24h6v24zm10 0h-6v-24h6v24zm-11-23h-4v22h4v-22zm10 0h-4v22h4v-22z");
			add_location(path, file$o, 108, 133, 6294);
			attr_dev(svg, "viewBox", "-6 -5 36 36");
			attr_dev(svg, "width", "100%");
			attr_dev(svg, "height", "100%");
			attr_dev(svg, "xmlns", "http://www.w3.org/2000/svg");
			attr_dev(svg, "fill-rule", "evenodd");
			attr_dev(svg, "clip-rule", "evenodd");
			add_location(svg, file$o, 108, 4, 6165);
		},
		m: function mount(target, anchor) {
			insert_dev(target, svg, anchor);
			append_dev(svg, path);
		},
		d: function destroy(detaching) {
			if (detaching) detach_dev(svg);
		}
	};

	dispatch_dev("SvelteRegisterBlock", {
		block,
		id: create_if_block$o.name,
		type: "if",
		source: "(108:4) {#if isPaused}",
		ctx
	});

	return block;
}

function create_fragment$o(ctx) {
	let svg;
	let t;
	let g3;
	let g2;
	let g0;
	let path0;
	let path1;
	let path2;
	let path3;
	let path4;
	let path5;
	let path6;
	let g1;
	let path7;
	let path8;
	let path9;
	let path10;
	let path11;
	let path12;
	let if_block = /*isPaused*/ ctx[1] && create_if_block$o(ctx);

	const block = {
		c: function create() {
			svg = svg_element("svg");
			t = text(">\n");
			g3 = svg_element("g");
			g2 = svg_element("g");
			g0 = svg_element("g");
			path0 = svg_element("path");
			path1 = svg_element("path");
			path2 = svg_element("path");
			path3 = svg_element("path");
			path4 = svg_element("path");
			path5 = svg_element("path");
			path6 = svg_element("path");
			g1 = svg_element("g");
			path7 = svg_element("path");
			path8 = svg_element("path");
			path9 = svg_element("path");
			path10 = svg_element("path");
			path11 = svg_element("path");
			path12 = svg_element("path");
			if (if_block) if_block.c();
			attr_dev(path0, "fill", "var(--hair)");
			attr_dev(path0, "d", "M276 166h-2l-19-2c-3-1-4-1-4-4a19 19 0 0 1 1-7 54 54 0 0 0 2-12l-1-1-7 1a12 12 0 0 1-6 0c-3-1-3-2-3-4a43 43 0 0 0 2-8 7 7 0 0 0 1-3 4 4 0 0 1 1-5c1 0 1-2 3 0l9 16 1 2c3 0 3 3 3 5a6 6 0 0 0 3 4c3 3 8 2 11-3a2 2 0 0 0 0-2c-1-1-2-3-1-5a1 1 0 0 0 0-1l-4-11 16 6a8 8 0 0 1 2 1c2 1 2 3 0 5a10 10 0 0 1-7 3h-2a16 16 0 0 0 4 3 72 72 0 0 0 27 11 5 5 0 0 1 4 4c0 3-2 4-4 5l-9 2h-18Z");
			add_location(path0, file$o, 51, 6, 1057);
			attr_dev(path1, "fill", "var(--flesh)");
			attr_dev(path1, "d", "m47 157-12 1-12 1a35 35 0 0 1-12-1 8 8 0 0 1-5-3l-6-8v-2a21 21 0 0 1 3-4 8 8 0 0 0 3-3c1-3 3-4 6-6l7-2a10 10 0 0 0 3 0c6-1 11-1 16 1v2c4 0 7 2 10 3l5 2 2 1c2 0 3 2 5 3v3a8 8 0 0 1-3 0c-2 1-3 1-3 4l-1 1c-4 1-6 5-9 7Z");
			add_location(path1, file$o, 55, 6, 1490);
			attr_dev(path2, "fill", "var(--shirt)");
			attr_dev(path2, "d", "M47 157h-3c3-2 5-6 9-7l1-1c0-3 1-3 3-4a8 8 0 0 0 3 0v-3c-2-1-3-3-5-3l-2-1-5-2c-3-1-6-3-10-3v-2l4-1c5 1 11-1 15-5a53 53 0 0 1 6-5 11 11 0 0 0 4-5 13 13 0 0 0 5-4l1-1a2 2 0 0 0 2-2l5-4c4-4 9-6 15-6a119 119 0 0 1 28 0c3 0 6 2 9 4a80 80 0 0 0 10 4c3 0 6 1 8-2s5-2 8-1a6 6 0 0 0 3 0 3 3 0 0 1 0 3l-5 14a6 6 0 0 0 0 6l1 5c-3 4-3 9-2 14a3 3 0 0 0 1 3 19 19 0 0 0 4 2c0 2 2 4 0 5a4 4 0 0 1-5-1c-4-4-9-5-15-5h-35a174 174 0 0 0-21 3l-30 4-7 1Z");
			add_location(path2, file$o, 59, 6, 1767);
			attr_dev(path3, "fill", "var(--flesh)");
			attr_dev(path3, "d", "m266 126 4 11a1 1 0 0 1 0 1c-1 2 0 4 1 5a2 2 0 0 1 0 2c-3 5-8 6-11 3a6 6 0 0 1-3-4c0-2 0-5-3-5l-1-2-9-16c-2-2-2 0-3 0l-14-21-3 7c-2 7-6 12-10 17l-2 2-1 1c-3 2-3 2-4 0a56 56 0 0 1-6-14c-3-7-5-14-5-22 1-4 1-9 6-12v-2a42 42 0 0 0-3-5l8-6 12-11c4-3 7-5 12-3l1 1c2 2 4 3 7 2a6 6 0 0 1 5 2c4 4 8 9 10 15v7l2 8 7 27 3 12Z");
			add_location(path3, file$o, 63, 6, 2262);
			attr_dev(path4, "fill", "var(--pants)");
			attr_dev(path4, "d", "M199 72a42 42 0 0 1 3 5v2c-5 3-5 8-6 12 0 8 2 15 5 22a56 56 0 0 0 6 14c1 2 1 2 4 0l1-1 1 3c1 3 0 5-3 6l-21 11a51 51 0 0 1-29 4 19 19 0 0 1-4-2 3 3 0 0 1-1-3c-1-5-1-10 2-14l-1-5a6 6 0 0 1 0-6l5-14a3 3 0 0 0 0-3 2 2 0 0 1 2-1c3 0 5-2 8-3a26 26 0 0 0 12-11c4-6 9-10 14-15l2-1Z");
			add_location(path4, file$o, 67, 6, 2638);
			attr_dev(path5, "fill", "var(--flesh)");
			attr_dev(path5, "d", "M67 115a11 11 0 0 1-4 5 53 53 0 0 0-6 5c-4 4-10 6-15 5a6 6 0 0 1-4-2 4 4 0 0 1 0-4 4 4 0 0 1 3-2l4-1c2 0 2-1 2-2a2 2 0 0 0-2-2 26 26 0 0 1-8-3 5 5 0 0 0-5-1 2 2 0 0 1-2-2 18 18 0 0 1 3-11h7a10 10 0 0 1 5 1c2 1 4-1 5-1l3-1c1-1 2 0 3 2l1 1a5 5 0 0 1 6 3 2 2 0 0 0 1 1c4 0 4 2 4 6l-1 1a4 4 0 0 0 0 2Z");
			add_location(path5, file$o, 71, 6, 2973);
			attr_dev(path6, "fill", "var(--hair)");
			attr_dev(path6, "d", "M33 100a18 18 0 0 0-3 11 2 2 0 0 0 2 2 5 5 0 0 1 5 1 26 26 0 0 0 8 3 2 2 0 0 1 2 2c0 1 0 2-2 2l-4 1a4 4 0 0 0-3 2 4 4 0 0 0 1 4 6 6 0 0 0 3 2l-4 1c-5-2-10-2-16-1a10 10 0 0 1-3 0c0-7 0-13 2-19l3-12c0-3 2-4 5-3a13 13 0 0 1 4 4Z");
			add_location(path6, file$o, 75, 6, 3332);
			attr_dev(g0, "id", "double-crunch-1");
			attr_dev(g0, "class", "svelte-1jbx1tw");
			add_location(g0, file$o, 50, 4, 1026);
			attr_dev(path7, "fill", "var(--hair)");
			attr_dev(path7, "d", "M256 13h-1c-2 11-7 21-11 31l-4 7c-1 2-2 3-4 2a21 21 0 0 1-6-3 46 46 0 0 0-9-5c-2-1-2-1-3 2l-1 6a10 10 0 0 1-1 2c-2 4-3 5-7 2-3-2-5-5-9-5l-3-2c0-2 0-2 2-3a82 82 0 0 1 17-3h2c1-3 3-2 5-1a5 5 0 0 0 4-1c4-2 5-7 2-11l-3-1h-3c-1-2-3-1-5-1h-8a74 74 0 0 0 12-13c2-2 3-2 4 0v10l1-1a13 13 0 0 0 1 0c8-6 15-13 20-22l3-3h2l3 6Z");
			add_location(path7, file$o, 81, 6, 3656);
			attr_dev(path8, "fill", "var(--shirt)");
			attr_dev(path8, "d", "m159 150 1 2-2 1h-22l-15 1a66 66 0 0 1-28-6 85 85 0 0 0-13-4c-5-1-9-5-13-8a47 47 0 0 1-10-12c-1-2-2-2-3-2-4-1-4-2-4-5 1-1 2 0 3 1 4 1 9-1 10-5l1-11-1-4a1 1 0 0 1 0-2h2l2 2c0 2 2 1 3 0a15 15 0 0 1 8-2h7a13 13 0 0 0 8-1l4-4 2 1c3 0 5 2 8 3a66 66 0 0 0 7 1 20 20 0 0 1 6 3h8a14 14 0 0 1 5 0 63 63 0 0 0 10 1l7 1c3 0 4 2 5 5 1 5 0 10-1 15-1 3-1 6 1 9a6 6 0 0 1 2 5 25 25 0 0 0-1 9c0 2 1 5 3 6Z");
			add_location(path8, file$o, 85, 6, 4032);
			attr_dev(path9, "fill", "var(--flesh)");
			attr_dev(path9, "d", "M211 29h8c1 0 3-1 4 1h4c2-1 1 0 2 1 3 4 2 9-2 11a5 5 0 0 1-4 1c-2-1-4-2-5 1h-2a82 82 0 0 0-17 3c-2 1-2 1-2 3l-20 5-2 1 2 2a28 28 0 0 1 9 8l7 12v1c2 4 2 3-2 4-15 4-28 1-40-9a10 10 0 0 0-3-2l-1 3v3h-4c-2 0 0-2-1-3l-3-8-8-20a11 11 0 0 1 0-6 8 8 0 0 1 5-6 2 2 0 0 0 1-2 9 9 0 0 1 8-8l7-2a14 14 0 0 1 9 1 40 40 0 0 0 14 2l21 2 12 1a5 5 0 0 0 3 0Z");
			add_location(path9, file$o, 89, 6, 4483);
			attr_dev(path10, "fill", "var(--pants)");
			attr_dev(path10, "d", "m142 76 1 2h4v-3l1-3a10 10 0 0 1 3 2c12 10 25 13 40 9 4-1 4 0 2-4v-1c3 0 5 1 7 3 3 5 5 10 4 17l1 9c0 7 0 13-2 19-3 7-7 11-13 15a57 57 0 0 1-13 7c-5 2-9 3-13 2a29 29 0 0 0-5 0c-2-1-3-4-3-6a25 25 0 0 1 1-9 6 6 0 0 0-1-5c-3-3-3-6-2-9 1-5 2-10 1-15-1-3-2-5-5-5a36 36 0 0 1-2-9 13 13 0 0 0-3-6c-2-3-4-6-3-10Z");
			add_location(path10, file$o, 93, 6, 4886);
			attr_dev(path11, "fill", "var(--flesh)");
			attr_dev(path11, "d", "M64 102c0 4 1 8-1 11s-6 6-10 5c-1-1-2-2-3-1l-7-6-6-4a1 1 0 0 0 0-1h-1a3 3 0 0 0-2-2 9 9 0 0 0-4-3 2 2 0 0 0-1-2l-1-1v-1l-1-1v-9l1-1v-1a4 4 0 0 0 2-3c2-2 5-2 7-3l10-4h3a6 6 0 0 0 1 1c6 3 9 8 8 15l1 2a36 36 0 0 1 3 5l1 4ZM97 91l-4 4a13 13 0 0 1-8 1h-7a15 15 0 0 0-8 3c-1 0-3 1-3-1s-2-2-2-3l4-3v-1l-3-5a5 5 0 0 1-1-6 3 3 0 0 1 6-1l2 2c2 2 2 2 3 0a3 3 0 0 0 0-3 19 19 0 0 1-2-6 6 6 0 0 0-1-4c-2-2-2-3 0-5a28 28 0 0 1 9-3 14 14 0 0 0 3 4 13 13 0 0 1 4 6 4 4 0 0 0 2 2 25 25 0 0 1 3 2c2 1 2 2 1 4v1c1 2 2 4 1 7l1 1a5 5 0 0 1 0 4Z");
			add_location(path11, file$o, 97, 6, 5251);
			attr_dev(path12, "fill", "var(--hair)");
			attr_dev(path12, "d", "M82 60a28 28 0 0 0-9 3c-2 2-2 3 0 5a6 6 0 0 1 1 4 19 19 0 0 0 2 6 3 3 0 0 1 0 3c-1 2-1 2-3 0l-2-2a3 3 0 0 0-6 1 5 5 0 0 0 1 6l3 5v1l-4 3a2 2 0 0 1-3-1l-3-3c1-7-2-12-8-15a6 6 0 0 1-1-1c-1-5 2-8 6-12l15-7 7-4c2-1 4 1 4 3a13 13 0 0 1 0 5Z");
			add_location(path12, file$o, 101, 6, 5836);
			attr_dev(g1, "id", "double-crunch-2");
			attr_dev(g1, "class", "svelte-1jbx1tw");
			add_location(g1, file$o, 80, 4, 3625);
			attr_dev(g2, "class", "shapes svelte-1jbx1tw");
			add_location(g2, file$o, 49, 2, 979);
			attr_dev(g3, "class", "svelte-1jbx1tw");
			toggle_class(g3, "paused", /*isPaused*/ ctx[1]);
			toggle_class(g3, "flip", /*flipsvg*/ ctx[2]);
			add_location(g3, file$o, 48, 0, 928);
			attr_dev(svg, "xmlns", "http://www.w3.org/2000/svg");
			attr_dev(svg, "viewBox", "0 0 309.7 166.4");
			attr_dev(svg, "height", "100%");
			attr_dev(svg, "width", "100%");
			attr_dev(svg, "class", "svelte-1jbx1tw");
			add_location(svg, file$o, 47, 0, 833);
		},
		l: function claim(nodes) {
			throw new Error("options.hydrate only works if the component was compiled with the `hydratable: true` option");
		},
		m: function mount(target, anchor) {
			insert_dev(target, svg, anchor);
			append_dev(svg, t);
			append_dev(svg, g3);
			append_dev(g3, g2);
			append_dev(g2, g0);
			append_dev(g0, path0);
			append_dev(g0, path1);
			append_dev(g0, path2);
			append_dev(g0, path3);
			append_dev(g0, path4);
			append_dev(g0, path5);
			append_dev(g0, path6);
			append_dev(g2, g1);
			append_dev(g1, path7);
			append_dev(g1, path8);
			append_dev(g1, path9);
			append_dev(g1, path10);
			append_dev(g1, path11);
			append_dev(g1, path12);
			/*g2_binding*/ ctx[4](g2);
			if (if_block) if_block.m(g3, null);
		},
		p: function update(ctx, [dirty]) {
			if (/*isPaused*/ ctx[1]) {
				if (if_block) ; else {
					if_block = create_if_block$o(ctx);
					if_block.c();
					if_block.m(g3, null);
				}
			} else if (if_block) {
				if_block.d(1);
				if_block = null;
			}

			if (dirty & /*isPaused*/ 2) {
				toggle_class(g3, "paused", /*isPaused*/ ctx[1]);
			}

			if (dirty & /*flipsvg*/ 4) {
				toggle_class(g3, "flip", /*flipsvg*/ ctx[2]);
			}
		},
		i: noop,
		o: noop,
		d: function destroy(detaching) {
			if (detaching) detach_dev(svg);
			/*g2_binding*/ ctx[4](null);
			if (if_block) if_block.d();
		}
	};

	dispatch_dev("SvelteRegisterBlock", {
		block,
		id: create_fragment$o.name,
		type: "component",
		source: "",
		ctx
	});

	return block;
}

function instance$o($$self, $$props, $$invalidate) {
	let { $$slots: slots = {}, $$scope } = $$props;
	validate_slots('Workout_doublecrunches', slots, []);
	let { direction = "right" } = $$props;
	let { isPaused = false } = $$props;
	let { rootElement } = $$props;
	let flipsvg = false;

	if (direction == "left") {
		flipsvg = true;
	}

	const writable_props = ['direction', 'isPaused', 'rootElement'];

	Object.keys($$props).forEach(key => {
		if (!~writable_props.indexOf(key) && key.slice(0, 2) !== '$$' && key !== 'slot') console.warn(`<Workout_doublecrunches> was created with unknown prop '${key}'`);
	});

	function g2_binding($$value) {
		binding_callbacks[$$value ? 'unshift' : 'push'](() => {
			rootElement = $$value;
			$$invalidate(0, rootElement);
		});
	}

	$$self.$$set = $$props => {
		if ('direction' in $$props) $$invalidate(3, direction = $$props.direction);
		if ('isPaused' in $$props) $$invalidate(1, isPaused = $$props.isPaused);
		if ('rootElement' in $$props) $$invalidate(0, rootElement = $$props.rootElement);
	};

	$$self.$capture_state = () => ({
		direction,
		isPaused,
		rootElement,
		flipsvg
	});

	$$self.$inject_state = $$props => {
		if ('direction' in $$props) $$invalidate(3, direction = $$props.direction);
		if ('isPaused' in $$props) $$invalidate(1, isPaused = $$props.isPaused);
		if ('rootElement' in $$props) $$invalidate(0, rootElement = $$props.rootElement);
		if ('flipsvg' in $$props) $$invalidate(2, flipsvg = $$props.flipsvg);
	};

	if ($$props && "$$inject" in $$props) {
		$$self.$inject_state($$props.$$inject);
	}

	return [rootElement, isPaused, flipsvg, direction, g2_binding];
}

class Workout_doublecrunches extends SvelteComponentDev {
	constructor(options) {
		super(options);

		init(this, options, instance$o, create_fragment$o, safe_not_equal, {
			direction: 3,
			isPaused: 1,
			rootElement: 0
		});

		dispatch_dev("SvelteRegisterComponent", {
			component: this,
			tagName: "Workout_doublecrunches",
			options,
			id: create_fragment$o.name
		});

		const { ctx } = this.$$;
		const props = options.props || {};

		if (/*rootElement*/ ctx[0] === undefined && !('rootElement' in props)) {
			console.warn("<Workout_doublecrunches> was created without expected prop 'rootElement'");
		}
	}

	get direction() {
		throw new Error("<Workout_doublecrunches>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
	}

	set direction(value) {
		throw new Error("<Workout_doublecrunches>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
	}

	get isPaused() {
		throw new Error("<Workout_doublecrunches>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
	}

	set isPaused(value) {
		throw new Error("<Workout_doublecrunches>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
	}

	get rootElement() {
		throw new Error("<Workout_doublecrunches>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
	}

	set rootElement(value) {
		throw new Error("<Workout_doublecrunches>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
	}
}

var workoutDoublecrunches = /*#__PURE__*/Object.freeze({
    __proto__: null,
    'default': Workout_doublecrunches
});

/* src/workouts/workout-hellodollies.svelte generated by Svelte v3.49.0 */

const file$n = "src/workouts/workout-hellodollies.svelte";

// (75:4) {#if isPaused}
function create_if_block$n(ctx) {
	let svg;
	let path;

	const block = {
		c: function create() {
			svg = svg_element("svg");
			path = svg_element("path");
			attr_dev(path, "d", "M10 24h-6v-24h6v24zm10 0h-6v-24h6v24zm-11-23h-4v22h4v-22zm10 0h-4v22h4v-22z");
			add_location(path, file$n, 75, 133, 6042);
			attr_dev(svg, "viewBox", "-6 -5 36 36");
			attr_dev(svg, "width", "100%");
			attr_dev(svg, "height", "100%");
			attr_dev(svg, "xmlns", "http://www.w3.org/2000/svg");
			attr_dev(svg, "fill-rule", "evenodd");
			attr_dev(svg, "clip-rule", "evenodd");
			attr_dev(svg, "class", "svelte-tabugc");
			add_location(svg, file$n, 75, 4, 5913);
		},
		m: function mount(target, anchor) {
			insert_dev(target, svg, anchor);
			append_dev(svg, path);
		},
		d: function destroy(detaching) {
			if (detaching) detach_dev(svg);
		}
	};

	dispatch_dev("SvelteRegisterBlock", {
		block,
		id: create_if_block$n.name,
		type: "if",
		source: "(75:4) {#if isPaused}",
		ctx
	});

	return block;
}

function create_fragment$n(ctx) {
	let svg;
	let t;
	let g1;
	let g0;
	let path0;
	let path1;
	let path2;
	let path3;
	let path4;
	let path5;
	let path6;
	let path7;
	let path8;
	let path9;
	let path10;
	let path11;
	let path12;
	let path13;
	let if_block = /*isPaused*/ ctx[1] && create_if_block$n(ctx);

	const block = {
		c: function create() {
			svg = svg_element("svg");
			t = text(">\n");
			g1 = svg_element("g");
			g0 = svg_element("g");
			path0 = svg_element("path");
			path1 = svg_element("path");
			path2 = svg_element("path");
			path3 = svg_element("path");
			path4 = svg_element("path");
			path5 = svg_element("path");
			path6 = svg_element("path");
			path7 = svg_element("path");
			path8 = svg_element("path");
			path9 = svg_element("path");
			path10 = svg_element("path");
			path11 = svg_element("path");
			path12 = svg_element("path");
			path13 = svg_element("path");
			if (if_block) if_block.c();
			attr_dev(path0, "fill", "var(--hair)");
			attr_dev(path0, "d", "M668 76c-2 0-3-1-3-3a169 169 0 0 0-3-22 13 13 0 0 0-4-7l-13-12a15 15 0 0 1-4-6c-1-4 0-7 4-7 11-1 20 1 28 9a43 43 0 0 1 5 6c7 9 15 16 24 23l4 2c4 3 7 5 9 10v4l-1 2a9 9 0 0 1-4 5l-19 13a1 1 0 0 1-2 0c0-2-1-5 1-7 4-8-2-16-9-16h-6c-2-1-2 0-2 1a6 6 0 0 1-5 5Z");
			add_location(path0, file$n, 19, 6, 503);
			attr_dev(path1, "fill", "var(--flesh)");
			attr_dev(path1, "d", "m47 280-21 2a42 42 0 0 1-16-1 5 5 0 0 1-2-2l-8-10v-2l7-10c1-2 3-3 6-4l8-3a4 4 0 0 0 2 0c6-1 12-1 19 1 0 1-1 2 1 2l3 1 19 9a2 2 0 0 1 2 3l-2 1c-3 0-5 1-7 4a4 4 0 0 1-1 2 29 29 0 0 0-10 7Z");
			add_location(path1, file$n, 23, 6, 818);
			attr_dev(path2, "fill", "var(--hair)");
			attr_dev(path2, "d", "m634 0 10 2a92 92 0 0 1 15 4 58 58 0 0 1 14 7l-1-5 1-2 1 2 1 8-2 1h-9l2-1 5-1a14 14 0 0 0-4-3c-16-8-32-12-50-9a49 49 0 0 0-23 10l-1 2h4l2 1-2 1a13 13 0 0 1-1 0c-3 0-7 1-7-1-2-2 0-5 0-8l1-2 1 2v4h2a53 53 0 0 1 26-11l1-1Z");
			add_location(path2, file$n, 27, 6, 1066);
			attr_dev(path3, "fill", "var(--flesh)");
			attr_dev(path3, "d", "M668 76a6 6 0 0 0 5-5c0-1 0-2 2-1h5c8 0 14 8 9 16v7l-9 15-11 21c-4 9-8 18-14 26-3 4-7 5-10 8l-13 7c-1 1-2 3-1 5 2 10 5 21 6 32l1 2c-2 1-1 2-1 3 0 6-1 13-4 19-1 2-2 3-5 3l-11-1a8 8 0 0 1-7-4c-1-3-3-7-6-9-5-3-8-9-11-14a5 5 0 0 1-1-4l4-24c0-1-1-2-2-1l-6 2c1-8 0-16 2-24a22 22 0 0 0-1-6c0-3 0-7 3-9 10-9 16-20 23-31 3-6 7-11 8-17l2-2c2 0 1-2 1-3 0-3 1-4 4-3 4 0 7 4 8 9a10 10 0 0 0 1 4c-3 4-4 10-4 15a98 98 0 0 1-2 13 12 12 0 0 0 0 2l4-5 20-23c6-6 10-14 11-23Z");
			add_location(path3, file$n, 31, 6, 1346);
			attr_dev(path4, "fill", "var(--shirt)");
			attr_dev(path4, "d", "M597 275c0 2-1 3-2 2a18 18 0 0 1-3-1c-5-2-11-3-17-3h-57l-23-1a19 19 0 0 1-12-5c-4-4-9-6-14-7l-7-4 6-1c3 0 6 0 7-3l5-14c1-2 3-4 1-6l-9-10c-1 0-2-1-1-2l2 1h1a6 6 0 0 0 8-3c1-2 3-5 7-4a9 9 0 0 0 5-2l5-4c1-2 3-5 6-5 3 6 7 7 13 6 7-1 14 0 20 2h2c7 0 14 3 22 1 3 0 7-1 10 1a5 5 0 0 0 4 1l7-1c2 3 2 6 3 10l8 36 3 16ZM47 280a29 29 0 0 1 9-7 4 4 0 0 0 2-2c1-3 4-4 7-4l2-1a2 2 0 0 0-2-3c-6-4-12-6-19-9l-3-1-1-2h3c7 0 13-1 17-6a27 27 0 0 1 5-5 16 16 0 0 0 6-7l4-2 12-10c4-4 10-5 16-6h29l12 3h21c3 1 3 3 3 5 1 8 1 15 5 22a8 8 0 0 1 0 7c-4 8 0 15 4 21-1 3-5 6-8 4a35 35 0 0 1-5-3 15 15 0 0 0-9-3l-31-1-40 5-18 3a82 82 0 0 0-15 2h-6Z");
			add_location(path4, file$n, 35, 6, 1864);
			attr_dev(path5, "fill", "var(--flesh)");
			attr_dev(path5, "d", "M178 190a209 209 0 0 0 2-22 110 110 0 0 1 1-11 20 20 0 0 0-1-5c0-7 2-13 6-19s7-13 10-21l11-26c4-8 7-16 7-25a7 7 0 0 0 1-4l1-2c3 0 4-3 4-5 0-3 2-3 4-4a9 9 0 0 1 10 10 9 9 0 0 0 1 5l-2 7-7 42c-2 9-5 17-10 24-3 4-6 9-7 14s0 10 2 14l8 37 1 4c-2 1-1 4-2 5-4 8-6 9-14 7s-14-7-20-12c-4-4-7-7-6-13ZM505 203c-4 0-5 3-7 5l-4 4a9 9 0 0 1-5 2c-4-1-6 2-7 4a6 6 0 0 1-8 3h-1l-2-1c-1 1 0 2 1 2l8 10c3 2 1 4 0 6l-5 14c-1 3-4 3-7 3l-6 1c-7-2-12-6-18-11l-8-7a9 9 0 0 1-3-4c-3-6-4-13 0-20l2-5c-1-1-2 0-2-2a3 3 0 0 1 1-2l6-7a2 2 0 0 0 2 0 13 13 0 0 1 9 0l10 3c1-6 4-7 9-5l3 2c2 1 3 1 4-2a3 3 0 0 0-1-3 30 30 0 0 1-7-8 6 6 0 0 0-3-4c-3-1-4-3-1-5a50 50 0 0 1 7-7 2 2 0 0 1 2-1c5 2 9 4 12 7 2 3 4 3 6 4a19 19 0 0 1 4 0c2 1 3 2 2 4s0 2 1 3c3 1 4 3 4 6a4 4 0 0 0 2 3c2 2 2 3 0 6v2Zm-36 14 2-2c2-2 2-4-1-5l-3-3h-2c-1 1 0 1 1 2 0 2 3 5 3 8Zm-14-3a11 11 0 0 0 7 2c-2-4-2-4-7-2Z");
			add_location(path5, file$n, 39, 6, 2545);
			attr_dev(path6, "fill", "var(--pants)");
			attr_dev(path6, "d", "M178 190c-1 6 2 9 6 13 6 5 12 10 20 12s10 1 14-7c1-1 0-4 2-5l8 18v7c-2 3-1 7-2 11v10c-1 10-9 23-23 24a184 184 0 0 1-24 0c-4-6-7-13-4-21a8 8 0 0 0 0-7c-4-7-4-14-5-22 0-2 0-4-3-5l-1-2 2-1c5-1 7-4 8-10v-10c0-2 0-4 2-5ZM597 275l-3-16-8-36c-1-4-1-7-3-10 2-5 1-10 1-14-1-4-1-7 1-10a24 24 0 0 0 2-8 4 4 0 0 1 1-2l6-2c1-1 2-1 2 1l-4 24a5 5 0 0 0 1 4c3 5 6 10 11 14 3 2 5 6 6 9a8 8 0 0 0 7 4l11 1c3 0 4-1 5-3 3-6 4-13 4-19 0-1-1-3 1-3 2 2 2 4 2 6-1 3-1 6 1 9l1 4c-2 4-3 7 1 11v3c-3 3-4 6-5 10l-3 9c-3 9-10 13-19 15a70 70 0 0 1-19-1Z");
			add_location(path6, file$n, 43, 6, 3456);
			attr_dev(path7, "fill", "var(--hair)");
			attr_dev(path7, "d", "M235 61a9 9 0 0 1-1-5 9 9 0 0 0-10-10c-2 1-4 1-4 4 0 2-1 5-4 5l-1 2a7 7 0 0 1-1 4l-2-1c-1-4-3-7-5-9-7-7-13-13-22-16a5 5 0 0 1-3-4c0-3 1-4 3-4a19 19 0 0 1 10-1h2l-1-2-3-2a5 5 0 0 1-2-6c0-3 2-3 4-3 5-1 10 0 14 2 12 5 22 12 32 19a55 55 0 0 1 6 5c3 2 2 4 1 7l-8 8a8 8 0 0 0-3 6l-2 1Z");
			add_location(path7, file$n, 47, 6, 4041);
			attr_dev(path8, "fill", "var(--flesh)");
			attr_dev(path8, "d", "M73 233a16 16 0 0 1-6 7 27 27 0 0 0-5 5c-4 5-10 6-17 6a27 27 0 0 1-2-2c-2-1-3-3-2-5s2-3 4-3h4c2 0 2-1 2-3a3 3 0 0 0-3-2 24 24 0 0 1-7-3 7 7 0 0 0-5-1c-3 0-4-1-4-4l4-10h9a19 19 0 0 0 13-2c1-1 2 1 3 2l2 1c2 0 4 1 5 3a3 3 0 0 0 3 2c3 0 3 2 3 4l-1 5Z");
			add_location(path8, file$n, 51, 6, 4381);
			attr_dev(path9, "fill", "var(--hair)");
			attr_dev(path9, "d", "M474 168a2 2 0 0 0-2 1 50 50 0 0 0-7 6c-3 3-2 5 1 6a6 6 0 0 1 3 4 30 30 0 0 0 7 8 3 3 0 0 1 1 3c-1 3-2 3-4 2l-3-2c-5-2-8-1-9 5l-10-3a13 13 0 0 0-9 0 2 2 0 0 1-2 0c-2-6 1-11 4-15 4-7 9-12 14-16l8-8c2-2 4-1 6 1a13 13 0 0 1 2 8ZM639 97a10 10 0 0 1-1-4c0-5-4-9-8-9-3-1-4 0-4 3 0 1 1 3-1 3a3 3 0 0 1-3-3 18 18 0 0 0-11-14 12 12 0 0 1-6-4c-2-4-1-8 3-8 6-2 12-1 17 3a73 73 0 0 0 23 15c5 2 5 4 2 8l-8 7c-2 0-1 2-3 3ZM36 218l-4 10c0 3 2 4 4 4a7 7 0 0 1 5 1 24 24 0 0 0 7 3 3 3 0 0 1 3 2c0 2 0 3-2 3h-4c-2 0-3 1-4 3s0 4 2 5a27 27 0 0 0 2 2h-3c-7-2-13-2-19-1a4 4 0 0 1-2 0c0-7-1-14 1-21l4-13c1-3 3-4 6-2a18 18 0 0 1 4 4Z");
			add_location(path9, file$n, 55, 6, 4689);
			attr_dev(path10, "fill", "var(--shirt)");
			attr_dev(path10, "d", "M341 155c2-1 3 1 3 2l6 11a3 3 0 0 1 0 3l-6 11c-1 1-5 2-6 1v-1l5-10a4 4 0 0 0 0-5l-4-9c-1-3-2-3 2-3Z");
			add_location(path10, file$n, 59, 6, 5359);
			attr_dev(path11, "fill", "var(--hair)");
			attr_dev(path11, "d", "m428 248-4 1h-2l1-2a363 363 0 0 0 9-1l2 8v1c-1 1-1 0-2-1l-1-5-1 2c-4 7-6 15-4 23v3c-1 1-1-1-1-2-3-8-1-16 2-23l2-4h-1Z");
			add_location(path11, file$n, 63, 6, 5520);
			attr_dev(path12, "fill", "var(--hair)");
			attr_dev(path12, "d", "M469 217c0-3-3-6-3-8l-1-2h2l3 3c3 1 3 3 1 5l-2 2Z");
			add_location(path12, file$n, 67, 6, 5698);
			attr_dev(path13, "fill", "var(--hair)");
			attr_dev(path13, "d", "M455 214c5-2 5-2 7 2a11 11 0 0 1-7-2Z");
			add_location(path13, file$n, 71, 6, 5808);
			attr_dev(g0, "id", "dollies");
			attr_dev(g0, "class", "svelte-tabugc");
			add_location(g0, file$n, 18, 4, 456);
			attr_dev(g1, "class", "svelte-tabugc");
			toggle_class(g1, "paused", /*isPaused*/ ctx[1]);
			toggle_class(g1, "flip", /*flipsvg*/ ctx[2]);
			add_location(g1, file$n, 16, 0, 400);
			attr_dev(svg, "xmlns", "http://www.w3.org/2000/svg");
			attr_dev(svg, "viewBox", "0 0 714.6 282.2");
			attr_dev(svg, "height", "100%");
			attr_dev(svg, "width", "100%");
			attr_dev(svg, "class", "svelte-tabugc");
			add_location(svg, file$n, 15, 0, 305);
		},
		l: function claim(nodes) {
			throw new Error("options.hydrate only works if the component was compiled with the `hydratable: true` option");
		},
		m: function mount(target, anchor) {
			insert_dev(target, svg, anchor);
			append_dev(svg, t);
			append_dev(svg, g1);
			append_dev(g1, g0);
			append_dev(g0, path0);
			append_dev(g0, path1);
			append_dev(g0, path2);
			append_dev(g0, path3);
			append_dev(g0, path4);
			append_dev(g0, path5);
			append_dev(g0, path6);
			append_dev(g0, path7);
			append_dev(g0, path8);
			append_dev(g0, path9);
			append_dev(g0, path10);
			append_dev(g0, path11);
			append_dev(g0, path12);
			append_dev(g0, path13);
			/*g0_binding*/ ctx[4](g0);
			if (if_block) if_block.m(g1, null);
		},
		p: function update(ctx, [dirty]) {
			if (/*isPaused*/ ctx[1]) {
				if (if_block) ; else {
					if_block = create_if_block$n(ctx);
					if_block.c();
					if_block.m(g1, null);
				}
			} else if (if_block) {
				if_block.d(1);
				if_block = null;
			}

			if (dirty & /*isPaused*/ 2) {
				toggle_class(g1, "paused", /*isPaused*/ ctx[1]);
			}

			if (dirty & /*flipsvg*/ 4) {
				toggle_class(g1, "flip", /*flipsvg*/ ctx[2]);
			}
		},
		i: noop,
		o: noop,
		d: function destroy(detaching) {
			if (detaching) detach_dev(svg);
			/*g0_binding*/ ctx[4](null);
			if (if_block) if_block.d();
		}
	};

	dispatch_dev("SvelteRegisterBlock", {
		block,
		id: create_fragment$n.name,
		type: "component",
		source: "",
		ctx
	});

	return block;
}

function instance$n($$self, $$props, $$invalidate) {
	let { $$slots: slots = {}, $$scope } = $$props;
	validate_slots('Workout_hellodollies', slots, []);
	let { direction = "right" } = $$props;
	let { isPaused = false } = $$props;
	let { rootElement } = $$props;
	let flipsvg = false;

	if (direction == "left") {
		flipsvg = true;
	}

	const writable_props = ['direction', 'isPaused', 'rootElement'];

	Object.keys($$props).forEach(key => {
		if (!~writable_props.indexOf(key) && key.slice(0, 2) !== '$$' && key !== 'slot') console.warn(`<Workout_hellodollies> was created with unknown prop '${key}'`);
	});

	function g0_binding($$value) {
		binding_callbacks[$$value ? 'unshift' : 'push'](() => {
			rootElement = $$value;
			$$invalidate(0, rootElement);
		});
	}

	$$self.$$set = $$props => {
		if ('direction' in $$props) $$invalidate(3, direction = $$props.direction);
		if ('isPaused' in $$props) $$invalidate(1, isPaused = $$props.isPaused);
		if ('rootElement' in $$props) $$invalidate(0, rootElement = $$props.rootElement);
	};

	$$self.$capture_state = () => ({
		direction,
		isPaused,
		rootElement,
		flipsvg
	});

	$$self.$inject_state = $$props => {
		if ('direction' in $$props) $$invalidate(3, direction = $$props.direction);
		if ('isPaused' in $$props) $$invalidate(1, isPaused = $$props.isPaused);
		if ('rootElement' in $$props) $$invalidate(0, rootElement = $$props.rootElement);
		if ('flipsvg' in $$props) $$invalidate(2, flipsvg = $$props.flipsvg);
	};

	if ($$props && "$$inject" in $$props) {
		$$self.$inject_state($$props.$$inject);
	}

	return [rootElement, isPaused, flipsvg, direction, g0_binding];
}

class Workout_hellodollies extends SvelteComponentDev {
	constructor(options) {
		super(options);

		init(this, options, instance$n, create_fragment$n, safe_not_equal, {
			direction: 3,
			isPaused: 1,
			rootElement: 0
		});

		dispatch_dev("SvelteRegisterComponent", {
			component: this,
			tagName: "Workout_hellodollies",
			options,
			id: create_fragment$n.name
		});

		const { ctx } = this.$$;
		const props = options.props || {};

		if (/*rootElement*/ ctx[0] === undefined && !('rootElement' in props)) {
			console.warn("<Workout_hellodollies> was created without expected prop 'rootElement'");
		}
	}

	get direction() {
		throw new Error("<Workout_hellodollies>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
	}

	set direction(value) {
		throw new Error("<Workout_hellodollies>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
	}

	get isPaused() {
		throw new Error("<Workout_hellodollies>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
	}

	set isPaused(value) {
		throw new Error("<Workout_hellodollies>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
	}

	get rootElement() {
		throw new Error("<Workout_hellodollies>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
	}

	set rootElement(value) {
		throw new Error("<Workout_hellodollies>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
	}
}

var workoutHellodollies = /*#__PURE__*/Object.freeze({
    __proto__: null,
    'default': Workout_hellodollies
});

/* src/workouts/workout-hightailpushups.svelte generated by Svelte v3.49.0 */

const file$m = "src/workouts/workout-hightailpushups.svelte";

// (89:4) {#if isPaused}
function create_if_block$m(ctx) {
	let svg;
	let path;

	const block = {
		c: function create() {
			svg = svg_element("svg");
			path = svg_element("path");
			attr_dev(path, "d", "M10 24h-6v-24h6v24zm10 0h-6v-24h6v24zm-11-23h-4v22h4v-22zm10 0h-4v22h4v-22z");
			add_location(path, file$m, 89, 133, 4702);
			attr_dev(svg, "viewBox", "-6 -5 36 36");
			attr_dev(svg, "width", "100%");
			attr_dev(svg, "height", "100%");
			attr_dev(svg, "xmlns", "http://www.w3.org/2000/svg");
			attr_dev(svg, "fill-rule", "evenodd");
			attr_dev(svg, "clip-rule", "evenodd");
			add_location(svg, file$m, 89, 4, 4573);
		},
		m: function mount(target, anchor) {
			insert_dev(target, svg, anchor);
			append_dev(svg, path);
		},
		d: function destroy(detaching) {
			if (detaching) detach_dev(svg);
		}
	};

	dispatch_dev("SvelteRegisterBlock", {
		block,
		id: create_if_block$m.name,
		type: "if",
		source: "(89:4) {#if isPaused}",
		ctx
	});

	return block;
}

function create_fragment$m(ctx) {
	let svg;
	let t;
	let g3;
	let g2;
	let g0;
	let path0;
	let path1;
	let path2;
	let path3;
	let g1;
	let path4;
	let path5;
	let path6;
	let path7;
	let path8;
	let if_block = /*isPaused*/ ctx[1] && create_if_block$m(ctx);

	const block = {
		c: function create() {
			svg = svg_element("svg");
			t = text(">\n");
			g3 = svg_element("g");
			g2 = svg_element("g");
			g0 = svg_element("g");
			path0 = svg_element("path");
			path1 = svg_element("path");
			path2 = svg_element("path");
			path3 = svg_element("path");
			g1 = svg_element("g");
			path4 = svg_element("path");
			path5 = svg_element("path");
			path6 = svg_element("path");
			path7 = svg_element("path");
			path8 = svg_element("path");
			if (if_block) if_block.c();
			attr_dev(path0, "fill", "var(--shirt)");
			attr_dev(path0, "d", "M463 256c-17-10-32-24-54-23-6-5-14-4-21-4-9-1-12-5-9-14 2-4 3-8 7-11 21-13 30-34 39-55 6-14 5-29 10-42 14 3 25 13 36 23 29 23 64 39 94 61 18 13 28 31 30 53l3 9a103 103 0 0 1-7 30c-3 0-8 1-10-1-11-9-19-4-26 5s-13 9-19 1c-2-3-3-5-7-5-10-6-20-15-33-17-8-3-14-9-23-8Z");
			add_location(path0, file$m, 51, 6, 1022);
			attr_dev(path1, "fill", "var(--pants)");
			attr_dev(path1, "d", "M435 107c-5 13-4 28-10 42-9 21-18 42-39 55-4-6-9-2-13-2l-3-1c-3 0-7-1-8 3a24 24 0 0 1-2 0c-26-6-44 8-64 21-7 5-15 10-25 9-9-13-11-29-13-45-1-9 0-17 9-23 4-4 4-8 0-12-1-5 0-10 5-13l60-43c32-22 68-22 95-1l8 10Z");
			add_location(path1, file$m, 55, 6, 1347);
			attr_dev(path2, "fill", "var(--flesh)");
			attr_dev(path2, "d", "M267 154c4 4 4 8 0 12-9 6-10 14-9 23 2 16 4 32 13 45-18 12-36 24-58 28-31 6-59 23-88 35-9 3-20 4-27 12-6-2-10 2-15 5l-19 13c-7 3-15 4-21-1-5-3-6-10-6-16 1-7 8-14 13-15 21-6 20-24 26-39 32-10 58-32 88-46 11-5 22-7 34-9 16-3 30-8 42-21 8-9 16-20 27-26ZM473 258c9-1 15 5 23 8-1 27 0 28 37 30-2-4-5-8-3-13 3 0 4 2 6 4 6 9 12 9 19 0s15-14 26-5c2 2 7 1 10 1 5 5 4 10 2 16a293 293 0 0 0-9 36c-1 4-3 11 5 11-7 5-7 12-5 18 2 7 8 1 12 2 14 3 29 2 42 10 4 3 8 7 5 10-3 5-5 14-13 11-18-6-36-4-55-4-8-1-14-4-16-14-3-18-8-36-10-55-1-11-6-13-15-11-9 1-18 3-28 1-23-5-27-7-31-30l-1-9-2-3Z");
			add_location(path2, file$m, 59, 6, 1617);
			attr_dev(path3, "fill", "var(--hair)");
			attr_dev(path3, "d", "M76 256c-6 15-5 33-26 39-5 1-12 8-13 15 0 6 1 13 6 16 7 5 14 4 21 1l19-13c5-3 9-7 15-5-2 9 6 8 11 9 5 2 12 2 12 9 0 8-7 9-13 9-11 2-22 5-32-3-5-2-4 0-3 3 4 12 10 21 25 21 5 0 10 3 10 9 1 6-3 8-7 11-24 13-52 8-70-13L4 329c-6-8-5-12 4-17 9-6 18-12 29-16 9-3 10-7 4-14-7-7-6-11 3-15 11-5 20-11 32-11ZM589 346c-8 0-6-7-5-11a293 293 0 0 1 9-36c2-6 3-11-2-16a103 103 0 0 0 7-30c12 9 22 20 31 32 9 14 7 29-6 40-10 9-22 14-34 21Z");
			add_location(path3, file$m, 63, 6, 2251);
			attr_dev(g0, "id", "h-pushup-2");
			attr_dev(g0, "class", "svelte-gsso51");
			add_location(g0, file$m, 50, 4, 996);
			attr_dev(path4, "fill", "var(--pants)");
			attr_dev(path4, "d", "M289 0c10 6 20 12 32 14l2 4c0 40-10 77-27 113-1 3-5 3-7 5l-7 1v-1 1c-25 0-40 19-59 32l-32-66c9-44 29-81 73-99 2-1 5-1 5-4Z");
			add_location(path4, file$m, 69, 6, 2766);
			attr_dev(path5, "fill", "var(--shirt)");
			attr_dev(path5, "d", "M289 136c2-2 6-2 7-5 17-36 27-73 27-113l-2-4c12-2 19 8 28 12 28 11 56 26 84 39s54 27 75 51c3 8 4 17 10 24v30c1 13-6 13-13 9-10-5-20-2-29-3-3 0-6 1-6 5 1 13-9 11-16 12-2-2-2-6-4-6-34-5-61-28-94-37-18-4-36-11-55-8-6 1-9-2-12-6Z");
			add_location(path5, file$m, 73, 6, 2950);
			attr_dev(path6, "fill", "var(--flesh)");
			attr_dev(path6, "d", "M454 193c7-1 17 1 16-12 0-4 3-5 6-5 9 1 19-2 29 3 7 4 15 4 13-9v-30l9 2c8 0 16 2 16 11s-9 7-15 7c-2 0-5 1-6 3 0 3 2 5 4 7 8 3 15 8 23 10s8 5 5 11l-6 9c-26-9-31-5-29 21 1 12 7 22 16 29l29 95c5 17 17 21 32 23 14 1 29 4 42 10 5 3 9 10 8 11-5 4-6 14-15 11-18-7-36-5-54-5-8-1-14-4-19-11-10-17-22-33-29-51-7-15-18-21-33-20-14 0-20-7-24-19-10-28-19-55-16-85l-2-16Zm27 31c-2 21 2 38 5 56 2 14 8 16 20 12-7-22-11-45-25-68ZM191 103l32 66c-11 2-14 12-19 19-10 14-22 24-37 33-21 12-35 31-52 48a112 112 0 0 1-18 14c-5 4-10 8-11 15-7 1-10 7-12 12-3 12-19 12-22 24l-6 2c-13 1-18-7-17-27l6-3 9-11c5-9 15-14 14-26 25-22 36-57 64-76l1-1c32-15 45-45 58-75 2-5 3-11 10-14Z");
			add_location(path6, file$m, 77, 6, 3237);
			attr_dev(path7, "fill", "var(--hair)");
			attr_dev(path7, "d", "M29 309c-1 20 4 28 17 27l6-2c3-12 19-12 22-24 2-5 5-11 12-12 6 12 14 23 30 23 4 0 8 1 8 6s-2 7-7 8c-17 4-34 7-47-10-2 16 5 25 18 29l15 4c5 1 11 0 11 8 0 7-5 12-10 12-10-1-19 5-28 6-19 3-33-1-46-15L6 346c-7-6-9-12 0-19 8-6 13-16 23-18ZM548 200l6-9c3-6 3-9-5-11s-15-7-23-11c-2-1-4-3-4-6 1-2 4-3 6-3 6 0 15 2 15-7 0-10-8-11-16-11l-9-2c-6-7-7-16-10-24 18 1 36-3 54 2 16 5 22 15 21 31-1 20-10 37-16 54-5 12-12 3-18 0ZM58 269c1 12-9 17-14 26l-9 11c-9-11-5-19 6-26 6-4 10-10 17-11Z");
			add_location(path7, file$m, 81, 6, 3951);
			attr_dev(path8, "fill", "var(--shirt)");
			attr_dev(path8, "d", "M282 137v-1 1z");
			add_location(path8, file$m, 85, 6, 4486);
			attr_dev(g1, "id", "h-pushup-1");
			attr_dev(g1, "class", "svelte-gsso51");
			add_location(g1, file$m, 68, 4, 2740);
			attr_dev(g2, "class", "shapes svelte-gsso51");
			add_location(g2, file$m, 49, 2, 949);
			attr_dev(g3, "class", "svelte-gsso51");
			toggle_class(g3, "paused", /*isPaused*/ ctx[1]);
			toggle_class(g3, "flip", /*flipsvg*/ ctx[2]);
			add_location(g3, file$m, 48, 0, 898);
			attr_dev(svg, "xmlns", "http://www.w3.org/2000/svg");
			attr_dev(svg, "viewBox", "0 0 646 400.2");
			attr_dev(svg, "height", "100%");
			attr_dev(svg, "width", "100%");
			attr_dev(svg, "class", "svelte-gsso51");
			add_location(svg, file$m, 47, 0, 805);
		},
		l: function claim(nodes) {
			throw new Error("options.hydrate only works if the component was compiled with the `hydratable: true` option");
		},
		m: function mount(target, anchor) {
			insert_dev(target, svg, anchor);
			append_dev(svg, t);
			append_dev(svg, g3);
			append_dev(g3, g2);
			append_dev(g2, g0);
			append_dev(g0, path0);
			append_dev(g0, path1);
			append_dev(g0, path2);
			append_dev(g0, path3);
			append_dev(g2, g1);
			append_dev(g1, path4);
			append_dev(g1, path5);
			append_dev(g1, path6);
			append_dev(g1, path7);
			append_dev(g1, path8);
			/*g2_binding*/ ctx[4](g2);
			if (if_block) if_block.m(g3, null);
		},
		p: function update(ctx, [dirty]) {
			if (/*isPaused*/ ctx[1]) {
				if (if_block) ; else {
					if_block = create_if_block$m(ctx);
					if_block.c();
					if_block.m(g3, null);
				}
			} else if (if_block) {
				if_block.d(1);
				if_block = null;
			}

			if (dirty & /*isPaused*/ 2) {
				toggle_class(g3, "paused", /*isPaused*/ ctx[1]);
			}

			if (dirty & /*flipsvg*/ 4) {
				toggle_class(g3, "flip", /*flipsvg*/ ctx[2]);
			}
		},
		i: noop,
		o: noop,
		d: function destroy(detaching) {
			if (detaching) detach_dev(svg);
			/*g2_binding*/ ctx[4](null);
			if (if_block) if_block.d();
		}
	};

	dispatch_dev("SvelteRegisterBlock", {
		block,
		id: create_fragment$m.name,
		type: "component",
		source: "",
		ctx
	});

	return block;
}

function instance$m($$self, $$props, $$invalidate) {
	let { $$slots: slots = {}, $$scope } = $$props;
	validate_slots('Workout_hightailpushups', slots, []);
	let { direction = "right" } = $$props;
	let { isPaused = false } = $$props;
	let { rootElement } = $$props;
	let flipsvg = false;

	if (direction == "left") {
		flipsvg = true;
	}

	const writable_props = ['direction', 'isPaused', 'rootElement'];

	Object.keys($$props).forEach(key => {
		if (!~writable_props.indexOf(key) && key.slice(0, 2) !== '$$' && key !== 'slot') console.warn(`<Workout_hightailpushups> was created with unknown prop '${key}'`);
	});

	function g2_binding($$value) {
		binding_callbacks[$$value ? 'unshift' : 'push'](() => {
			rootElement = $$value;
			$$invalidate(0, rootElement);
		});
	}

	$$self.$$set = $$props => {
		if ('direction' in $$props) $$invalidate(3, direction = $$props.direction);
		if ('isPaused' in $$props) $$invalidate(1, isPaused = $$props.isPaused);
		if ('rootElement' in $$props) $$invalidate(0, rootElement = $$props.rootElement);
	};

	$$self.$capture_state = () => ({
		direction,
		isPaused,
		rootElement,
		flipsvg
	});

	$$self.$inject_state = $$props => {
		if ('direction' in $$props) $$invalidate(3, direction = $$props.direction);
		if ('isPaused' in $$props) $$invalidate(1, isPaused = $$props.isPaused);
		if ('rootElement' in $$props) $$invalidate(0, rootElement = $$props.rootElement);
		if ('flipsvg' in $$props) $$invalidate(2, flipsvg = $$props.flipsvg);
	};

	if ($$props && "$$inject" in $$props) {
		$$self.$inject_state($$props.$$inject);
	}

	return [rootElement, isPaused, flipsvg, direction, g2_binding];
}

class Workout_hightailpushups extends SvelteComponentDev {
	constructor(options) {
		super(options);

		init(this, options, instance$m, create_fragment$m, safe_not_equal, {
			direction: 3,
			isPaused: 1,
			rootElement: 0
		});

		dispatch_dev("SvelteRegisterComponent", {
			component: this,
			tagName: "Workout_hightailpushups",
			options,
			id: create_fragment$m.name
		});

		const { ctx } = this.$$;
		const props = options.props || {};

		if (/*rootElement*/ ctx[0] === undefined && !('rootElement' in props)) {
			console.warn("<Workout_hightailpushups> was created without expected prop 'rootElement'");
		}
	}

	get direction() {
		throw new Error("<Workout_hightailpushups>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
	}

	set direction(value) {
		throw new Error("<Workout_hightailpushups>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
	}

	get isPaused() {
		throw new Error("<Workout_hightailpushups>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
	}

	set isPaused(value) {
		throw new Error("<Workout_hightailpushups>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
	}

	get rootElement() {
		throw new Error("<Workout_hightailpushups>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
	}

	set rootElement(value) {
		throw new Error("<Workout_hightailpushups>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
	}
}

var workoutHightailpushups = /*#__PURE__*/Object.freeze({
    __proto__: null,
    'default': Workout_hightailpushups
});

/* src/workouts/workout-jumpingjacks.svelte generated by Svelte v3.49.0 */

const file$l = "src/workouts/workout-jumpingjacks.svelte";

// (100:4) {#if isPaused}
function create_if_block$l(ctx) {
	let svg;
	let path;

	const block = {
		c: function create() {
			svg = svg_element("svg");
			path = svg_element("path");
			attr_dev(path, "d", "M10 24h-6v-24h6v24zm10 0h-6v-24h6v24zm-11-23h-4v22h4v-22zm10 0h-4v22h4v-22z");
			add_location(path, file$l, 100, 133, 5928);
			attr_dev(svg, "viewBox", "-6 -5 36 36");
			attr_dev(svg, "width", "100%");
			attr_dev(svg, "height", "100%");
			attr_dev(svg, "xmlns", "http://www.w3.org/2000/svg");
			attr_dev(svg, "fill-rule", "evenodd");
			attr_dev(svg, "clip-rule", "evenodd");
			add_location(svg, file$l, 100, 4, 5799);
		},
		m: function mount(target, anchor) {
			insert_dev(target, svg, anchor);
			append_dev(svg, path);
		},
		d: function destroy(detaching) {
			if (detaching) detach_dev(svg);
		}
	};

	dispatch_dev("SvelteRegisterBlock", {
		block,
		id: create_if_block$l.name,
		type: "if",
		source: "(100:4) {#if isPaused}",
		ctx
	});

	return block;
}

function create_fragment$l(ctx) {
	let svg;
	let t;
	let g3;
	let g2;
	let g0;
	let path0;
	let path1;
	let path2;
	let path3;
	let path4;
	let path5;
	let path6;
	let g1;
	let path7;
	let path8;
	let path9;
	let path10;
	let if_block = /*isPaused*/ ctx[1] && create_if_block$l(ctx);

	const block = {
		c: function create() {
			svg = svg_element("svg");
			t = text(">\n");
			g3 = svg_element("g");
			g2 = svg_element("g");
			g0 = svg_element("g");
			path0 = svg_element("path");
			path1 = svg_element("path");
			path2 = svg_element("path");
			path3 = svg_element("path");
			path4 = svg_element("path");
			path5 = svg_element("path");
			path6 = svg_element("path");
			g1 = svg_element("g");
			path7 = svg_element("path");
			path8 = svg_element("path");
			path9 = svg_element("path");
			path10 = svg_element("path");
			if (if_block) if_block.c();
			attr_dev(path0, "fill", "var(--hair)");
			attr_dev(path0, "d", "M255 618c4 2 6 5 8 11 3 11 8 22 13 34v6a27 27 0 0 1-10 8h-11c-10-4-14-12-13-22 1-5-1-8-4-11s-5-7-2-11c2-3 0-6 0-10 3 0 5 3 7 0 3-6 7-5 12-5Z");
			add_location(path0, file$l, 51, 6, 1052);
			attr_dev(path1, "fill", "var(--shirt)");
			attr_dev(path1, "d", "M86 378c-5-5-4-11-3-17 3-12 0-24-1-36a603 603 0 0 1-2-62 89 89 0 0 0-12-47c-1-4-2-7 0-10 2 0 2 2 2 3 2 6 3 7 9 4 3-2 4-6 6-8 5-5 10-9 14-15 3 5 3 12 7 16s5 10 11 12l3 2c8 8 24 9 33 3a94 94 0 0 1 14-21c3-4 5-7 4-12 4 0 6 3 8 5 8 8 15 15 25 16a261 261 0 0 1-8 29c-2 7 0 15 1 23a50 50 0 0 1-3 27 10 10 0 0 0-1 4c0 17-1 35 1 52l3 26c0 3-1 5-4 6l-9 2c-2-1-2-7-6-5-8 2-17 2-25 5-9 3-18 4-28 3l-33-8c-3 0-4 0-6 3Z");
			add_location(path1, file$l, 55, 6, 1253);
			attr_dev(path2, "fill", "var(--pants)");
			attr_dev(path2, "d", "M86 378c2-3 3-3 6-2l33 7c10 1 19 1 28-3 8-3 17-3 25-5 4-1 4 4 6 5 8 22 17 45 20 68 2 9 2 17 5 25a10 10 0 0 1 0 8c-5 6-12 9-20 10-5 2-10 2-15 5l-18 2c-4 1-7-1-8-6l-8-27c0-2 0-4-2-4-3 1-3 4-4 6l-8 28c-1 3-3 5-6 6a69 69 0 0 1-30 4 70 70 0 0 1-13-8l-17-11a7 7 0 0 1-1-5c7-32 14-63 24-94l3-9Z");
			add_location(path2, file$l, 59, 6, 1721);
			attr_dev(path3, "fill", "var(--flesh)");
			attr_dev(path3, "d", "M99 190c-4 6-9 10-14 15-2 2-3 6-6 8-6 3-7 2-9-4 0-1 0-3-2-3 0-8-1-16-3-23l1-15 1-4c2-12-2-24 3-35l10-23c4-10 11-18 17-26 13-16 22-33 24-53 1-8 5-15 7-22 0-2 1-5 3-5 3 0 3 3 3 5 9 21 12 44 27 62a364 364 0 0 1 40 62 11 11 0 0 1 1 6c-2 13 1 26 3 38a209 209 0 0 1-1 38c-10-1-17-8-25-16-2-2-4-5-8-5 0-14 0-28 5-42a12 12 0 0 0-1-11l-12-27c-10-17-13-39-32-52 0 6-3 7-7 10a18 18 0 0 0-6 8c-6 17-11 34-19 50-6 13-8 26-1 39a29 29 0 0 1 1 25Zm33-163h-1l-1 11 1 3c2 0 2-1 2-2l-1-12ZM174 496c5-3 10-3 15-5 8-1 15-4 20-10 2 1 2 3 2 5 0 16 9 29 16 42 8 14 12 30 16 46a303 303 0 0 0 11 37l1 7c-5 0-10-1-12 5-2 3-4 0-7 0 0-14-7-26-14-38-8-14-17-27-19-43-1-10-10-16-15-24-5-7-11-14-14-22ZM60 486l17 11a70 70 0 0 0 13 8c-2 9-10 14-14 21-4 5-7 10-8 16-2 16-10 29-18 43-5 8-10 17-11 27-2 4-4 9-7 1-2-4-6-4-10-5 7-16 6-33 11-49 3-13 7-25 14-37 6-11 13-23 13-36Z");
			add_location(path3, file$l, 63, 6, 2070);
			attr_dev(path4, "fill", "var(--hair)");
			attr_dev(path4, "d", "M22 608c4 1 8 1 10 5 3 8 5 3 7-1l6 14c1 3 0 6-4 8-6 4-9 9-8 17 2 7-2 13-9 15s-14 2-21-3c-4-3-4-13 0-19 6-9 11-17 13-28a12 12 0 0 1 6-8Z");
			add_location(path4, file$l, 67, 6, 2971);
			attr_dev(path5, "fill", "var(--flesh)");
			attr_dev(path5, "d", "M117 218a18 18 0 0 0-4-14c-5-7-7-13-4-21l2 4v-8c-1-1 5-15 7-16a6 6 0 0 1 3 0c7 2 15 2 22-1 4-1 8 0 9 5 1 8 9 14 7 24l3-9c3 6 2 12-2 16-5 8-6 16-7 25-9 6-25 5-33-3l-3-2Z");
			add_location(path5, file$l, 71, 6, 3167);
			attr_dev(path6, "fill", "var(--hair)");
			attr_dev(path6, "d", "m162 182-3 9c2-10-6-16-7-24-1-5-5-6-9-5-7 2-15 3-22 1a6 6 0 0 0-3 0c-2 1-8 15-7 16v8l-2-4c-3-9 1-19-3-29-1-2 1-4 3-5 10-7 21-11 33-8 4 1 7 2 9 6 16 6 8 19 10 29a29 29 0 0 1 1 6Z");
			add_location(path6, file$l, 75, 6, 3397);
			attr_dev(g0, "id", "jumping-jack-2");
			attr_dev(g0, "class", "svelte-bu6db2");
			add_location(g0, file$l, 50, 4, 1022);
			attr_dev(path7, "fill", "var(--shirt)");
			attr_dev(path7, "d", "M56 270c-2-1-2-3-1-4 4-14 8-27 14-40 3-8 9-11 16-14l31-11 9 11c2 1 1 5 4 5a70 70 0 0 0 23 0c7-1 11-6 13-13l37 17c7 3 8 10 11 15l11 31c1 4 2 8-2 10-5-3-9 0-12 3l-18 9-4-5-1 21-2 47c-1 15 1 29 2 44 1 6-1 7-6 6a20 20 0 0 0-3 0l-24 1-68-5c-3 0-5-1-7 1a1 1 0 0 1-1 0c-1-3-2-6-1-9l7-53c2-16 0-33 1-49 0-6 2-12 1-18l-5 6c-7-5-17-4-25-6Z");
			add_location(path7, file$l, 81, 6, 3672);
			attr_dev(path8, "fill", "var(--pants)");
			attr_dev(path8, "d", "M79 399c2-2 4-1 7-1l68 5h24l1 6c-2 12-4 24-3 37a207 207 0 0 0-2 30c0 3 0 5-4 5s-5 4-8 5c-11 0-21 0-31-6a4 4 0 0 0-4 0c-11 5-23 3-35 1-7 0-9-4-9-11-1-24-5-47-4-71Z");
			add_location(path8, file$l, 85, 6, 4063);
			attr_dev(path9, "fill", "var(--flesh)");
			attr_dev(path9, "d", "M92 481c12 2 24 4 35-1a4 4 0 0 1 4 0c10 6 20 6 31 6-2 10-4 19-4 29a89 89 0 0 0 0 17c3 18-3 34-7 51-4 15-8 29-8 44a14 14 0 0 1-1 6c-5-4-10-4-16 1v-17c4-13 3-27 2-40-1-11-2-23 0-34 1-7 3-14 1-21a192 192 0 0 1-3-27c-2 15-6 30-4 46 2 9 3 19 1 28-3 18-4 35 0 52 1 3 1 7-3 9-5-2-10-1-14 2 1-24-8-46-12-69-2-12-3-24-1-36 3-15 1-31-1-46ZM192 289l18-9c3-3 7-6 12-3 2 14-1 29 2 43 5 23-2 45-4 67-1 14-3 27-1 41 2 13-6 24-18 27l-9 2c-5-2-4-5-1-8s7-6 8-11c0-2 3-5 0-6-4-2-5 1-7 3a77 77 0 0 1-4 8 3 3 0 0 1-3 1 2 2 0 0 1-1-3c3-7 2-17 9-23s11-14 10-25l-1-37c-1-16 0-32-6-47-2-7-1-14-4-20ZM56 270c8 2 18 1 25 6l-1 9c-1 12-8 23-7 35a112 112 0 0 1-8 46c-4 10-6 22-2 32s6 21 6 31c0 2 1 5-2 5-2 1-3-1-4-2s-2-4-4-2c-2 1-1 3 0 5l4 8c1 1 1 4-1 5s-4 0-5-1a11 11 0 0 0-6-4l-4-6-3-8c-4-9-3-17 0-25 4-12 3-23 2-34-2-20 1-40 4-59l1-7c3-11 4-23 5-34ZM165 204c-2 7-6 12-13 13a70 70 0 0 1-23 0c-3 0-2-4-4-5l-9-11c7-5 8-15 2-23l-4-12c-1-2-1-5 2-6l3 6c0-9 0-16 3-23 3-4 4-7 8-5a34 34 0 0 0 21 0c3-1 8-1 8 3 1 6 6 11 6 18 0 1-1 3 1 4 3 0 2-3 3-4 3 3 3 12-1 16s-5 9-7 14c-2 6-2 11 4 15Z");
			add_location(path9, file$l, 89, 6, 4287);
			attr_dev(path10, "fill", "var(--hair)");
			attr_dev(path10, "d", "M106 632c4-3 9-4 14-1 0 3 1 7 6 3 6-5 11-5 16-1 5 8 10 16 9 25-2 13-18 19-28 12-1-1-2-2-4-1-18 8-26 1-23-18 1-7 3-14 10-19ZM169 159c-1 1 0 4-3 4-2-1-1-3-1-4 0-7-5-12-6-18 0-4-5-4-8-3a34 34 0 0 1-21 0c-4-2-6 1-8 5-3 7-3 14-3 23l-3-6c-2-10 2-21-2-32-1-2 1-4 4-6 10-6 21-9 33-6 4 1 6 4 10 6 16 10 7 25 8 37Z");
			add_location(path10, file$l, 93, 6, 5401);
			attr_dev(g1, "id", "jumping-jack-1");
			attr_dev(g1, "class", "svelte-bu6db2");
			add_location(g1, file$l, 80, 4, 3642);
			attr_dev(g2, "class", "shapes svelte-bu6db2");
			add_location(g2, file$l, 49, 2, 975);
			attr_dev(g3, "class", "svelte-bu6db2");
			toggle_class(g3, "paused", /*isPaused*/ ctx[1]);
			toggle_class(g3, "flip", /*flipsvg*/ ctx[2]);
			add_location(g3, file$l, 48, 0, 924);
			attr_dev(svg, "xmlns", "http://www.w3.org/2000/svg");
			attr_dev(svg, "viewBox", "0 0 275.6 677.5");
			attr_dev(svg, "height", "100%");
			attr_dev(svg, "width", "100%");
			attr_dev(svg, "class", "svelte-bu6db2");
			add_location(svg, file$l, 47, 0, 829);
		},
		l: function claim(nodes) {
			throw new Error("options.hydrate only works if the component was compiled with the `hydratable: true` option");
		},
		m: function mount(target, anchor) {
			insert_dev(target, svg, anchor);
			append_dev(svg, t);
			append_dev(svg, g3);
			append_dev(g3, g2);
			append_dev(g2, g0);
			append_dev(g0, path0);
			append_dev(g0, path1);
			append_dev(g0, path2);
			append_dev(g0, path3);
			append_dev(g0, path4);
			append_dev(g0, path5);
			append_dev(g0, path6);
			append_dev(g2, g1);
			append_dev(g1, path7);
			append_dev(g1, path8);
			append_dev(g1, path9);
			append_dev(g1, path10);
			/*g2_binding*/ ctx[4](g2);
			if (if_block) if_block.m(g3, null);
		},
		p: function update(ctx, [dirty]) {
			if (/*isPaused*/ ctx[1]) {
				if (if_block) ; else {
					if_block = create_if_block$l(ctx);
					if_block.c();
					if_block.m(g3, null);
				}
			} else if (if_block) {
				if_block.d(1);
				if_block = null;
			}

			if (dirty & /*isPaused*/ 2) {
				toggle_class(g3, "paused", /*isPaused*/ ctx[1]);
			}

			if (dirty & /*flipsvg*/ 4) {
				toggle_class(g3, "flip", /*flipsvg*/ ctx[2]);
			}
		},
		i: noop,
		o: noop,
		d: function destroy(detaching) {
			if (detaching) detach_dev(svg);
			/*g2_binding*/ ctx[4](null);
			if (if_block) if_block.d();
		}
	};

	dispatch_dev("SvelteRegisterBlock", {
		block,
		id: create_fragment$l.name,
		type: "component",
		source: "",
		ctx
	});

	return block;
}

function instance$l($$self, $$props, $$invalidate) {
	let { $$slots: slots = {}, $$scope } = $$props;
	validate_slots('Workout_jumpingjacks', slots, []);
	let { direction = "right" } = $$props;
	let { isPaused = false } = $$props;
	let { rootElement } = $$props;
	let flipsvg = false;

	if (direction == "left") {
		flipsvg = true;
	}

	const writable_props = ['direction', 'isPaused', 'rootElement'];

	Object.keys($$props).forEach(key => {
		if (!~writable_props.indexOf(key) && key.slice(0, 2) !== '$$' && key !== 'slot') console.warn(`<Workout_jumpingjacks> was created with unknown prop '${key}'`);
	});

	function g2_binding($$value) {
		binding_callbacks[$$value ? 'unshift' : 'push'](() => {
			rootElement = $$value;
			$$invalidate(0, rootElement);
		});
	}

	$$self.$$set = $$props => {
		if ('direction' in $$props) $$invalidate(3, direction = $$props.direction);
		if ('isPaused' in $$props) $$invalidate(1, isPaused = $$props.isPaused);
		if ('rootElement' in $$props) $$invalidate(0, rootElement = $$props.rootElement);
	};

	$$self.$capture_state = () => ({
		direction,
		isPaused,
		rootElement,
		flipsvg
	});

	$$self.$inject_state = $$props => {
		if ('direction' in $$props) $$invalidate(3, direction = $$props.direction);
		if ('isPaused' in $$props) $$invalidate(1, isPaused = $$props.isPaused);
		if ('rootElement' in $$props) $$invalidate(0, rootElement = $$props.rootElement);
		if ('flipsvg' in $$props) $$invalidate(2, flipsvg = $$props.flipsvg);
	};

	if ($$props && "$$inject" in $$props) {
		$$self.$inject_state($$props.$$inject);
	}

	return [rootElement, isPaused, flipsvg, direction, g2_binding];
}

class Workout_jumpingjacks extends SvelteComponentDev {
	constructor(options) {
		super(options);

		init(this, options, instance$l, create_fragment$l, safe_not_equal, {
			direction: 3,
			isPaused: 1,
			rootElement: 0
		});

		dispatch_dev("SvelteRegisterComponent", {
			component: this,
			tagName: "Workout_jumpingjacks",
			options,
			id: create_fragment$l.name
		});

		const { ctx } = this.$$;
		const props = options.props || {};

		if (/*rootElement*/ ctx[0] === undefined && !('rootElement' in props)) {
			console.warn("<Workout_jumpingjacks> was created without expected prop 'rootElement'");
		}
	}

	get direction() {
		throw new Error("<Workout_jumpingjacks>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
	}

	set direction(value) {
		throw new Error("<Workout_jumpingjacks>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
	}

	get isPaused() {
		throw new Error("<Workout_jumpingjacks>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
	}

	set isPaused(value) {
		throw new Error("<Workout_jumpingjacks>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
	}

	get rootElement() {
		throw new Error("<Workout_jumpingjacks>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
	}

	set rootElement(value) {
		throw new Error("<Workout_jumpingjacks>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
	}
}

var workoutJumpingjacks = /*#__PURE__*/Object.freeze({
    __proto__: null,
    'default': Workout_jumpingjacks
});

/* src/workouts/workout-laterallunges.svelte generated by Svelte v3.49.0 */

const file$k = "src/workouts/workout-laterallunges.svelte";

// (142:4) {#if isPaused}
function create_if_block$k(ctx) {
	let svg;
	let path;

	const block = {
		c: function create() {
			svg = svg_element("svg");
			path = svg_element("path");
			attr_dev(path, "d", "M10 24h-6v-24h6v24zm10 0h-6v-24h6v24zm-11-23h-4v22h4v-22zm10 0h-4v22h4v-22z");
			add_location(path, file$k, 142, 133, 10689);
			attr_dev(svg, "viewBox", "-6 -5 36 36");
			attr_dev(svg, "width", "100%");
			attr_dev(svg, "height", "100%");
			attr_dev(svg, "xmlns", "http://www.w3.org/2000/svg");
			attr_dev(svg, "fill-rule", "evenodd");
			attr_dev(svg, "clip-rule", "evenodd");
			add_location(svg, file$k, 142, 4, 10560);
		},
		m: function mount(target, anchor) {
			insert_dev(target, svg, anchor);
			append_dev(svg, path);
		},
		d: function destroy(detaching) {
			if (detaching) detach_dev(svg);
		}
	};

	dispatch_dev("SvelteRegisterBlock", {
		block,
		id: create_if_block$k.name,
		type: "if",
		source: "(142:4) {#if isPaused}",
		ctx
	});

	return block;
}

function create_fragment$k(ctx) {
	let svg;
	let t;
	let g4;
	let g3;
	let g0;
	let path0;
	let path1;
	let path2;
	let path3;
	let path4;
	let path5;
	let g1;
	let path6;
	let path7;
	let path8;
	let path9;
	let path10;
	let path11;
	let g2;
	let path12;
	let path13;
	let path14;
	let path15;
	let if_block = /*isPaused*/ ctx[1] && create_if_block$k(ctx);

	const block = {
		c: function create() {
			svg = svg_element("svg");
			t = text(">\n");
			g4 = svg_element("g");
			g3 = svg_element("g");
			g0 = svg_element("g");
			path0 = svg_element("path");
			path1 = svg_element("path");
			path2 = svg_element("path");
			path3 = svg_element("path");
			path4 = svg_element("path");
			path5 = svg_element("path");
			g1 = svg_element("g");
			path6 = svg_element("path");
			path7 = svg_element("path");
			path8 = svg_element("path");
			path9 = svg_element("path");
			path10 = svg_element("path");
			path11 = svg_element("path");
			g2 = svg_element("g");
			path12 = svg_element("path");
			path13 = svg_element("path");
			path14 = svg_element("path");
			path15 = svg_element("path");
			if (if_block) if_block.c();
			attr_dev(path0, "fill", "var(--flesh)");
			attr_dev(path0, "d", "M397 202c1-3 2-5 0-7-6-6-6-15-8-22-2-4 3-3 5-4l4 21c3-4 3-8 6-11s1-8 1-12c1-3 2-3 4-3l14 4c13 3 26 6 38-3 3-2 4 0 4 2v11h1l3-10c3 2 3 4 2 8-5 11-13 22-14 36-3 2-4 6-7 9-3 4 0 12 4 14 7 2 10 7 8 13-3 7-1 15-2 23 0 4 1 6 3 8 9 10 20 16 30 25 2 2 6 2 9-1 8-6 16-11 26-8a9 9 0 0 0 2 0c-1 6 3 10 5 15l7 21a4 4 0 0 0 2 4v24l-3 4c-6 7-12 8-21 4-15-6-26-18-37-30l-18-20c-3-7-9-11-12-16-5-9-12-15-18-22-1-1-3-2-4-1-4 5-12 7-16 13-8 13-18 23-26 36-6 9-13 17-21 24-7 7-15 14-25 16l-6 2c-6 3-10 2-14-3a49 49 0 0 1-4-9c-2-4-1-8-3-11-3-14 2-27 1-40 0-2 1-4-1-5 9-9 17-17 31-16 8 1 16 8 16 16 0 2-1 4 1 5 7-4 13-9 19-15a230 230 0 0 1 19-16c5-4 7-7 4-13l-3-9c0-4-5-8-2-12 2-4 2-7-1-10-3-5-3-10-3-16 1-4 2-9 0-13ZM316 431c-6 3-9 9-14 14-14 13-28 26-45 34a53 53 0 0 0-21 19c-11 17-27 26-44 35-10 5-20 11-26 20l-7 5c-3 1-5 2-5-1 0-6-3-8-6-12l22-29 24-31c6-8 14-11 22-16l28-25c9-7 13-16 16-26a10 10 0 0 1 4-6c16 1 32 6 49 8 8 1 8 1 3 9v2ZM456 553c3-12 1-23-1-35-4-16-4-32 1-48l2-13a5 5 0 0 0 0-4 96 96 0 0 0-17-20c-1-8-7-12-12-16s-4-6 0-8l13-8c12-9 25-12 39-4h3a31 31 0 0 1 3 13c0 9 7 15 7 23 1 19 6 39 1 58l-14 46-3 11c-7-1-14-4-18 5-1 0-2 2-4 0Z");
			add_location(path0, file$k, 71, 6, 1316);
			attr_dev(path1, "fill", "var(--shirt)");
			attr_dev(path1, "d", "M343 367c10-2 18-9 25-16 8-7 15-15 21-24 8-13 18-23 26-36 4-6 11-8 16-13 1-1 3 0 4 1 6 7 13 13 18 22 3 5 9 9 12 16-3 5-6 10-11 14a7 7 0 0 0-2 7c-3 1-2 4-3 6l-4 5-33 21c-7 4-16 6-21 13a37 37 0 0 1-13 1c-7-4-15-6-23-9-4-2-9-4-12-8ZM397 202c2 4 1 9 0 13 0 6 0 11 3 16 3 3 3 6 1 10-3 4 2 8 2 12l3 9c3 6 1 9-4 13a230 230 0 0 0-19 16c-6 6-12 11-19 15-2-1-1-3-1-5 0-8-8-15-16-16-14-1-22 7-31 16-4 1-6-1-6-5a16 16 0 0 1 4-10c7-9 10-20 14-31 7-21 21-33 41-40l28-13Z");
			add_location(path1, file$k, 75, 6, 2505);
			attr_dev(path2, "fill", "var(--pants)");
			attr_dev(path2, "d", "M343 367c3 4 8 6 12 8 8 3 16 5 23 9l-22 50c-2 3-4 4-8 3-10-4-21-5-32-6v-2c5-8 5-8-3-9l-49-9c0-5 4-9 7-13l19-27 10-9c5-6 9-12 16-16 2 3 1 7 3 11a49 49 0 0 0 4 9c4 5 8 6 14 3l6-2Z");
			add_location(path2, file$k, 79, 6, 3023);
			attr_dev(path3, "fill", "var(--shirt)");
			attr_dev(path3, "d", "M529 295a9 9 0 0 1-1 0c-10-3-18 2-26 8-3 3-7 3-9 1-10-9-21-15-30-25-2-2-3-4-3-8 1-8-1-16 2-24 2-5-1-10-8-12-5-2-7-10-4-14 2-3 4-7 7-9 10 1 18 7 26 12 16 11 32 23 39 42 3 5 8 9 11 15s2 9-4 14Z");
			add_location(path3, file$k, 83, 6, 3262);
			attr_dev(path4, "fill", "var(--pants)");
			attr_dev(path4, "d", "M391 383c5-7 14-9 21-13l33-21 4-5c1-2 0-5 3-6 1 5 5 8 5 14 1 3 5 7 9 8 2 0 4 0 4 3-1 10 6 16 9 24l5 10h-3c-14-8-27-5-39 4l-13 8c-4 3-5 4 0 8s11 8 12 16l-7 5c-11 6-18 4-23-7l-20-48Z");
			add_location(path4, file$k, 87, 6, 3515);
			attr_dev(path5, "fill", "var(--hair)");
			attr_dev(path5, "d", "m469 168-3 10h-1v-11c0-2-1-4-4-2-12 9-25 6-38 3l-14-4c-2 0-4 0-4 3 0 4 2 9-1 12s-3 7-6 11l-4-21c-3-15 1-29 8-42 5-9 12-15 23-14a82 82 0 0 0 16 0c18-2 35 22 31 38l-3 17ZM456 553c2 2 3 0 4 0 4-9 11-6 18-5 3 2 4 4 5 8 0 8 5 15 9 21l10 11c7 8 3 20-7 22-13 3-25-2-32-12-5-8-7-17-14-23-2-2-1-5 1-8 3-3 5-7 3-12l1-2a13 13 0 0 1 2 0ZM148 545c3 4 6 6 6 12 0 3 3 3 5 1l7-5c-2 6-3 13-3 20 0 4-3 8-7 9-5 3-9 8-13 12-7 9-17 14-29 13s-16-10-9-20c3-5 7-9 12-12 7-5 12-11 16-19 2-5 6-7 9-11 1-2 4 0 6 0Z");
			add_location(path5, file$k, 91, 6, 3757);
			attr_dev(g0, "id", "lateral-lunge-3");
			attr_dev(g0, "class", "svelte-1otoq3l");
			add_location(g0, file$k, 70, 4, 1285);
			attr_dev(path6, "fill", "var(--flesh)");
			attr_dev(path6, "d", "M147 211c-1-3-1-5 1-7 6-6 5-15 8-22 1-4-3-3-6-4l-4 21c-2-4-2-8-6-11-3-3-1-8-1-12 0-3-2-3-4-2l-13 3c-13 3-27 6-39-3-2-2-3 0-3 2v11h-1l-3-10c-4 2-4 4-2 8 5 12 12 22 13 36 4 2 5 6 7 9 3 4 1 12-4 14-6 2-10 7-8 13 3 8 2 15 3 23 0 4-1 6-4 9-8 9-20 16-29 24-3 2-7 2-10-1-7-6-15-11-26-8a9 9 0 0 1-1 0c1 6-4 10-6 16-2 7-5 13-6 21a4 4 0 0 1-3 3v24l4 4c5 7 11 8 20 5 16-7 26-19 37-31l18-20c3-6 9-10 12-16 5-9 12-15 19-22l3-1c5 5 12 8 16 13 8 13 18 24 26 36 6 9 13 17 21 24 7 7 15 14 26 16l5 2c6 3 10 2 14-3a49 49 0 0 0 5-9c1-4 0-8 3-11 2-14-3-27-1-40v-5c-8-9-17-17-31-16-8 1-15 8-16 16 0 2 1 4-1 5-7-4-13-9-19-15a228 228 0 0 0-18-16c-6-4-7-7-5-13l3-9c0-4 5-8 3-12-3-4-2-6 0-10 3-5 3-10 3-16v-13ZM228 440c6 3 10 9 15 14 13 13 27 26 45 34a53 53 0 0 1 21 19c10 17 27 27 44 35 9 5 19 11 26 20l6 5c2 1 5 2 5-1 0-5 4-8 7-11l-23-30-24-31c-5-7-14-11-21-16-11-7-19-17-29-25-8-7-12-16-15-26a10 10 0 0 0-4-6c-17 1-33 6-49 8-9 1-9 1-4 9v2ZM88 563c-2-12-1-24 2-36 3-16 3-32-1-48l-3-13a5 5 0 0 1 1-4 96 96 0 0 1 16-20c1-8 7-12 12-16s4-5 0-8l-13-8c-12-9-25-12-39-3l-2-1a31 31 0 0 0-3 14c0 8-7 14-8 22-1 19-6 39 0 58l13 46 3 11c7-1 14-4 19 5 0 0 2 2 3 1Z");
			add_location(path6, file$k, 97, 6, 4343);
			attr_dev(path7, "fill", "var(--shirt)");
			attr_dev(path7, "d", "M202 376c-11-2-19-9-26-16s-15-15-21-24c-8-12-18-23-26-36-4-5-11-8-16-13l-3 1c-7 7-14 13-19 22-3 6-9 10-12 16l11 14a7 7 0 0 1 2 7c3 1 3 4 4 6l3 6 34 20c7 4 15 6 20 13a37 37 0 0 0 13 2c7-5 15-7 23-10 5-2 9-4 13-8ZM147 211v13c0 6 0 11-3 16-2 4-3 6 0 10 2 4-3 8-3 12l-3 9c-2 6-1 9 5 13a228 228 0 0 1 19 16c6 6 11 12 18 15 2-1 1-3 1-5 1-8 8-15 17-16 13-1 22 7 31 16 4 1 5-1 5-5a16 16 0 0 0-3-10c-8-9-11-20-14-31-8-20-22-32-42-40-9-3-18-9-28-13Z");
			add_location(path7, file$k, 101, 6, 5532);
			attr_dev(path8, "fill", "var(--pants)");
			attr_dev(path8, "d", "M202 376c-4 4-8 6-13 8-8 3-16 5-23 10l23 49c1 3 3 4 7 3 10-4 21-5 32-6v-2c-5-8-5-8 4-9 16-2 32-7 49-8-1-6-4-10-7-14l-20-27c-2-4-6-6-9-9-6-5-10-12-16-16-3 3-2 7-3 11a49 49 0 0 1-5 9c-4 5-8 6-14 3l-5-2Z");
			add_location(path8, file$k, 105, 6, 6033);
			attr_dev(path9, "fill", "var(--shirt)");
			attr_dev(path9, "d", "M15 304a9 9 0 0 0 1 0c10-3 19 2 26 8 3 3 7 3 10 1 9-8 21-15 29-24 3-3 4-5 3-9 0-8 1-15-2-23-2-6 2-11 8-13 5-2 7-10 4-14-2-3-3-7-7-9-10 1-18 7-26 12a95 95 0 0 0-39 42c-2 5-7 10-10 15-4 6-3 9 3 14Z");
			add_location(path9, file$k, 109, 6, 6295);
			attr_dev(path10, "fill", "var(--pants)");
			attr_dev(path10, "d", "M153 392c-5-7-13-9-20-13-12-6-23-13-34-21-2-1-3-3-3-5s-1-5-4-6c-1 5-5 9-5 14 0 3-4 7-9 8-2 0-4 0-4 3 2 10-5 16-9 24l-4 10 2 1c14-9 27-6 39 3l13 8c4 3 5 4 0 8s-11 8-12 16l7 5c11 6 18 4 23-7l20-48Z");
			add_location(path10, file$k, 113, 6, 6552);
			attr_dev(path11, "fill", "var(--hair)");
			attr_dev(path11, "d", "m76 177 3 10h1v-11c0-2 1-4 3-2 12 9 26 6 39 3l13-4c2 0 4 0 4 3 0 4-2 9 1 12 4 3 4 7 6 11l4-21c4-15 0-29-8-42-5-9-12-15-23-14a82 82 0 0 1-15 0c-19-2-36 22-32 38l4 17ZM88 563c-1 1-3 0-3-1-5-9-12-6-19-5-3 2-4 4-4 8 0 8-5 15-10 21l-10 11c-7 8-3 20 7 22 13 3 26-1 33-12 5-8 7-17 13-23 2-2 2-5 0-8-3-3-6-7-4-12v-2a13 13 0 0 0-3 1ZM397 555c-3 3-7 6-7 11 0 3-3 3-5 1l-6-5c1 7 3 13 2 20 0 5 4 8 7 10 6 2 9 7 13 12 8 9 17 13 29 12s17-10 10-20c-3-5-8-9-13-12-6-5-12-11-15-19-2-5-7-7-9-11-1-1-4 1-6 1Z");
			add_location(path11, file$k, 117, 6, 6809);
			attr_dev(g1, "id", "lateral-lunge-2");
			attr_dev(g1, "class", "svelte-1otoq3l");
			add_location(g1, file$k, 96, 4, 4312);
			attr_dev(path12, "fill", "var(--hair)");
			attr_dev(path12, "d", "M403 621c-15-4-19-13-18-28 1-4-1-7-4-10-5-4-6-8-3-13s-1-9 1-13c2 2 4 5 6 1 4-6 9-5 14-5 5 2 11 4 9 12-1 1 1 4 2 6 6 10 9 20 12 31 3 10-2 16-12 18l-2 1ZM109 586c7-11 16-21 17-34 1-5 4-8 8-11 5 1 10 2 12 8 0 2 1 3 3 2a4 4 0 0 0 3-2l2-6c1 6 2 12 5 18 2 4 1 7-3 9-1 1-2 3-4 3-5 3-6 7-6 14 2 12-2 16-10 20-10 4-21 1-27-7ZM230 52c-1-9-2-18-1-27a8 8 0 0 0 0-5c-4-6-1-9 4-12a65 65 0 0 1 20-7l3-1h5c2 2 6 1 9 2 4 2 9 3 10 8 1 3 4 2 5 3 4 2 7 4 6 8-2 10 2 20-1 30-2 3-1 8-5 11 1-8 2-16-4-23l-1-3c0-8-4-11-11-9s-16 2-24 0c-5-2-8 0-8 6a4 4 0 0 1-2 4c-3 2-3 5-2 9 0 4 2 9 1 14-3-2-3-5-4-8Z");
			add_location(path12, file$k, 123, 6, 7397);
			attr_dev(path13, "fill", "var(--shirt)");
			attr_dev(path13, "d", "M162 179c-2-1-1-3-1-5 4-16 8-32 14-48a19 19 0 0 1 10-10l43-17c3 0 5 1 6 3l11 11c4 4 8 5 12 3l10-2c7-2 15-4 18-11 1-4 3-4 5-4l41 16c6 2 8 8 10 12 7 13 12 27 18 40 1 4 1 8-4 10-1-3-2-3-5-2-7 4-12 11-20 13a14 14 0 0 0-7 4c-3-1-2-6-5-7 1 21 3 41 2 61-1 21 4 41 12 61 1 3 1 5-2 8-7 0-13 3-19 5-15 5-29 3-44 3-22 1-44 0-66-2-5-1-7-3-5-8-1-21 3-42 5-63 1-9 3-18 2-27s-3-17-2-26c0-1 0-3-2-3 0-3 2-4 0-8 0 7-2 6-5 3s-5-6-10-3c-2 1-4 0-6-1-5-2-10-7-16-6Z");
			add_location(path13, file$k, 127, 6, 8034);
			attr_dev(path14, "fill", "var(--pants)");
			attr_dev(path14, "d", "M196 313c-2 5 0 7 5 8 22 2 44 3 66 2 15 0 29 2 44-3 6-2 12-5 19-5l6 19c-2 4-8 7-9 13s-1 12-4 18c0 2-1 3 1 4 2 2 4 0 5-2a108 108 0 0 0 6-10c1-2 1-4 4-3 2 1 2 2 2 4l-2 6-8 11c-1 1-3 3-2 6a7 7 0 0 0 7 1l10-2c0 6 3 11 1 16-6 7-13 11-22 13l-18 4c-6 0-11 2-17 3-10 1-10 1-13-8l-8-29c0-2-1-5-3-5-3-1-3 3-4 5a276 276 0 0 0-10 34c-1 4-3 5-7 7-11 4-22 6-34 5a205 205 0 0 1-17-12c-6-3-10-8-16-10-4-3-1-7-1-10l3-13c2 2 4 4 7 1 2-2 1-5-1-7l-4-6 2-6a25 25 0 0 0 2 2c2 2 4 3 6 2 2-2 1-4 0-6-2-8-1-17-2-25Z");
			add_location(path14, file$k, 131, 6, 8540);
			attr_dev(path15, "fill", "var(--flesh)");
			attr_dev(path15, "d", "m346 380-10 2a7 7 0 0 1-7-2c-1-2 1-4 2-5l8-11 2-6c0-2 0-4-2-4-3-1-3 1-4 3a108 108 0 0 1-6 10c-1 2-3 4-5 2-2-1-1-3-1-4 3-6 3-12 4-18s7-9 9-13c6-5 7-11 7-18l-3-23c-1-17-6-33-3-51v-7c-8-14-9-29-14-43a14 14 0 0 1 7-4c8-2 13-9 20-13 3-1 4-1 5 2 5 14 3 28 6 42 3 17 6 34 4 51a443 443 0 0 0-4 56c0 7 0 14 2 20 2 8 0 15-3 22-2 5-5 9-10 9a5 5 0 0 0-4 3ZM307 413c6-3 12-3 18-5 9-1 16-5 22-12 3 2 3 5 3 7 0 15 6 28 14 40 10 16 16 34 20 52l14 52c1 2 2 4 1 6-5 0-10-1-14 5-2 4-4 1-6-1-2-19-13-35-22-50-8-12-14-25-16-39-2-12-10-19-17-28s-13-16-17-27ZM290 99c-2 0-4 0-5 4-3 7-11 9-18 11l-10 2c-4 2-8 1-12-3l-11-11c-1-2-3-3-6-3 10-6 12-17 4-26-4-5-4-11-6-17 0-2 1-4 4-4 1 3 1 6 4 8 1-5-1-10-1-14-1-4-1-7 2-10a4 4 0 0 0 2-3c0-6 3-8 8-6 8 2 16 2 24 0s11 1 11 9l1 3c6 7 5 15 4 23 4-3 3-8 5-11 3 0 4 2 3 5-1 6-4 12-8 18a25 25 0 0 0-6 17c1 5 7 6 11 8ZM178 403c6 2 10 7 16 10a205 205 0 0 0 17 12c0 4-3 7-5 9-5 5-8 12-14 17-4 5-5 11-6 17-2 15-9 28-17 40-5 10-11 19-14 30l-1 5-2 6a4 4 0 0 1-3 3c-2 0-3-1-3-3-2-5-7-7-12-8 7-17 8-35 11-53 4-21 15-40 24-59 4-7 7-14 7-22l2-4ZM182 367l4 7c2 2 3 5 1 7-3 3-5 1-7-1-11-6-16-16-20-27-2-7 0-13 1-19 4-15 2-30 1-45a453 453 0 0 1-1-68c0-14 2-28 1-42 6-1 11 4 16 6 2 1 4 2 6 1 5-3 7 0 10 3s5 4 5-4c2 5 0 6 0 8-2 1-4-2-4 2-1 17-8 34-6 51 3 23-6 45-8 67 0 9 3 16 9 22 1 8 0 17 2 25 1 2 2 4 0 6-2 1-4 0-6-2a25 25 0 0 1-2-2c-1-4-1-7-3-9-1-1-4-2-3 0 0 5-1 11 4 14Z");
			add_location(path15, file$k, 135, 6, 9092);
			attr_dev(g2, "id", "lateral-lunge-1");
			attr_dev(g2, "class", "svelte-1otoq3l");
			add_location(g2, file$k, 122, 4, 7366);
			attr_dev(g3, "class", "shapes svelte-1otoq3l");
			add_location(g3, file$k, 69, 2, 1238);
			attr_dev(g4, "class", "svelte-1otoq3l");
			toggle_class(g4, "paused", /*isPaused*/ ctx[1]);
			toggle_class(g4, "flip", /*flipsvg*/ ctx[2]);
			add_location(g4, file$k, 68, 0, 1187);
			attr_dev(svg, "xmlns", "http://www.w3.org/2000/svg");
			attr_dev(svg, "viewBox", "0 0 544.4 620.8");
			attr_dev(svg, "height", "100%");
			attr_dev(svg, "width", "100%");
			attr_dev(svg, "class", "svelte-1otoq3l");
			add_location(svg, file$k, 67, 0, 1092);
		},
		l: function claim(nodes) {
			throw new Error("options.hydrate only works if the component was compiled with the `hydratable: true` option");
		},
		m: function mount(target, anchor) {
			insert_dev(target, svg, anchor);
			append_dev(svg, t);
			append_dev(svg, g4);
			append_dev(g4, g3);
			append_dev(g3, g0);
			append_dev(g0, path0);
			append_dev(g0, path1);
			append_dev(g0, path2);
			append_dev(g0, path3);
			append_dev(g0, path4);
			append_dev(g0, path5);
			append_dev(g3, g1);
			append_dev(g1, path6);
			append_dev(g1, path7);
			append_dev(g1, path8);
			append_dev(g1, path9);
			append_dev(g1, path10);
			append_dev(g1, path11);
			append_dev(g3, g2);
			append_dev(g2, path12);
			append_dev(g2, path13);
			append_dev(g2, path14);
			append_dev(g2, path15);
			/*g3_binding*/ ctx[4](g3);
			if (if_block) if_block.m(g4, null);
		},
		p: function update(ctx, [dirty]) {
			if (/*isPaused*/ ctx[1]) {
				if (if_block) ; else {
					if_block = create_if_block$k(ctx);
					if_block.c();
					if_block.m(g4, null);
				}
			} else if (if_block) {
				if_block.d(1);
				if_block = null;
			}

			if (dirty & /*isPaused*/ 2) {
				toggle_class(g4, "paused", /*isPaused*/ ctx[1]);
			}

			if (dirty & /*flipsvg*/ 4) {
				toggle_class(g4, "flip", /*flipsvg*/ ctx[2]);
			}
		},
		i: noop,
		o: noop,
		d: function destroy(detaching) {
			if (detaching) detach_dev(svg);
			/*g3_binding*/ ctx[4](null);
			if (if_block) if_block.d();
		}
	};

	dispatch_dev("SvelteRegisterBlock", {
		block,
		id: create_fragment$k.name,
		type: "component",
		source: "",
		ctx
	});

	return block;
}

function instance$k($$self, $$props, $$invalidate) {
	let { $$slots: slots = {}, $$scope } = $$props;
	validate_slots('Workout_laterallunges', slots, []);
	let { direction = "right" } = $$props;
	let { isPaused = false } = $$props;
	let { rootElement } = $$props;
	let flipsvg = false;

	if (direction == "left") {
		flipsvg = true;
	}

	const writable_props = ['direction', 'isPaused', 'rootElement'];

	Object.keys($$props).forEach(key => {
		if (!~writable_props.indexOf(key) && key.slice(0, 2) !== '$$' && key !== 'slot') console.warn(`<Workout_laterallunges> was created with unknown prop '${key}'`);
	});

	function g3_binding($$value) {
		binding_callbacks[$$value ? 'unshift' : 'push'](() => {
			rootElement = $$value;
			$$invalidate(0, rootElement);
		});
	}

	$$self.$$set = $$props => {
		if ('direction' in $$props) $$invalidate(3, direction = $$props.direction);
		if ('isPaused' in $$props) $$invalidate(1, isPaused = $$props.isPaused);
		if ('rootElement' in $$props) $$invalidate(0, rootElement = $$props.rootElement);
	};

	$$self.$capture_state = () => ({
		direction,
		isPaused,
		rootElement,
		flipsvg
	});

	$$self.$inject_state = $$props => {
		if ('direction' in $$props) $$invalidate(3, direction = $$props.direction);
		if ('isPaused' in $$props) $$invalidate(1, isPaused = $$props.isPaused);
		if ('rootElement' in $$props) $$invalidate(0, rootElement = $$props.rootElement);
		if ('flipsvg' in $$props) $$invalidate(2, flipsvg = $$props.flipsvg);
	};

	if ($$props && "$$inject" in $$props) {
		$$self.$inject_state($$props.$$inject);
	}

	return [rootElement, isPaused, flipsvg, direction, g3_binding];
}

class Workout_laterallunges extends SvelteComponentDev {
	constructor(options) {
		super(options);

		init(this, options, instance$k, create_fragment$k, safe_not_equal, {
			direction: 3,
			isPaused: 1,
			rootElement: 0
		});

		dispatch_dev("SvelteRegisterComponent", {
			component: this,
			tagName: "Workout_laterallunges",
			options,
			id: create_fragment$k.name
		});

		const { ctx } = this.$$;
		const props = options.props || {};

		if (/*rootElement*/ ctx[0] === undefined && !('rootElement' in props)) {
			console.warn("<Workout_laterallunges> was created without expected prop 'rootElement'");
		}
	}

	get direction() {
		throw new Error("<Workout_laterallunges>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
	}

	set direction(value) {
		throw new Error("<Workout_laterallunges>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
	}

	get isPaused() {
		throw new Error("<Workout_laterallunges>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
	}

	set isPaused(value) {
		throw new Error("<Workout_laterallunges>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
	}

	get rootElement() {
		throw new Error("<Workout_laterallunges>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
	}

	set rootElement(value) {
		throw new Error("<Workout_laterallunges>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
	}
}

var workoutLaterallunges = /*#__PURE__*/Object.freeze({
    __proto__: null,
    'default': Workout_laterallunges
});

/* src/workouts/workout-lunges.svelte generated by Svelte v3.49.0 */

const file$j = "src/workouts/workout-lunges.svelte";

// (173:4) {#if isPaused}
function create_if_block$j(ctx) {
	let svg;
	let path;

	const block = {
		c: function create() {
			svg = svg_element("svg");
			path = svg_element("path");
			attr_dev(path, "d", "M10 24h-6v-24h6v24zm10 0h-6v-24h6v24zm-11-23h-4v22h4v-22zm10 0h-4v22h4v-22z");
			add_location(path, file$j, 173, 133, 11658);
			attr_dev(svg, "viewBox", "-6 -5 36 36");
			attr_dev(svg, "width", "100%");
			attr_dev(svg, "height", "100%");
			attr_dev(svg, "xmlns", "http://www.w3.org/2000/svg");
			attr_dev(svg, "fill-rule", "evenodd");
			attr_dev(svg, "clip-rule", "evenodd");
			add_location(svg, file$j, 173, 4, 11529);
		},
		m: function mount(target, anchor) {
			insert_dev(target, svg, anchor);
			append_dev(svg, path);
		},
		d: function destroy(detaching) {
			if (detaching) detach_dev(svg);
		}
	};

	dispatch_dev("SvelteRegisterBlock", {
		block,
		id: create_if_block$j.name,
		type: "if",
		source: "(173:4) {#if isPaused}",
		ctx
	});

	return block;
}

function create_fragment$j(ctx) {
	let svg;
	let t;
	let g4;
	let g3;
	let g0;
	let path0;
	let path1;
	let path2;
	let path3;
	let path4;
	let path5;
	let path6;
	let path7;
	let path8;
	let path9;
	let path10;
	let path11;
	let path12;
	let g1;
	let path13;
	let path14;
	let path15;
	let path16;
	let path17;
	let path18;
	let path19;
	let path20;
	let g2;
	let path21;
	let path22;
	let path23;
	let path24;
	let path25;
	let path26;
	let path27;
	let path28;
	let if_block = /*isPaused*/ ctx[1] && create_if_block$j(ctx);

	const block = {
		c: function create() {
			svg = svg_element("svg");
			t = text(">\n");
			g4 = svg_element("g");
			g3 = svg_element("g");
			g0 = svg_element("g");
			path0 = svg_element("path");
			path1 = svg_element("path");
			path2 = svg_element("path");
			path3 = svg_element("path");
			path4 = svg_element("path");
			path5 = svg_element("path");
			path6 = svg_element("path");
			path7 = svg_element("path");
			path8 = svg_element("path");
			path9 = svg_element("path");
			path10 = svg_element("path");
			path11 = svg_element("path");
			path12 = svg_element("path");
			g1 = svg_element("g");
			path13 = svg_element("path");
			path14 = svg_element("path");
			path15 = svg_element("path");
			path16 = svg_element("path");
			path17 = svg_element("path");
			path18 = svg_element("path");
			path19 = svg_element("path");
			path20 = svg_element("path");
			g2 = svg_element("g");
			path21 = svg_element("path");
			path22 = svg_element("path");
			path23 = svg_element("path");
			path24 = svg_element("path");
			path25 = svg_element("path");
			path26 = svg_element("path");
			path27 = svg_element("path");
			path28 = svg_element("path");
			if (if_block) if_block.c();
			attr_dev(path0, "fill", "var(--pants)");
			attr_dev(path0, "d", "m76 320 8-1c1 6 1 12 5 16a29 29 0 0 1 4 28c-3 9 6 13 5 21 0 1 4 2 4 0 3-4 4 2 5 1-2 12 0 25-2 37l-2 10c-1 12-1 12-13 13-19 1-37 3-56 3-12-1-12-1-12-13 0-25-3-50-11-74-4-11-5-23-4-35 6 6 13 5 21 3l30-6 8 1c5 1 8 0 10-4Z");
			add_location(path0, file$j, 71, 6, 1241);
			attr_dev(path1, "fill", "var(--shirt)");
			attr_dev(path1, "d", "M95 288Z");
			add_location(path1, file$j, 75, 6, 1521);
			attr_dev(path2, "fill", "var(--hair)");
			attr_dev(path2, "d", "M36 76Z");
			add_location(path2, file$j, 76, 6, 1569);
			attr_dev(path3, "fill", "var(--hair)");
			attr_dev(path3, "d", "M117 643c2-2 4-4 3-8-1-3-4-5-7-5-4 0-8-2-12-4a187 187 0 0 1-27-16c-4-3-7-5-7-10 0-2 0-6-5-3a3 3 0 0 1-1 0c-2 0-2 3-3 4 2 5 0 8-5 10l-1 8c-4 3-9 4-12 10-4 8-13 5-18-5l-4-6c-2 0-3-1-3-3s1-3 3-3a1 1 0 0 1 1-1c-1-1-1-3-3-2a4 4 0 0 0-3 4c0 6-1 11 1 17v3-1 9a6 6 0 0 0 2-2 6 6 0 0 1-2 2c1 4-1 8 1 12a3 3 0 0 0 3 3c5 3 11 4 17 5a2 2 0 0 0 3 1h4l8 2 2 1 12 6 4 1c6 2 13 2 19 1 9-2 17-3 24-9 6-3 8-10 4-14-3-4-1-5 2-7Zm-101-7a7 7 0 0 0-1 0 7 7 0 0 1 1 0Zm0 3a3 3 0 0 0 0-1 3 3 0 0 1 0 1Z");
			add_location(path3, file$j, 77, 6, 1615);
			attr_dev(path4, "fill", "var(--shirt)");
			attr_dev(path4, "d", "M110 317ZM111 318Z");
			add_location(path4, file$j, 81, 6, 2154);
			attr_dev(path5, "fill", "var(--pants)");
			attr_dev(path5, "d", "M76 320c-2 4-5 5-10 3h-8c6-2 12-4 18-3Z");
			add_location(path5, file$j, 82, 6, 2212);
			attr_dev(path6, "fill", "var(--hair)");
			attr_dev(path6, "d", "M102 4c-3-4-7-2-11-2-3 0-7 1-9-2H53c-3 4-8 3-12 4-14 3-23 13-22 28s4 30 8 44a4 4 0 0 0 2 5c3 0 6-1 7-5 7-6 2-13 1-20-1-5-1-9 3-12 6-2 10 1 12 7 2 8 6 9 12 3a16 16 0 0 0 2-3l2-4c1-6 2-10 8-13 3-1 4-5 3-8-1-8 2-11 9-8 3 0 6 2 8 3l2-2a26 26 0 0 0 2-3c2-4 4-8 2-12Z");
			add_location(path6, file$j, 86, 6, 2313);
			attr_dev(path7, "fill", "var(--hair)");
			attr_dev(path7, "d", "M18 618c-2 0-3-1-3-3s1-3 3-3v2h-1a6 6 0 0 0 1 1v2Z");
			add_location(path7, file$j, 90, 6, 2635);
			attr_dev(path8, "fill", "var(--pants)");
			attr_dev(path8, "d", "M18 616v-1l1 1a9 9 0 0 0-1 0Z");
			add_location(path8, file$j, 94, 6, 2746);
			attr_dev(path9, "fill", "var(--pants)");
			attr_dev(path9, "d", "M18 615a6 6 0 0 1-1-1s1 0 1-1a1 1 0 0 1 0 2Z");
			add_location(path9, file$j, 95, 6, 2815);
			attr_dev(path10, "d", "M108 296c-6-35-7-70-5-106 0-9 0-19-5-27-2-9-6-17-11-25-1-4-3-7-6-10a38 38 0 0 0-8-13l-2-4c-3 1-3 3-3 5 0 6-3 8-7 5l-9-2c-5-6-12-8-19-10l-9-12c-8 5-9 15-13 22s-5 15-11 21v27a178 178 0 0 1 12 86c-1 10-1 21-4 31-6 14-3 28-1 42 6 6 13 5 21 3l30-6c6-2 12-4 18-3l8-1a17 17 0 0 0-6-11c-9-8-15-19-24-27-7-5-10-15-13-24-1-3-4-6-3-10-1-1-2 2-2 0v-17l1-1c-4-2-1-6-3-10-2-7-5-15-4-23-5-2-2-6-2-9a44 44 0 0 1 0-12c11 3 22 1 33 1 3 1 6-1 7 3a7 7 0 0 0 1 0 7 7 0 0 1-1 0v33c0 5 0 10 3 14 4 5 4 12 7 18 2 3 4 7 4 11 3 0 1 5 4 6l1 2v6c5 3 5 8 6 13 3 1 2 3 2 6 2 0 3 1 3 2v3c4 2 4 7 5 11s2 7 6 8c2-5 0-11-1-16ZM72 187l-1-1 1-1 1 1-1 1Zm10-10a3 3 0 0 0-2-3 3 3 0 0 1 2 3Zm-1 19a96 96 0 0 1 1 13 96 96 0 0 0-1-13Zm6 61a20 20 0 0 0 0-3 20 20 0 0 1 0 3Z");
			attr_dev(path10, "fill", "var(--shirt)");
			add_location(path10, file$j, 99, 6, 2921);
			attr_dev(path11, "d", "m72 185 1 1-1 1-1-1 1-1Z");
			attr_dev(path11, "fill", "var(--pants)");
			add_location(path11, file$j, 103, 6, 3714);
			attr_dev(path12, "fill", "var(--flesh)");
			attr_dev(path12, "d", "m111 318-1-1-1-5c-4-1-5-4-6-8s-1-9-5-11v-3a2 2 0 0 1-3-1 2 2 0 0 0 3 1c0-1-1-2-3-2 0-3 1-5-2-6l-1 6a3 3 0 0 0-2 1 3 3 0 0 1 2-1l1-6c-1-5-1-10-6-13v-6l-1-2c-3-1-1-6-4-6 0-4-2-8-4-11-3-6-3-13-7-18-3-4-3-9-3-14v-33c-1-4-4-2-7-3-11 0-22 2-33-1a44 44 0 0 0-1 12c1 3-2 7 3 9-1 8 1 16 4 23 2 4-1 8 3 10l-1 1v17c0 2 1-1 2 0-1 4 2 7 3 10 3 9 6 19 13 24 9 8 15 19 24 27a17 17 0 0 1 6 11c1 6 1 12 5 16a29 29 0 0 1 4 28c-3 9 6 13 5 21 0 1 4 2 4 0 3-4 4 2 5 1 7 1 6-6 9-8 1 2 0 5 3 5s3-3 4-5l3-13c1-10 1-20-4-28l-11-18ZM24 493a56 56 0 0 0-4 8c-3 9-8 17-7 26l4 49c1 12 3 23 2 35a1 1 0 0 0-1 1v1a1 1 0 0 1 0 2l1 1a9 9 0 0 0-1 0v2l4 6c5 10 14 13 18 5 3-6 8-7 12-10l1-8c5-2 7-5 5-10 1-1 1-4 3-4v-8l-1-4c2-14-1-28 0-42v-5c2-2 1-4 1-7 2-10 1-22 7-30 11-17 16-37 22-56-19 1-37 4-56 3 2 16 0 31-10 45Zm-2 131v-2 2Zm36-29a8 8 0 0 0-1 1v1-1a8 8 0 0 1 1-1 13 13 0 0 1 0-2 13 13 0 0 0 0 2Zm5-91-2-4 2 4Zm-2-4a5 5 0 0 0-3-1 5 5 0 0 1 3 1ZM18 615ZM29 81c-2 5-1 11-5 16l9 12c7 2 14 4 19 10l9 2c4 3 7 1 7-5 0-2 0-4 3-5-2-10 4-17 14-16 5 1 11 1 12-3 1-7 7-13 6-21a4 4 0 0 1 2-4c4-4 3-7 0-11-2-3-6-5-5-9 2-9-3-17-4-26-2-1-5-3-8-3-7-3-10 0-9 8 1 3 0 7-3 8-6 3-7 7-8 13l-2 4a15 15 0 0 1-2 3c-6 6-10 5-12-3-2-6-6-9-12-7-4 3-4 7-3 12 1 7 6 14-1 20-1 4-4 5-7 5Z");
			add_location(path12, file$j, 104, 6, 3778);
			attr_dev(g0, "id", "lunge-1");
			attr_dev(g0, "class", "svelte-xtqzkm");
			add_location(g0, file$j, 70, 4, 1218);
			attr_dev(path13, "fill", "var(--hair)");
			attr_dev(path13, "d", "M530 598c-6 7-13 11-21 11-18 2-35 3-53 1l-31-2c-2 0-5 0-4-4 4-12 3-24 10-35 0-2 0-5 3-3l7 9c3 3 6 5 9 2 4-3 12-4 10-12-1-6 2-9 7-10 2 2 2 4 2 6 0 10 6 14 13 17 14 5 26 13 41 13 3 0 5 2 7 3ZM105 618c2 4-2 4-4 4-5-1-6 2-7 6 0 6 0 11 7 13 4 1 7 4 11 6 2 2 3 4 2 7 0 3-2 4-4 4l-15 4H83l-1-1c-16-3-23-14-24-30-1-9-5-18-8-27-3-11 2-18 14-18l15 2c1-1 1 1 1 2l-2 4c-5 3-7 7-4 13 4 5 15 10 19 8 5-3 9-1 12 3Z");
			add_location(path13, file$j, 110, 6, 5095);
			attr_dev(path14, "fill", "var(--pants)");
			attr_dev(path14, "d", "M419 435a173 173 0 0 0-13 30c-3 3-3 9-6 12l-3-4-10-30c-3-9-4-18-10-26l-1-4c4-6 8-11 14-14 4 0 8 3 13-1 2-2 4 1 6 2 6 3 11 8 19 3 2-1 7 1 8 5-4 1-5 4-6 7-3 6-7 11-9 18Z");
			add_location(path14, file$j, 114, 6, 5555);
			attr_dev(path15, "fill", "var(--shirt)");
			attr_dev(path15, "d", "M381 316a7 7 0 0 1-3-4 7 7 0 0 0 3 4c1-7-2-13-4-19-5-16-18-26-27-39a15 15 0 0 0-8-6l-6-3c-3-5-8-8-13-10-7-3-15-7-23-9-7 10-14 20-19 31-10 23-9 47-4 70 2 16 6 32 9 47 1 6 2 12 0 18-4 11-10 21-12 33-1 6-6 13-4 20l14 4c13 2 26 7 40 9 12 1 22-1 30-11 0-4-4-6-7-9-2-3-4-7-3-11v-2c-6-8-10-16-12-25a4 4 0 0 1-1-1c-1-7-7-11-6-18l-11-29c-1-5 7-14 11-14 8-1 15 1 22-3 6-2 9 3 9 7 1 6 4 12 4 18 3 5 5 12 5 18v3c5 5 2 11 3 16 3 1 2 4 3 6a8 8 0 0 0 5 6c4-6 8-12 14-14-1-28-6-55-9-83Zm-3-7v1-1Z");
			add_location(path15, file$j, 118, 6, 5784);
			attr_dev(path16, "fill", "var(--pants)");
			attr_dev(path16, "d", "m366 464-1-1-3-3-8-9c-8 10-18 12-30 11-14-2-27-7-40-9-1 3-3 3-5 2 1-3 3-2 5-2l-14-4c0 7-1 15 3 22v1c0 5-7 10 1 14 1 1 0 4-1 5l-8 26-7 18c-2 6-6 13-6 20 9 7 18 13 29 14l25 1a72 72 0 0 1 29-8c7 0 8-3 9-8 1-15 1-31 4-47 5-13 10-26 28-26-1-7-8-11-10-17Z");
			add_location(path16, file$j, 122, 6, 6326);
			attr_dev(path17, "fill", "var(--hair)");
			attr_dev(path17, "d", "M369 138h-9c-16-3-31-1-47 2-13 2-19 14-20 23-1 18 5 36 10 54 4-1 6-3 8-6 5-6 1-13 0-20-2-9 0-12 9-12 4 3 6 6 6 11 1 4 3 4 6 3 6-3 10-7 10-13 1-5 3-7 6-9 5-2 6-6 5-11-2-5 1-8 6-7a48 48 0 0 1 6 1l4 3a26 26 0 0 0 7-10c2-6-1-9-7-9Z");
			add_location(path17, file$j, 126, 6, 6637);
			attr_dev(path18, "fill", "var(--pants)");
			attr_dev(path18, "d", "M284 453c-1 3-3 3-5 2 1-3 3-2 5-2Z");
			add_location(path18, file$j, 130, 6, 6925);
			attr_dev(path19, "fill", "var(--flesh)");
			attr_dev(path19, "d", "M252 555c-2 1-3 3-3 5-2 7-6 13-9 20-2 5-5 7-11 6l-9-1c-17-4-35-6-52-3-27 5-53 8-80 7l-8 1-2 4c-5 3-7 7-4 13 4 5 15 10 19 8 5-3 9-1 12 3 3-2 6-2 9-2a102 102 0 0 1 33 3c34 10 70 8 104 10 11 1 19-4 23-13 5-9 11-15 17-23 5-7 11-14 15-23l-25-1c-11-1-20-7-29-14ZM478 418l-42-10c-4 1-5 4-6 7v7-7c-3 6-7 11-9 18l-2 2a173 173 0 0 0-13 30 305 305 0 0 0 39 2c4-1 5 0 3 4a63 63 0 0 0-4 15c-2 19-1 38-5 56-2 8-2 16-5 24l7 9c3 3 6 5 9 2 4-3 12-4 10-12-1-6 2-9 7-10-1-10 3-19 7-29l7-17c6-17 11-34 18-50 8-18-2-38-21-41Zm-50 19a2 2 0 0 0-3-3 2 2 0 0 1 3 3ZM378 202c5-3 3-7 1-10-3-4-6-7-5-11 0-8-3-16-5-24l-4-3a48 48 0 0 0-6-1c-5-1-8 2-6 7 1 5 0 9-5 11-4 2-5 4-6 9 0 6-4 10-10 13-3 1-5 1-5-3-1-5-3-8-7-11-9 0-11 3-9 12 1 7 5 14 0 20-2 3-4 5-8 6-2 4-2 9-3 13 8 2 16 6 23 9 5 2 10 5 13 10l6 3 1-6c2-12 6-15 17-15h4c5 0 8-3 8-7 0-7 8-12 4-20l2-2Z");
			add_location(path19, file$j, 131, 6, 6999);
			attr_dev(path20, "fill", "var(--flesh)");
			attr_dev(path20, "d", "M410 499c-7-6-10-14-10-22l-3-4-10-30c-3-9-4-18-10-26l-1-4a8 8 0 0 1-5-6c-1-2 0-5-3-6-1-5 2-11-3-16v-3c0-6-2-12-5-18 0-6-3-12-4-18 0-4-3-9-9-7-7 4-14 2-21 3-5 0-13 9-12 14l11 29c0 7 5 11 6 18a4 4 0 0 0 1 1c2 9 6 17 12 25v2c-1 5 1 8 3 11 3 3 7 5 7 9l9 9 2 3 2 1h-1c3 6 9 10 10 17a29 29 0 0 1 9 19c0 7 1 15 7 21 5 6 6 12 2 19-2 5 0 7 4 8 3 3 5 0 8 0 9-1 19-13 19-22 0-12-7-20-15-27Zm-13 4a1 1 0 0 1 0 1 1 1 0 0 0 0-1Z");
			add_location(path20, file$j, 135, 6, 7887);
			attr_dev(g1, "id", "lunge-2");
			attr_dev(g1, "class", "svelte-xtqzkm");
			add_location(g1, file$j, 109, 4, 5072);
			attr_dev(path21, "fill", "var(--flesh)");
			attr_dev(path21, "d", "m431 458-42-10c-4 1-4 3-5 6l-1 8 1-8c-4 6-8 12-10 19l-2 2a173 173 0 0 0-13 29 305 305 0 0 0 39 2c3 0 5 1 3 5a63 63 0 0 0-4 15c-3 18-2 38-6 56-2 8-2 16-5 24l7 8c3 2 6 6 9 3 4-3 12-4 10-12-1-6 2-9 7-10-1-10 3-20 7-29l7-17 19-50c8-18-2-37-21-41Zm-50 18a2 2 0 0 0-3-2 2 2 0 0 1 3 2ZM258 550l3-43c-2-3-5-4-8-4l-7 1 7-1c-6-3-12-6-20-6l-2-1a173 173 0 0 0-31-9 304 304 0 0 0 5 39c0 4 0 5-4 4a63 63 0 0 0-16-1c-19 0-37 5-56 4-8-1-48 2-56 0a99 99 0 0 0-8 8c-2 3-4 8-1 10 4 3 6 11 14 8 5-2 32 3 47 3s16 0 26 2l18 4 52 10c19 5 37-9 37-28Zm-27-46a2 2 0 0 0 2-3 2 2 0 0 1-2 3Z");
			add_location(path21, file$j, 141, 6, 8393);
			attr_dev(path22, "fill", "var(--pants)");
			attr_dev(path22, "d", "m350 422-24-10a5 5 0 0 1-2-2c-3 1-5-1-8-1-7 3-10 9-14 14v5c6 7 8 17 11 25a3512 3512 0 0 1 12 34c-9 23-8 47 24 27 17-2 24 3 29-7l5-42c2-7 9-14 13-20l-40-20-6-3Z");
			add_location(path22, file$j, 145, 6, 9017);
			attr_dev(path23, "fill", "var(--shirt)");
			attr_dev(path23, "d", "M307 326a7 7 0 0 1-3-4 7 7 0 0 0 3 4c1-7-2-13-4-19-5-16-18-26-27-39a15 15 0 0 0-8-6c-2-1-4-3-7-2-2-6-8-8-12-10-8-4-15-8-23-9a114 114 0 0 0-23 101l9 47c1 5 2 11 0 17-4 11-10 21-12 33-2 7-6 13-4 20l14 4 39 9c13 1 23 0 31-11-1-4-4-6-7-9s-4-6-3-10l-1-3c-5-8-10-16-12-25a3 3 0 0 1 0-1c-1-6-7-11-7-18l-10-29c-1-4 6-13 11-14 7-1 15 1 22-2 5-3 9 2 9 6 1 6 4 12 4 18 3 6 5 12 5 19v2c5 5 2 11 3 17 3 0 2 3 2 5a8 8 0 0 0 6 6c4-5 7-11 14-14-1-28-7-55-9-83Zm-4-7Z");
			add_location(path23, file$j, 149, 6, 9238);
			attr_dev(path24, "fill", "var(--pants)");
			attr_dev(path24, "d", "m196 485-1 22c26 8 54 7 75 3 30 4 80 19 31-19-1-7-7-10-9-16v-1l-2-1-2-3-8-8c-8 10-18 12-31 10l-40-9c0 4-2 3-5 2 2-2 4-1 5-2l-13-4-1 23c0 4 0 2 1 3Z");
			add_location(path24, file$j, 153, 6, 9750);
			attr_dev(path25, "fill", "var(--hair)");
			attr_dev(path25, "d", "M295 148h-9c-16-2-31-1-47 2-13 3-19 14-20 23-1 19 5 36 10 54l7-5c6-7 1-14 0-21-1-8 1-12 10-12 3 3 6 7 6 11 1 4 3 4 6 3 5-3 10-7 10-13 0-4 2-7 6-9 5-2 6-6 4-11-1-5 1-7 6-7a49 49 0 0 1 7 1l4 3a26 26 0 0 0 6-9c2-6 0-10-6-10Z");
			add_location(path25, file$j, 157, 6, 9959);
			attr_dev(path26, "fill", "var(--pants)");
			attr_dev(path26, "d", "M210 463c-1 4-3 3-5 2 1-2 3-1 5-2Z");
			add_location(path26, file$j, 161, 6, 10241);
			attr_dev(path27, "fill", "var(--flesh)");
			attr_dev(path27, "d", "M304 212c5-3 3-7 0-10-2-3-5-7-5-11 1-8-2-16-4-24l-4-3a49 49 0 0 0-6-1c-6 0-8 2-7 7 2 5 1 9-4 11-4 2-6 5-6 9 0 7-5 10-10 13-3 1-5 1-6-3 0-4-3-8-6-11-9 0-11 4-10 12 1 7 6 14 0 21l-7 5c-2 4-2 9-3 14 8 1 15 5 23 9 4 2 10 4 12 10 3-1 5 1 7 2l1-6c1-12 5-15 17-15h4c5 0 7-2 8-7 0-7 7-12 4-20l2-2ZM335 509c-6-6-9-13-10-22l-3-4-9-30c-3-8-5-18-11-25v-5a8 8 0 0 1-6-6c0-2 1-5-2-5-1-6 2-12-3-17v-2c0-7-2-13-5-19 0-6-3-12-4-18 0-4-4-9-9-7-7 4-15 2-22 3-5 1-12 10-11 14l10 29c0 7 6 12 7 18a3 3 0 0 0 0 1c2 9 7 17 12 25l1 3c-1 4 0 7 3 10s6 5 7 9l8 9 2 3 2 1v1c2 6 8 9 9 16a29 29 0 0 1 9 19c1 8 2 15 8 21 5 6 6 12 2 19-3 5 0 7 4 8 2 4 5 0 8 0 8 0 18-13 18-22 0-12-7-20-15-27Zm-12 5Z");
			add_location(path27, file$j, 162, 6, 10315);
			attr_dev(path28, "fill", "var(--hair)");
			attr_dev(path28, "d", "M106 560c1 5-3 4-5 4-5-1-6 2-6 7-1 6-1 11 7 13l10 6c3 1 3 4 3 6 0 3-2 5-5 5l-15 4H83v-1c-17-3-23-14-25-30-1-9-5-18-7-27-4-12 1-18 13-18 5 0 10 2 15 1l2 3-3 4c-4 3-7 7-3 13 3 5 14 10 19 7 5-2 8 0 12 3ZM490 634c-6 8-14 11-24 12-19 2-38 3-57 1l-34-2c-3-1-6 0-5-4 4-13 3-27 10-40 1-2 1-5 4-3l7 10c2 3 7 6 11 3 4-4 13-5 11-13-1-7 1-10 8-11 2 1 2 4 2 6 0 11 6 15 15 18 14 6 27 15 44 15 3 0 5 2 8 4Z");
			add_location(path28, file$j, 166, 6, 11043);
			attr_dev(g2, "id", "lunge-3");
			attr_dev(g2, "class", "svelte-xtqzkm");
			add_location(g2, file$j, 140, 4, 8370);
			attr_dev(g3, "class", "shapes svelte-xtqzkm");
			add_location(g3, file$j, 69, 2, 1171);
			attr_dev(g4, "class", "svelte-xtqzkm");
			toggle_class(g4, "paused", /*isPaused*/ ctx[1]);
			toggle_class(g4, "flip", /*flipsvg*/ ctx[2]);
			add_location(g4, file$j, 68, 0, 1120);
			attr_dev(svg, "xmlns", "http://www.w3.org/2000/svg");
			attr_dev(svg, "viewBox", "0 0 529.8 673.5");
			attr_dev(svg, "height", "100%");
			attr_dev(svg, "width", "100%");
			attr_dev(svg, "class", "svelte-xtqzkm");
			add_location(svg, file$j, 67, 0, 1025);
		},
		l: function claim(nodes) {
			throw new Error("options.hydrate only works if the component was compiled with the `hydratable: true` option");
		},
		m: function mount(target, anchor) {
			insert_dev(target, svg, anchor);
			append_dev(svg, t);
			append_dev(svg, g4);
			append_dev(g4, g3);
			append_dev(g3, g0);
			append_dev(g0, path0);
			append_dev(g0, path1);
			append_dev(g0, path2);
			append_dev(g0, path3);
			append_dev(g0, path4);
			append_dev(g0, path5);
			append_dev(g0, path6);
			append_dev(g0, path7);
			append_dev(g0, path8);
			append_dev(g0, path9);
			append_dev(g0, path10);
			append_dev(g0, path11);
			append_dev(g0, path12);
			append_dev(g3, g1);
			append_dev(g1, path13);
			append_dev(g1, path14);
			append_dev(g1, path15);
			append_dev(g1, path16);
			append_dev(g1, path17);
			append_dev(g1, path18);
			append_dev(g1, path19);
			append_dev(g1, path20);
			append_dev(g3, g2);
			append_dev(g2, path21);
			append_dev(g2, path22);
			append_dev(g2, path23);
			append_dev(g2, path24);
			append_dev(g2, path25);
			append_dev(g2, path26);
			append_dev(g2, path27);
			append_dev(g2, path28);
			/*g3_binding*/ ctx[4](g3);
			if (if_block) if_block.m(g4, null);
		},
		p: function update(ctx, [dirty]) {
			if (/*isPaused*/ ctx[1]) {
				if (if_block) ; else {
					if_block = create_if_block$j(ctx);
					if_block.c();
					if_block.m(g4, null);
				}
			} else if (if_block) {
				if_block.d(1);
				if_block = null;
			}

			if (dirty & /*isPaused*/ 2) {
				toggle_class(g4, "paused", /*isPaused*/ ctx[1]);
			}

			if (dirty & /*flipsvg*/ 4) {
				toggle_class(g4, "flip", /*flipsvg*/ ctx[2]);
			}
		},
		i: noop,
		o: noop,
		d: function destroy(detaching) {
			if (detaching) detach_dev(svg);
			/*g3_binding*/ ctx[4](null);
			if (if_block) if_block.d();
		}
	};

	dispatch_dev("SvelteRegisterBlock", {
		block,
		id: create_fragment$j.name,
		type: "component",
		source: "",
		ctx
	});

	return block;
}

function instance$j($$self, $$props, $$invalidate) {
	let { $$slots: slots = {}, $$scope } = $$props;
	validate_slots('Workout_lunges', slots, []);
	let { direction = "right" } = $$props;
	let { isPaused = false } = $$props;
	let { rootElement } = $$props;
	let flipsvg = false;

	if (direction == "left") {
		flipsvg = true;
	}

	const writable_props = ['direction', 'isPaused', 'rootElement'];

	Object.keys($$props).forEach(key => {
		if (!~writable_props.indexOf(key) && key.slice(0, 2) !== '$$' && key !== 'slot') console.warn(`<Workout_lunges> was created with unknown prop '${key}'`);
	});

	function g3_binding($$value) {
		binding_callbacks[$$value ? 'unshift' : 'push'](() => {
			rootElement = $$value;
			$$invalidate(0, rootElement);
		});
	}

	$$self.$$set = $$props => {
		if ('direction' in $$props) $$invalidate(3, direction = $$props.direction);
		if ('isPaused' in $$props) $$invalidate(1, isPaused = $$props.isPaused);
		if ('rootElement' in $$props) $$invalidate(0, rootElement = $$props.rootElement);
	};

	$$self.$capture_state = () => ({
		direction,
		isPaused,
		rootElement,
		flipsvg
	});

	$$self.$inject_state = $$props => {
		if ('direction' in $$props) $$invalidate(3, direction = $$props.direction);
		if ('isPaused' in $$props) $$invalidate(1, isPaused = $$props.isPaused);
		if ('rootElement' in $$props) $$invalidate(0, rootElement = $$props.rootElement);
		if ('flipsvg' in $$props) $$invalidate(2, flipsvg = $$props.flipsvg);
	};

	if ($$props && "$$inject" in $$props) {
		$$self.$inject_state($$props.$$inject);
	}

	return [rootElement, isPaused, flipsvg, direction, g3_binding];
}

class Workout_lunges extends SvelteComponentDev {
	constructor(options) {
		super(options);

		init(this, options, instance$j, create_fragment$j, safe_not_equal, {
			direction: 3,
			isPaused: 1,
			rootElement: 0
		});

		dispatch_dev("SvelteRegisterComponent", {
			component: this,
			tagName: "Workout_lunges",
			options,
			id: create_fragment$j.name
		});

		const { ctx } = this.$$;
		const props = options.props || {};

		if (/*rootElement*/ ctx[0] === undefined && !('rootElement' in props)) {
			console.warn("<Workout_lunges> was created without expected prop 'rootElement'");
		}
	}

	get direction() {
		throw new Error("<Workout_lunges>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
	}

	set direction(value) {
		throw new Error("<Workout_lunges>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
	}

	get isPaused() {
		throw new Error("<Workout_lunges>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
	}

	set isPaused(value) {
		throw new Error("<Workout_lunges>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
	}

	get rootElement() {
		throw new Error("<Workout_lunges>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
	}

	set rootElement(value) {
		throw new Error("<Workout_lunges>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
	}
}

var workoutLunges = /*#__PURE__*/Object.freeze({
    __proto__: null,
    'default': Workout_lunges
});

/* src/workouts/workout-prisoners.svelte generated by Svelte v3.49.0 */

const file$i = "src/workouts/workout-prisoners.svelte";

// (121:4) {#if isPaused}
function create_if_block$i(ctx) {
	let svg;
	let path;

	const block = {
		c: function create() {
			svg = svg_element("svg");
			path = svg_element("path");
			attr_dev(path, "d", "M10 24h-6v-24h6v24zm10 0h-6v-24h6v24zm-11-23h-4v22h4v-22zm10 0h-4v22h4v-22z");
			add_location(path, file$i, 121, 133, 6629);
			attr_dev(svg, "viewBox", "-6 -5 36 36");
			attr_dev(svg, "width", "100%");
			attr_dev(svg, "height", "100%");
			attr_dev(svg, "xmlns", "http://www.w3.org/2000/svg");
			attr_dev(svg, "fill-rule", "evenodd");
			attr_dev(svg, "clip-rule", "evenodd");
			add_location(svg, file$i, 121, 4, 6500);
		},
		m: function mount(target, anchor) {
			insert_dev(target, svg, anchor);
			append_dev(svg, path);
		},
		d: function destroy(detaching) {
			if (detaching) detach_dev(svg);
		}
	};

	dispatch_dev("SvelteRegisterBlock", {
		block,
		id: create_if_block$i.name,
		type: "if",
		source: "(121:4) {#if isPaused}",
		ctx
	});

	return block;
}

function create_fragment$i(ctx) {
	let svg;
	let t;
	let g3;
	let g2;
	let g0;
	let path0;
	let path1;
	let path2;
	let path3;
	let path4;
	let path5;
	let path6;
	let path7;
	let path8;
	let path9;
	let g1;
	let path10;
	let path11;
	let path12;
	let path13;
	let path14;
	let path15;
	let path16;
	let if_block = /*isPaused*/ ctx[1] && create_if_block$i(ctx);

	const block = {
		c: function create() {
			svg = svg_element("svg");
			t = text(">\n");
			g3 = svg_element("g");
			g2 = svg_element("g");
			g0 = svg_element("g");
			path0 = svg_element("path");
			path1 = svg_element("path");
			path2 = svg_element("path");
			path3 = svg_element("path");
			path4 = svg_element("path");
			path5 = svg_element("path");
			path6 = svg_element("path");
			path7 = svg_element("path");
			path8 = svg_element("path");
			path9 = svg_element("path");
			g1 = svg_element("g");
			path10 = svg_element("path");
			path11 = svg_element("path");
			path12 = svg_element("path");
			path13 = svg_element("path");
			path14 = svg_element("path");
			path15 = svg_element("path");
			path16 = svg_element("path");
			if (if_block) if_block.c();
			attr_dev(path0, "fill", "var(--flesh)");
			attr_dev(path0, "d", "M801 81c-5 5-9 10-15 14-5 3-9 3-14 3-13-3-26-5-39-4-2 0-5 1-6-2-2-7-8-12-14-17-1-1-2-3-1-5 3-5 2-10-1-16-2-4-2-8-2-13 5-1 9 4 15 3l-7-7-5-9a55 55 0 0 0-3-5 3 3 0 0 0-2-2c-10 0-14 5-9 14v2c-8 0-8 0-9-8 0-2-1-2-3-3-5-3-11-2-16-5a83 83 0 0 1 31-4c4 1 7-1 9-5s5-10 12-8c1 1 2 0 3-1 4-4 9-4 14-2a13 13 0 0 0 6 1 7 7 0 0 1 7 3 14 14 0 0 0 7 5 4 4 0 0 1 3 4c1 2 3 4 2 6-3 8 1 12 7 15l12 7c9 6 12 17 16 27 0 1 0 3 2 4Z");
			add_location(path0, file$i, 51, 6, 1031);
			attr_dev(path1, "fill", "var(--hair)");
			attr_dev(path1, "d", "m58 127-16 14c-8 10-8 14-2 25l1 2c6 10 5 12-7 13-4 0-8-1-11-4 1-4-2-4-6-4-1-4-3-7-8-8a7 7 0 0 0-3-7l-1-1c4-6 2-11 0-16v-14l1-2v-5l-1-6c2-2 2-3 0-4-3-5-2-12-5-17V80c8-5 16-4 24-3 9 0 17 4 25 8l6 3c-1 3-4 2-6 2-7 0-10 3-11 10-1 10 7 21 16 25l4 2Z");
			add_location(path1, file$i, 55, 6, 1503);
			attr_dev(path2, "fill", "var(--shirt)");
			attr_dev(path2, "d", "M709 41c0 5 0 9 2 13 3 6 4 11 1 16-1 2 0 4 1 5 6 5 12 10 14 17 1 3 4 2 6 2a22 22 0 0 1 2 4c2 8 0 10-9 11h-15c-17-2-29 8-42 17-15 10-29 23-46 31-9 4-19 5-29 7a57 57 0 0 0-15 4c-6 3-12 4-18 4-23 2-46 0-68-3-6 0-8-3-10-8 0-1 0-3-2-3-4-18-4-37-3-56l-2-8c-1-7-4-14-2-21 3-5 9-7 13-10 2 0 4 0 5 2 1 4 4 5 8 5 6 0 14 1 18-6a3 3 0 0 1 2-1c10-1 19-6 28-8 14-2 25-10 36-18 10-7 19-14 30-18 8-3 16-5 24-4a291 291 0 0 1 32 6c5 4 11 2 16 5 2 1 3 1 3 3 1 8 1 8 9 8l11 4Z");
			add_location(path2, file$i, 59, 6, 1808);
			attr_dev(path3, "fill", "var(--flesh)");
			attr_dev(path3, "d", "m58 127-4-2c-9-4-17-15-16-25 1-7 4-10 11-10 2 0 5 1 6-2 6-1 10 1 15 2a21 21 0 0 0 7 1c7 3 15 4 22 5 6 1 13 3 19 1a2 2 0 0 0 3 1h36c-11-4-22-8-33-7-9-3-14-9-14-17 0-9 4-13 12-13 2 0 4 1 5-1 10 4 21 5 31 7 20 3 41 3 61 7 8 2 15 6 22 9l25 13c13 5 26 2 38 0l16-5 7 1c1 2-3 4-2 6 0 4-2 5-5 6-7 0-9 5-10 11a57 57 0 0 0-2 13c0 14 4 28 8 42-11 2-21 1-32 0-11-2-21-3-31-2-13 2-24-1-35-6-13-6-28-9-42-11-22-3-43-11-64-17l-8-2a112 112 0 0 0-22-5c-8-1-16-2-24 0Z");
			add_location(path3, file$i, 63, 6, 2326);
			attr_dev(path4, "fill", "var(--pants)");
			attr_dev(path4, "d", "M316 170c-4-14-8-28-8-42a57 57 0 0 1 2-13c1-5 3-11 10-11 3-1 5-2 5-6-1-2 3-4 2-6 6-5 13-6 20-7a214 214 0 0 1 24-5 74 74 0 0 0 27-8c17-10 35-12 54-9a48 48 0 0 1 22 10c-2 7 1 14 2 21l2 8c-1 19-1 38 3 56a77 77 0 0 0-21 9c-13 8-26 11-41 10l-54-2-43-2-6-3Z");
			add_location(path4, file$i, 67, 6, 2838);
			attr_dev(path5, "fill", "var(--hair)");
			attr_dev(path5, "d", "M118 97c-6 2-13 0-19-1-7-1-15-2-22-5 2-11 0-21 0-31 0-5-1-10 1-13 4-6 9-1 13-2 14 0 25 7 36 15-1 2-3 1-5 1-8 0-12 4-12 13 0 8 5 14 14 17 0 4-4 4-6 6ZM783 42l-12-7c-6-3-10-7-7-15 1-2-1-4-2-6 2-1 4 1 6 2a44 44 0 0 1 15 23v1Z");
			add_location(path5, file$i, 71, 6, 3151);
			attr_dev(path6, "fill", "var(--flesh)");
			attr_dev(path6, "d", "M783 40v-1 1Z");
			add_location(path6, file$i, 75, 6, 3434);
			attr_dev(path7, "fill", "var(--hair)");
			attr_dev(path7, "d", "M82 127a112 112 0 0 1 22 5c0 4 3 8-3 10s-11 0-14-4a40 40 0 0 1-5-11Z");
			add_location(path7, file$i, 76, 6, 3487);
			attr_dev(path8, "fill", "var(--pants)");
			attr_dev(path8, "d", "M5 141c1 5 4 10 0 16v-16ZM9 165c5 1 7 4 8 8a25 25 0 0 1-8-8ZM17 173c4 0 7 0 6 4a12 12 0 0 1-6-4ZM6 158a7 7 0 0 1 3 7c-2-2-3-4-3-7ZM5 110c2 1 2 2 0 4a4 4 0 0 1 0-4ZM6 120v2ZM6 125v2Z");
			add_location(path8, file$i, 80, 6, 3616);
			attr_dev(path9, "fill", "var(--hair)");
			attr_dev(path9, "d", "m709 41-11-4v-2c-5-9-1-14 9-13a3 3 0 0 1 2 1 55 55 0 0 1 3 5l5 9 7 7c-6 1-10-4-15-3Z");
			add_location(path9, file$i, 84, 6, 3859);
			attr_dev(g0, "id", "prisoners-2");
			attr_dev(g0, "class", "svelte-pbhnt5");
			add_location(g0, file$i, 50, 4, 1004);
			attr_dev(path10, "fill", "var(--hair)");
			attr_dev(path10, "d", "M0 79c10-4 20-4 30-2 9 2 17 6 25 10-1 3-4 2-6 2-7 1-9 3-11 9a22 22 0 0 0 2 12c3 8 10 13 18 16l-15 14c-9 11-10 14-2 26v2c6 9 5 10-6 12a16 16 0 0 1-12-3 78 78 0 0 1-13-11c-6-8-6-17-5-25 2-17-1-33-4-50H0Z");
			add_location(path10, file$i, 90, 6, 4038);
			attr_dev(path11, "fill", "var(--shirt)");
			attr_dev(path11, "d", "m473 71 8-2c4-2 9-3 11 3 2 4 6 5 10 5 5 1 11 1 15-3l3-2c6 3 11-1 17-2l51-11 31-7c23-3 44-4 64 8a8 8 0 0 0 2 0c3 3 5 6 9 8 3 1 2 4 1 5-2 6 0 10 6 10l10 8c-3 2-2 5-2 8 0 7 0 14-5 20-3 3-1 8 1 9 5 3 4 8 5 12s2 7 6 9c-1 13-2 14-15 11l-19-7h-9c-26 2-50 14-75 19-8 2-16 2-24 0-14-2-27-2-40-1-15 2-30 2-45 2-6 0-9-4-12-8a56 56 0 0 1-3-6c-6-16-6-33-4-50a94 94 0 0 0 0-24c0-5 0-9 3-14Z");
			add_location(path11, file$i, 94, 6, 4300);
			attr_dev(path12, "fill", "var(--flesh)");
			attr_dev(path12, "d", "M58 126c-8-3-15-8-18-16a22 22 0 0 1-2-12c2-6 4-8 11-9 2 0 5 1 6-2 6 0 12 2 17 3h5l4 2 18 3c6 1 13 3 19 1l3 1c12 2 24 0 36 0a245 245 0 0 0-24-7c-3-1-6-1-9 1l-5-3a18 18 0 0 1-7-23c2-4 4-6 8-5 3 0 5 2 7-1 10 4 20 4 30 7a204 204 0 0 0 33 5l19 1c8 0 17 2 25 7l30 15c11 6 23 5 34 2l27-7h4c-2 3-4 5-4 8 0 5-2 6-6 6-5 1-8 4-9 9a84 84 0 0 0-2 15c0 15 4 29 8 42-13 3-27 1-40-1a93 93 0 0 0-19 0c-16 1-31-3-46-9-10-5-21-7-33-8s-22-5-33-8l-41-12a174 174 0 0 0-22-5c-8-1-16-2-24 0Z");
			add_location(path12, file$i, 98, 6, 4738);
			attr_dev(path13, "fill", "var(--pants)");
			attr_dev(path13, "d", "M316 169c-4-13-8-27-8-42a84 84 0 0 1 2-15c1-5 4-8 9-9 4 0 6-2 6-6 0-3 2-5 4-8 10-5 21-6 32-8 16-2 31-7 45-14 17-8 36-8 54-3a36 36 0 0 1 13 7c-3 5-4 9-3 14a94 94 0 0 1 0 24c-2 17-2 34 4 50l-17 8c-12 7-24 10-38 9l-95-4a10 10 0 0 1-8-3Z");
			add_location(path13, file$i, 102, 6, 5267);
			attr_dev(path14, "fill", "var(--flesh)");
			attr_dev(path14, "d", "M701 83c-6 0-8-4-6-10 1-1 2-4-1-5-4-2-6-5-9-8 7 0 14 2 20 3 6 5 11 5 15 1 2-3 7-6 8-5 6 3 12-2 17 1 9 4 18 8 22 19 3 4 3 8 0 13-2 3-1 6 1 9a133 133 0 0 0 12 15c7 10 6 22 7 34a10 10 0 0 1-7 11l-16 6c-3 1-6 0-9-1-11-5-22-12-34-16a12 12 0 0 0-5-1c-4-2-4-5-6-9s1-10-5-12c-2-1-4-6-1-9 5-6 5-13 5-20 0-3-1-6 2-8l12 8h1c-6-8-6-17-8-25 0-1 0-3-2-2-4 1-8-2-12 0l-1 2v9Z");
			add_location(path14, file$i, 106, 6, 5562);
			attr_dev(path15, "fill", "var(--hair)");
			attr_dev(path15, "d", "M118 96c-6 2-13 0-19-1l-18-3-4-2a81 81 0 0 0 0-23 79 79 0 0 1 0-15c1-8 1-8 10-8 15 0 28 7 40 15-2 3-4 1-7 1-4-1-7 1-8 5a18 18 0 0 0 7 23l5 3c0 3-4 3-6 5ZM780 116a133 133 0 0 1-12-15c-2-3-3-6-1-9 3-5 3-9 0-13 8 6 12 15 13 24a34 34 0 0 1 0 13ZM82 126a174 174 0 0 1 22 5c0 4 3 8-3 10s-11 1-14-4l-5-11Z");
			add_location(path15, file$i, 110, 6, 5984);
			attr_dev(path16, "fill", "var(--hair)");
			attr_dev(path16, "d", "M701 83v-9l1-2c4-2 8 1 12 0 1-1 2 1 2 2 2 8 2 17 8 25h-1l-12-8Z");
			add_location(path16, file$i, 114, 6, 6343);
			attr_dev(g1, "id", "prisoners-1");
			attr_dev(g1, "class", "svelte-pbhnt5");
			add_location(g1, file$i, 89, 4, 4011);
			attr_dev(g2, "class", "shapes svelte-pbhnt5");
			add_location(g2, file$i, 49, 2, 957);
			attr_dev(g3, "class", "svelte-pbhnt5");
			toggle_class(g3, "paused", /*isPaused*/ ctx[1]);
			toggle_class(g3, "flip", /*flipsvg*/ ctx[2]);
			add_location(g3, file$i, 48, 0, 906);
			attr_dev(svg, "xmlns", "http://www.w3.org/2000/svg");
			attr_dev(svg, "viewBox", "0 0 801.2 180.8");
			attr_dev(svg, "height", "100%");
			attr_dev(svg, "width", "100%");
			attr_dev(svg, "class", "svelte-pbhnt5");
			add_location(svg, file$i, 47, 0, 811);
		},
		l: function claim(nodes) {
			throw new Error("options.hydrate only works if the component was compiled with the `hydratable: true` option");
		},
		m: function mount(target, anchor) {
			insert_dev(target, svg, anchor);
			append_dev(svg, t);
			append_dev(svg, g3);
			append_dev(g3, g2);
			append_dev(g2, g0);
			append_dev(g0, path0);
			append_dev(g0, path1);
			append_dev(g0, path2);
			append_dev(g0, path3);
			append_dev(g0, path4);
			append_dev(g0, path5);
			append_dev(g0, path6);
			append_dev(g0, path7);
			append_dev(g0, path8);
			append_dev(g0, path9);
			append_dev(g2, g1);
			append_dev(g1, path10);
			append_dev(g1, path11);
			append_dev(g1, path12);
			append_dev(g1, path13);
			append_dev(g1, path14);
			append_dev(g1, path15);
			append_dev(g1, path16);
			/*g2_binding*/ ctx[4](g2);
			if (if_block) if_block.m(g3, null);
		},
		p: function update(ctx, [dirty]) {
			if (/*isPaused*/ ctx[1]) {
				if (if_block) ; else {
					if_block = create_if_block$i(ctx);
					if_block.c();
					if_block.m(g3, null);
				}
			} else if (if_block) {
				if_block.d(1);
				if_block = null;
			}

			if (dirty & /*isPaused*/ 2) {
				toggle_class(g3, "paused", /*isPaused*/ ctx[1]);
			}

			if (dirty & /*flipsvg*/ 4) {
				toggle_class(g3, "flip", /*flipsvg*/ ctx[2]);
			}
		},
		i: noop,
		o: noop,
		d: function destroy(detaching) {
			if (detaching) detach_dev(svg);
			/*g2_binding*/ ctx[4](null);
			if (if_block) if_block.d();
		}
	};

	dispatch_dev("SvelteRegisterBlock", {
		block,
		id: create_fragment$i.name,
		type: "component",
		source: "",
		ctx
	});

	return block;
}

function instance$i($$self, $$props, $$invalidate) {
	let { $$slots: slots = {}, $$scope } = $$props;
	validate_slots('Workout_prisoners', slots, []);
	let { direction = "right" } = $$props;
	let { isPaused = false } = $$props;
	let { rootElement } = $$props;
	let flipsvg = false;

	if (direction == "left") {
		flipsvg = true;
	}

	const writable_props = ['direction', 'isPaused', 'rootElement'];

	Object.keys($$props).forEach(key => {
		if (!~writable_props.indexOf(key) && key.slice(0, 2) !== '$$' && key !== 'slot') console.warn(`<Workout_prisoners> was created with unknown prop '${key}'`);
	});

	function g2_binding($$value) {
		binding_callbacks[$$value ? 'unshift' : 'push'](() => {
			rootElement = $$value;
			$$invalidate(0, rootElement);
		});
	}

	$$self.$$set = $$props => {
		if ('direction' in $$props) $$invalidate(3, direction = $$props.direction);
		if ('isPaused' in $$props) $$invalidate(1, isPaused = $$props.isPaused);
		if ('rootElement' in $$props) $$invalidate(0, rootElement = $$props.rootElement);
	};

	$$self.$capture_state = () => ({
		direction,
		isPaused,
		rootElement,
		flipsvg
	});

	$$self.$inject_state = $$props => {
		if ('direction' in $$props) $$invalidate(3, direction = $$props.direction);
		if ('isPaused' in $$props) $$invalidate(1, isPaused = $$props.isPaused);
		if ('rootElement' in $$props) $$invalidate(0, rootElement = $$props.rootElement);
		if ('flipsvg' in $$props) $$invalidate(2, flipsvg = $$props.flipsvg);
	};

	if ($$props && "$$inject" in $$props) {
		$$self.$inject_state($$props.$$inject);
	}

	return [rootElement, isPaused, flipsvg, direction, g2_binding];
}

class Workout_prisoners extends SvelteComponentDev {
	constructor(options) {
		super(options);

		init(this, options, instance$i, create_fragment$i, safe_not_equal, {
			direction: 3,
			isPaused: 1,
			rootElement: 0
		});

		dispatch_dev("SvelteRegisterComponent", {
			component: this,
			tagName: "Workout_prisoners",
			options,
			id: create_fragment$i.name
		});

		const { ctx } = this.$$;
		const props = options.props || {};

		if (/*rootElement*/ ctx[0] === undefined && !('rootElement' in props)) {
			console.warn("<Workout_prisoners> was created without expected prop 'rootElement'");
		}
	}

	get direction() {
		throw new Error("<Workout_prisoners>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
	}

	set direction(value) {
		throw new Error("<Workout_prisoners>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
	}

	get isPaused() {
		throw new Error("<Workout_prisoners>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
	}

	set isPaused(value) {
		throw new Error("<Workout_prisoners>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
	}

	get rootElement() {
		throw new Error("<Workout_prisoners>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
	}

	set rootElement(value) {
		throw new Error("<Workout_prisoners>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
	}
}

var workoutPrisoners = /*#__PURE__*/Object.freeze({
    __proto__: null,
    'default': Workout_prisoners
});

/* src/workouts/workout-pushuprotate.svelte generated by Svelte v3.49.0 */

const file$h = "src/workouts/workout-pushuprotate.svelte";

// (224:4) {#if isPaused}
function create_if_block$h(ctx) {
	let svg;
	let path;

	const block = {
		c: function create() {
			svg = svg_element("svg");
			path = svg_element("path");
			attr_dev(path, "d", "M10 24h-6v-24h6v24zm10 0h-6v-24h6v24zm-11-23h-4v22h4v-22zm10 0h-4v22h4v-22z");
			add_location(path, file$h, 224, 133, 12732);
			attr_dev(svg, "viewBox", "-6 -5 36 36");
			attr_dev(svg, "width", "100%");
			attr_dev(svg, "height", "100%");
			attr_dev(svg, "xmlns", "http://www.w3.org/2000/svg");
			attr_dev(svg, "fill-rule", "evenodd");
			attr_dev(svg, "clip-rule", "evenodd");
			add_location(svg, file$h, 224, 4, 12603);
		},
		m: function mount(target, anchor) {
			insert_dev(target, svg, anchor);
			append_dev(svg, path);
		},
		d: function destroy(detaching) {
			if (detaching) detach_dev(svg);
		}
	};

	dispatch_dev("SvelteRegisterBlock", {
		block,
		id: create_if_block$h.name,
		type: "if",
		source: "(224:4) {#if isPaused}",
		ctx
	});

	return block;
}

function create_fragment$h(ctx) {
	let svg;
	let t;
	let g5;
	let g4;
	let g0;
	let path0;
	let path1;
	let path2;
	let path3;
	let path4;
	let path5;
	let g1;
	let path6;
	let path7;
	let path8;
	let path9;
	let path10;
	let path11;
	let path12;
	let path13;
	let g2;
	let path14;
	let path15;
	let path16;
	let path17;
	let path18;
	let path19;
	let g3;
	let path20;
	let path21;
	let path22;
	let path23;
	let path24;
	let path25;
	let path26;
	let path27;
	let if_block = /*isPaused*/ ctx[1] && create_if_block$h(ctx);

	const block = {
		c: function create() {
			svg = svg_element("svg");
			t = text(">\n");
			g5 = svg_element("g");
			g4 = svg_element("g");
			g0 = svg_element("g");
			path0 = svg_element("path");
			path1 = svg_element("path");
			path2 = svg_element("path");
			path3 = svg_element("path");
			path4 = svg_element("path");
			path5 = svg_element("path");
			g1 = svg_element("g");
			path6 = svg_element("path");
			path7 = svg_element("path");
			path8 = svg_element("path");
			path9 = svg_element("path");
			path10 = svg_element("path");
			path11 = svg_element("path");
			path12 = svg_element("path");
			path13 = svg_element("path");
			g2 = svg_element("g");
			path14 = svg_element("path");
			path15 = svg_element("path");
			path16 = svg_element("path");
			path17 = svg_element("path");
			path18 = svg_element("path");
			path19 = svg_element("path");
			g3 = svg_element("g");
			path20 = svg_element("path");
			path21 = svg_element("path");
			path22 = svg_element("path");
			path23 = svg_element("path");
			path24 = svg_element("path");
			path25 = svg_element("path");
			path26 = svg_element("path");
			path27 = svg_element("path");
			if (if_block) if_block.c();
			attr_dev(path0, "fill", "var(--hair)");
			attr_dev(path0, "d", "M578 237a3 3 0 0 0-4 3c-1 19-17 18-30 22 1-5 4-9 9-12 6-3 7-8 2-13s-8-11-9-19c0-2-1-6-4-5-6 2-14-2-20 4-1 1-3 4-7 3 0-3 3-3 4-5 7-6 19-8 30-17 3-2 6 1 9 2 9 6 14 15 20 23ZM80 494c-8-5-16-9-21-18-1-2-4-6-2-8 3-3 6-8 12-7 7 3 13 0 19-4 4-3 9-1 13-1 3 5 7 11 0 16v3c-3 8-10 13-15 19Z");
			add_location(path0, file$h, 103, 6, 1739);
			attr_dev(path1, "fill", "var(--shirt)");
			attr_dev(path1, "d", "M499 281c0 13-4 26-6 39-1 7 2 15-3 21-6-4-14-2-20-5-11-6-9 2-10 8-3 0-6-2-6-6-1-8-5-9-12-5-14 7-28 12-43 15-7 2-9 8-15 11-7 3-14 5-21-2 7-6 7-12 3-19-5-10-11-20-18-29-9-15-18-30-24-47 30-18 60-36 93-48l2-1 7-2c8-2 13-5 7-14-4-5-1-9 3-13 6-9 13-16 21-22 3-3 4 0 5 2a50 50 0 0 0 12 16c5 13 13 26 15 41 0 6 0 13-3 19-9 15-3 34 13 41Z");
			add_location(path1, file$h, 107, 6, 2080);
			attr_dev(path2, "fill", "var(--pants)");
			attr_dev(path2, "d", "M324 262c5 17 15 32 24 47 7 9 13 19 18 29 4 7 4 13-3 19-11 11-25 18-40 23-17 6-32 15-43 29-4 4-7 4-11 0l-6-7c2-4 10-3 7-9-7-10-12-21-21-30 0-5 4-4 7-6 9-6 15-14 19-26l-32 13c-6 3-10 2-12-4 7-6 2-12-1-18l-16-27c12-10 28-14 43-17 20-2 38-12 58-15l9-1Z");
			add_location(path2, file$h, 111, 6, 2472);
			attr_dev(path3, "fill", "var(--flesh)");
			attr_dev(path3, "d", "m214 295 16 27c3 6 8 12 1 18l-9-2c-12 0-25 2-37-1-5-1-10 2-15 3-16 5-31 7-47 4-15-2-29 0-43 3-4-3-8-2-12-2-10-1-13-5-8-14l2-5c22 2 43-5 64-11 12-3 25-4 37-6 17-3 35-5 51-14ZM457 162c-8 6-15 13-21 22-6-2-4-8-7-11v-4c-2-6-3-13-7-19-9-29-9-58-12-88-1-13-11-23-14-35l-2-5a16 16 0 0 1-1-4c9 0 5-10 9-13l7 19c2-8 0-14-3-19 1-2 0-4 3-5 2 0 4 1 4 3 0 6 1 10 5 15V3c2-4 4-4 6 0 2 5 2 10 2 15 0 1-1 4 1 4 2 1 3-1 5-2l5-7a3 3 0 0 1 5 0v5c-6 7-7 17-13 24-3 4-4 10-2 16l4 22c5 28 13 56 26 82ZM499 281c-16-7-22-26-13-41 3-6 3-13 3-19 3 2-1 8 4 9 4 0 8-2 9-7 5-3 9-8 14-9l3 1c-1 2-4 2-3 5 3 1 5-2 6-3 6-6 14-2 20-4 3-1 4 3 4 5 1 8 5 13 9 19s4 10-2 13c-5 3-8 7-9 12-1 7-8 11-19 9-7-1-13 0-20 1-4 1-5 5-6 9Z");
			add_location(path3, file$h, 115, 6, 2783);
			attr_dev(path4, "fill", "var(--hair)");
			attr_dev(path4, "d", "M68 345c-10-1-13-5-8-14l2-5h-1c-1-3-3-2-5-1-11 0-22 0-33-5-7-3-16-3-23 3v7c7 10 16 17 28 19a67 67 0 0 1 26 9c4 3 7 3 11-1s9-8 15-10c-4-3-8-2-12-2Z");
			add_location(path4, file$h, 119, 6, 3535);
			attr_dev(path5, "fill", "var(--flesh)");
			attr_dev(path5, "d", "M249 363c9 9 14 20 21 30 3 6-5 5-7 9-18 8-38 14-54 29-9 9-21 14-33 18-24 9-49 13-71 25l-4 1v-3c7-5 3-11 0-16 1-3 3-3 6-4 16-4 29-13 41-23s26-17 41-20a21 21 0 0 0 11-7c14-17 32-28 49-39ZM460 344c1-6-1-14 10-8 6 3 14 1 20 5-4 12-3 23-1 35 3 11 0 22-1 34a262 262 0 0 0-1 37c0 9 5 12 14 12s18 0 27 4c3 1 7 2 6 7s-6 3-9 2l-8-2h-4c-7 14-17 1-25 2s-13-4-14-14l-9-69c-2-13 1-26-3-39 0-2 0-4-2-6Z");
			add_location(path5, file$h, 123, 6, 3742);
			attr_dev(g0, "id", "pushup-rotate-3");
			attr_dev(g0, "class", "svelte-1jt8wes");
			add_location(g0, file$h, 102, 4, 1708);
			attr_dev(path6, "fill", "var(--flesh)");
			attr_dev(path6, "d", "M556 238c-5-5-8-11-9-18-1-2-2-6-5-5-6 1-13-2-19 3-2 2-4 5-7 4 0-3 2-3 3-5l-2-1c-6 1-10 6-14 9-1 5-5 7-10 7-5-1-1-7-3-10 0 7 0 14-4 20-9 15-3 33 14 40 0-3 1-7 6-8 6-1 13-3 19-1 11 2 19-2 20-9 1-5 3-9 8-12 6-3 8-8 3-14Zm-49 23v1Z");
			add_location(path6, file$h, 129, 6, 4229);
			attr_dev(path7, "fill", "var(--hair)");
			attr_dev(path7, "d", "M83 315a9 9 0 0 0-7-2l-18 6a81 81 0 0 0-15 12 52 52 0 0 0 0 11 6 6 0 0 1 0 1 52 52 0 0 0 5 9 64 64 0 0 1 7 3h4l12-5a5 5 0 0 1 2-1l4-5h-3a5 5 0 0 0 0-5l-1-1a5 5 0 0 0 4-6l2-1 2-1a13 13 0 0 0 4-5 8 8 0 0 0-2-10Z");
			add_location(path7, file$h, 133, 6, 4518);
			attr_dev(path8, "fill", "var(--pants)");
			attr_dev(path8, "d", "M325 264c5 17 14 32 24 47l18 28c4 8 4 14-3 20-12 11-26 18-41 23-17 6-31 15-43 29-3 4-7 4-10 0l-6-8c1-3 10-2 6-8-6-10-12-21-20-30-1-5 4-5 6-6 9-6 6-10 15-18-11 5-17 0-27 5-6 3-10 2-13-4 7-6 3-12-1-18l-16-28c13-10 28-14 44-16 20-3 38-12 57-15 4-1 7-2 10-1Z");
			add_location(path8, file$h, 137, 6, 4788);
			attr_dev(path9, "fill", "var(--flesh)");
			attr_dev(path9, "d", "m230 324-16-28c-15 10-33 12-50 14l-38 7c-21 6-41 13-64 11l-1 5c-5 9-3 13 7 14 4 0 8-1 11 1h5c13-2 26-4 39-2 16 3 32 0 47-4 5-2 10-4 15-3 13 2 25 1 38 1 3 0 5 0 8 2 7-6 3-12-1-18ZM457 163c-7 7-15 14-21 22-5-1-3-7-6-10l-1-4c-1-7-3-13-6-19-9-29-9-59-12-88-2-13-11-23-14-35l-3-6a16 16 0 0 1 0-3c8 0 4-10 9-13l6 19c2-9 1-14-2-19 0-2 0-5 2-5 3-1 4 1 5 3 0 5 0 10 5 15V5c2-4 3-4 5 0 3 5 2 10 2 15 0 1 0 3 2 4s3-1 4-2l6-7a3 3 0 0 1 4 0c2 1 2 3 0 5-5 7-6 17-12 24-4 4-4 10-3 16l4 22c5 28 13 56 26 81Z");
			add_location(path9, file$h, 141, 6, 5104);
			attr_dev(path10, "fill", "var(--flesh)");
			attr_dev(path10, "d", "M250 365c8 9 14 20 20 30 4 6-5 5-6 8-19 9-39 15-54 30-10 9-22 14-34 18-23 8-48 13-71 25l-3 1v-3c-16 0-31-3-9-17 1-3 12-2 14-3 16-4 29-13 41-23s26-17 41-21a22 22 0 0 0 12-7c13-16 31-27 49-38ZM461 346c0-7-2-14 10-8 6 3 14 1 20 5-4 11-4 23-1 35 2 11-1 22-2 33a262 262 0 0 0-1 38c1 9 6 12 14 12 9 0 18 0 27 3 4 2 8 2 6 8-1 5-5 2-9 2l-8-2h-3c-7 14-17 1-26 2s-12-4-13-14l-10-69c-2-13 2-26-2-39l-2-6Z");
			add_location(path10, file$h, 145, 6, 5657);
			attr_dev(path11, "fill", "var(--hair)");
			attr_dev(path11, "d", "M559 202c-3-2-7-5-10-2-11 9-23 10-30 17l-3 3a28 28 0 0 0-15 17 5 5 0 0 1 1 3l1 12a29 29 0 0 0 1 7l2 2a4 4 0 0 1 3 3l13 1 18 2a22 22 0 0 0 15-6c10-2 19-5 20-20a3 3 0 0 1 3-2v-14c-5-8-10-18-19-23Z");
			add_location(path11, file$h, 149, 6, 6112);
			attr_dev(path12, "fill", "var(--shirt)");
			attr_dev(path12, "d", "M419 215ZM500 282h-1a5 5 0 0 0-1-2l-5-9a17 17 0 0 1-1-2c-2-10-2-19-5-28 3-6 3-12 3-18-3-15-10-28-15-41a49 49 0 0 1-12-16c-2-3-2-5-6-3-7 7-15 14-21 23-4 3-6 8-3 13 6 9 1 12-6 14l-8 2-1 1c-34 12-63 30-93 48 5 17 14 32 24 47l18 28c4 8 4 14-3 20 6 7 13 4 21 1 6-2 8-9 14-10 15-3 30-8 43-15 8-4 11-3 12 5 1 4 3 6 7 6 0-7-2-14 10-8 6 3 14 1 20 5 4-7 2-14 3-21 2-13 5-26 6-40Z");
			add_location(path12, file$h, 153, 6, 6367);
			attr_dev(path13, "fill", "var(--hair)");
			attr_dev(path13, "d", "M77 456c-3 2-5 6-7 9s-1 3-1 4c-1 5 0 9 1 14a7 7 0 0 1 0 1 5 5 0 0 1 1 1l1 3 4 5 5 3h5c6-6 12-12 16-19a7 7 0 0 0 0-1l-1-2a32 32 0 0 1-8-13 5 5 0 0 1 0-4c-1 0 7-2 4-4-8-5-16 1-20 3Z");
			add_location(path13, file$h, 157, 6, 6798);
			attr_dev(g1, "id", "pushup-rotate-4");
			attr_dev(g1, "class", "svelte-1jt8wes");
			add_location(g1, file$h, 128, 4, 4198);
			attr_dev(path14, "fill", "var(--flesh)");
			attr_dev(path14, "d", "M513 477c-7-1-13-3-21-3a51 51 0 0 1-20-1c-6-3-9-7-9-14 2-11 1-21 1-31l-1-11c0-3-1-4-3-4l-9-2c-9-1-14-7-14-16-1-13 1-25 2-38l2-31a17 17 0 0 1 1-5c5-2 9-3 14-2l-2 17c0 5 0 5 5 5l-5 26-4 20c0 6 2 9 9 10 2 0 3-1 3-3v-19c0-11 3-22 1-34a72 72 0 0 1 9 1c4 1 8 3 12-2 0 0 3-1 4 1s2 2 3 2h6l-3 4c-1 5-4 11-2 17 1 4 0 8-1 12l-6 35-3 16-2 23c-1 2 0 2 2 2l7-2h4c1 1 0 3-1 3-2 4 0 4 2 3a98 98 0 0 1 28 3c1 1 3 1 2 4l3 2c2 1 4 1 2 4v2c0 2-1 3-3 3l-10-2c3 2 2 4 1 5Z");
			add_location(path14, file$h, 163, 6, 7076);
			attr_dev(path15, "fill", "var(--hair)");
			attr_dev(path15, "d", "M102 415c1 0 2 0 1 2-5 7-3 14-2 21 1 1 1 2 3 2l18 6c3 2 4 8 1 10-13 7-26 11-40 7-8-3-13-7-15-16l-12-24-7-15v-4c5-6 11-11 20-10a15 15 0 0 0 8-1h2a11 11 0 0 1-3 8c-4 5-3 11 2 14a32 32 0 0 0 10 3c5 1 6 1 10-2a11 11 0 0 1 4-1Z");
			add_location(path15, file$h, 167, 6, 7589);
			attr_dev(path16, "d", "M459 341c-5 0-5 0-5-5l2-17c-5-1-9 0-14 2l-21 6c-10 4-21 7-31 12a8 8 0 0 1-7 1c-3-2-6 0-10 0a118 118 0 0 1-16 3c-2 0-3 0-3-3l-1-6c0-1 0-2-2-3a4 4 0 0 0 1-2 138 138 0 0 1-3-30 24 24 0 0 0-3-13c-5-8-6-16-4-25 4 0 7-1 11-3h7c4-3 8-4 13-3a4 4 0 0 0 3 0l39-14a133 133 0 0 1 67-1c6 2 12 4 18 9l5 2c3 0 4 1 4 4l1 2-2 17c-1 5-3 9-3 14 0 6 1 12-1 17-4 6-3 13-4 19l-3 19h-6c-1 0-2 0-3-2s-4-1-4-1c-4 5-8 3-12 2a72 72 0 0 0-9 0Z");
			attr_dev(path16, "fill", "var(--shirt)");
			add_location(path16, file$h, 171, 6, 7872);
			attr_dev(path17, "fill", "var(--pants)");
			attr_dev(path17, "d", "M342 261c-2 9-1 17 4 25a24 24 0 0 1 3 13 138 138 0 0 0 3 30 4 4 0 0 1-1 2c-2 1-4 3-5 6a24 24 0 0 1-11 8c-14 6-29 12-44 16a186 186 0 0 0-43 16c-3 2-5 0-7-2l-7-11c1-2 2-2 3-2s2-2 1-3c-4-4-6-11-9-16-3-6-7-12-9-19l1-3c15-7 27-18 41-26 11-7 23-13 34-22a60 60 0 0 1 15-10c9-4 19-6 29-3a13 13 0 0 1 2 1Z");
			add_location(path17, file$h, 175, 6, 8349);
			attr_dev(path18, "fill", "var(--flesh)");
			attr_dev(path18, "d", "M220 324c2 7 6 13 9 19 3 5 5 12 9 16 1 1 0 2-1 3s-2 0-3 2c-3 0-5 2-7 3a95 95 0 0 1-15 4l-21 4c-8 0-15 5-22 8a146 146 0 0 1-28 11c-5 2-11 2-16 5-3 1-6 1-8 4-6 2-9 6-14 10l-1 2a11 11 0 0 0-4 1c-4 3-5 3-10 2a32 32 0 0 1-10-3c-5-3-6-9-2-14a11 11 0 0 0 3-8c7-1 14-5 21-9 2-2 6-3 8-6a6 6 0 0 0 2 0l14-8c5-3 8-6 10-12a20 20 0 0 0 12-5 41 41 0 0 1 15-7 25 25 0 0 0 7-4c9-6 17-12 27-15 8-2 17-2 25-3ZM504 305c2-5 1-11 1-17 0-5 2-9 3-14l2-17c3 2 6 4 9 2 4-2 9-2 13-5 3-2 7-1 9 2s1 6-2 9a15 15 0 0 1-5 3c-4 1-4 3-1 6a13 13 0 0 0 11 4c5-1 10 1 13 5 1 2 3 3 5 1s3-2 5-1 3 4 2 6a21 21 0 0 1-2 9c-4 0-7 3-10 4l-7 2c-5 0-8 3-11 6-4 4-5 4-9 1h-3c-4 2-8 2-11-1a3 3 0 0 0-3 0c-5 1-7 0-9-5Z");
			add_location(path18, file$h, 179, 6, 8707);
			attr_dev(path19, "fill", "var(--hair)");
			attr_dev(path19, "d", "M567 298a21 21 0 0 0 2-9c1-2 0-4-2-6s-4 0-5 1-4 1-5-1c-3-4-8-6-13-5a13 13 0 0 1-11-4c-3-3-2-5 1-6a15 15 0 0 0 5-3c3-3 3-6 2-9s-6-4-9-2c-4 3-9 3-13 5-3 2-6 0-9-2l-1-3c-1-1 0-3 2-3a31 31 0 0 0 9-4c10-5 20-8 30-11 9-2 20 4 23 12l6 14a16 16 0 0 1 1 7 79 79 0 0 0 1 10l2 16c1 4-1 5-6 6l-10-3ZM134 358c-2 5-6 9-10 12l-14 8a6 6 0 0 1-2 0l-1-5c-2-8-2-8 5-11a30 30 0 0 1 11-3c3 0 6-1 8-3s3-1 3 2ZM117 403c2-3 5-3 8-4 5-3 11-3 16-5a3 3 0 0 1 0 1c-1 7-1 7 6 11 2 1 5 2 6 4 2 3 1 6-2 8-7 3-15 4-23 3a10 10 0 0 1-7-7l-4-11Z");
			add_location(path19, file$h, 183, 6, 9439);
			attr_dev(g2, "id", "pushup-rotate-1");
			attr_dev(g2, "class", "svelte-1jt8wes");
			add_location(g2, file$h, 162, 4, 7045);
			attr_dev(path20, "fill", "var(--hair)");
			attr_dev(path20, "d", "M625 422c-4 6-3 14-5 20-2 4 0 8-4 10s-8-2-11-5l4-8c1-4 2-8-5-6a3 3 0 0 1-4-2c-1-4-4-3-7-2a13 13 0 0 1-11 0 5 5 0 0 1-3-6c1-3 3-1 5-2h5c2 0 5-1 6-3 1-3 0-6-2-8-3-3-6-4-9-4-9 0-14-5-17-13 9-7 20-8 31-9 5-1 10-2 15 0a22 22 0 0 1 12 12ZM91 422l-7 18c-1 3-1 5 2 6a31 31 0 0 1 7 4c5 3 5 8 0 11-8 5-27 3-33-4-4-5-5-12-5-18 0-11 0-22-4-33l-3-4v-10c13-3 25-3 38-2a2 2 0 0 1 2 1c-8-1-12 3-14 10a20 20 0 0 1-2 3c-4 6-3 9 4 17 4 4 7 7 12 1h3Z");
			add_location(path20, file$h, 189, 6, 10048);
			attr_dev(path21, "d", "M390 432c-7 3-12 9-20 10-18 1-36 3-54 2-12-1-23 1-35 3-9 1-10 0-13-8l-2-8c0-15-1-29-3-44 3-4 7-3 11-4 3 0 6-1 6-4 1-3 3-3 5-3l22-4a216 216 0 0 0 50-14 50 50 0 0 1 29-3c6 1 11 2 15 6-4 8-6 17-3 25a22 22 0 0 1 0 12 273 273 0 0 0-8 34Z");
			attr_dev(path21, "fill", "var(--pants)");
			add_location(path21, file$h, 193, 6, 10539);
			attr_dev(path22, "fill", "var(--flesh)");
			attr_dev(path22, "d", "M263 387c2 15 3 29 3 44-17-4-33 0-50-3a40 40 0 0 1-7-1c-17-6-35-4-52-7-10-2-20-1-30-1-10-3-20-1-30 1l-6 2-3 1c-5 5-8 2-12-2-7-8-8-11-4-17a20 20 0 0 0 2-3c2-7 6-11 14-10h8a269 269 0 0 0 37-3c13 0 25-2 38-3 19-3 38-4 57 1 11 3 23 4 35 1Z");
			add_location(path22, file$h, 197, 6, 10833);
			attr_dev(path23, "fill", "var(--shirt)");
			attr_dev(path23, "d", "M390 432a273 273 0 0 1 8-34 22 22 0 0 0 0-12c-3-8-1-17 3-25 4 3 10 2 14 7a3 3 0 0 0 2 0c9-2 17 4 26 1 8 1 16-5 24-2l-4 3-5 15c-2 15 3 29 6 43l4 20a218 218 0 0 0-34 3c-13 2-24-4-36-4l-4-1c-4 0-5-2-4-6 0-3 2-5 0-8Z");
			add_location(path23, file$h, 201, 6, 11130);
			attr_dev(path24, "fill", "var(--flesh)");
			attr_dev(path24, "d", "m468 448-4-20c-3-14-8-28-6-43l5-15 4-3c-8-3-16 3-24 2l1-6c2-3 4-7 8-7 13 0 25 1 36 7-1 1-3 2 1 3 10 2 20 2 28 9 5 4 6 8 4 14l-4 10c-1 3 0 8-4 9-3 1-4 3-6 5-4 6-8 7-14 4-3-2-5-1-5 2l-2 12c-1 5-2 12 1 17 0 5 2 6 7 7a180 180 0 0 1 44 8c1 0 4 1 3 3 0 2-2 3-4 4-19 4-38 0-57 1-4 0-6-3-7-7a70 70 0 0 0-5-16Z");
			add_location(path24, file$h, 205, 6, 11404);
			attr_dev(path25, "fill", "var(--shirt)");
			attr_dev(path25, "d", "M487 449c-3-6-2-13-1-18l2-12c0-3 2-4 5-2 6 3 10 2 14-4 2-2 3-4 6-5 4-1 3-6 4-9l4-10c2-6 1-10-4-14-8-7-18-7-28-9-4-1-2-2-1-3 12 1 23 1 34 5a82 82 0 0 1 34 23 117 117 0 0 1-8 35 106 106 0 0 1-20 20c-7 5-16 5-25 4l-16-1Z");
			add_location(path25, file$h, 209, 6, 11767);
			attr_dev(path26, "fill", "var(--flesh)");
			attr_dev(path26, "d", "M548 426a117 117 0 0 0 8-35c3 3 7 2 11 3 3 7 8 12 17 12 3 1 6 1 9 4 2 2 3 5 2 8-1 2-4 3-6 3h-5c-2 0-4-1-5 2a5 5 0 0 0 3 6 13 13 0 0 0 11 0c3-1 6-2 7 2a3 3 0 0 0 4 2c7-2 6 2 5 6l-4 8c-10 3-21-1-30 7h-3c-4-4-10-2-14-6l-2-1c-10-1-7-8-6-14 1-2 2-6-2-7Z");
			add_location(path26, file$h, 213, 6, 12046);
			attr_dev(path27, "fill", "var(--hair)");
			attr_dev(path27, "d", "M133 388a269 269 0 0 1-37 3c0-6 1-8 8-8 10 0 20 1 29 5ZM97 420c10-2 20-4 30-1l-4 5c-6 9-6 10 3 15 2 2 4 3 3 6 0 2-2 3-4 4-9 3-18 2-26-2-4-1-5-4-4-8l2-19Z");
			add_location(path27, file$h, 217, 6, 12356);
			attr_dev(g3, "id", "pushup-rotate-2");
			attr_dev(g3, "class", "svelte-1jt8wes");
			add_location(g3, file$h, 188, 4, 10017);
			attr_dev(g4, "class", "shapes svelte-1jt8wes");
			add_location(g4, file$h, 101, 2, 1661);
			attr_dev(g5, "class", "svelte-1jt8wes");
			toggle_class(g5, "paused", /*isPaused*/ ctx[1]);
			toggle_class(g5, "flip", /*flipsvg*/ ctx[2]);
			add_location(g5, file$h, 100, 0, 1610);
			attr_dev(svg, "xmlns", "http://www.w3.org/2000/svg");
			attr_dev(svg, "viewBox", "0 0 625.3 495.8");
			attr_dev(svg, "height", "100%");
			attr_dev(svg, "width", "100%");
			attr_dev(svg, "class", "svelte-1jt8wes");
			add_location(svg, file$h, 99, 0, 1515);
		},
		l: function claim(nodes) {
			throw new Error("options.hydrate only works if the component was compiled with the `hydratable: true` option");
		},
		m: function mount(target, anchor) {
			insert_dev(target, svg, anchor);
			append_dev(svg, t);
			append_dev(svg, g5);
			append_dev(g5, g4);
			append_dev(g4, g0);
			append_dev(g0, path0);
			append_dev(g0, path1);
			append_dev(g0, path2);
			append_dev(g0, path3);
			append_dev(g0, path4);
			append_dev(g0, path5);
			append_dev(g4, g1);
			append_dev(g1, path6);
			append_dev(g1, path7);
			append_dev(g1, path8);
			append_dev(g1, path9);
			append_dev(g1, path10);
			append_dev(g1, path11);
			append_dev(g1, path12);
			append_dev(g1, path13);
			append_dev(g4, g2);
			append_dev(g2, path14);
			append_dev(g2, path15);
			append_dev(g2, path16);
			append_dev(g2, path17);
			append_dev(g2, path18);
			append_dev(g2, path19);
			append_dev(g4, g3);
			append_dev(g3, path20);
			append_dev(g3, path21);
			append_dev(g3, path22);
			append_dev(g3, path23);
			append_dev(g3, path24);
			append_dev(g3, path25);
			append_dev(g3, path26);
			append_dev(g3, path27);
			/*g4_binding*/ ctx[4](g4);
			if (if_block) if_block.m(g5, null);
		},
		p: function update(ctx, [dirty]) {
			if (/*isPaused*/ ctx[1]) {
				if (if_block) ; else {
					if_block = create_if_block$h(ctx);
					if_block.c();
					if_block.m(g5, null);
				}
			} else if (if_block) {
				if_block.d(1);
				if_block = null;
			}

			if (dirty & /*isPaused*/ 2) {
				toggle_class(g5, "paused", /*isPaused*/ ctx[1]);
			}

			if (dirty & /*flipsvg*/ 4) {
				toggle_class(g5, "flip", /*flipsvg*/ ctx[2]);
			}
		},
		i: noop,
		o: noop,
		d: function destroy(detaching) {
			if (detaching) detach_dev(svg);
			/*g4_binding*/ ctx[4](null);
			if (if_block) if_block.d();
		}
	};

	dispatch_dev("SvelteRegisterBlock", {
		block,
		id: create_fragment$h.name,
		type: "component",
		source: "",
		ctx
	});

	return block;
}

function instance$h($$self, $$props, $$invalidate) {
	let { $$slots: slots = {}, $$scope } = $$props;
	validate_slots('Workout_pushuprotate', slots, []);
	let { direction = "right" } = $$props;
	let { isPaused = false } = $$props;
	let { rootElement } = $$props;
	let flipsvg = false;

	if (direction == "left") {
		flipsvg = true;
	}

	const writable_props = ['direction', 'isPaused', 'rootElement'];

	Object.keys($$props).forEach(key => {
		if (!~writable_props.indexOf(key) && key.slice(0, 2) !== '$$' && key !== 'slot') console.warn(`<Workout_pushuprotate> was created with unknown prop '${key}'`);
	});

	function g4_binding($$value) {
		binding_callbacks[$$value ? 'unshift' : 'push'](() => {
			rootElement = $$value;
			$$invalidate(0, rootElement);
		});
	}

	$$self.$$set = $$props => {
		if ('direction' in $$props) $$invalidate(3, direction = $$props.direction);
		if ('isPaused' in $$props) $$invalidate(1, isPaused = $$props.isPaused);
		if ('rootElement' in $$props) $$invalidate(0, rootElement = $$props.rootElement);
	};

	$$self.$capture_state = () => ({
		direction,
		isPaused,
		rootElement,
		flipsvg
	});

	$$self.$inject_state = $$props => {
		if ('direction' in $$props) $$invalidate(3, direction = $$props.direction);
		if ('isPaused' in $$props) $$invalidate(1, isPaused = $$props.isPaused);
		if ('rootElement' in $$props) $$invalidate(0, rootElement = $$props.rootElement);
		if ('flipsvg' in $$props) $$invalidate(2, flipsvg = $$props.flipsvg);
	};

	if ($$props && "$$inject" in $$props) {
		$$self.$inject_state($$props.$$inject);
	}

	return [rootElement, isPaused, flipsvg, direction, g4_binding];
}

class Workout_pushuprotate extends SvelteComponentDev {
	constructor(options) {
		super(options);

		init(this, options, instance$h, create_fragment$h, safe_not_equal, {
			direction: 3,
			isPaused: 1,
			rootElement: 0
		});

		dispatch_dev("SvelteRegisterComponent", {
			component: this,
			tagName: "Workout_pushuprotate",
			options,
			id: create_fragment$h.name
		});

		const { ctx } = this.$$;
		const props = options.props || {};

		if (/*rootElement*/ ctx[0] === undefined && !('rootElement' in props)) {
			console.warn("<Workout_pushuprotate> was created without expected prop 'rootElement'");
		}
	}

	get direction() {
		throw new Error("<Workout_pushuprotate>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
	}

	set direction(value) {
		throw new Error("<Workout_pushuprotate>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
	}

	get isPaused() {
		throw new Error("<Workout_pushuprotate>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
	}

	set isPaused(value) {
		throw new Error("<Workout_pushuprotate>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
	}

	get rootElement() {
		throw new Error("<Workout_pushuprotate>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
	}

	set rootElement(value) {
		throw new Error("<Workout_pushuprotate>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
	}
}

var workoutPushuprotate = /*#__PURE__*/Object.freeze({
    __proto__: null,
    'default': Workout_pushuprotate
});

/* src/workouts/workout-pushupspider.svelte generated by Svelte v3.49.0 */

const file$g = "src/workouts/workout-pushupspider.svelte";

// (236:4) {#if isPaused}
function create_if_block$g(ctx) {
	let svg;
	let path;

	const block = {
		c: function create() {
			svg = svg_element("svg");
			path = svg_element("path");
			attr_dev(path, "d", "M10 24h-6v-24h6v24zm10 0h-6v-24h6v24zm-11-23h-4v22h4v-22zm10 0h-4v22h4v-22z");
			add_location(path, file$g, 236, 133, 14620);
			attr_dev(svg, "viewBox", "-6 -5 36 36");
			attr_dev(svg, "width", "100%");
			attr_dev(svg, "height", "100%");
			attr_dev(svg, "xmlns", "http://www.w3.org/2000/svg");
			attr_dev(svg, "fill-rule", "evenodd");
			attr_dev(svg, "clip-rule", "evenodd");
			add_location(svg, file$g, 236, 4, 14491);
		},
		m: function mount(target, anchor) {
			insert_dev(target, svg, anchor);
			append_dev(svg, path);
		},
		d: function destroy(detaching) {
			if (detaching) detach_dev(svg);
		}
	};

	dispatch_dev("SvelteRegisterBlock", {
		block,
		id: create_if_block$g.name,
		type: "if",
		source: "(236:4) {#if isPaused}",
		ctx
	});

	return block;
}

function create_fragment$g(ctx) {
	let svg;
	let t;
	let g5;
	let g4;
	let g0;
	let path0;
	let path1;
	let path2;
	let path3;
	let path4;
	let path5;
	let g1;
	let path6;
	let path7;
	let path8;
	let path9;
	let path10;
	let path11;
	let path12;
	let path13;
	let g2;
	let path14;
	let path15;
	let path16;
	let path17;
	let path18;
	let path19;
	let path20;
	let g3;
	let path21;
	let path22;
	let path23;
	let path24;
	let path25;
	let path26;
	let path27;
	let path28;
	let path29;
	let path30;
	let if_block = /*isPaused*/ ctx[1] && create_if_block$g(ctx);

	const block = {
		c: function create() {
			svg = svg_element("svg");
			t = text(">\n");
			g5 = svg_element("g");
			g4 = svg_element("g");
			g0 = svg_element("g");
			path0 = svg_element("path");
			path1 = svg_element("path");
			path2 = svg_element("path");
			path3 = svg_element("path");
			path4 = svg_element("path");
			path5 = svg_element("path");
			g1 = svg_element("g");
			path6 = svg_element("path");
			path7 = svg_element("path");
			path8 = svg_element("path");
			path9 = svg_element("path");
			path10 = svg_element("path");
			path11 = svg_element("path");
			path12 = svg_element("path");
			path13 = svg_element("path");
			g2 = svg_element("g");
			path14 = svg_element("path");
			path15 = svg_element("path");
			path16 = svg_element("path");
			path17 = svg_element("path");
			path18 = svg_element("path");
			path19 = svg_element("path");
			path20 = svg_element("path");
			g3 = svg_element("g");
			path21 = svg_element("path");
			path22 = svg_element("path");
			path23 = svg_element("path");
			path24 = svg_element("path");
			path25 = svg_element("path");
			path26 = svg_element("path");
			path27 = svg_element("path");
			path28 = svg_element("path");
			path29 = svg_element("path");
			path30 = svg_element("path");
			if (if_block) if_block.c();
			attr_dev(path0, "fill", "var(--flesh)");
			attr_dev(path0, "d", "M466 254c-7-1-14-4-21-3a51 51 0 0 1-20-2c-7-2-10-7-9-14v-41c0-3-1-4-4-4l-9-2c-9-2-13-7-14-16l2-38 3-31a17 17 0 0 1 0-5c5-2 10-4 14-3l-2 18c1 5 0 5 5 5l-4 25-4 20c-1 7 2 9 8 10 3 1 3 0 3-3l1-19c0-11 2-22 1-33a72 72 0 0 1 9 1c3 0 8 3 11-2 1-1 4-1 4 1l3 1 6 1-2 3c-2 6-5 11-2 18 1 3 0 8-1 11l-6 36c-1 5-3 10-3 16l-3 23c0 2 1 2 3 2l7-2h3v3c-3 3 0 3 2 3a98 98 0 0 1 27 3c2 0 3 1 3 3-1 2 2 2 3 3 2 1 4 1 2 4l-1 2c1 2 0 2-2 2-4 1-6-1-10-1 2 2 2 3 0 5Z");
			add_location(path0, file$g, 103, 6, 1711);
			attr_dev(path1, "fill", "var(--hair)");
			attr_dev(path1, "d", "M54 192c1 0 3 0 1 2-4 6-3 14-1 21 0 1 0 2 2 2l18 6c4 1 5 8 1 10-12 7-25 11-39 6-8-2-13-7-16-15-2-8-7-16-11-24l-8-15v-4c6-6 12-11 21-10a15 15 0 0 0 8-1h1a11 11 0 0 1-3 8c-4 5-3 11 3 14a32 32 0 0 0 10 3c4 1 5 1 9-2a12 12 0 0 1 4-1Z");
			add_location(path1, file$g, 107, 6, 2217);
			attr_dev(path2, "fill", "var(--shirt)");
			attr_dev(path2, "d", "M411 118c-5 0-4 0-5-5l2-18c-4-1-9 1-14 3l-21 6c-10 4-21 7-31 12a8 8 0 0 1-6 0c-4-1-7 0-10 1a120 120 0 0 1-16 3c-2 0-3-1-4-3l-1-7-1-2a4 4 0 0 0 0-3 138 138 0 0 1-2-29 24 24 0 0 0-4-13c-4-8-5-17-4-25 4 0 8-1 11-3 2-1 3-2 4 0 1 1 2 0 3-1 5-2 9-4 14-2a4 4 0 0 0 2-1l39-13 15-4c18-2 35-2 52 3 6 2 13 4 18 8l6 3c3 0 3 1 4 3v2c1 6 0 12-2 17l-2 15c0 6 0 12-2 17-3 6-3 13-4 19l-3 19-6-1-3-1c-1-2-3-2-4-1-3 5-8 2-12 2a72 72 0 0 0-8-1Z");
			add_location(path2, file$g, 111, 6, 2507);
			attr_dev(path3, "fill", "var(--pants)");
			attr_dev(path3, "d", "M294 38c-1 8-1 17 4 25a24 24 0 0 1 4 13 138 138 0 0 0 2 29 4 4 0 0 1 0 3c-3 1-4 3-6 5a24 24 0 0 1-11 9c-14 6-28 12-43 15a186 186 0 0 0-43 17c-3 1-5-1-7-3l-7-10c0-2 2-2 3-3l1-2c-5-5-6-11-9-17l-9-18c0-1-1-3 1-3 14-7 26-18 40-26 12-7 24-13 34-22a60 60 0 0 1 16-10c9-4 18-6 28-3a13 13 0 0 1 2 1Z");
			add_location(path3, file$g, 115, 6, 2993);
			attr_dev(path4, "fill", "var(--flesh)");
			attr_dev(path4, "d", "m173 101 9 18c3 6 4 12 9 17l-1 2c-1 1-3 1-3 3l-8 2a95 95 0 0 1-14 5c-7 1-14 3-22 3-8 1-14 6-21 9a147 147 0 0 1-29 11l-15 4c-3 2-6 2-8 5-6 2-10 6-14 10l-2 2a12 12 0 0 0-4 1c-4 3-5 3-9 2a32 32 0 0 1-10-3c-6-3-7-9-3-14a11 11 0 0 0 3-8c8-1 15-5 21-9 3-2 7-3 9-6a6 6 0 0 0 1 0l14-8c4-2 8-7 10-12a20 20 0 0 0 12-5 41 41 0 0 1 15-7 25 25 0 0 0 8-4c8-6 16-12 27-15 8-2 16-2 25-3ZM456 82c2-5 2-11 2-17l2-15c2-5 3-11 2-17 3 2 6 5 9 3 4-2 10-2 14-5 2-2 6-1 8 2s1 6-1 8a15 15 0 0 1-5 3c-4 2-5 4-2 7a13 13 0 0 0 11 4c6-1 10 1 13 5 2 2 4 3 5 1s3-2 6-1 2 4 2 6a21 21 0 0 1-3 8l-10 5-6 2c-5-1-8 2-11 6-4 4-6 4-10 0h-3c-3 2-7 2-11 0a3 3 0 0 0-3-1c-5 2-6 1-9-4Z");
			add_location(path4, file$g, 119, 6, 3346);
			attr_dev(path5, "fill", "var(--hair)");
			attr_dev(path5, "d", "M519 74a21 21 0 0 0 3-8c0-2 0-5-2-6s-4 0-6 1-3 1-4-1c-4-5-8-6-14-5a13 13 0 0 1-11-4c-3-3-2-5 2-7a15 15 0 0 0 5-3c2-2 3-6 1-8s-5-4-8-2c-4 3-9 3-14 5-3 2-6-1-9-3v-2c-1-2-1-3 1-3a32 32 0 0 0 10-4c9-5 19-8 29-11 9-2 20 4 24 12l5 14a16 16 0 0 1 2 7 79 79 0 0 0 1 10l2 16c1 3-2 5-6 5s-7-2-11-3ZM86 135c-2 5-5 9-10 12l-14 8a6 6 0 0 1-1 0l-2-5c-2-8-1-8 6-11a30 30 0 0 1 11-3c3 0 5-1 7-3s4-1 3 2ZM70 180c2-3 5-3 8-5l15-4c-1 8-1 8 6 11 3 2 5 2 7 5 1 3 1 6-3 8-7 3-14 4-22 3a10 10 0 0 1-8-7l-3-11Z");
			add_location(path5, file$g, 123, 6, 4051);
			attr_dev(g0, "id", "push-spider-1");
			attr_dev(g0, "class", "svelte-1q814q2");
			add_location(g0, file$g, 102, 4, 1682);
			attr_dev(path6, "fill", "var(--hair)");
			attr_dev(path6, "d", "M577 192c-4 6-3 14-6 20-1 4 1 8-4 10s-7-2-10-5c1-3 3-5 3-8 1-4 2-9-4-7a3 3 0 0 1-4-1c-2-4-5-3-7-2a13 13 0 0 1-11-1 5 5 0 0 1-3-5c0-3 3-2 5-2h5c2 0 5-1 6-3 1-3-1-6-3-8-2-3-6-4-9-4-9 0-14-5-17-13 9-7 21-8 32-9 5-1 10-2 15 0a22 22 0 0 1 12 12ZM43 192c-4 6-6 12-8 18-1 3 0 5 3 6a31 31 0 0 1 7 4c5 3 5 8-1 11-8 5-27 3-33-4-4-5-5-12-5-18 0-11 1-22-4-33 0-1 0-3-2-4v-10c12-3 25-3 37-2a2 2 0 0 1 2 1c-7-1-11 3-14 10a19 19 0 0 1-2 3c-3 6-3 9 4 17 4 4 8 7 13 1h3Z");
			add_location(path6, file$g, 129, 6, 4634);
			attr_dev(path7, "d", "M341 202c-7 3-12 9-20 10-18 1-35 3-53 2-12-1-24 1-35 3-9 1-11 0-13-8l-3-8c1-15 0-29-2-44 2-4 7-3 10-4s6-1 7-4 3-3 5-3l21-4a217 217 0 0 0 51-14 50 50 0 0 1 29-3c5 1 10 2 14 6-4 8-5 16-3 25a22 22 0 0 1 0 12 273 273 0 0 0-8 34Z");
			attr_dev(path7, "fill", "var(--pants)");
			add_location(path7, file$g, 133, 6, 5148);
			attr_dev(path8, "fill", "var(--flesh)");
			attr_dev(path8, "d", "M215 157c2 15 3 29 2 44-16-4-33 0-49-3a40 40 0 0 1-7-2c-17-5-35-3-52-6-10-2-20-2-30-2-10-2-20 0-30 2-2 0-4 0-6 2h-3c-5 6-9 3-12-1-7-8-8-11-5-17a19 19 0 0 0 2-3c3-7 7-11 14-10h9a270 270 0 0 0 37-3c12 0 25-2 37-4 19-2 38-3 58 2 11 3 23 4 35 1Z");
			add_location(path8, file$g, 137, 6, 5434);
			attr_dev(path9, "fill", "var(--shirt)");
			attr_dev(path9, "d", "M341 202a273 273 0 0 1 8-34 22 22 0 0 0 0-12c-2-9-1-17 3-25 5 2 11 2 15 7a3 3 0 0 0 2 0c9-2 17 4 26 1 8 1 15-5 24-2-1 2-4 0-4 3l-5 15c-2 15 2 29 5 43 2 7 4 13 4 20a218 218 0 0 0-34 3c-12 2-23-4-35-5h-4c-5 0-5-3-5-6 1-3 2-5 0-8Z");
			add_location(path9, file$g, 141, 6, 5737);
			attr_dev(path10, "fill", "var(--flesh)");
			attr_dev(path10, "d", "M419 218c0-7-2-13-4-20-3-14-7-28-5-43l5-15c0-2 3-1 4-3-9-3-16 3-24 2l1-6c2-3 3-7 8-7 12 0 25 1 36 7-1 1-3 2 1 3 9 2 19 2 27 9 5 4 7 8 5 14l-4 10c-1 3-1 8-5 9-3 1-4 3-5 5-4 6-9 7-15 4-2-2-4-1-4 2l-2 11c-1 6-3 13 1 18-1 5 2 6 7 7a181 181 0 0 1 43 7c2 1 4 2 4 4l-4 4c-19 4-38 0-57 1-4 0-7-3-8-7a71 71 0 0 0-5-16Z");
			add_location(path10, file$g, 145, 6, 6026);
			attr_dev(path11, "fill", "var(--shirt)");
			attr_dev(path11, "d", "M439 218c-4-5-2-12-1-18l2-11c0-3 2-4 4-2 6 3 11 2 15-4l5-5c4-1 4-6 5-9l4-10c2-6 0-10-5-14-8-7-18-7-27-9-4-1-2-2-1-3 11 0 22 1 33 5a82 82 0 0 1 34 23 117 117 0 0 1-7 35 106 106 0 0 1-21 20c-7 5-16 5-24 4l-16-2Z");
			add_location(path11, file$g, 149, 6, 6397);
			attr_dev(path12, "fill", "var(--flesh)");
			attr_dev(path12, "d", "M500 196a117 117 0 0 0 7-35c3 3 7 2 11 2 3 8 8 13 17 13 3 0 7 1 9 4 2 2 4 5 3 8-1 2-4 3-7 3h-5c-2 0-4-1-4 2a5 5 0 0 0 3 6 13 13 0 0 0 11 0c2-1 5-2 7 2a3 3 0 0 0 4 1c6-2 5 3 4 7 0 3-2 5-3 8-10 2-21-1-30 6l-3 1c-4-4-11-2-15-6l-1-1c-10-1-7-8-6-14 0-2 1-6-2-7Z");
			add_location(path12, file$g, 153, 6, 6668);
			attr_dev(path13, "fill", "var(--hair)");
			attr_dev(path13, "d", "M85 158a270 270 0 0 1-37 3c-1-6 1-8 7-8 11 0 20 0 30 5ZM49 190c10-2 20-4 30-2l-4 6c-6 8-6 9 3 15 2 1 3 3 3 6 0 2-2 3-4 4-9 3-18 2-27-2-3-1-4-4-4-8l3-19Z");
			add_location(path13, file$g, 157, 6, 6986);
			attr_dev(g1, "id", "push-spider-2");
			attr_dev(g1, "class", "svelte-1q814q2");
			add_location(g1, file$g, 128, 4, 4605);
			attr_dev(path14, "fill", "var(--hair)");
			attr_dev(path14, "d", "M441 25c2-4 6-6 9-7 9-5 19-7 29-8 7-1 16 5 17 13l2 14 1 1v5c-2 3-2 6-2 9 1 6-1 12-1 18 0 4-3 5-7 4a20 20 0 0 1-7-4c2-3 4-6 4-9 0-4-2-6-5-4-2 1-3 1-4-1-2-3-4-3-7-1a13 13 0 0 1-9 1 5 5 0 0 1-5-4c0-2 0-3 3-3a27 27 0 0 0 8-1c3-1 4-4 3-7a8 8 0 0 0-6-6 46 46 0 0 0-11 0 8 8 0 0 1-6-2 29 29 0 0 1-6-8Z");
			add_location(path14, file$g, 163, 6, 7235);
			attr_dev(path15, "fill", "var(--flesh)");
			attr_dev(path15, "d", "M235 149s-2 1 0 1c3 0 4-2 5-4 3-6 7-13 13-16 7-4 11-9 15-14l4-4c8-9 16-18 26-26 2-2 5-3 6-6 4-1 8-4 11-7 5-2 8-6 11-9l14-13c3-4 7-6 9-10a5 5 0 0 0 3-1 5 5 0 0 1 6 0 17 17 0 0 1 9 11c0 3 1 7 4 9s1 4-1 7l-14 12c-1 1-2 3-4 3-6 2-11 7-18 8a4 4 0 0 0-2 2c-2 5-6 7-10 11-7 6-15 11-24 16h24a20 20 0 0 0 10-2l10 26c3 6 5 12 6 19a37 37 0 0 1-1 12c0 4-3 7-7 8-9 4-18 4-27 1-8-3-17-4-26-5l-28-5a30 30 0 0 1-4-1c-6-2-10 0-12 6 0 1-2 2-3 1-1-2-3-2-5 0-1 1-2 0-2-1-1-1 0-3-2-3-1-1-2-2-1-4 2-2 2-4 0-6-4-3-4-8-2-12 1-3 4-4 7-4Zm67 1a120 120 0 0 1-16-21l-4-1c-9 5-17 11-22 20-2 3-1 4 2 4h14c9-2 17-5 26-2Z");
			add_location(path15, file$g, 167, 6, 7590);
			attr_dev(path16, "fill", "var(--pants)");
			attr_dev(path16, "d", "M301 56a153 153 0 0 0 3 24c-1 3-4 4-6 6-10 8-18 17-26 26l-4 4c-5-6-5-6-11-2l-26 18c-2 1-4 1-5-1l-8-6a82 82 0 0 1-11-15 49 49 0 0 0-10-12c-2-2-4-4-7-4 2-5 6-8 10-11l19-16c6-6 12-12 16-19 4-8 11-15 18-20a33 33 0 0 1 22-6c8 0 12 5 15 10 5 8 8 16 11 24Z");
			add_location(path16, file$g, 171, 6, 8241);
			attr_dev(path17, "fill", "var(--flesh)");
			attr_dev(path17, "d", "M190 94c3 0 5 2 7 4a49 49 0 0 1 10 12 82 82 0 0 0 11 15l-16 6a12 12 0 0 0-4 2c-7 8-17 12-27 14-13 3-25 8-37 14l-40 15a77 77 0 0 0-21 13 26 26 0 0 0-5 5c0 1-1 2 1 3-8 1-13-3-17-9-3-5-2-12 1-14a21 21 0 0 0 6-6c2 1 3 0 4-1 13-7 25-16 38-25 8-6 16-13 26-16l16-4c15-3 28-9 39-21 2-2 4-5 8-7ZM418 91c1 7-1 13-2 20a22 22 0 0 0 1 11c2 6 1 12 0 19l-6 28c-1 9-1 17 1 26 0 2 2 4 4 3 6 0 12 2 18 0 1-1 2 0 3 1l12 5a2 2 0 0 1 2 2 2 2 0 0 1-2 3 7 7 0 0 1-6 0c-3-2-6-2-10-2 0 1 2 3 0 4a4 4 0 0 1-4 1c-5-2-11-2-16-2a40 40 0 0 1-6 0c-3-1-6-2-6-6l-8-42c-1-12-3-24-1-35 1-8-1-15-2-22l-1-9 5-1a5 5 0 0 1 5-1c4 2 9 2 13 1 2 0 5-1 6-4ZM422 55a18 18 0 0 0-6-1c-2 0-3-1-2-3a172 172 0 0 1 14-24 7 7 0 0 0 1-3l12 1a29 29 0 0 0 6 8 8 8 0 0 0 6 2 46 46 0 0 1 11 0 8 8 0 0 1 6 6c1 3 0 6-3 7a27 27 0 0 1-8 1c-3 0-3 1-3 3a5 5 0 0 0 5 4 13 13 0 0 0 9-1c3-2 5-2 7 1 1 2 2 2 4 1 3-2 5 0 5 4 0 3-2 6-4 9l-6 2c-3 2-7 3-11 3-2-1-4 1-6 2a19 19 0 0 1-5 4c-1 1-3 1-4-1s-2-2-4-1-5 1-7-2l-5-1c-2 0-4-1-4-4a19 19 0 0 1-1-6c2-8 1-8-7-11Z");
			add_location(path17, file$g, 175, 6, 8552);
			attr_dev(path18, "fill", "var(--hair)");
			attr_dev(path18, "d", "M59 168a21 21 0 0 1-6 6c-3 2-4 9-1 14 4 6 9 10 17 9v2c-3 6-3 13-4 20l2 2a49 49 0 0 1 11 3c4 1 5 4 3 7a13 13 0 0 1-6 5c-9 5-18 5-28 2a9 9 0 0 1-5-4c-4-6-6-13-7-21-2-6-4-13-8-19a40 40 0 0 1-6-12c0-2 0-4 2-5 12-4 23-7 35-9a7 7 0 0 1 1 0ZM235 149c-3 0-6 1-7 4-2 4-2 9 2 12 2 2 2 4 0 6-1 2 0 3 1 4-5 0-9 3-12 8-3 7-7 14-8 21a13 13 0 0 1-4 7c-3 4-6 4-9 0-5-12-8-24-3-36l9-28a27 27 0 0 1 2-4c2-4 3-4 7-4a71 71 0 0 1 20 7 9 9 0 0 1 3 2c1 1 0 1-1 1Z");
			add_location(path18, file$g, 179, 6, 9607);
			attr_dev(path19, "fill", "var(--pants)");
			attr_dev(path19, "d", "m322 103 6 2 4 12a20 20 0 0 1-10 2h-24c9-6 17-10 24-16Z");
			add_location(path19, file$g, 183, 6, 10108);
			attr_dev(path20, "fill", "var(--shirt)");
			attr_dev(path20, "d", "M428 27a7 7 0 0 0 1-3l-6-5c-5-4-9-9-15-12-8-4-16-4-25-6a30 30 0 0 0-15 0 69 69 0 0 1-25 3 11 11 0 0 0-4 0c-11 4-21 8-33 10a14 14 0 0 0-2 1l-22 4c-2 1-5 1-7 3 8 0 12 5 15 10 5 8 8 16 11 24a153 153 0 0 0 3 24c4-1 8-4 11-7 5-2 8-6 11-9l14-13c3-4 7-6 9-10a5 5 0 0 0 3-1 5 5 0 0 1 6 0 17 17 0 0 1 9 11c0 3 1 7 4 9s1 4-1 7l-14 12c-1 1-2 3-4 3-6 2-11 7-18 8a4 4 0 0 0-2 2c-2 5-6 7-10 11l6 2c5 2 10 2 14-1l20-10a10 10 0 0 1 4-1 62 62 0 0 0 22-6 36 36 0 0 0 0 4c0 2-1 4 1 5l5-1a5 5 0 0 1 5-1c4 2 9 2 13 1 2 0 5-1 6-4 2-1 3-3 3-5l1-31a18 18 0 0 0-6-1c-2 0-3-1-2-3a172 172 0 0 1 14-24Z");
			add_location(path20, file$g, 187, 6, 10225);
			attr_dev(g2, "id", "push-spider-3");
			attr_dev(g2, "class", "svelte-1q814q2");
			add_location(g2, file$g, 162, 4, 7206);
			attr_dev(path21, "fill", "var(--flesh)");
			attr_dev(path21, "d", "M379 81c-11 8-29 6-41 14-10 8-28 14-39 20s-11 27-23 33c-10 4-23 10-21 24a5 5 0 0 0 8 3l29-20a4 4 0 0 0 2-5l31-16a250 250 0 0 0 31-20l29-25c5-4-1-13-6-8Z");
			add_location(path21, file$g, 193, 6, 10897);
			attr_dev(path22, "fill", "var(--hair)");
			attr_dev(path22, "d", "M437 33c2-4 6-5 10-7 9-4 18-6 28-8 7-1 16 6 17 13 1 5 1 10 3 14v7c-2 2-1 6-1 8l-2 19c1 3-3 5-7 4a20 20 0 0 1-6-4c1-3 3-6 3-10 1-4-2-5-5-4h-4c-2-4-4-3-7-2a13 13 0 0 1-9 2 5 5 0 0 1-4-5c-1-2 0-2 2-3a27 27 0 0 0 8-1c3-1 4-3 4-6a8 8 0 0 0-7-6 46 46 0 0 0-11-1 8 8 0 0 1-5-2 28 28 0 0 1-7-8Z");
			add_location(path22, file$g, 197, 6, 11111);
			attr_dev(path23, "fill", "var(--flesh)");
			attr_dev(path23, "d", "m197 95 6 4a41 41 0 0 1 8 10 67 67 0 0 0 9 12l-13 5a10 10 0 0 0-3 2 44 44 0 0 1-23 11c-10 2-20 7-30 11l-33 13a63 63 0 0 0-17 11 21 21 0 0 0-4 4v2c-6 1-10-2-14-7-2-4-2-10 1-12a17 17 0 0 0 5-5h3l31-21c7-5 14-11 22-13l13-3c13-3 24-8 32-18l7-6ZM352 144c-3-7-8-12-12-18l-19-23a22 22 0 0 1-9 6l-24 7v-1c-5 4-11 8-14 13v1a4 4 0 0 1 1 0 2 2 0 0 1 3 1 128 128 0 0 0 23 16c-10 0-18 5-26 9-4 3-10 4-15 5h-3l-3 1a119 119 0 0 1-18 4 6 6 0 0 1-1 0 4 4 0 0 1-3 1v-1c-3 1-6 3-6 7s1 9 5 11c3 2 4 3 3 6-1 2 0 3 1 4 5-5 13-7 18-9a6 6 0 0 1 1 0 15 15 0 0 1 5-1 30 30 0 0 0 4-1c11-1 21-1 31-3 9-1 19-3 29-3 10 1 19-2 27-9 3-3 5-6 5-10a40 40 0 0 0-3-13Z");
			add_location(path23, file$g, 201, 6, 11458);
			attr_dev(path24, "fill", "var(--hair)");
			attr_dev(path24, "d", "M89 156a17 17 0 0 1-5 5c-3 2-3 8-1 12 4 5 8 8 14 7l1 2c-3 5-3 10-4 16l2 2a40 40 0 0 1 9 2c3 2 4 4 2 6a10 10 0 0 1-4 4c-8 4-16 4-24 2a8 8 0 0 1-4-3c-3-6-5-11-6-17s-3-11-6-16a34 34 0 0 1-5-10c0-2 0-3 2-4 9-4 19-6 28-8a5 5 0 0 1 1 0Z");
			add_location(path24, file$g, 205, 6, 12151);
			attr_dev(path25, "fill", "var(--flesh)");
			attr_dev(path25, "d", "M418 64a18 18 0 0 0-6-1c-2-1-3-1-2-3a173 173 0 0 1 15-25 6 6 0 0 0 1-2h11a28 28 0 0 0 7 8 8 8 0 0 0 5 2 46 46 0 0 1 11 1 8 8 0 0 1 7 6c0 3-1 5-4 6a27 27 0 0 1-8 1c-2 1-3 1-2 3a5 5 0 0 0 4 5 13 13 0 0 0 9-2c3-1 5-2 7 1 1 2 2 2 4 1 3-1 6 0 5 4 0 4-2 7-3 10l-7 2-11 2c-2 0-4 1-5 3a19 19 0 0 1-5 4c-2 1-4 1-5-2-1-2-2-2-3-1-3 1-6 1-8-2l-4-1c-3 1-5-1-5-3a19 19 0 0 1 0-7c1-7 0-8-8-10Z");
			add_location(path25, file$g, 209, 6, 12442);
			attr_dev(path26, "fill", "var(--hair)");
			attr_dev(path26, "d", "M232 165c-3 1-6 3-6 7s1 9 5 11c3 2 4 3 3 6-1 2 0 3 2 4-5 2-8 6-10 12-1 8-3 16-2 25a14 14 0 0 1-1 8c-2 4-6 5-9 2-10-10-16-22-15-36l1-31a28 28 0 0 1 0-5c1-5 2-5 7-6a75 75 0 0 1 22 1 10 10 0 0 1 4 1l-1 1Z");
			add_location(path26, file$g, 213, 6, 12882);
			attr_dev(path27, "fill", "var(--pants)");
			attr_dev(path27, "d", "M342 113c0-3-1-6-5-5h-1a17 17 0 0 0-8-7c-6-3-11-4-14-10l-9-16a110 110 0 0 0-8-11c-3-8-5-16-10-23-4-6-8-11-15-11a33 33 0 0 0-23 7c-7 5-13 11-18 19-4 7-10 14-16 20l-18 16-11 10 7 5a49 49 0 0 1 10 11 82 82 0 0 0 11 15l8 7h5l27-17c6-4 6-4 10 1a5 5 0 0 0 1 0 37 37 0 0 0 4 6c3 4 7 5 12 5 11 1 23 0 33-4h1a40 40 0 0 0 27-11c3-2 2-5 0-7Z");
			add_location(path27, file$g, 217, 6, 13144);
			attr_dev(path28, "fill", "var(--pants)");
			attr_dev(path28, "d", "m319 112 6 2 3 11a20 20 0 0 1-10 3h-23l24-16Z");
			add_location(path28, file$g, 221, 6, 13536);
			attr_dev(path29, "fill", "var(--flesh)");
			attr_dev(path29, "d", "M418 87a3 3 0 0 1 1 0l-3 25a28 28 0 0 0 1 14c3 8 2 16 0 24-2 13-6 25-7 37-2 11-2 22 0 33 1 3 3 5 6 4 7 0 15 3 22 0 2-1 3 0 5 1 5 2 10 6 15 7a2 2 0 0 1 2 3 3 3 0 0 1-2 3c-3 0-5 1-7-1-4-2-8-2-13-1 0 1 2 3 0 5a5 5 0 0 1-5 0c-7-2-14-2-22-2a51 51 0 0 1-7 0c-4-1-7-3-8-7-2-18-8-36-10-54-1-15-3-30-1-46 1-9-1-18-2-28l-2-12h7a7 7 0 0 1 6-1c5 2 11 1 17 1 2-1 6-2 7-5Z");
			add_location(path29, file$g, 225, 6, 13643);
			attr_dev(path30, "fill", "var(--shirt)");
			attr_dev(path30, "d", "m431 46 2-17-1-3c0-2-1-3-4-3l-5-2c-6-5-12-7-18-9a133 133 0 0 0-67 1l-39 14a4 4 0 0 1-3 0c-5-1-9 0-13 3h-7l-9 3a5 5 0 0 1 0 3 108 108 0 0 0 2 20 4 4 0 0 1 4 2c8 18 21 32 34 45a87 87 0 0 0 17 3l20-7 21-6c5-2 9-3 14-2l-2 17c0 5 0 5 5 5h4a72 72 0 0 1 9 1c4 1 8 3 12-2 0 0 3-1 4 1s2 2 3 2h6l3-19c1-6 0-13 4-19 2-5 1-11 1-17 0-5 2-10 3-14Z");
			add_location(path30, file$g, 229, 6, 14063);
			attr_dev(g3, "id", "push-spider-4");
			attr_dev(g3, "class", "svelte-1q814q2");
			add_location(g3, file$g, 192, 4, 10868);
			attr_dev(g4, "class", "shapes svelte-1q814q2");
			add_location(g4, file$g, 101, 2, 1635);
			attr_dev(g5, "class", "svelte-1q814q2");
			toggle_class(g5, "paused", /*isPaused*/ ctx[1]);
			toggle_class(g5, "flip", /*flipsvg*/ ctx[2]);
			add_location(g5, file$g, 100, 0, 1584);
			attr_dev(svg, "xmlns", "http://www.w3.org/2000/svg");
			attr_dev(svg, "viewBox", "0 0 576.9 254");
			attr_dev(svg, "height", "100%");
			attr_dev(svg, "width", "100%");
			attr_dev(svg, "class", "svelte-1q814q2");
			add_location(svg, file$g, 99, 0, 1491);
		},
		l: function claim(nodes) {
			throw new Error("options.hydrate only works if the component was compiled with the `hydratable: true` option");
		},
		m: function mount(target, anchor) {
			insert_dev(target, svg, anchor);
			append_dev(svg, t);
			append_dev(svg, g5);
			append_dev(g5, g4);
			append_dev(g4, g0);
			append_dev(g0, path0);
			append_dev(g0, path1);
			append_dev(g0, path2);
			append_dev(g0, path3);
			append_dev(g0, path4);
			append_dev(g0, path5);
			append_dev(g4, g1);
			append_dev(g1, path6);
			append_dev(g1, path7);
			append_dev(g1, path8);
			append_dev(g1, path9);
			append_dev(g1, path10);
			append_dev(g1, path11);
			append_dev(g1, path12);
			append_dev(g1, path13);
			append_dev(g4, g2);
			append_dev(g2, path14);
			append_dev(g2, path15);
			append_dev(g2, path16);
			append_dev(g2, path17);
			append_dev(g2, path18);
			append_dev(g2, path19);
			append_dev(g2, path20);
			append_dev(g4, g3);
			append_dev(g3, path21);
			append_dev(g3, path22);
			append_dev(g3, path23);
			append_dev(g3, path24);
			append_dev(g3, path25);
			append_dev(g3, path26);
			append_dev(g3, path27);
			append_dev(g3, path28);
			append_dev(g3, path29);
			append_dev(g3, path30);
			/*g4_binding*/ ctx[4](g4);
			if (if_block) if_block.m(g5, null);
		},
		p: function update(ctx, [dirty]) {
			if (/*isPaused*/ ctx[1]) {
				if (if_block) ; else {
					if_block = create_if_block$g(ctx);
					if_block.c();
					if_block.m(g5, null);
				}
			} else if (if_block) {
				if_block.d(1);
				if_block = null;
			}

			if (dirty & /*isPaused*/ 2) {
				toggle_class(g5, "paused", /*isPaused*/ ctx[1]);
			}

			if (dirty & /*flipsvg*/ 4) {
				toggle_class(g5, "flip", /*flipsvg*/ ctx[2]);
			}
		},
		i: noop,
		o: noop,
		d: function destroy(detaching) {
			if (detaching) detach_dev(svg);
			/*g4_binding*/ ctx[4](null);
			if (if_block) if_block.d();
		}
	};

	dispatch_dev("SvelteRegisterBlock", {
		block,
		id: create_fragment$g.name,
		type: "component",
		source: "",
		ctx
	});

	return block;
}

function instance$g($$self, $$props, $$invalidate) {
	let { $$slots: slots = {}, $$scope } = $$props;
	validate_slots('Workout_pushupspider', slots, []);
	let { direction = "right" } = $$props;
	let { isPaused = false } = $$props;
	let { rootElement } = $$props;
	let flipsvg = false;

	if (direction == "left") {
		flipsvg = true;
	}

	const writable_props = ['direction', 'isPaused', 'rootElement'];

	Object.keys($$props).forEach(key => {
		if (!~writable_props.indexOf(key) && key.slice(0, 2) !== '$$' && key !== 'slot') console.warn(`<Workout_pushupspider> was created with unknown prop '${key}'`);
	});

	function g4_binding($$value) {
		binding_callbacks[$$value ? 'unshift' : 'push'](() => {
			rootElement = $$value;
			$$invalidate(0, rootElement);
		});
	}

	$$self.$$set = $$props => {
		if ('direction' in $$props) $$invalidate(3, direction = $$props.direction);
		if ('isPaused' in $$props) $$invalidate(1, isPaused = $$props.isPaused);
		if ('rootElement' in $$props) $$invalidate(0, rootElement = $$props.rootElement);
	};

	$$self.$capture_state = () => ({
		direction,
		isPaused,
		rootElement,
		flipsvg
	});

	$$self.$inject_state = $$props => {
		if ('direction' in $$props) $$invalidate(3, direction = $$props.direction);
		if ('isPaused' in $$props) $$invalidate(1, isPaused = $$props.isPaused);
		if ('rootElement' in $$props) $$invalidate(0, rootElement = $$props.rootElement);
		if ('flipsvg' in $$props) $$invalidate(2, flipsvg = $$props.flipsvg);
	};

	if ($$props && "$$inject" in $$props) {
		$$self.$inject_state($$props.$$inject);
	}

	return [rootElement, isPaused, flipsvg, direction, g4_binding];
}

class Workout_pushupspider extends SvelteComponentDev {
	constructor(options) {
		super(options);

		init(this, options, instance$g, create_fragment$g, safe_not_equal, {
			direction: 3,
			isPaused: 1,
			rootElement: 0
		});

		dispatch_dev("SvelteRegisterComponent", {
			component: this,
			tagName: "Workout_pushupspider",
			options,
			id: create_fragment$g.name
		});

		const { ctx } = this.$$;
		const props = options.props || {};

		if (/*rootElement*/ ctx[0] === undefined && !('rootElement' in props)) {
			console.warn("<Workout_pushupspider> was created without expected prop 'rootElement'");
		}
	}

	get direction() {
		throw new Error("<Workout_pushupspider>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
	}

	set direction(value) {
		throw new Error("<Workout_pushupspider>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
	}

	get isPaused() {
		throw new Error("<Workout_pushupspider>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
	}

	set isPaused(value) {
		throw new Error("<Workout_pushupspider>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
	}

	get rootElement() {
		throw new Error("<Workout_pushupspider>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
	}

	set rootElement(value) {
		throw new Error("<Workout_pushupspider>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
	}
}

var workoutPushupspider = /*#__PURE__*/Object.freeze({
    __proto__: null,
    'default': Workout_pushupspider
});

/* src/workouts/workout-rest.svelte generated by Svelte v3.49.0 */

const file$f = "src/workouts/workout-rest.svelte";

// (35:0) {#if isPaused}
function create_if_block$f(ctx) {
	let svg;
	let path;

	const block = {
		c: function create() {
			svg = svg_element("svg");
			path = svg_element("path");
			attr_dev(path, "d", "M10 24h-6v-24h6v24zm10 0h-6v-24h6v24zm-11-23h-4v22h4v-22zm10 0h-4v22h4v-22z");
			add_location(path, file$f, 35, 127, 739);
			attr_dev(svg, "viewBox", "-6 -5 36 36");
			attr_dev(svg, "width", "10%");
			attr_dev(svg, "height", "10%");
			attr_dev(svg, "xmlns", "http://www.w3.org/2000/svg");
			attr_dev(svg, "fill-rule", "evenodd");
			attr_dev(svg, "clip-rule", "evenodd");
			add_location(svg, file$f, 35, 0, 612);
		},
		m: function mount(target, anchor) {
			insert_dev(target, svg, anchor);
			append_dev(svg, path);
		},
		d: function destroy(detaching) {
			if (detaching) detach_dev(svg);
		}
	};

	dispatch_dev("SvelteRegisterBlock", {
		block,
		id: create_if_block$f.name,
		type: "if",
		source: "(35:0) {#if isPaused}",
		ctx
	});

	return block;
}

function create_fragment$f(ctx) {
	let span;
	let t1;
	let if_block_anchor;
	let if_block = /*isPaused*/ ctx[0] && create_if_block$f(ctx);

	const block = {
		c: function create() {
			span = element("span");
			span.textContent = "Catch your breath...";
			t1 = space();
			if (if_block) if_block.c();
			if_block_anchor = empty();
			attr_dev(span, "class", "rest-message svelte-2nf2ba");
			toggle_class(span, "paused", /*isPaused*/ ctx[0]);
			add_location(span, file$f, 32, 4, 516);
		},
		l: function claim(nodes) {
			throw new Error("options.hydrate only works if the component was compiled with the `hydratable: true` option");
		},
		m: function mount(target, anchor) {
			insert_dev(target, span, anchor);
			insert_dev(target, t1, anchor);
			if (if_block) if_block.m(target, anchor);
			insert_dev(target, if_block_anchor, anchor);
		},
		p: function update(ctx, [dirty]) {
			if (dirty & /*isPaused*/ 1) {
				toggle_class(span, "paused", /*isPaused*/ ctx[0]);
			}

			if (/*isPaused*/ ctx[0]) {
				if (if_block) ; else {
					if_block = create_if_block$f(ctx);
					if_block.c();
					if_block.m(if_block_anchor.parentNode, if_block_anchor);
				}
			} else if (if_block) {
				if_block.d(1);
				if_block = null;
			}
		},
		i: noop,
		o: noop,
		d: function destroy(detaching) {
			if (detaching) detach_dev(span);
			if (detaching) detach_dev(t1);
			if (if_block) if_block.d(detaching);
			if (detaching) detach_dev(if_block_anchor);
		}
	};

	dispatch_dev("SvelteRegisterBlock", {
		block,
		id: create_fragment$f.name,
		type: "component",
		source: "",
		ctx
	});

	return block;
}

function instance$f($$self, $$props, $$invalidate) {
	let { $$slots: slots = {}, $$scope } = $$props;
	validate_slots('Workout_rest', slots, []);
	let { isPaused = false } = $$props;
	const writable_props = ['isPaused'];

	Object.keys($$props).forEach(key => {
		if (!~writable_props.indexOf(key) && key.slice(0, 2) !== '$$' && key !== 'slot') console.warn(`<Workout_rest> was created with unknown prop '${key}'`);
	});

	$$self.$$set = $$props => {
		if ('isPaused' in $$props) $$invalidate(0, isPaused = $$props.isPaused);
	};

	$$self.$capture_state = () => ({ isPaused });

	$$self.$inject_state = $$props => {
		if ('isPaused' in $$props) $$invalidate(0, isPaused = $$props.isPaused);
	};

	if ($$props && "$$inject" in $$props) {
		$$self.$inject_state($$props.$$inject);
	}

	return [isPaused];
}

class Workout_rest extends SvelteComponentDev {
	constructor(options) {
		super(options);
		init(this, options, instance$f, create_fragment$f, safe_not_equal, { isPaused: 0 });

		dispatch_dev("SvelteRegisterComponent", {
			component: this,
			tagName: "Workout_rest",
			options,
			id: create_fragment$f.name
		});
	}

	get isPaused() {
		throw new Error("<Workout_rest>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
	}

	set isPaused(value) {
		throw new Error("<Workout_rest>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
	}
}

var workoutRest = /*#__PURE__*/Object.freeze({
    __proto__: null,
    'default': Workout_rest
});

/* src/workouts/workout-reverselungerotate.svelte generated by Svelte v3.49.0 */

const file$e = "src/workouts/workout-reverselungerotate.svelte";

// (94:4) {#if isPaused}
function create_if_block$e(ctx) {
	let svg;
	let path;

	const block = {
		c: function create() {
			svg = svg_element("svg");
			path = svg_element("path");
			attr_dev(path, "d", "M10 24h-6v-24h6v24zm10 0h-6v-24h6v24zm-11-23h-4v22h4v-22zm10 0h-4v22h4v-22z");
			add_location(path, file$e, 94, 133, 6299);
			attr_dev(svg, "viewBox", "-6 -5 36 36");
			attr_dev(svg, "width", "100%");
			attr_dev(svg, "height", "100%");
			attr_dev(svg, "xmlns", "http://www.w3.org/2000/svg");
			attr_dev(svg, "fill-rule", "evenodd");
			attr_dev(svg, "clip-rule", "evenodd");
			add_location(svg, file$e, 94, 4, 6170);
		},
		m: function mount(target, anchor) {
			insert_dev(target, svg, anchor);
			append_dev(svg, path);
		},
		d: function destroy(detaching) {
			if (detaching) detach_dev(svg);
		}
	};

	dispatch_dev("SvelteRegisterBlock", {
		block,
		id: create_if_block$e.name,
		type: "if",
		source: "(94:4) {#if isPaused}",
		ctx
	});

	return block;
}

function create_fragment$e(ctx) {
	let svg;
	let t;
	let g2;
	let g1;
	let g0;
	let path0;
	let path1;
	let path2;
	let path3;
	let path4;
	let path5;
	let path6;
	let path7;
	let path8;
	let path9;
	let path10;
	let path11;
	let path12;
	let path13;
	let path14;
	let path15;
	let path16;
	let if_block = /*isPaused*/ ctx[1] && create_if_block$e(ctx);

	const block = {
		c: function create() {
			svg = svg_element("svg");
			t = text(">\n");
			g2 = svg_element("g");
			g1 = svg_element("g");
			g0 = svg_element("g");
			path0 = svg_element("path");
			path1 = svg_element("path");
			path2 = svg_element("path");
			path3 = svg_element("path");
			path4 = svg_element("path");
			path5 = svg_element("path");
			path6 = svg_element("path");
			path7 = svg_element("path");
			path8 = svg_element("path");
			path9 = svg_element("path");
			path10 = svg_element("path");
			path11 = svg_element("path");
			path12 = svg_element("path");
			path13 = svg_element("path");
			path14 = svg_element("path");
			path15 = svg_element("path");
			path16 = svg_element("path");
			if (if_block) if_block.c();
			attr_dev(path0, "fill", "var(--shirt)");
			attr_dev(path0, "d", "M91 155c0 19-4 38-3 57 0 17 4 34 5 50v5c-23 4-45 7-67 13-7 1-14 3-20-3-2-10-4-20-1-30 5-14 5-28 6-43 2-17-1-34-7-51-1-3 0-7-4-9v-24c3-1 3-5 4-7l12-26c2-2 3-5 6-6l19 11c5 2 12 6 18 1a4 4 0 0 0 3 2l31 12a6 6 0 0 1 3 2c-2 8-3 10-11 10-6-1-7 2-7 7 1 3 3 7 0 11l-6 15 14 1c2 0 4-1 5 2Z");
			add_location(path0, file$e, 29, 6, 762);
			attr_dev(path1, "fill", "var(--hair)");
			attr_dev(path1, "d", "M0 554c4-4 3-11 6-16 1-2 2-5 6-5 2 4-1 8 0 12 0 5 3 8 8 8a8 8 0 0 0 8-6c0-3 2-4 4-5 6-1 9-4 10-9 1 0 2-1 3 1 5 13 16 20 27 28l18 9c3 2 6 5 6 10a10 10 0 0 1-7 9l-14 5H52c-4-4-10-5-15-9s-10-6-16-7c-8-1-16-4-21-12ZM55 0l2 1 23 1c6 0 8 3 7 9l-5 7-8-3c-6-2-8 1-7 7 1 3 0 6-2 7-5 3-6 6-7 11-1 4-4 8-9 9-6 1-4-4-5-7-3-3-5-6-9-4s-5 5-4 9c2 4 1 9 2 13s-4 9-9 9c-2-13-7-26-8-40 0-14 6-23 20-26 4 0 8 0 12-3ZM857 501c-9 7-19 8-29 6a82 82 0 0 0-33-1c-6 1-13 0-20-1-2-1-2-2-2-4 0-10 3-19 5-28 0-2 1-4 4-3l2 8c2 7 13 9 18 4 4-3 4-8 6-12 3-2 4 0 4 2 1 5 5 8 9 10 9 5 18 10 29 10 4 0 5 2 7 5Z");
			add_location(path1, file$e, 33, 6, 1104);
			attr_dev(path2, "fill", "var(--shirt)");
			attr_dev(path2, "d", "M752 333v6l-2 18a14 14 0 0 1-13 12l-30 1c-18 1-36-3-52-12v-11l1-3c4-2 3-6 4-9l2-2a288 288 0 0 0 67 1l-24-1c-14 0-29-1-43-4l-2-1v1c0-21-10-38-18-55-9-20-8-39 0-58 3-8 9-14 18-14l13-3a4 4 0 0 1 3 4c1 4 6 6 8 5 5-1 10 0 14-2 8-3 16-3 24 1 6 2 14 1 21 2l23 4a27 27 0 0 0 11 7c6 3 6 7 6 12l-2 12c-2 11-6 20-18 24-6 1-8 6-8 12l-1 38c0 2 1 5-1 7 1 5-2 5-6 6-5 0-10 0-15 2 7 2 14-1 20 0Z");
			add_location(path2, file$e, 37, 6, 1741);
			attr_dev(path3, "fill", "var(--pants)");
			attr_dev(path3, "d", "M655 358c16 9 34 13 52 12l30-1a14 14 0 0 0 13-12l2-18c13 2 25 5 38 6l2 1c0 5-1 9-3 13-5 11-13 20-18 31-4 9-11 9-20 8-4-1-10-2-14 0s-4 8-5 13c-2 9-8 16-10 25l-2 10c-2 9-3 10-12 12-5 1-9 1-13 3-6 1-11 4-17 4a53 53 0 0 1-39-14c1-6 4-11 7-15 5-10 5-21 3-31a70 70 0 0 1 1-23c1-8 2-16 5-24Z");
			add_location(path3, file$e, 41, 6, 2182);
			attr_dev(path4, "fill", "var(--flesh)");
			attr_dev(path4, "d", "M639 451a53 53 0 0 0 39 14c6 0 11-3 17-4-5 11-12 19-18 29-8 11-18 20-27 31l-6 9c-7 8-15 10-25 9a220 220 0 0 0-42-2c-15 0-29-6-44-8-12-2-24-4-36 0-4-2-8-2-13 0-3 2-9-2-11-7s-1-9 4-13l7-5c23 2 46-1 69-4 17-3 33-2 49 2 11 3 15 1 19-10l16-39a14 14 0 0 1 2-2Z");
			add_location(path4, file$e, 45, 6, 2528);
			attr_dev(path5, "fill", "var(--pants)");
			attr_dev(path5, "d", "M29 381c-8-1-9-6-9-13 0-20-3-39-10-57a71 71 0 0 1-4-33c6 5 13 3 20 2 22-6 44-9 67-13a182 182 0 0 1-1 44l-3 48-2 13a8 8 0 0 1-4 6h-3c0-6-2-8-9-9l-33 2c-10 1-10 1-9 10Z");
			add_location(path5, file$e, 49, 6, 2844);
			attr_dev(path6, "fill", "var(--flesh)");
			attr_dev(path6, "d", "M29 381c-1-9-1-9 9-10l34-2c6 1 9 3 8 9l-4 11c-5 11-5 25-13 35-10 12-12 28-14 43a8 8 0 0 0 2 7l-3 6a161 161 0 0 0-9 31c0 8-1 15 3 22-1 5-4 8-10 9-2 1-4 2-4 5a8 8 0 0 1-8 6c-5 0-8-3-8-8-1-4 2-8 0-12 2-21-1-41-2-62-1-14-1-28 8-40 2-4 4-8 3-13a34 34 0 0 1 5-23c3-4 3-9 3-14ZM91 155c-1-3-3-2-5-2l-14-1 6-15c3-4 1-8 0-11 0-5 1-8 7-7 8 0 9-2 11-10 13 7 26 13 42 11a10 10 0 0 1 7 2c5 4 12 1 18 2 16 5 33 5 49 4 5 0 9-1 12-6 3-4 7-8 13-7 5 0 9-3 14-3 2 0 5-1 6 2s-1 5-3 7c-2 1-5 1-6 4a23 23 0 0 0 9 2h11c5 0 8 1 8 7 0 4 4 7 4 11v3c-7 1-3 12-12 11-1 0-3 0-4 2-2 4-5 3-8 2l-23-9c-10-4-21-4-32-3-18 2-36 5-55 6l-39-2H91ZM771 390c5-11 13-20 18-31 2-4 3-8 3-13l28 4c9 2 14 7 14 17s-1 18-6 26-5 18-8 27l-12 36c-2 5-3 10 0 14-2 4-2 9-6 12-5 5-16 3-18-4l-2-8c4-18 4-37 4-56 1-8 2-15 5-21 2-6 0-5-4-5l-16 2Z");
			add_location(path6, file$e, 53, 6, 3072);
			attr_dev(path7, "fill", "var(--hair)");
			attr_dev(path7, "d", "M682 186c-6-11-12-23-13-37 0-8 0-16 4-22a30 30 0 0 1 24-12c9 0 19 2 29 0 4 0 6 2 7 6a12 12 0 0 1 0 5 69 69 0 0 0 0 26l-1 3c-2 5-3 11-3 17 0 2 1 5-2 5s-1-3-1-5v-6c0-2 1-5-2-6s-4 1-6 2a20 20 0 0 0-7 10l-2 10c0 2-1 4-3 4-8 0-16 3-24 0Z");
			add_location(path7, file$e, 57, 6, 3923);
			attr_dev(path8, "fill", "var(--flesh)");
			attr_dev(path8, "d", "m22 81 2-12c5 0 10-5 9-9s0-9-2-13-1-8 4-9 6 1 9 4c1 3-1 8 5 7 5-1 8-4 9-9s2-8 7-10c2-2 3-5 2-8-1-6 1-9 7-7l8 3 2 11 1 3a24 24 0 0 0 6 19 3 3 0 0 1 0 3c-5 7-5 16-8 24-2 4-5 4-8 4-12 0-12 0-16 11-6 5-12 1-18-1L22 81Z");
			add_location(path8, file$e, 61, 6, 4216);
			attr_dev(path9, "fill", "var(--hair)");
			attr_dev(path9, "d", "m484 504-7 5c-5 4-6 8-4 13s8 9 11 7c5-2 9-2 13 0 1 3-3 4-3 7l8 2c6 2 7 7 3 12a20 20 0 0 1-8 5c-8 3-17 5-25 5-5 0-8-2-9-7l-10-34c-4-13 2-19 15-18l15 1 1 1a3 3 0 0 1 0 1Z");
			add_location(path9, file$e, 65, 6, 4492);
			attr_dev(path10, "fill", "var(--flesh)");
			attr_dev(path10, "d", "M682 186c8 3 16 0 24 0 2 0 3-2 3-4l2-10a20 20 0 0 1 7-10c2-1 4-3 6-2s2 4 2 6v6c0 2-2 5 1 5s2-3 2-5c0-6 1-12 3-17l1-3c4 3 3 7 3 11-3 11-4 23-8 34-2 4-3 7-6 10-8-4-16-4-24-1-4 2-9 1-14 2-2 1-7-1-8-5a4 4 0 0 0-3-4c7-1 7-8 9-13Z");
			add_location(path10, file$e, 69, 6, 4721);
			attr_dev(path11, "fill", "var(--hair)");
			attr_dev(path11, "d", "M39 511a161 161 0 0 1 9-31l3-6c2-1 3 0 4 2 3 7 10 10 17 11l20 3c3 0 6 0 7 4s1 8-3 11c-5 4-12 7-18 6-13-1-26-2-39 0Z");
			add_location(path11, file$e, 73, 6, 5007);
			attr_dev(path12, "fill", "var(--flesh)");
			attr_dev(path12, "d", "M781 244c-1-4 2-8 2-12 0-5 0-9-6-12a27 27 0 0 1-11-7c5-1 6-4 9-7 3-4 5-8 11-9 5 0 8 5 12 4 1 0 2 3 1 4-2 2-2 3 1 4l1 2c-4 7-2 15-6 22-4 5-9 8-14 11Z");
			add_location(path12, file$e, 77, 6, 5183);
			attr_dev(path13, "fill", "var(--shirt)");
			attr_dev(path13, "d", "M389 312c-4 1-5-1-3-5l5-9c3-5 3-10 0-15a59 59 0 0 1-4-9c-1-2-4-4-1-6 3-1 6-1 8 1a191 191 0 0 1 10 19v5c-4 5-6 11-9 17-1 2-3 3-6 2Z");
			add_location(path13, file$e, 81, 6, 5393);
			attr_dev(path14, "fill", "var(--pants)");
			attr_dev(path14, "d", "M752 333c-6-1-13 2-20 0 5-2 10-2 15-2 3-1 7-1 6-6-1 4 1 5 5 4a155 155 0 0 0 48-16c3-2 6-11 3-15-4-7-10-10-17-13h-2v1c0 2 3 4 1 6-3-3-6-7-5-11 0-3 5-5 10-4l-5 4a21 21 0 0 0 5 3c6 3 11 6 15 11s2 11-3 16c-14 15-33 17-51 21l-5 1ZM662 329c14 3 29 4 43 4l24 1a288 288 0 0 1-67-1c-14-3-28-6-41-12-5-2-10-5-14-9a17 17 0 0 1-4-8v-2c1-1 2 0 2 1 3 10 12 13 20 17 11 5 22 7 33 9h2v-1c1 2 2 1 2 1Z");
			add_location(path14, file$e, 85, 6, 5585);
			attr_dev(path15, "fill", "var(--pants)");
			attr_dev(path15, "d", "M660 335z");
			add_location(path15, file$e, 89, 6, 6031);
			attr_dev(path16, "fill", "var(--flesh)");
			attr_dev(path16, "d", "m484 503-1-1 1 1Z");
			add_location(path16, file$e, 90, 6, 6080);
			attr_dev(g0, "id", "reverse-lunge-rotate");
			attr_dev(g0, "class", "svelte-e2j0e8");
			add_location(g0, file$e, 28, 4, 726);
			attr_dev(g1, "class", "shapes svelte-e2j0e8");
			add_location(g1, file$e, 27, 2, 679);
			attr_dev(g2, "class", "svelte-e2j0e8");
			toggle_class(g2, "paused", /*isPaused*/ ctx[1]);
			toggle_class(g2, "flip", /*flipsvg*/ ctx[2]);
			add_location(g2, file$e, 26, 0, 628);
			attr_dev(svg, "xmlns", "http://www.w3.org/2000/svg");
			attr_dev(svg, "viewBox", "0 0 856.8 594.7");
			attr_dev(svg, "height", "100%");
			attr_dev(svg, "width", "100%");
			attr_dev(svg, "class", "svelte-e2j0e8");
			add_location(svg, file$e, 25, 0, 533);
		},
		l: function claim(nodes) {
			throw new Error("options.hydrate only works if the component was compiled with the `hydratable: true` option");
		},
		m: function mount(target, anchor) {
			insert_dev(target, svg, anchor);
			append_dev(svg, t);
			append_dev(svg, g2);
			append_dev(g2, g1);
			append_dev(g1, g0);
			append_dev(g0, path0);
			append_dev(g0, path1);
			append_dev(g0, path2);
			append_dev(g0, path3);
			append_dev(g0, path4);
			append_dev(g0, path5);
			append_dev(g0, path6);
			append_dev(g0, path7);
			append_dev(g0, path8);
			append_dev(g0, path9);
			append_dev(g0, path10);
			append_dev(g0, path11);
			append_dev(g0, path12);
			append_dev(g0, path13);
			append_dev(g0, path14);
			append_dev(g0, path15);
			append_dev(g0, path16);
			/*g1_binding*/ ctx[4](g1);
			if (if_block) if_block.m(g2, null);
		},
		p: function update(ctx, [dirty]) {
			if (/*isPaused*/ ctx[1]) {
				if (if_block) ; else {
					if_block = create_if_block$e(ctx);
					if_block.c();
					if_block.m(g2, null);
				}
			} else if (if_block) {
				if_block.d(1);
				if_block = null;
			}

			if (dirty & /*isPaused*/ 2) {
				toggle_class(g2, "paused", /*isPaused*/ ctx[1]);
			}

			if (dirty & /*flipsvg*/ 4) {
				toggle_class(g2, "flip", /*flipsvg*/ ctx[2]);
			}
		},
		i: noop,
		o: noop,
		d: function destroy(detaching) {
			if (detaching) detach_dev(svg);
			/*g1_binding*/ ctx[4](null);
			if (if_block) if_block.d();
		}
	};

	dispatch_dev("SvelteRegisterBlock", {
		block,
		id: create_fragment$e.name,
		type: "component",
		source: "",
		ctx
	});

	return block;
}

function instance$e($$self, $$props, $$invalidate) {
	let { $$slots: slots = {}, $$scope } = $$props;
	validate_slots('Workout_reverselungerotate', slots, []);
	let { direction = "right" } = $$props;
	let { isPaused = false } = $$props;
	let { rootElement } = $$props;
	let flipsvg = false;

	if (direction == "left") {
		flipsvg = true;
	}

	const writable_props = ['direction', 'isPaused', 'rootElement'];

	Object.keys($$props).forEach(key => {
		if (!~writable_props.indexOf(key) && key.slice(0, 2) !== '$$' && key !== 'slot') console.warn(`<Workout_reverselungerotate> was created with unknown prop '${key}'`);
	});

	function g1_binding($$value) {
		binding_callbacks[$$value ? 'unshift' : 'push'](() => {
			rootElement = $$value;
			$$invalidate(0, rootElement);
		});
	}

	$$self.$$set = $$props => {
		if ('direction' in $$props) $$invalidate(3, direction = $$props.direction);
		if ('isPaused' in $$props) $$invalidate(1, isPaused = $$props.isPaused);
		if ('rootElement' in $$props) $$invalidate(0, rootElement = $$props.rootElement);
	};

	$$self.$capture_state = () => ({
		direction,
		isPaused,
		rootElement,
		flipsvg
	});

	$$self.$inject_state = $$props => {
		if ('direction' in $$props) $$invalidate(3, direction = $$props.direction);
		if ('isPaused' in $$props) $$invalidate(1, isPaused = $$props.isPaused);
		if ('rootElement' in $$props) $$invalidate(0, rootElement = $$props.rootElement);
		if ('flipsvg' in $$props) $$invalidate(2, flipsvg = $$props.flipsvg);
	};

	if ($$props && "$$inject" in $$props) {
		$$self.$inject_state($$props.$$inject);
	}

	return [rootElement, isPaused, flipsvg, direction, g1_binding];
}

class Workout_reverselungerotate extends SvelteComponentDev {
	constructor(options) {
		super(options);

		init(this, options, instance$e, create_fragment$e, safe_not_equal, {
			direction: 3,
			isPaused: 1,
			rootElement: 0
		});

		dispatch_dev("SvelteRegisterComponent", {
			component: this,
			tagName: "Workout_reverselungerotate",
			options,
			id: create_fragment$e.name
		});

		const { ctx } = this.$$;
		const props = options.props || {};

		if (/*rootElement*/ ctx[0] === undefined && !('rootElement' in props)) {
			console.warn("<Workout_reverselungerotate> was created without expected prop 'rootElement'");
		}
	}

	get direction() {
		throw new Error("<Workout_reverselungerotate>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
	}

	set direction(value) {
		throw new Error("<Workout_reverselungerotate>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
	}

	get isPaused() {
		throw new Error("<Workout_reverselungerotate>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
	}

	set isPaused(value) {
		throw new Error("<Workout_reverselungerotate>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
	}

	get rootElement() {
		throw new Error("<Workout_reverselungerotate>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
	}

	set rootElement(value) {
		throw new Error("<Workout_reverselungerotate>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
	}
}

var workoutReverselungerotate = /*#__PURE__*/Object.freeze({
    __proto__: null,
    'default': Workout_reverselungerotate
});

/* src/workouts/workout-reverselunges.svelte generated by Svelte v3.49.0 */

const file$d = "src/workouts/workout-reverselunges.svelte";

// (173:4) {#if isPaused}
function create_if_block$d(ctx) {
	let svg;
	let path;

	const block = {
		c: function create() {
			svg = svg_element("svg");
			path = svg_element("path");
			attr_dev(path, "d", "M10 24h-6v-24h6v24zm10 0h-6v-24h6v24zm-11-23h-4v22h4v-22zm10 0h-4v22h4v-22z");
			add_location(path, file$d, 173, 133, 11698);
			attr_dev(svg, "viewBox", "-6 -5 36 36");
			attr_dev(svg, "width", "100%");
			attr_dev(svg, "height", "100%");
			attr_dev(svg, "xmlns", "http://www.w3.org/2000/svg");
			attr_dev(svg, "fill-rule", "evenodd");
			attr_dev(svg, "clip-rule", "evenodd");
			add_location(svg, file$d, 173, 4, 11569);
		},
		m: function mount(target, anchor) {
			insert_dev(target, svg, anchor);
			append_dev(svg, path);
		},
		d: function destroy(detaching) {
			if (detaching) detach_dev(svg);
		}
	};

	dispatch_dev("SvelteRegisterBlock", {
		block,
		id: create_if_block$d.name,
		type: "if",
		source: "(173:4) {#if isPaused}",
		ctx
	});

	return block;
}

function create_fragment$d(ctx) {
	let svg;
	let t;
	let g4;
	let g3;
	let g0;
	let path0;
	let path1;
	let path2;
	let path3;
	let path4;
	let path5;
	let path6;
	let path7;
	let path8;
	let path9;
	let path10;
	let path11;
	let path12;
	let g1;
	let path13;
	let path14;
	let path15;
	let path16;
	let path17;
	let path18;
	let path19;
	let path20;
	let g2;
	let path21;
	let path22;
	let path23;
	let path24;
	let path25;
	let path26;
	let path27;
	let path28;
	let if_block = /*isPaused*/ ctx[1] && create_if_block$d(ctx);

	const block = {
		c: function create() {
			svg = svg_element("svg");
			t = text(">\n");
			g4 = svg_element("g");
			g3 = svg_element("g");
			g0 = svg_element("g");
			path0 = svg_element("path");
			path1 = svg_element("path");
			path2 = svg_element("path");
			path3 = svg_element("path");
			path4 = svg_element("path");
			path5 = svg_element("path");
			path6 = svg_element("path");
			path7 = svg_element("path");
			path8 = svg_element("path");
			path9 = svg_element("path");
			path10 = svg_element("path");
			path11 = svg_element("path");
			path12 = svg_element("path");
			g1 = svg_element("g");
			path13 = svg_element("path");
			path14 = svg_element("path");
			path15 = svg_element("path");
			path16 = svg_element("path");
			path17 = svg_element("path");
			path18 = svg_element("path");
			path19 = svg_element("path");
			path20 = svg_element("path");
			g2 = svg_element("g");
			path21 = svg_element("path");
			path22 = svg_element("path");
			path23 = svg_element("path");
			path24 = svg_element("path");
			path25 = svg_element("path");
			path26 = svg_element("path");
			path27 = svg_element("path");
			path28 = svg_element("path");
			if (if_block) if_block.c();
			attr_dev(path0, "fill", "var(--pants)");
			attr_dev(path0, "d", "m433 320 8-1c1 6 1 12 4 16a29 29 0 0 1 5 28c-3 9 5 13 5 21 0 1 3 2 4 0 3-4 3 2 5 1-3 12-1 25-2 37l-2 10c-2 12-2 12-14 13l-55 3c-13-1-13-1-13-13 0-25-2-50-11-74-4-11-4-23-3-35 6 6 13 5 20 3 10-3 21-5 31-6l8 1c5 1 7 0 10-4Z");
			add_location(path0, file$d, 71, 6, 1241);
			attr_dev(path1, "fill", "var(--shirt)");
			attr_dev(path1, "d", "M452 288Z");
			add_location(path1, file$d, 75, 6, 1524);
			attr_dev(path2, "fill", "var(--hair)");
			attr_dev(path2, "d", "M392 76Z");
			add_location(path2, file$d, 76, 6, 1573);
			attr_dev(path3, "fill", "var(--hair)");
			attr_dev(path3, "d", "M473 643c3-2 5-4 4-8-1-3-4-5-7-5-4 0-8-2-12-4a188 188 0 0 1-27-16c-4-3-7-5-7-10 0-2 0-6-5-3a3 3 0 0 1-1 0c-3 0-2 3-3 4 2 5 0 8-5 10l-1 8c-4 3-9 4-12 10-4 8-13 5-19-5l-3-6c-2 0-3-1-3-3s1-3 2-3a1 1 0 0 1 2-1c-1-1-1-3-4-2a4 4 0 0 0-3 4c1 6-1 11 1 17v2a1 1 0 0 1 0 1 1 1 0 0 0 0-1l1 9a5 5 0 0 0 1-2 5 5 0 0 1-1 2c1 4-1 8 1 12a3 3 0 0 0 2 3c6 3 12 4 18 5a2 2 0 0 0 3 1h4l8 2 2 1c4 3 7 5 12 6l4 1c6 2 12 2 19 1 8-2 17-3 24-9 6-3 8-10 4-14-3-4-2-5 1-7Zm-100-7a7 7 0 0 0-1 0 7 7 0 0 1 1 0Zm0 3a2 2 0 0 0 0-1 2 2 0 0 1 0 1Z");
			add_location(path3, file$d, 77, 6, 1620);
			attr_dev(path4, "fill", "var(--shirt)");
			attr_dev(path4, "d", "M466 317ZM468 318Z");
			add_location(path4, file$d, 81, 6, 2195);
			attr_dev(path5, "fill", "var(--pants)");
			attr_dev(path5, "d", "M433 320c-3 4-5 5-10 3h-8c6-2 12-4 18-3Z");
			add_location(path5, file$d, 82, 6, 2253);
			attr_dev(path6, "fill", "var(--hair)");
			attr_dev(path6, "d", "M459 4c-3-4-7-2-11-2-3 0-7 1-10-2h-28c-3 4-8 3-12 4-15 3-23 13-22 28s4 30 8 44a4 4 0 0 0 2 5c3 0 5-1 6-5 8-6 2-13 1-20-1-5 0-9 4-12 6-2 10 1 12 7 2 8 6 9 12 3a16 16 0 0 0 1-3l3-4c0-6 2-10 8-13 3-1 4-5 3-8-1-8 2-11 9-8l8 3 1-2a26 26 0 0 0 3-3c2-4 4-8 2-12Z");
			add_location(path6, file$d, 86, 6, 2355);
			attr_dev(path7, "fill", "var(--hair)");
			attr_dev(path7, "d", "M375 618c-2 0-3-1-3-3s1-3 3-3v2h-1a7 7 0 0 0 1 1v2Z");
			add_location(path7, file$d, 90, 6, 2671);
			attr_dev(path8, "fill", "var(--pants)");
			attr_dev(path8, "d", "M375 616v-1l1 1a9 9 0 0 0-1 0Z");
			add_location(path8, file$d, 94, 6, 2783);
			attr_dev(path9, "fill", "var(--pants)");
			attr_dev(path9, "d", "M375 615a7 7 0 0 1-1-1s0 0 1-1a1 1 0 0 1 0 2Z");
			add_location(path9, file$d, 95, 6, 2853);
			attr_dev(path10, "d", "M465 296c-6-35-7-70-5-106 0-9-1-19-5-27-2-9-6-17-11-25-1-4-3-7-6-10a38 38 0 0 0-8-13c0-2-1-3-3-4-3 1-2 3-2 5-1 6-3 8-8 5l-9-2c-4-6-12-8-19-10l-8-12c-8 5-9 15-13 22s-5 15-11 21v27a178 178 0 0 1 12 86c-1 10-1 21-4 31-6 14-3 28-1 42 6 6 13 5 20 3 10-3 21-5 31-6 6-2 12-4 18-3l8-1a17 17 0 0 0-6-11c-9-8-15-19-24-27-7-5-11-15-13-24-1-3-4-6-3-10-1-1-2 2-2 0v-17l1-1c-4-2-2-6-3-10-3-7-5-15-5-23-4-2-1-6-2-9a44 44 0 0 1 0-12c12 3 23 1 34 1 3 1 6-1 7 3a7 7 0 0 0 1 0 7 7 0 0 1-1 0v33c0 5 0 10 3 14l7 18c2 3 4 7 3 11 4 0 2 5 4 6l2 2v6c4 3 5 8 5 13 4 1 3 3 3 6 2 0 3 1 2 2l1 3c4 3 4 7 5 11s2 7 6 8c1-5 0-11-1-16Zm-36-109-1-1v-1l2 1-1 1Zm9-10a3 3 0 0 0-1-3 3 3 0 0 1 1 3Zm-1 19a93 93 0 0 1 2 13 93 93 0 0 0-2-13Zm6 61a19 19 0 0 0 1-3 19 19 0 0 1-1 3Z");
			attr_dev(path10, "fill", "var(--shirt)");
			add_location(path10, file$d, 99, 6, 2960);
			attr_dev(path11, "d", "m428 185 2 1-1 1-1-1Z");
			attr_dev(path11, "fill", "var(--shirt)");
			add_location(path11, file$d, 103, 6, 3760);
			attr_dev(path12, "fill", "var(--flesh)");
			attr_dev(path12, "d", "m468 318-2-1v-5c-4-1-5-4-6-8s-1-9-5-11l-1-3a2 2 0 0 1-2-1 2 2 0 0 0 2 1c1-1 0-2-2-2 0-3 1-5-3-6v6a3 3 0 0 0-2 1 3 3 0 0 1 2-1v-6c0-5-1-10-5-13v-6l-2-2c-2-1 0-6-4-6 1-4-1-8-3-11l-7-18c-3-4-3-9-3-14v-33c-1-4-4-2-7-3-11 0-22 2-34-1a44 44 0 0 0 0 12c1 3-2 7 2 9 0 8 2 16 5 23 1 4-1 8 3 10l-1 1v17c0 2 1-1 2 0-1 4 2 7 3 10 2 9 6 19 13 24 9 8 15 19 24 27a17 17 0 0 1 6 11c1 6 1 12 5 16a29 29 0 0 1 4 28c-3 9 6 13 5 21 0 1 3 2 4 0 3-4 3 2 5 1 7 1 6-6 9-8 1 2 0 5 3 5s3-3 3-5l4-13c1-10 1-20-4-28l-11-18ZM381 493a55 55 0 0 0-4 8c-4 9-8 17-7 26l4 49c1 12 3 23 1 35a1 1 0 0 0-1 1l1 1a1 1 0 0 1 0 2l1 1a9 9 0 0 0-1 0v2l3 6c6 10 15 13 19 5 3-6 7-7 12-10l1-8c5-2 7-5 5-10 1-1 0-4 3-4l-1-8v-4c2-14-1-28-1-42l1-5 1-7c1-10 1-22 6-30 12-17 17-37 22-56-18 1-37 4-55 3 2 16-1 31-10 45Zm-3 131 1-2-1 2Zm36-29a8 8 0 0 0 0 1 5 5 0 0 0 0 1 5 5 0 0 1 0-1 8 8 0 0 1 0-1 11 11 0 0 1 1-2 11 11 0 0 0-1 2Zm6-91-2-4 2 4Zm-2-4a5 5 0 0 0-3-1 5 5 0 0 1 3 1ZM375 615ZM386 81c-3 5-1 11-5 16l8 12c7 2 15 4 19 10l9 2c5 3 7 1 8-5 0-2-1-4 2-5-1-10 5-17 15-16 4 1 11 1 12-3 1-8 7-13 6-21a4 4 0 0 1 1-4c5-4 3-7 1-11-2-3-6-5-6-9 3-9-2-17-3-26-3-1-5-3-8-3-8-3-10 0-9 8 1 3 0 7-3 8-6 3-8 7-8 13l-3 4a16 16 0 0 1-2 3c-5 6-9 5-11-3-2-6-6-9-12-7-4 3-5 7-4 12 1 7 7 14-1 20-1 4-3 5-6 5Z");
			add_location(path12, file$d, 104, 6, 3821);
			attr_dev(g0, "id", "lunge-1");
			attr_dev(g0, "class", "svelte-xtqzkm");
			add_location(g0, file$d, 70, 4, 1218);
			attr_dev(path13, "fill", "var(--hair)");
			attr_dev(path13, "d", "M480 630c-5 6-12 10-21 11-17 2-34 2-52 0l-31-2c-2 0-5 0-4-3 3-12 3-25 9-36 1-2 1-5 4-3l6 9c2 3 7 6 10 3 4-4 11-5 10-12-1-6 1-9 7-10 2 1 2 4 2 6 0 9 6 13 13 16 13 5 25 13 40 13 3 0 5 2 7 3ZM56 649c1 4-2 4-4 4-6-1-6 2-7 6-1 6 0 11 7 13 4 1 7 5 10 7 3 1 3 3 3 6s-2 4-5 5l-14 3H33c-16-4-23-15-25-31-1-9-5-18-7-26-3-12 2-18 14-18l14 1c2 0 2 1 2 2l-3 4c-4 4-7 8-3 13 3 5 15 10 19 8 5-2 9 0 12 3Z");
			add_location(path13, file$d, 110, 6, 5151);
			attr_dev(path14, "fill", "var(--pants)");
			attr_dev(path14, "d", "M370 467a173 173 0 0 0-14 29c-2 4-2 9-6 12l-3-4-9-30c-3-8-5-18-11-25v-5c4-5 7-11 14-14 4 0 8 3 12-1 3-1 5 1 7 2 6 3 11 8 19 3 2-1 6 1 7 5-3 1-4 4-5 7-4 6-8 12-9 19Z");
			add_location(path14, file$d, 114, 6, 5601);
			attr_dev(path15, "fill", "var(--shirt)");
			attr_dev(path15, "d", "M332 347a7 7 0 0 1-3-4 7 7 0 0 0 3 4c1-7-2-13-4-19-5-16-18-26-27-39a15 15 0 0 0-8-6c-2-1-4-3-7-2-2-6-8-8-12-10-8-4-15-8-23-9a114 114 0 0 0-23 101l9 47c1 6 2 12 0 17-4 11-10 21-12 33-2 7-6 13-4 20l13 4 40 9c13 2 23 0 31-10-1-5-4-7-7-10s-4-6-4-10v-3c-5-8-10-15-12-25a3 3 0 0 1 0-1c-1-6-7-11-7-18l-10-29c-2-4 6-13 11-14 7-1 15 1 22-2 5-3 9 2 9 6 1 6 4 12 4 18a36 36 0 0 1 5 19v3c5 4 2 10 3 16 3 1 2 3 2 5a8 8 0 0 0 6 6c4-5 7-11 14-14-1-28-7-55-9-83Zm-4-7 1 2-1-2Z");
			add_location(path15, file$d, 118, 6, 5827);
			attr_dev(path16, "fill", "var(--pants)");
			attr_dev(path16, "d", "m317 496-2-2-2-3-8-8c-8 10-18 12-31 10l-40-9c0 4-2 3-5 2 2-2 4-1 5-2l-13-4a42 42 0 0 0 3 23c0 5-7 10 1 15l-1 5-8 25-7 18c-2 7-6 13-6 20 9 7 17 13 29 14l24 1a72 72 0 0 1 30-7c6 0 8-3 8-8l4-47c5-14 11-27 28-27-1-7-7-10-9-16Z");
			add_location(path16, file$d, 122, 6, 6349);
			attr_dev(path17, "fill", "var(--hair)");
			attr_dev(path17, "d", "M319 169h-8c-16-2-31-1-47 2-13 3-19 14-20 23-1 19 5 36 10 54l7-5c6-7 1-14 0-21-1-8 1-12 10-12 3 3 6 7 6 11 1 4 3 4 6 3 5-3 10-6 10-13 0-4 2-7 6-9 5-2 6-6 4-11-1-5 1-7 6-7a48 48 0 0 1 7 1l4 3a26 26 0 0 0 6-9c2-6 0-10-7-10Z");
			add_location(path17, file$d, 126, 6, 6633);
			attr_dev(path18, "fill", "var(--pants)");
			attr_dev(path18, "d", "M234 484c0 4-2 3-5 2 2-2 4-1 5-2Z");
			add_location(path18, file$d, 130, 6, 6915);
			attr_dev(path19, "fill", "var(--flesh)");
			attr_dev(path19, "d", "M203 586c-2 1-3 4-3 6-2 7-6 13-9 19-2 5-6 7-11 7l-9-2c-17-4-35-6-53-3-26 5-53 9-80 7l-7 1-3 4c-4 4-7 8-3 13 3 5 15 10 19 8 5-2 9 0 12 3 2-2 5-2 8-2a102 102 0 0 1 34 4c34 9 69 7 104 10 11 1 19-4 23-14 4-8 11-15 17-23 5-7 11-14 14-23l-24-1c-12-1-20-7-29-14ZM428 449l-42-9c-3 0-4 3-5 6v7-7c-4 6-8 12-9 19l-2 2a173 173 0 0 0-14 29 301 301 0 0 0 40 2c3 0 4 1 3 5a63 63 0 0 0-4 14c-3 19-2 38-6 57-1 8-1 16-4 23l6 9c2 3 7 6 10 3 4-4 11-5 10-12-1-6 1-9 7-10-1-11 3-20 6-29l7-18 19-50c8-18-3-37-22-41Zm-50 19a2 2 0 0 0-2-2 2 2 0 0 1 2 2ZM329 233c5-3 3-7 0-10-2-3-5-7-5-11 1-8-2-16-4-24l-4-3a48 48 0 0 0-7-1c-5 0-7 2-6 7 2 5 1 9-4 11-4 2-6 5-6 9 0 7-4 10-10 13-3 1-5 1-6-3 0-4-3-8-6-11-9 0-11 4-10 12 1 7 6 14 0 21l-7 5c-2 4-2 9-3 14 8 1 15 5 23 9 4 2 10 4 12 10 3-1 5 1 7 2l1-6c1-12 5-15 17-15h4c5 0 7-2 8-7 0-7 7-12 4-20l2-2Z");
			add_location(path19, file$d, 131, 6, 6988);
			attr_dev(path20, "fill", "var(--flesh)");
			attr_dev(path20, "d", "M360 530c-6-6-9-13-10-22l-3-4-9-30c-3-8-5-18-11-25v-5a8 8 0 0 1-6-6c0-2 1-5-2-5-1-6 2-12-3-16v-3a36 36 0 0 0-5-19c0-6-3-12-4-18 0-4-4-9-9-6-7 3-15 1-22 2-5 1-13 10-11 14l10 29c0 7 6 12 7 18a3 3 0 0 0 0 1c2 9 7 17 12 25v3c0 4 1 7 4 10s6 5 7 9l8 9 2 3 2 1v1c2 6 8 9 9 16a29 29 0 0 1 9 19c1 8 2 15 7 21 6 6 7 13 3 19-3 5 0 7 4 8 2 4 5 0 8 0 8 0 18-13 18-22 0-12-7-20-15-27Zm-12 5a1 1 0 0 1-1 0 1 1 0 0 0 1 0Z");
			add_location(path20, file$d, 135, 6, 7867);
			attr_dev(g1, "id", "lunge-2");
			attr_dev(g1, "class", "svelte-xtqzkm");
			add_location(g1, file$d, 109, 4, 5128);
			attr_dev(path21, "fill", "var(--flesh)");
			attr_dev(path21, "d", "m422 475-42-10c-4 1-5 4-6 6v8-8c-3 6-8 12-9 19l-2 2a174 174 0 0 0-14 29 303 303 0 0 0 39 2c4 0 5 1 4 5a63 63 0 0 0-5 15c-2 19-1 38-5 56-2 8-2 16-5 24l6 8c2 2 6 6 10 3 3-3 11-4 10-12-1-6 1-9 7-10-1-10 3-19 6-29l8-17c6-17 11-34 19-50 8-18-2-37-21-41Zm-51 18a2 2 0 0 0-2-2 2 2 0 0 1 2 2ZM249 567l2-43c-1-3-4-4-7-4l-7 1 7-1c-7-3-13-6-20-6l-2-1a175 175 0 0 0-32-9 303 303 0 0 0 5 39c1 4 0 5-4 4a63 63 0 0 0-15-1c-19 0-38 5-57 4-8 0-47 2-55 0a99 99 0 0 0-8 8c-2 3-5 8-1 10 4 3 6 11 13 8 6-2 33 3 47 3s16 0 26 2l19 4 52 10c19 5 37-8 37-28Zm-27-46a2 2 0 0 0 2-3 2 2 0 0 1-2 3Z");
			add_location(path21, file$d, 141, 6, 8364);
			attr_dev(path22, "fill", "var(--pants)");
			attr_dev(path22, "d", "M340 439c-8-3-16-5-23-10a5 5 0 0 1-2-2c-3 1-6-1-8-1-7 3-11 9-14 14v5c6 7 7 17 10 25l10 30c0 2 1 3 3 4-9 23-9 47 24 27 16-2 24 3 29-7l5-42c1-7 9-14 13-20l-40-20-7-3Z");
			add_location(path22, file$d, 145, 6, 8994);
			attr_dev(path23, "fill", "var(--shirt)");
			attr_dev(path23, "d", "M298 343a7 7 0 0 1-3-4 7 7 0 0 0 3 4c1-7-2-13-5-19-5-16-18-26-26-39a15 15 0 0 0-9-6c-1-1-3-3-6-2-2-6-8-8-13-10-7-4-14-8-23-9-7 10-13 19-19 31-10 22-9 46-4 70l9 47c1 6 2 12 0 17-3 11-9 21-12 33-1 7-5 13-3 20l13 4c14 3 26 7 40 9 12 2 23 0 31-10-1-5-5-7-7-10-3-3-5-6-4-10v-3c-5-8-10-15-12-24a3 3 0 0 1 0-2c-1-6-7-11-7-17l-10-30c-2-4 6-13 11-14 7-1 14 1 22-2 5-3 8 2 9 6l3 18a36 36 0 0 1 6 19v3c5 4 2 10 2 16h1c3 1 2 3 2 5a8 8 0 0 0 6 6c3-5 7-11 14-14-1-28-7-55-9-83Zm-4-7v2-2Z");
			add_location(path23, file$d, 149, 6, 9220);
			attr_dev(path24, "fill", "var(--pants)");
			attr_dev(path24, "d", "M186 502v22c26 8 54 7 75 3 30 4 80 19 31-19-1-7-7-10-9-16l-2-2-2-2-8-9c-8 10-19 12-31 10-14-2-26-6-40-9 0 4-2 3-5 2 2-2 4-1 5-2l-13-4-1 23v3Z");
			add_location(path24, file$d, 153, 6, 9755);
			attr_dev(path25, "fill", "var(--hair)");
			attr_dev(path25, "d", "m285 165-9 1c-15-3-31-2-46 1-13 3-20 14-20 23-1 19 5 36 10 54l7-5c6-7 1-14 0-21-1-8 0-12 10-12 3 3 5 7 6 11 0 4 3 4 6 3 5-3 9-6 10-13 0-4 2-7 6-9 5-2 5-6 4-11s1-7 6-7a49 49 0 0 1 7 1l4 3a26 26 0 0 0 6-9c2-6 0-10-7-10Z");
			add_location(path25, file$d, 157, 6, 9958);
			attr_dev(path26, "fill", "var(--pants)");
			attr_dev(path26, "d", "M200 480c0 4-2 3-5 2 2-2 4-1 5-2Z");
			add_location(path26, file$d, 161, 6, 10236);
			attr_dev(path27, "fill", "var(--flesh)");
			attr_dev(path27, "d", "M294 229c5-3 4-6 1-10-3-3-6-6-5-11 1-8-2-16-4-24l-4-3a49 49 0 0 0-7-1c-5 0-7 2-6 7s1 9-4 11c-4 2-6 5-6 9-1 7-5 10-10 13-3 1-6 1-6-3-1-4-3-8-6-11-10 0-11 4-10 12 1 7 6 14 0 21-2 2-4 5-7 5-3 4-3 9-4 14 9 1 16 5 23 9 5 2 11 4 13 10 3-1 5 1 6 3l2-7c1-12 5-15 17-15h4c4 0 7-2 7-7 1-7 8-12 5-20l1-2ZM326 526c-7-6-9-13-10-22-2-1-3-2-3-4l-10-30c-3-8-4-18-10-25v-5a8 8 0 0 1-6-6c0-2 1-4-3-5 0-6 3-12-2-16l-1-3a36 36 0 0 0-5-19l-3-18c-1-4-4-9-9-6-8 3-15 1-22 2-5 1-13 10-11 14l10 30c0 6 6 11 7 17a3 3 0 0 0 0 2c2 9 7 16 12 24v3c-1 4 1 7 4 10 2 3 6 5 7 10l8 8 2 3 2 2c2 6 8 9 9 16a29 29 0 0 1 9 19c1 8 2 15 7 21s7 13 3 20c-3 4 0 6 3 7 3 4 6 0 9 0 8 0 18-13 18-22 0-12-7-19-15-27Zm-12 5a1 1 0 0 1-1 0 1 1 0 0 0 1 0Z");
			add_location(path27, file$d, 162, 6, 10309);
			attr_dev(path28, "fill", "var(--hair)");
			attr_dev(path28, "d", "M96 577c2 5-2 5-4 4-5 0-6 2-7 7 0 6 0 11 7 13 4 1 7 4 11 6 2 1 3 4 2 6 0 3-2 5-4 5l-15 4H74l-1-1c-16-3-23-14-24-30-1-9-5-18-8-27-3-12 2-18 14-18 5 0 10 2 15 1l2 3-3 4c-5 3-7 7-4 13 4 5 15 10 19 8 5-3 9-1 12 2ZM480 651c-6 8-13 11-23 12-19 2-38 3-57 1l-35-2c-2-1-5 0-4-4 3-13 3-27 10-40 1-2 1-5 4-3l7 10c3 3 7 6 10 3 5-4 13-5 12-13-1-7 1-10 7-11 3 1 3 4 3 6 0 11 6 15 14 18 15 6 28 15 45 15 3 0 5 2 7 4Z");
			add_location(path28, file$d, 166, 6, 11074);
			attr_dev(g2, "id", "lunge-3");
			attr_dev(g2, "class", "svelte-xtqzkm");
			add_location(g2, file$d, 140, 4, 8341);
			attr_dev(g3, "class", "shapes svelte-xtqzkm");
			add_location(g3, file$d, 69, 2, 1171);
			attr_dev(g4, "class", "svelte-xtqzkm");
			toggle_class(g4, "paused", /*isPaused*/ ctx[1]);
			toggle_class(g4, "flip", /*flipsvg*/ ctx[2]);
			add_location(g4, file$d, 68, 0, 1120);
			attr_dev(svg, "xmlns", "http://www.w3.org/2000/svg");
			attr_dev(svg, "viewBox", "0 0 483.3 693.4");
			attr_dev(svg, "height", "100%");
			attr_dev(svg, "width", "100%");
			attr_dev(svg, "class", "svelte-xtqzkm");
			add_location(svg, file$d, 67, 0, 1025);
		},
		l: function claim(nodes) {
			throw new Error("options.hydrate only works if the component was compiled with the `hydratable: true` option");
		},
		m: function mount(target, anchor) {
			insert_dev(target, svg, anchor);
			append_dev(svg, t);
			append_dev(svg, g4);
			append_dev(g4, g3);
			append_dev(g3, g0);
			append_dev(g0, path0);
			append_dev(g0, path1);
			append_dev(g0, path2);
			append_dev(g0, path3);
			append_dev(g0, path4);
			append_dev(g0, path5);
			append_dev(g0, path6);
			append_dev(g0, path7);
			append_dev(g0, path8);
			append_dev(g0, path9);
			append_dev(g0, path10);
			append_dev(g0, path11);
			append_dev(g0, path12);
			append_dev(g3, g1);
			append_dev(g1, path13);
			append_dev(g1, path14);
			append_dev(g1, path15);
			append_dev(g1, path16);
			append_dev(g1, path17);
			append_dev(g1, path18);
			append_dev(g1, path19);
			append_dev(g1, path20);
			append_dev(g3, g2);
			append_dev(g2, path21);
			append_dev(g2, path22);
			append_dev(g2, path23);
			append_dev(g2, path24);
			append_dev(g2, path25);
			append_dev(g2, path26);
			append_dev(g2, path27);
			append_dev(g2, path28);
			/*g3_binding*/ ctx[4](g3);
			if (if_block) if_block.m(g4, null);
		},
		p: function update(ctx, [dirty]) {
			if (/*isPaused*/ ctx[1]) {
				if (if_block) ; else {
					if_block = create_if_block$d(ctx);
					if_block.c();
					if_block.m(g4, null);
				}
			} else if (if_block) {
				if_block.d(1);
				if_block = null;
			}

			if (dirty & /*isPaused*/ 2) {
				toggle_class(g4, "paused", /*isPaused*/ ctx[1]);
			}

			if (dirty & /*flipsvg*/ 4) {
				toggle_class(g4, "flip", /*flipsvg*/ ctx[2]);
			}
		},
		i: noop,
		o: noop,
		d: function destroy(detaching) {
			if (detaching) detach_dev(svg);
			/*g3_binding*/ ctx[4](null);
			if (if_block) if_block.d();
		}
	};

	dispatch_dev("SvelteRegisterBlock", {
		block,
		id: create_fragment$d.name,
		type: "component",
		source: "",
		ctx
	});

	return block;
}

function instance$d($$self, $$props, $$invalidate) {
	let { $$slots: slots = {}, $$scope } = $$props;
	validate_slots('Workout_reverselunges', slots, []);
	let { direction = "right" } = $$props;
	let { isPaused = false } = $$props;
	let { rootElement } = $$props;
	let flipsvg = false;

	if (direction == "left") {
		flipsvg = true;
	}

	const writable_props = ['direction', 'isPaused', 'rootElement'];

	Object.keys($$props).forEach(key => {
		if (!~writable_props.indexOf(key) && key.slice(0, 2) !== '$$' && key !== 'slot') console.warn(`<Workout_reverselunges> was created with unknown prop '${key}'`);
	});

	function g3_binding($$value) {
		binding_callbacks[$$value ? 'unshift' : 'push'](() => {
			rootElement = $$value;
			$$invalidate(0, rootElement);
		});
	}

	$$self.$$set = $$props => {
		if ('direction' in $$props) $$invalidate(3, direction = $$props.direction);
		if ('isPaused' in $$props) $$invalidate(1, isPaused = $$props.isPaused);
		if ('rootElement' in $$props) $$invalidate(0, rootElement = $$props.rootElement);
	};

	$$self.$capture_state = () => ({
		direction,
		isPaused,
		rootElement,
		flipsvg
	});

	$$self.$inject_state = $$props => {
		if ('direction' in $$props) $$invalidate(3, direction = $$props.direction);
		if ('isPaused' in $$props) $$invalidate(1, isPaused = $$props.isPaused);
		if ('rootElement' in $$props) $$invalidate(0, rootElement = $$props.rootElement);
		if ('flipsvg' in $$props) $$invalidate(2, flipsvg = $$props.flipsvg);
	};

	if ($$props && "$$inject" in $$props) {
		$$self.$inject_state($$props.$$inject);
	}

	return [rootElement, isPaused, flipsvg, direction, g3_binding];
}

class Workout_reverselunges extends SvelteComponentDev {
	constructor(options) {
		super(options);

		init(this, options, instance$d, create_fragment$d, safe_not_equal, {
			direction: 3,
			isPaused: 1,
			rootElement: 0
		});

		dispatch_dev("SvelteRegisterComponent", {
			component: this,
			tagName: "Workout_reverselunges",
			options,
			id: create_fragment$d.name
		});

		const { ctx } = this.$$;
		const props = options.props || {};

		if (/*rootElement*/ ctx[0] === undefined && !('rootElement' in props)) {
			console.warn("<Workout_reverselunges> was created without expected prop 'rootElement'");
		}
	}

	get direction() {
		throw new Error("<Workout_reverselunges>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
	}

	set direction(value) {
		throw new Error("<Workout_reverselunges>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
	}

	get isPaused() {
		throw new Error("<Workout_reverselunges>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
	}

	set isPaused(value) {
		throw new Error("<Workout_reverselunges>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
	}

	get rootElement() {
		throw new Error("<Workout_reverselunges>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
	}

	set rootElement(value) {
		throw new Error("<Workout_reverselunges>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
	}
}

var workoutReverselunges = /*#__PURE__*/Object.freeze({
    __proto__: null,
    'default': Workout_reverselunges
});

/* src/workouts/workout-shadowboxing.svelte generated by Svelte v3.49.0 */

const file$c = "src/workouts/workout-shadowboxing.svelte";

// (89:4) {#if isPaused}
function create_if_block$c(ctx) {
	let svg;
	let path;

	const block = {
		c: function create() {
			svg = svg_element("svg");
			path = svg_element("path");
			attr_dev(path, "d", "M10 24h-6v-24h6v24zm10 0h-6v-24h6v24zm-11-23h-4v22h4v-22zm10 0h-4v22h4v-22z");
			add_location(path, file$c, 89, 133, 7010);
			attr_dev(svg, "viewBox", "-6 -5 36 36");
			attr_dev(svg, "width", "100%");
			attr_dev(svg, "height", "100%");
			attr_dev(svg, "xmlns", "http://www.w3.org/2000/svg");
			attr_dev(svg, "fill-rule", "evenodd");
			attr_dev(svg, "clip-rule", "evenodd");
			add_location(svg, file$c, 89, 4, 6881);
		},
		m: function mount(target, anchor) {
			insert_dev(target, svg, anchor);
			append_dev(svg, path);
		},
		d: function destroy(detaching) {
			if (detaching) detach_dev(svg);
		}
	};

	dispatch_dev("SvelteRegisterBlock", {
		block,
		id: create_if_block$c.name,
		type: "if",
		source: "(89:4) {#if isPaused}",
		ctx
	});

	return block;
}

function create_fragment$c(ctx) {
	let svg;
	let t;
	let g2;
	let g1;
	let g0;
	let path0;
	let path1;
	let path2;
	let path3;
	let path4;
	let path5;
	let path6;
	let path7;
	let path8;
	let path9;
	let path10;
	let path11;
	let path12;
	let path13;
	let path14;
	let if_block = /*isPaused*/ ctx[1] && create_if_block$c(ctx);

	const block = {
		c: function create() {
			svg = svg_element("svg");
			t = text(">\n");
			g2 = svg_element("g");
			g1 = svg_element("g");
			g0 = svg_element("g");
			path0 = svg_element("path");
			path1 = svg_element("path");
			path2 = svg_element("path");
			path3 = svg_element("path");
			path4 = svg_element("path");
			path5 = svg_element("path");
			path6 = svg_element("path");
			path7 = svg_element("path");
			path8 = svg_element("path");
			path9 = svg_element("path");
			path10 = svg_element("path");
			path11 = svg_element("path");
			path12 = svg_element("path");
			path13 = svg_element("path");
			path14 = svg_element("path");
			if (if_block) if_block.c();
			attr_dev(path0, "fill", "var(--hair)");
			attr_dev(path0, "d", "m631 0 13 5c12 4 22 13 31 21l6 4c6 3 6 8 0 12l-10 5c-3-3-8-4-9-8-1-3-4-5-7-4s-4 3-4 7-1 8-7 7c-2 0-4 1-5 3l-6 10c-1 2-1 5-5 4-3-1-2-5-1-7a20 20 0 0 0 0-11c-1-5-5-7-9-7s-7 3-8 7c-2 9-8 14-17 17v-7l5-22c4-15 9-30 26-35l1-1ZM37 496c2-1 4-1 4 2-1 3 2 4 4 6 10 8 21 8 32 6 4 0 8 0 10 5s-1 9-5 11a47 47 0 0 1-25 7c-11 1-22 2-32 7-5 3-11 4-17 1-4-1-7-2-6-7a3 3 0 0 0-2-3v-13c3-1 2-4 3-6s1-4 4-4l4 4a18 18 0 0 0 23 1c3-2 5-4 3-8a13 13 0 0 1 0-9ZM227 560c-2-6-6-7-12-7-5 0-11 1-17-2-12-7-28-10-37-22a15 15 0 0 1-3 9c-1 2-2 5-1 7 2 3 1 5-1 7-6 4-12 4-18 1-7-2-8-8-9-15a4 4 0 0 0-4 3c-2 7-4 14-3 21 0 3 2 6 1 9 0 6 1 9 8 10l14 1c7 0 14-2 20 1h32a2 2 0 0 0 0-1c8-1 16-3 24-7 5-3 8-10 6-15Z");
			add_location(path0, file$c, 26, 6, 648);
			attr_dev(path1, "fill", "var(--shirt)");
			attr_dev(path1, "d", "M647 162c-3-2-4-6-6-9-2-2-3-2-5 0l-16 16a39 39 0 0 1-13 8c-5 3-6 5-1 9 7 7 14 14 23 19 4 2 7 6 12 7 2 4 8 4 11 7 1 14-1 27-2 40a24 24 0 0 1-1 5 41 41 0 0 1-20 14c-14 5-29 3-43 1-13-2-25-4-33-15-2-4 0-6 2-9 5-9 9-17 8-28-4-21-6-43-11-64-1-6-4-12-4-18-1-22 5-42 24-56 4-3 6-8 10-10l10 9c6 6 13 11 21 16 2 1 4 1 5-1 3-8 5-4 9-1 2 2 6 5 8 2 5-5 12-6 15-12 2-5 6-6 11-6 5 3 10-1 14 2-4 2-6 7-4 10 3 5 0 9-1 13a26 26 0 0 0-1 9c-2 7-7 11-14 11h-6c-7 0-7 0-5 7 2 8 4 16 3 24ZM126 216a149 149 0 0 0-5 44c1 4-2 9 0 14 1 1-1 1-2 1-6-6-14-7-23-5a81 81 0 0 1-31 1l-35-1c-2-6 2-12 3-18a67 67 0 0 0 2-15l3-30a294 294 0 0 1 11-66 74 74 0 0 1 19-33c4-4 8-7 11-12a7 7 0 0 1 6-3h6c8-2 12 4 16 9 3 5 6 8 12 8 10 9 17 21 25 32 3 5 7 10 12 14 0 2 1 4-2 5-6 1-11 4-17 7-3 0-7 0-9 4a53 53 0 0 0-6 3c-2 2-3 4 0 6 1 1 3 4 6 3 4 5 3 9 1 15-1 5-4 11-3 17Z");
			add_location(path1, file$c, 30, 6, 1386);
			attr_dev(path2, "fill", "var(--pants)");
			attr_dev(path2, "d", "M553 264c8 11 20 13 33 15 14 1 29 4 43-1a41 41 0 0 0 19-14c6 24 18 47 25 71a40 40 0 0 1 2 12c-3 8-9 11-18 11l-22 1h-4c-10 0-10 0-12-11l-16 39c-1 3-3 5-7 5s-6 2-7 6c0 2-2 3-4 3-5 0-9-2-13-4-3-1-6-3-9-2-8 2-16 0-22-5-2-2-1-4 0-7 4-13 9-26 10-40 3-20 4-40 2-60a63 63 0 0 1 0-19ZM30 270l35 1a81 81 0 0 0 31-1c9-2 16-1 23 5 1 10 4 18 11 25a79 79 0 0 1 20 33l8 20c0 2 2 3 0 5l-7 3-38 23-10 4-5-8c-2-4-4-6-9-4a63 63 0 0 1-28 2c-3-1-5-3-5-7 1-20-5-37-18-53-11-14-11-31-8-48Z");
			add_location(path2, file$c, 34, 6, 2275);
			attr_dev(path3, "fill", "var(--flesh)");
			attr_dev(path3, "d", "m113 384 38-23 7-3 15 31c2 5 2 9 0 14-3 10-9 20-7 30 3 23-1 44-4 66l-1 30a15 15 0 0 1-3 9c-1 2-2 5-1 7 2 3 1 5-1 7-6 4-12 4-18 1-7-2-8-8-9-15 0-16 1-32-1-48l-2-13c-8-17-6-33 1-49l3-15c1-7-3-12-7-17-4-4-9-7-10-12Z");
			add_location(path3, file$c, 38, 6, 2803);
			attr_dev(path4, "fill", "var(--flesh)");
			attr_dev(path4, "d", "M61 378a63 63 0 0 0 28-2c5-2 7 0 9 4l5 8a4 4 0 0 0-2 3 24 24 0 0 1-8 18c-11 11-19 24-27 38s-18 27-26 42c-2 2-3 4-3 7a13 13 0 0 0 0 9c2 4 0 6-3 8a18 18 0 0 1-23-1l-4-4 18-54c3-7 3-15 6-22 5-11 11-19 20-26 9-5 12-13 10-23v-5Z");
			add_location(path4, file$c, 42, 6, 3077);
			attr_dev(path5, "fill", "var(--flesh)");
			attr_dev(path5, "d", "m635 359 22-1c9 0 15-3 18-11 3 1 3 3 4 5l4 8c8 12 4 22-1 33a176 176 0 0 0-12 30c-5 16-12 31-16 48l-2 8c-3 2-5 4-2 8 2 4-1 6-3 9-1 2-4 2-7 2-8-2-12-8-13-16 4-14 7-29 7-44a138 138 0 0 1 3-34 39 39 0 0 1 6-14c5-8 5-12-1-20-2-4-6-7-7-11Z");
			add_location(path5, file$c, 46, 6, 3362);
			attr_dev(path6, "fill", "var(--flesh)");
			attr_dev(path6, "d", "M661 86c-5 0-9 1-11 6-3 6-10 7-15 12-2 3-6 0-8-2-4-4-6-7-9 0-1 3-3 3-5 2-8-5-15-10-21-17l-10-8a18 18 0 0 0 11-14c9-3 15-8 17-17 1-4 3-7 8-7s8 2 9 7a20 20 0 0 1 0 11c-1 2-1 6 1 7 4 1 4-2 6-4l5-10c1-2 3-3 5-3 6 1 7-3 7-7s0-6 4-7 6 1 7 4c1 4 6 5 9 8a45 45 0 0 1-8 20c-5 6-3 13-2 19Z");
			add_location(path6, file$c, 50, 6, 3657);
			attr_dev(path7, "fill", "var(--hair)");
			attr_dev(path7, "d", "M487 529a5 5 0 0 1 1 3c-1 9 4 14 11 17l28 12c4 1 9 3 9 8s-5 7-9 9a28 28 0 0 1-11 2 2625 2625 0 0 1-41-2c-14-6-26-14-38-23-3-2-3-3-1-6l18-27c1-1 1-3 4-2-1 6-3 13 0 19 1 3 3 7 7 7 4-1 12-6 13-9 0-6 3-9 9-8Z");
			add_location(path7, file$c, 54, 6, 3998);
			attr_dev(path8, "fill", "var(--flesh)");
			attr_dev(path8, "d", "M119 110c-6 0-9-3-12-8-4-5-8-11-16-9h-6c3-6 5-11 6-17 2 2 4 3 6 0 3-3 6-6 7-10a57 57 0 0 1 3-12c2-5 6-7 11-6s5 5 4 9a16 16 0 0 0 0 3c1 2-2 6 2 6 3 1 6-1 7-4a17 17 0 0 0 0-12c-1-3-1-5 3-7 2 0 3-2 3-4-1-5 1-7 6-5 3 0 5 3 7 5 0 7 2 14 1 22-1 3 2 6 4 9s2 6-2 8-1 6-3 9l-7 11c0 2-4 1-6 1-4 0-8-5-12 0a31 31 0 0 0-6 11Z");
			add_location(path8, file$c, 58, 6, 4263);
			attr_dev(path9, "fill", "var(--hair)");
			attr_dev(path9, "d", "M150 39c-2-2-4-5-7-5-5-2-7 0-6 5 0 2-1 4-3 4-4 2-4 4-3 7a17 17 0 0 1 0 12c-1 3-4 5-7 4-4 0-1-4-2-6a16 16 0 0 1 0-3c1-4 1-8-4-9s-9 1-11 6a57 57 0 0 0-3 12c-1 4-4 7-7 10-2 3-4 2-6 0-5-15-7-29-6-44 1-12 11-20 23-19 13 0 26 4 38 9l8 1c3 0 5 2 5 4 1 3 0 6-3 7l-6 5Z");
			add_location(path9, file$c, 62, 6, 4638);
			attr_dev(path10, "fill", "var(--shirt)");
			attr_dev(path10, "d", "M370 196c3-1 5 1 7 4l8 17c2 3 1 5 0 8l-9 18c-1 3-8 5-11 3v-3c2-5 3-10 6-14 5-5 4-10 1-16l-6-12c-3-5-3-5 4-5Z");
			add_location(path10, file$c, 66, 6, 4959);
			attr_dev(path11, "fill", "var(--pants)");
			attr_dev(path11, "d", "m699 510-21-8c-11-4-20-10-24-22l-2-1c-3 2-5 4-2 8 2 4-1 6-3 9-1 2-4 2-7 2-8-2-12-8-13-16-2 0-3 1-3 2-1 10-6 18-7 27-1 4 0 6 4 7a1 1 0 0 0 1 0h2a5 5 0 0 0 4 0l8 1 6 1h10l3 1 30 1 13-2c3-1 6-2 7-5 0-4-4-4-6-5Z");
			add_location(path11, file$c, 70, 6, 5129);
			attr_dev(path12, "fill", "var(--flesh)");
			attr_dev(path12, "d", "M629 205c4 2 7 6 11 7h1c2 4 8 4 11 7a48 48 0 0 1 7 2c5 2 9 0 11-4 6-12 13-23 17-36 5-18 7-36 10-54 0-4 1-6 5-6 26 1 51-5 76-11 9-2 10-2 14 7a15 15 0 0 0 23 6c3-2 5-6 8-7v-10l-2-2c0-7-4-8-10-7s-11 0-16-2c-5-3-11-3-16-1h-11l-10-1c-21-3-41-7-62-3a6 6 0 0 1-5-2c-4-3-8-5-12 0h-4c-4 2-6 6-4 10 3 5 0 9-1 13a26 26 0 0 0-1 9c3-2 6-1 8-1 5 2 4 6 3 9-2 9-6 17-10 25-4 7-7 15-12 21-2 3-4 2-5 0-1-4-5-7-6-11-3-3-4-6-6-10-2-2-3-2-5 0l-16 16a39 39 0 0 1-13 8c-5 3-6 5-1 9 7 7 14 14 23 19");
			add_location(path12, file$c, 74, 6, 5398);
			attr_dev(path13, "fill", "var(--flesh)");
			attr_dev(path13, "d", "M128 173a53 53 0 0 0-6 2c-2 2-3 4 0 6 1 1 3 4 6 3 4 5 3 9 1 15-1 5-4 11-3 17 2 0 5 0 6-3l3-2v-1a2 2 0 0 0 2-3l4-2a2 2 0 0 0 2-1c4-3 7 0 11 1l2 1c3 4 7 6 12 7 4 2 10 4 13 0 3-3 6-3 9-5 6-2 11-4 16-8l34-30c4-4 8-8 13-9s9-4 12-7c6-6 7-14 2-21-2-2-5-4-6-7s-11-5-13-3c-4 7-13 11-11 21 0 2-2 4-4 5-16 11-32 22-51 27-3-1-5 1-7 1a2 2 0 0 0-1 0c-7-7-7-7-1-14l2-4c5-6 12-10 16-16 3-5 5-10 2-15a27 27 0 0 0-17-12 6 6 0 0 0-3 1c-3 1-11 14-9 18 2 6 1 11-4 15l-4 6c0 2 1 4-2 5-6 1-11 5-17 7-3 0-7 0-9 5");
			add_location(path13, file$c, 78, 6, 5934);
			attr_dev(path14, "fill", "var(--flesh)");
			attr_dev(path14, "d", "M572 397c-3-1-6-3-9-2-8 2-15 0-22-5l-3 8c-2 5-4 11-9 14l-17 17c-5 5-11 11-14 18-6 8-10 17-13 27v1a7 7 0 0 0-3 5c-7 14-16 26-24 40-1 6-3 13 0 19 1 3 3 7 7 7 4-1 12-6 13-9 0-6 3-9 9-8 2-8 6-14 10-21 5-7 13-13 17-21a19 19 0 0 0 8-9v-1c3-1 4-3 5-6l4-5c4-4 7-8 9-13l16-16c7-7 16-13 21-22l8-14c-5 0-9-2-13-4Z");
			add_location(path14, file$c, 82, 6, 6484);
			attr_dev(g0, "id", "shadow-box");
			attr_dev(g0, "class", "svelte-49ixuw");
			add_location(g0, file$c, 25, 4, 622);
			attr_dev(g1, "class", "shapes svelte-49ixuw");
			add_location(g1, file$c, 24, 2, 575);
			attr_dev(g2, "class", "svelte-49ixuw");
			toggle_class(g2, "paused", /*isPaused*/ ctx[1]);
			toggle_class(g2, "flip", /*flipsvg*/ ctx[2]);
			add_location(g2, file$c, 23, 0, 524);
			attr_dev(svg, "xmlns", "http://www.w3.org/2000/svg");
			attr_dev(svg, "viewBox", "0 0 823.4 582.5");
			attr_dev(svg, "height", "100%");
			attr_dev(svg, "width", "100%");
			attr_dev(svg, "class", "svelte-49ixuw");
			add_location(svg, file$c, 22, 0, 429);
		},
		l: function claim(nodes) {
			throw new Error("options.hydrate only works if the component was compiled with the `hydratable: true` option");
		},
		m: function mount(target, anchor) {
			insert_dev(target, svg, anchor);
			append_dev(svg, t);
			append_dev(svg, g2);
			append_dev(g2, g1);
			append_dev(g1, g0);
			append_dev(g0, path0);
			append_dev(g0, path1);
			append_dev(g0, path2);
			append_dev(g0, path3);
			append_dev(g0, path4);
			append_dev(g0, path5);
			append_dev(g0, path6);
			append_dev(g0, path7);
			append_dev(g0, path8);
			append_dev(g0, path9);
			append_dev(g0, path10);
			append_dev(g0, path11);
			append_dev(g0, path12);
			append_dev(g0, path13);
			append_dev(g0, path14);
			/*g1_binding*/ ctx[4](g1);
			if (if_block) if_block.m(g2, null);
		},
		p: function update(ctx, [dirty]) {
			if (/*isPaused*/ ctx[1]) {
				if (if_block) ; else {
					if_block = create_if_block$c(ctx);
					if_block.c();
					if_block.m(g2, null);
				}
			} else if (if_block) {
				if_block.d(1);
				if_block = null;
			}

			if (dirty & /*isPaused*/ 2) {
				toggle_class(g2, "paused", /*isPaused*/ ctx[1]);
			}

			if (dirty & /*flipsvg*/ 4) {
				toggle_class(g2, "flip", /*flipsvg*/ ctx[2]);
			}
		},
		i: noop,
		o: noop,
		d: function destroy(detaching) {
			if (detaching) detach_dev(svg);
			/*g1_binding*/ ctx[4](null);
			if (if_block) if_block.d();
		}
	};

	dispatch_dev("SvelteRegisterBlock", {
		block,
		id: create_fragment$c.name,
		type: "component",
		source: "",
		ctx
	});

	return block;
}

function instance$c($$self, $$props, $$invalidate) {
	let { $$slots: slots = {}, $$scope } = $$props;
	validate_slots('Workout_shadowboxing', slots, []);
	let { direction = "right" } = $$props;
	let { isPaused = false } = $$props;
	let { rootElement } = $$props;
	let flipsvg = false;

	if (direction == "left") {
		flipsvg = true;
	}

	const writable_props = ['direction', 'isPaused', 'rootElement'];

	Object.keys($$props).forEach(key => {
		if (!~writable_props.indexOf(key) && key.slice(0, 2) !== '$$' && key !== 'slot') console.warn(`<Workout_shadowboxing> was created with unknown prop '${key}'`);
	});

	function g1_binding($$value) {
		binding_callbacks[$$value ? 'unshift' : 'push'](() => {
			rootElement = $$value;
			$$invalidate(0, rootElement);
		});
	}

	$$self.$$set = $$props => {
		if ('direction' in $$props) $$invalidate(3, direction = $$props.direction);
		if ('isPaused' in $$props) $$invalidate(1, isPaused = $$props.isPaused);
		if ('rootElement' in $$props) $$invalidate(0, rootElement = $$props.rootElement);
	};

	$$self.$capture_state = () => ({
		direction,
		isPaused,
		rootElement,
		flipsvg
	});

	$$self.$inject_state = $$props => {
		if ('direction' in $$props) $$invalidate(3, direction = $$props.direction);
		if ('isPaused' in $$props) $$invalidate(1, isPaused = $$props.isPaused);
		if ('rootElement' in $$props) $$invalidate(0, rootElement = $$props.rootElement);
		if ('flipsvg' in $$props) $$invalidate(2, flipsvg = $$props.flipsvg);
	};

	if ($$props && "$$inject" in $$props) {
		$$self.$inject_state($$props.$$inject);
	}

	return [rootElement, isPaused, flipsvg, direction, g1_binding];
}

class Workout_shadowboxing extends SvelteComponentDev {
	constructor(options) {
		super(options);

		init(this, options, instance$c, create_fragment$c, safe_not_equal, {
			direction: 3,
			isPaused: 1,
			rootElement: 0
		});

		dispatch_dev("SvelteRegisterComponent", {
			component: this,
			tagName: "Workout_shadowboxing",
			options,
			id: create_fragment$c.name
		});

		const { ctx } = this.$$;
		const props = options.props || {};

		if (/*rootElement*/ ctx[0] === undefined && !('rootElement' in props)) {
			console.warn("<Workout_shadowboxing> was created without expected prop 'rootElement'");
		}
	}

	get direction() {
		throw new Error("<Workout_shadowboxing>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
	}

	set direction(value) {
		throw new Error("<Workout_shadowboxing>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
	}

	get isPaused() {
		throw new Error("<Workout_shadowboxing>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
	}

	set isPaused(value) {
		throw new Error("<Workout_shadowboxing>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
	}

	get rootElement() {
		throw new Error("<Workout_shadowboxing>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
	}

	set rootElement(value) {
		throw new Error("<Workout_shadowboxing>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
	}
}

var workoutShadowboxing = /*#__PURE__*/Object.freeze({
    __proto__: null,
    'default': Workout_shadowboxing
});

/* src/workouts/workout-skater.svelte generated by Svelte v3.49.0 */

const file$b = "src/workouts/workout-skater.svelte";

// (121:4) {#if isPaused}
function create_if_block$b(ctx) {
	let svg;
	let path;

	const block = {
		c: function create() {
			svg = svg_element("svg");
			path = svg_element("path");
			attr_dev(path, "d", "M10 24h-6v-24h6v24zm10 0h-6v-24h6v24zm-11-23h-4v22h4v-22zm10 0h-4v22h4v-22z");
			add_location(path, file$b, 121, 133, 7550);
			attr_dev(svg, "viewBox", "-6 -5 36 36");
			attr_dev(svg, "width", "100%");
			attr_dev(svg, "height", "100%");
			attr_dev(svg, "xmlns", "http://www.w3.org/2000/svg");
			attr_dev(svg, "fill-rule", "evenodd");
			attr_dev(svg, "clip-rule", "evenodd");
			add_location(svg, file$b, 121, 4, 7421);
		},
		m: function mount(target, anchor) {
			insert_dev(target, svg, anchor);
			append_dev(svg, path);
		},
		d: function destroy(detaching) {
			if (detaching) detach_dev(svg);
		}
	};

	dispatch_dev("SvelteRegisterBlock", {
		block,
		id: create_if_block$b.name,
		type: "if",
		source: "(121:4) {#if isPaused}",
		ctx
	});

	return block;
}

function create_fragment$b(ctx) {
	let svg;
	let t;
	let g3;
	let g2;
	let g0;
	let path0;
	let path1;
	let path2;
	let path3;
	let path4;
	let path5;
	let path6;
	let path7;
	let path8;
	let g1;
	let path9;
	let path10;
	let path11;
	let path12;
	let path13;
	let path14;
	let path15;
	let path16;
	let if_block = /*isPaused*/ ctx[1] && create_if_block$b(ctx);

	const block = {
		c: function create() {
			svg = svg_element("svg");
			t = text(">\n");
			g3 = svg_element("g");
			g2 = svg_element("g");
			g0 = svg_element("g");
			path0 = svg_element("path");
			path1 = svg_element("path");
			path2 = svg_element("path");
			path3 = svg_element("path");
			path4 = svg_element("path");
			path5 = svg_element("path");
			path6 = svg_element("path");
			path7 = svg_element("path");
			path8 = svg_element("path");
			g1 = svg_element("g");
			path9 = svg_element("path");
			path10 = svg_element("path");
			path11 = svg_element("path");
			path12 = svg_element("path");
			path13 = svg_element("path");
			path14 = svg_element("path");
			path15 = svg_element("path");
			path16 = svg_element("path");
			if (if_block) if_block.c();
			attr_dev(path0, "fill", "var(--hair)");
			attr_dev(path0, "d", "M180 661c3 12 7 23 0 35-2 3 0 5 0 7 1 17 4 24-19 32h-15c-14-10-17-22-10-38 5-11 11-22 14-35a5 5 0 0 1 3-3l10-3c7-3 9-2 10 6 0 2-1 5 2 5 4 0 2-3 3-5l2-1ZM381 569c-3 1-2 4-3 6-5 11-19 13-27 3-8-9-10-20-11-32s-3-23-9-33c0-2 1-2 3-2 11-1 19-7 22-17h1c8 15 16 31 21 48 1 2 0 5 3 7Z");
			add_location(path0, file$b, 51, 6, 1001);
			attr_dev(path1, "fill", "var(--shirt)");
			attr_dev(path1, "d", "M244 272v2c9 6 11 16 16 25 4 8 13 15 13 26l-9 6c-16 10-32 21-51 25-29 6-59 6-89 4l-9-5c-2-4-2-8 1-12a6 6 0 0 0-1-7l-7-14c-15-23-21-50-30-76l-1-4c-1-2-2-3-5-3s-3 2-3 4c-2 6-6 11-12 14-11 1-20-2-27-12l-6-9c0-13 5-25 7-38 1-10 9-17 9-28l1-2c19-7 34-20 49-31l5-3 1 8c1 5 1 10 6 14 1 4 3 6 7 6h18c11 0 24-12 25-24 4-6 4-11-1-17a8 8 0 0 1-2-6c14 3 26 9 40 12a84 84 0 0 0 23 3c7 0 12 2 16 8 8 12 16 24 20 38 2 8 7 15 11 22 2 2 3 5 2 8-6 0-12 2-16 6s-8 4-12 0c-5-5-9-10-15-14-7-5-10-10-10-19v-20c0-5-2-7-6-9-7-5-14-2-22-3-4 0-9 2-10 5-2 5-3 10 2 14 3 2 3 5 4 8 2 12 5 23 14 32 3 3 7 2 8 5 7 13 17 23 22 37 4 11 12 20 24 24Z");
			add_location(path1, file$b, 55, 6, 1338);
			attr_dev(path2, "fill", "var(--pants)");
			attr_dev(path2, "d", "m115 355 9 5c30 2 60 2 90-4 18-4 34-15 50-25l9-6 4 7c4 16 10 31 16 47l11 32c3 6 7 10 12 14 3 4 4 7 0 11-4-6-10-6-16-4l-21 8c-10 4-20 9-16 23l-1 1c-5 1-8-2-10-7-11-18-22-36-38-51-1-1-3-4-5-3s-2 4-2 6c-1 14-7 27-13 40-3 7-5 14-5 22 1 8-3 12-11 14 1-8-3-10-10-10-12 0-24 2-36 4-4 1-9 0-12 4-3 0-5-1-5-5 2-20 1-41 0-61 0-12 4-25-4-37-4-8-1-17 4-25Z");
			add_location(path2, file$b, 59, 6, 2015);
			attr_dev(path3, "fill", "var(--flesh)");
			attr_dev(path3, "d", "m24 236 6 9c7 10 16 13 27 12-10 24-9 50-18 74-4 12-8 25-9 39a32 32 0 0 0 5 19 50 50 0 0 1 8 35c0 5-3 9-8 9-4 1-8 5-11 3-8-7-18-9-23-19-1-2-2-5 0-7l3-10c3-8 3-15 4-23 0-29-3-59 2-88 3-15 9-29 12-43a66 66 0 0 0 2-10ZM244 272c-12-4-19-13-24-24-5-14-15-24-22-37-1-3-5-2-8-5-8-9-12-20-14-32-1-3-1-5-4-8-5-3-4-9-2-14 1-3 6-5 10-5 8 1 15-1 22 3 4 2 6 5 6 9v21c0 8 3 14 10 18 6 4 10 9 15 14 4 4 8 4 12 0 5-4 10-6 16-6 0 3 1 5 3 8l11 20c6 14 2 36-9 45-3 3-5 4-9 0a35 35 0 0 0-13-7Z");
			add_location(path3, file$b, 63, 6, 2421);
			attr_dev(path4, "fill", "var(--flesh)");
			attr_dev(path4, "d", "m262 464 1-1c-4-14 6-19 16-23l21-8c6-2 12-2 16 4 0 7 4 14 6 21 1 2 3 3 6 3 18 2 24 6 26 25l3 9h-1c-3 10-11 16-22 17-2 0-3 0-3 2-9 0-17 2-26-1-17-4-28-17-35-33-2-5-2-11-8-15Z");
			add_location(path4, file$b, 67, 6, 2955);
			attr_dev(path5, "fill", "var(--hair)");
			attr_dev(path5, "d", "M152 56c0-6-1-12-6-16-3-2-3-4-3-8 0-6-4-11-10-10-15 4-30 4-45 4l-1 2c-6 4 0 11-3 16-6 5-7 10-5 18 1 2 4 7-2 10-4-19-2-38-2-57 0-3 1-6 5-8 15-4 30-9 47-6 6 1 12 3 15 10 1 3 4 2 6 3 7 2 10 6 10 13 0 10-2 19-3 29Z");
			add_location(path5, file$b, 71, 6, 3190);
			attr_dev(path6, "fill", "var(--flesh)");
			attr_dev(path6, "d", "M177 597c2-11 6-23-1-34-1-5-8-9-6-15 6-21 8-42 9-63 0-8-4-10-11-10-12 0-24 2-36 4-4 1-9 0-12 4 4 8 8 15 7 23 0 19 2 37-4 55-2 8-3 18 2 26l2 6c7 22 17 43 26 66l9-4c8-2 9-1 10 7 1 2 0 5 3 5 4 0 2-4 3-5l2-1c-11-21-7-42-3-64Z");
			add_location(path6, file$b, 75, 6, 3461);
			attr_dev(path7, "fill", "var(--pants)");
			attr_dev(path7, "d", "M152 56h3v8c-1 2 1 4-2 6-2-5-1-10-1-14Z");
			add_location(path7, file$b, 79, 6, 3744);
			attr_dev(path8, "fill", "var(--flesh)");
			attr_dev(path8, "d", "M162 70c1-5-1-8-7-6-1 2 1 4-2 6-2-5-1-10-1-14 0-6-1-12-6-16-3-2-3-4-3-8 0-6-4-11-10-10-15 4-30 4-45 4l-1 2c-6 4 0 11-3 16a3 3 0 0 0 2-1 3 3 0 0 1-2 1c-6 5-7 10-5 18 1 2 4 7-2 10-6 0-3 5-3 8 0 6 4 10 7 14 5 6 4 14 10 19 8 6 7 13 5 21v8c1 5 1 10 6 14 1 4 3 6 8 6h17c11 0 24-12 25-24 4-6 4-12-1-17a8 8 0 0 1-2-6c-7-9 0-17 4-23 6-7 7-14 9-22ZM87 28l1-2Z");
			add_location(path8, file$b, 83, 6, 3845);
			attr_dev(g0, "id", "skate-2");
			attr_dev(g0, "class", "svelte-15tpw0y");
			add_location(g0, file$b, 50, 4, 978);
			attr_dev(path9, "fill", "var(--hair)");
			attr_dev(path9, "d", "M147 536c0 10-2 20-6 29-2 5-5 10-11 10s-11-4-14-10c-1-3-1-8-4-10v-15c4-6 3-14 8-21 8 17 13 20 27 17Z");
			add_location(path9, file$b, 89, 6, 4286);
			attr_dev(path10, "fill", "var(--shirt)");
			attr_dev(path10, "d", "M140 233c-3-2-2-6 0-9 7-16 14-31 25-46 12-17 31-26 50-33l30-10 2 2c-8 4-8 11-8 19 1 14 7 27 16 38 11 14 28 12 38-3 8-13 15-26 15-42-1-2 0-4 1-5 15 6 27 18 39 28l2 2c23 15 26 38 27 63v21c0 4-1 7-3 11-5 3-11 7-17 4-8-3-16-2-24-1a22 22 0 0 1-2-3c-1-3 1-7-3-7-3-1-3 3-5 6-3 8-4 18-5 27-2 17-13 33-12 51 1 4-1 8-3 12-6 10-8 22-17 31 0-2-2-2-4-2l-25 7c-12 2-23 6-35 3-20-5-39-11-57-21-9-5-17-11-27-14-6-5-5-11-3-17l3-12c3 0 5 3 6 4l21 15c9 6 20 11 27 21 5 7 13 11 21 15 5 2 17 2 19-1l9-11c7-9 5-17-4-23-2-1-7-1-6-4s4-1 7-2c3 0 5-2 6-4 1-1 0-3-1-4-5-4-12-6-17-5-7 2-14 3-20 7h-5c-12-7-21-17-29-27-5-8-10-17-3-27a48 48 0 0 0 6-16c1-5 1-10 3-14 4-6 0-7-4-10-11-5-23-7-34-14Z");
			add_location(path10, file$b, 93, 6, 4447);
			attr_dev(path11, "fill", "var(--pants)");
			attr_dev(path11, "d", "M138 362c10 3 18 9 27 14 18 10 37 16 57 21 12 3 23-1 35-3l25-7c2 0 4 0 5 2l-3 19c-1 4-3 7-1 11-4 9-4 18-6 28l-2 9a242 242 0 0 1-11 36l-3-2-45-13c-3 0-3 2-5 3-7-9-5-19-6-29v-25c-6 7-8 14-9 21-5 14-13 26-18 40l-2 1c-7 1-13-1-19-1-11-4-23-5-33-10 0-3 1-6-1-8-1-29-1-58 9-85a122 122 0 0 0 6-22Z");
			add_location(path11, file$b, 97, 6, 5174);
			attr_dev(path12, "fill", "var(--flesh)");
			attr_dev(path12, "d", "M309 144c-1 1-2 3-1 5 0 16-7 29-15 42-10 15-27 17-38 3-9-11-15-24-16-38 0-8 0-15 8-19l-2-2c0-8-2-15-7-22-6-7-6-15-1-22 2 2 0 5 3 7 2-13-3-26 6-37l1-4c1-11 3-13 14-12 10 2 19 2 29 0a32 32 0 0 1 8-2c8 0 13 4 12 13 0 3 1 6 3 8 4 4 6 10 5 16v16c3-2 2-5 3-6 7-2 8 2 7 8-3 8-5 16-11 23-5 6-11 14-8 23Z");
			add_location(path12, file$b, 101, 6, 5526);
			attr_dev(path13, "fill", "var(--flesh)");
			attr_dev(path13, "d", "M140 233c11 7 23 9 34 14 4 3 8 4 4 10-2 4-2 9-3 14a48 48 0 0 1-6 16c-7 10-2 20 3 27 8 10 17 20 29 27h5c6-4 13-5 20-7 5-1 12 1 17 5 1 1 2 3 1 4-1 2-3 4-6 4-3 1-7-1-7 2s4 3 6 4c9 6 11 14 4 23l-9 11c-2 3-14 3-19 1-8-4-16-8-21-15-7-10-18-15-27-21l-21-15c-1-1-3-4-6-4l-9-11c-7-8-10-16-5-27 8-20 10-41 16-62ZM211 480c2-1 2-3 5-3l45 13 3 2c-9 21-13 44-12 67 1 10-2 19-5 28-8 22-17 43-24 65l-4 16h-3c-7-7-10-8-18-1 0 1-1 2-2 0l1-3c9-31 1-64 10-96v-4c11-26 4-53 6-80l-2-4ZM283 419c-2-4 0-7 1-11l21-9c5-2 8-5 10-10 9-25 15-51 23-76a16 16 0 0 0 0-7 148 148 0 0 1-3-29c0-2 0-4-2-5 8-1 16-2 24 1 6 3 12-1 17-4l-2 21c-1 5-2 10-1 14 5 22-5 40-15 58a293 293 0 0 1-19 32c-7 9-9 20-12 31-3 13-12 19-22 25-9 4-19 3-28 6l2-9c6-1 9-6 13-10 5-5 7-9 4-16s-8-1-11-2Z");
			add_location(path13, file$b, 105, 6, 5883);
			attr_dev(path14, "fill", "var(--hair)");
			attr_dev(path14, "d", "M321 90c-1 2 0 4-3 6V80c1-6-1-12-5-16-2-2-3-5-3-8 1-9-4-13-12-13a32 32 0 0 0-8 2c-10 2-19 2-29 0-11-1-13 1-14 12l-1 4c-9 11-4 24-6 37-3-2-1-5-3-7-3-19-1-39 0-58 0-4 3-7 7-8 17-4 35-10 54-3 5 2 10 4 12 9 1 4 4 4 6 5 7 2 10 6 10 14 0 13-5 26-5 40ZM197 664l-1 3c1 2 2 1 2 0 8-7 11-6 18 1h3a129 129 0 0 0 14 37c4 5 2 10-2 15a35 35 0 0 1-23 12c-7 0-12-2-13-9-3-17-6-35-3-53 0-2 0-6 5-6Z");
			add_location(path14, file$b, 109, 6, 6687);
			attr_dev(path15, "fill", "var(--flesh)");
			attr_dev(path15, "d", "M176 488c-7 1-13-1-19-1-11-4-23-5-33-10h-1c1 14-5 28-3 42 8 17 13 20 27 17 11-6 20-14 22-27 3-2 2-5 2-8a1 1 0 0 0 1-1c3-3 2-8 4-12Z");
			add_location(path15, file$b, 113, 6, 7129);
			attr_dev(path16, "fill", "var(--hair)");
			attr_dev(path16, "d", "M124 477h-1v-8c2 2 1 5 1 8Z");
			add_location(path16, file$b, 117, 6, 7322);
			attr_dev(g1, "id", "skate-1");
			attr_dev(g1, "class", "svelte-15tpw0y");
			add_location(g1, file$b, 88, 4, 4263);
			attr_dev(g2, "class", "shapes svelte-15tpw0y");
			add_location(g2, file$b, 49, 2, 931);
			attr_dev(g3, "class", "svelte-15tpw0y");
			toggle_class(g3, "paused", /*isPaused*/ ctx[1]);
			toggle_class(g3, "flip", /*flipsvg*/ ctx[2]);
			add_location(g3, file$b, 48, 0, 880);
			attr_dev(svg, "xmlns", "http://www.w3.org/2000/svg");
			attr_dev(svg, "viewBox", "0 0 380.9 734.7");
			attr_dev(svg, "height", "100%");
			attr_dev(svg, "width", "100%");
			attr_dev(svg, "class", "svelte-15tpw0y");
			add_location(svg, file$b, 47, 0, 785);
		},
		l: function claim(nodes) {
			throw new Error("options.hydrate only works if the component was compiled with the `hydratable: true` option");
		},
		m: function mount(target, anchor) {
			insert_dev(target, svg, anchor);
			append_dev(svg, t);
			append_dev(svg, g3);
			append_dev(g3, g2);
			append_dev(g2, g0);
			append_dev(g0, path0);
			append_dev(g0, path1);
			append_dev(g0, path2);
			append_dev(g0, path3);
			append_dev(g0, path4);
			append_dev(g0, path5);
			append_dev(g0, path6);
			append_dev(g0, path7);
			append_dev(g0, path8);
			append_dev(g2, g1);
			append_dev(g1, path9);
			append_dev(g1, path10);
			append_dev(g1, path11);
			append_dev(g1, path12);
			append_dev(g1, path13);
			append_dev(g1, path14);
			append_dev(g1, path15);
			append_dev(g1, path16);
			/*g2_binding*/ ctx[4](g2);
			if (if_block) if_block.m(g3, null);
		},
		p: function update(ctx, [dirty]) {
			if (/*isPaused*/ ctx[1]) {
				if (if_block) ; else {
					if_block = create_if_block$b(ctx);
					if_block.c();
					if_block.m(g3, null);
				}
			} else if (if_block) {
				if_block.d(1);
				if_block = null;
			}

			if (dirty & /*isPaused*/ 2) {
				toggle_class(g3, "paused", /*isPaused*/ ctx[1]);
			}

			if (dirty & /*flipsvg*/ 4) {
				toggle_class(g3, "flip", /*flipsvg*/ ctx[2]);
			}
		},
		i: noop,
		o: noop,
		d: function destroy(detaching) {
			if (detaching) detach_dev(svg);
			/*g2_binding*/ ctx[4](null);
			if (if_block) if_block.d();
		}
	};

	dispatch_dev("SvelteRegisterBlock", {
		block,
		id: create_fragment$b.name,
		type: "component",
		source: "",
		ctx
	});

	return block;
}

function instance$b($$self, $$props, $$invalidate) {
	let { $$slots: slots = {}, $$scope } = $$props;
	validate_slots('Workout_skater', slots, []);
	let { direction = "right" } = $$props;
	let { isPaused = false } = $$props;
	let { rootElement } = $$props;
	let flipsvg = false;

	if (direction == "left") {
		flipsvg = true;
	}

	const writable_props = ['direction', 'isPaused', 'rootElement'];

	Object.keys($$props).forEach(key => {
		if (!~writable_props.indexOf(key) && key.slice(0, 2) !== '$$' && key !== 'slot') console.warn(`<Workout_skater> was created with unknown prop '${key}'`);
	});

	function g2_binding($$value) {
		binding_callbacks[$$value ? 'unshift' : 'push'](() => {
			rootElement = $$value;
			$$invalidate(0, rootElement);
		});
	}

	$$self.$$set = $$props => {
		if ('direction' in $$props) $$invalidate(3, direction = $$props.direction);
		if ('isPaused' in $$props) $$invalidate(1, isPaused = $$props.isPaused);
		if ('rootElement' in $$props) $$invalidate(0, rootElement = $$props.rootElement);
	};

	$$self.$capture_state = () => ({
		direction,
		isPaused,
		rootElement,
		flipsvg
	});

	$$self.$inject_state = $$props => {
		if ('direction' in $$props) $$invalidate(3, direction = $$props.direction);
		if ('isPaused' in $$props) $$invalidate(1, isPaused = $$props.isPaused);
		if ('rootElement' in $$props) $$invalidate(0, rootElement = $$props.rootElement);
		if ('flipsvg' in $$props) $$invalidate(2, flipsvg = $$props.flipsvg);
	};

	if ($$props && "$$inject" in $$props) {
		$$self.$inject_state($$props.$$inject);
	}

	return [rootElement, isPaused, flipsvg, direction, g2_binding];
}

class Workout_skater extends SvelteComponentDev {
	constructor(options) {
		super(options);

		init(this, options, instance$b, create_fragment$b, safe_not_equal, {
			direction: 3,
			isPaused: 1,
			rootElement: 0
		});

		dispatch_dev("SvelteRegisterComponent", {
			component: this,
			tagName: "Workout_skater",
			options,
			id: create_fragment$b.name
		});

		const { ctx } = this.$$;
		const props = options.props || {};

		if (/*rootElement*/ ctx[0] === undefined && !('rootElement' in props)) {
			console.warn("<Workout_skater> was created without expected prop 'rootElement'");
		}
	}

	get direction() {
		throw new Error("<Workout_skater>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
	}

	set direction(value) {
		throw new Error("<Workout_skater>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
	}

	get isPaused() {
		throw new Error("<Workout_skater>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
	}

	set isPaused(value) {
		throw new Error("<Workout_skater>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
	}

	get rootElement() {
		throw new Error("<Workout_skater>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
	}

	set rootElement(value) {
		throw new Error("<Workout_skater>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
	}
}

var workoutSkater = /*#__PURE__*/Object.freeze({
    __proto__: null,
    'default': Workout_skater
});

/* src/workouts/workout-sprints.svelte generated by Svelte v3.49.0 */

const file$a = "src/workouts/workout-sprints.svelte";

// (191:4) {#if isPaused}
function create_if_block$a(ctx) {
	let svg;
	let path;

	const block = {
		c: function create() {
			svg = svg_element("svg");
			path = svg_element("path");
			attr_dev(path, "d", "M10 24h-6v-24h6v24zm10 0h-6v-24h6v24zm-11-23h-4v22h4v-22zm10 0h-4v22h4v-22z");
			add_location(path, file$a, 191, 133, 13687);
			attr_dev(svg, "viewBox", "-6 -5 36 36");
			attr_dev(svg, "width", "100%");
			attr_dev(svg, "height", "100%");
			attr_dev(svg, "xmlns", "http://www.w3.org/2000/svg");
			attr_dev(svg, "fill-rule", "evenodd");
			attr_dev(svg, "clip-rule", "evenodd");
			add_location(svg, file$a, 191, 4, 13558);
		},
		m: function mount(target, anchor) {
			insert_dev(target, svg, anchor);
			append_dev(svg, path);
		},
		d: function destroy(detaching) {
			if (detaching) detach_dev(svg);
		}
	};

	dispatch_dev("SvelteRegisterBlock", {
		block,
		id: create_if_block$a.name,
		type: "if",
		source: "(191:4) {#if isPaused}",
		ctx
	});

	return block;
}

function create_fragment$a(ctx) {
	let svg;
	let t;
	let g4;
	let g3;
	let g0;
	let path0;
	let path1;
	let path2;
	let path3;
	let path4;
	let path5;
	let path6;
	let path7;
	let path8;
	let path9;
	let path10;
	let g1;
	let path11;
	let path12;
	let path13;
	let path14;
	let path15;
	let path16;
	let path17;
	let path18;
	let path19;
	let path20;
	let g2;
	let path21;
	let path22;
	let path23;
	let path24;
	let path25;
	let path26;
	let path27;
	let path28;
	let path29;
	let path30;
	let path31;
	let path32;
	let path33;
	let if_block = /*isPaused*/ ctx[1] && create_if_block$a(ctx);

	const block = {
		c: function create() {
			svg = svg_element("svg");
			t = text(">\n");
			g4 = svg_element("g");
			g3 = svg_element("g");
			g0 = svg_element("g");
			path0 = svg_element("path");
			path1 = svg_element("path");
			path2 = svg_element("path");
			path3 = svg_element("path");
			path4 = svg_element("path");
			path5 = svg_element("path");
			path6 = svg_element("path");
			path7 = svg_element("path");
			path8 = svg_element("path");
			path9 = svg_element("path");
			path10 = svg_element("path");
			g1 = svg_element("g");
			path11 = svg_element("path");
			path12 = svg_element("path");
			path13 = svg_element("path");
			path14 = svg_element("path");
			path15 = svg_element("path");
			path16 = svg_element("path");
			path17 = svg_element("path");
			path18 = svg_element("path");
			path19 = svg_element("path");
			path20 = svg_element("path");
			g2 = svg_element("g");
			path21 = svg_element("path");
			path22 = svg_element("path");
			path23 = svg_element("path");
			path24 = svg_element("path");
			path25 = svg_element("path");
			path26 = svg_element("path");
			path27 = svg_element("path");
			path28 = svg_element("path");
			path29 = svg_element("path");
			path30 = svg_element("path");
			path31 = svg_element("path");
			path32 = svg_element("path");
			path33 = svg_element("path");
			if (if_block) if_block.c();
			attr_dev(path0, "fill", "var(--hair)");
			attr_dev(path0, "d", "M174 575c4 0 6 1 6 6 1 15 3 31 15 43a20 20 0 0 1 3 6c2 6 1 9-5 11-1 1-3 0-4 2h-8c0-2-2-2-4-2-9-1-15-6-19-14l-25-41c-4-8-3-8 2-16 4-6 10-9 12-15l3-2c0 7-2 14 1 21 1 5 4 8 10 8s10-1 13-7Z");
			add_location(path0, file$a, 66, 6, 1217);
			attr_dev(path1, "fill", "var(--shirt)");
			attr_dev(path1, "d", "M216 248c0 12 2 23 3 35-1 3-4 2-7 2-12 2-24-4-36-4-3 0-6 0-8 2l-15 15c-6 4-9 0-13-4l-2-2c-7-7-13-13-16-22l-1-21c0-13-1-26-6-39l1-3c3-4 2-6-3-9a39 39 0 0 1-9-9c-9-9-9-13-19-7-3-1-2-2-1-4l13-19a14 14 0 0 0 2-4c7-21 26-28 43-37a5 5 0 0 1 2 0 14 14 0 0 0 10 5c2 5 6 7 10 9 7 2 11 10 20 8l11 4c10 3 15 11 18 20 3 8 6 15 6 23-1 10-1 19-3 28-2 11-1 22 0 33Z");
			add_location(path1, file$a, 70, 6, 1463);
			attr_dev(path2, "fill", "var(--pants)");
			attr_dev(path2, "d", "m153 298 15-15c2-2 5-2 8-2 12 0 24 6 36 4 3 0 6 1 7-2l52 11a124 124 0 0 1-9 19c-7 13-15 24-21 37l-1 1c-5 11-7 12-19 9a32 32 0 0 0-4 0 33 33 0 0 0-3 0l10 24c1 3 0 5-2 8-5 5-11 8-17 11-3-1-1-4-3-5l-27 22h-1l-18 6c-4 0-4-3-4-5l-5-41c-1-9-1-18-9-25-9-9-10-21-12-32a2 2 0 0 1 1-3c3 4 5 9 9 13a40 40 0 0 1 11 16c1 4 5 7 8 10a3 3 0 0 0 5 0c1-1 0-3-1-4l-9-14c3-1 4 2 6 4l11 14c1 2 3 4 6 2 4-3 0-5-1-7a27 27 0 0 0-3-4c-1-1-2-2-1-3h3l9 7c2 2 4 4 6 1 3-2 0-5-2-6l-15-16 1-1 18 8c2 1 4 1 5-1s0-4-1-5a59 59 0 0 0-7-4c-7-4-14-6-20-11-2-2-3-4-2-7s3-1 5-1a18 18 0 0 0 13-5 4 4 0 0 0 1-4 2 2 0 0 0-2-1c-9 5-18-2-27 0-3 0 0-2 0-3Z");
			add_location(path2, file$a, 74, 6, 1875);
			attr_dev(path3, "fill", "var(--flesh)");
			attr_dev(path3, "d", "M216 248c-1-11-2-22 0-33 2-9 2-18 2-28 3 7 5 15 5 22a10 10 0 0 0 15 9c10-4 18-9 25-17 6-6 7-8 3-15a15 15 0 0 1-2-10c0-4 0-7-3-10a4 4 0 0 1 0-6c2-2 3 0 5 2s4 5 5 9c0 5 3 7 8 3a23 23 0 0 0 8-12 51 51 0 0 1 5-14c1-2 2-5 5-4 3 2 1 4 1 6l-6 15c0 2-1 4 1 6 3-7 8-12 13-16l3-4c1-1 3-2 5 0v4l-12 14c-2 2-4 2-2 5l11-10 3-4c2-1 5-1 6 1 1 1-1 3-2 4-4 4-8 9-13 12-2 1-3 2-2 4s2 0 3-1a58 58 0 0 0 11-6c1-1 3-2 4-1 1 2 0 3-1 4a34 34 0 0 1-11 9 25 25 0 0 0-7 5l-25 26-34 30a24 24 0 0 1-4 3c-8 4-16 6-23-2Z");
			add_location(path3, file$a, 78, 6, 2549);
			attr_dev(path4, "fill", "var(--hair)");
			attr_dev(path4, "d", "m226 49-28-11-12-2-5-1h-2c-5-1-10-2-15 0a17 17 0 0 0-4 1c-12 10-12 24-13 37-1 9 5 17 1 26 0 2 1 3 3 3 3 0 6-3 10-3 5-3 5-8 3-13-2-7 2-13 8-12 5 1 7 7 6 10 0 4 2 5 3 7h2l7-15c1-2 3-2 5-2 4 0 5-3 6-6 1-7 3-8 9-5l11 6c4-2 7-6 9-10 3-5 1-8-4-10Z");
			add_location(path4, file$a, 82, 6, 3101);
			attr_dev(path5, "fill", "var(--flesh)");
			attr_dev(path5, "d", "M157 442a4 4 0 0 1 1 1h-1a1 1 0 0 1 0-1Z");
			add_location(path5, file$a, 86, 6, 3403);
			attr_dev(path6, "fill", "var(--hair)");
			attr_dev(path6, "d", "M245 415c-3 7-3 15 0 22 1 2 3 4 6 4 6 0 13 3 16-5 5-1 7 0 6 5 0 6 2 10 4 15 4 10 8 19 17 25 5 3 9 9 6 15s-9 6-15 5c-17-3-32-10-41-27l-17-28c-5-8-3-9 1-16 4-5 10-8 12-14 1-3 3-2 5-1Z");
			add_location(path6, file$a, 90, 6, 3505);
			attr_dev(path7, "fill", "var(--flesh)");
			attr_dev(path7, "d", "M317 355a29 29 0 0 0 9-11l8-20v-7c-5-5-10-12-18-12m1 51v-1m-1-50c-4-4-9-3-13-4-11-2-21-6-32-7a124 124 0 0 1-9 19c-7 13-15 24-21 37 12-1 24-3 35-8 2 0 3-2 4 0 2 1 0 3-1 4-10 10-13 23-18 35s-9 24-16 34c-3 7-3 14 0 22 1 2 3 4 6 4 6 0 13 3 16-5a12 12 0 0 1 1-7c5-11 10-23 20-32 7-7 14-14 18-24a1 1 0 0 0 0-1c2-1 3-2 3-4l1-1v-2c4-2 5-6 7-9");
			add_location(path7, file$a, 94, 6, 3747);
			attr_dev(path8, "fill", "var(--flesh)");
			attr_dev(path8, "d", "m170 332 18 8c2 1 4 1 5-1s0-4-1-5a59 59 0 0 0-7-4c-7-4-14-6-20-11-2-2-3-4-2-7s3-1 5-1a18 18 0 0 0 14-5 4 4 0 0 0 0-4 2 2 0 0 0-2-1c-9 5-18-2-27 0-3 0 0-2 0-3-6 4-9 0-13-4l-2-2c-7-7-13-13-16-22-5-5-6-13-9-19l-3-5a19 19 0 0 0 0 3 19 19 0 0 1 0-3 5 5 0 0 0-2-5c-4-12 5-20 7-31l1-3c3-4 2-6-3-9a39 39 0 0 1-9-9c-9-9-9-13-19-7l-14 26a1 1 0 0 0 0 1l-4 8c-2 8-7 17-3 26 6 10 12 22 20 31 9 10 19 19 30 27 7 5 12 11 13 19 3 4 5 9 9 13a40 40 0 0 1 11 16c1 4 5 7 8 10a3 3 0 0 0 5 0c1-1 0-3-1-4l-9-14c3-1 4 2 6 3l11 15c2 2 3 4 6 2 4-3 1-5-1-7a27 27 0 0 0-3-4c-1-1-2-2-1-3h3l9 7c2 2 4 3 6 1 3-2 0-5-2-6l-15-16");
			add_location(path8, file$a, 98, 6, 4143);
			attr_dev(path9, "fill", "var(--flesh)");
			attr_dev(path9, "d", "M181 91h2");
			add_location(path9, file$a, 102, 6, 4800);
			attr_dev(path10, "fill", "var(--flesh)");
			attr_dev(path10, "d", "M199 427c3-7 3-16 6-24-3-1-1-4-3-5l-27 22h-1l-18 6 1 9v7a4 4 0 0 1 1 1h-1a63 63 0 0 1-7 34c-7 12-7 25-3 38 3 13 5 25 3 38 0 7-2 14 1 21 1 5 4 8 10 8s10-1 13-7c-1-13 2-26 4-39v-3l1-4c2-6 5-12 5-18-1-15 4-29 8-43l6-36 1-5M181 91c-1-2-3-3-3-7 1-3-1-9-6-10-6-1-10 5-8 12 2 5 2 10-3 13-4 0-6 3-10 3l-1 9-2 1-4 6a14 14 0 0 0 10 5c2 5 6 7 10 9 7 2 11 10 20 8-1-5 1-7 7-7 2 0 5 1 8-1 4-3 6-8 8-13 2-3 2-7 6-8s5-4 4-7c-1-4-3-9-1-12 4-7 3-15 5-23l-11-6c-6-3-8-2-9 5-1 3-2 6-6 6-2 0-4 0-5 2l-7 15");
			add_location(path10, file$a, 103, 6, 4849);
			attr_dev(g0, "id", "sprint-1");
			attr_dev(g0, "class", "svelte-rtx9m0");
			add_location(g0, file$a, 65, 4, 1193);
			attr_dev(path11, "fill", "var(--hair)");
			attr_dev(path11, "d", "M147 568c4 0 6 1 6 6 1 17 4 33 16 47a22 22 0 0 1 4 6c2 6 0 10-6 12-2 0-4 0-4 2h-8c-1-3-3-2-5-2-9-1-17-7-21-15l-26-44c-5-9-4-9 2-18 4-6 11-9 13-16l2-1c1 7-1 15 2 22 1 5 4 8 10 8 7 0 12-1 15-7Z");
			add_location(path11, file$a, 109, 6, 5427);
			attr_dev(path12, "fill", "var(--flesh)");
			attr_dev(path12, "d", "M115 127c1 12 4 25 2 37-2 11-1 21-1 32-3-8-6-16-7-25a12 12 0 0 0-18-9c-10 6-19 12-27 21-6 8-7 10-2 18a18 18 0 0 1 4 11c-1 4 0 8 4 11a5 5 0 0 1 0 7c-3 2-4 0-6-2-3-2-6-6-6-10-1-6-5-7-9-3-5 4-8 9-9 15a58 58 0 0 1-5 16c-1 2-2 6-6 4-3-1-1-4 0-6l4-18c1-2 2-4-1-7-3 8-8 14-13 20l-4 4c-2 1-3 3-5 1-2-1-1-3 0-5l13-17c1-1 3-2 1-6l-12 13-3 4c-2 1-5 2-7 0-1-1 1-3 2-4 5-6 9-11 15-15 1-1 2-3 1-5s-2 1-4 1a68 68 0 0 0-11 8c-1 1-3 3-4 1v-5a38 38 0 0 1 12-10 29 29 0 0 0 8-7l27-31c11-13 24-24 36-36a27 27 0 0 1 5-4c9-5 17-7 26 1Z");
			add_location(path12, file$a, 113, 6, 5679);
			attr_dev(path13, "fill", "var(--hair)");
			attr_dev(path13, "d", "M218 15c-10-2-19-7-28-10l-12-3h-5l-3-1c-5-1-9-2-14 0a18 18 0 0 0-4 2c-13 9-13 23-14 36-1 9 5 17 2 26-1 2 1 3 2 4 4 0 7-3 10-4 6-3 5-7 3-13-2-7 2-12 8-11 6 0 7 6 7 10-1 3 2 4 2 6l2 1 7-15c1-2 3-3 5-3 5 0 6-2 6-6 1-6 3-8 9-5l11 7c4-3 8-6 10-11s1-8-4-10Z");
			add_location(path13, file$a, 117, 6, 6254);
			attr_dev(path14, "fill", "var(--flesh)");
			attr_dev(path14, "d", "M149 408a4 4 0 0 1 0 1 1 1 0 0 1 0-1Z");
			add_location(path14, file$a, 121, 6, 6566);
			attr_dev(path15, "fill", "var(--flesh)");
			attr_dev(path15, "d", "m173 57 1 1");
			add_location(path15, file$a, 125, 6, 6665);
			attr_dev(path16, "fill", "var(--flesh)");
			attr_dev(path16, "d", "M173 410c4-9 3-18 7-26-3-1-1-5-3-6-10 8-19 16-30 23l-20 7 2 9v8a4 4 0 0 1 0 1c1 13-2 25-8 37-7 13-8 27-3 41 3 13 5 27 2 41 1 7-1 15 2 22 1 5 4 8 10 8 7 0 12-1 15-7-1-14 2-28 4-42v-3a1 1 0 0 0 0-1l1-4c2-6 5-12 5-18-1-17 5-32 8-47 4-13 5-26 8-38v-5M173 57c-1-2-4-3-3-6 0-4-1-9-7-10s-10 4-8 11c2 6 3 10-3 13-3 1-6 4-10 4l-1 8c-1 0-2 0-2 2-1 1-3 3-3 5a14 14 0 0 0 10 6c2 4 5 6 9 8 7 3 12 10 20 8 0-5 2-7 7-7h8c5-4 6-9 9-14 1-3 2-6 6-7s4-4 3-8-2-8 0-12c4-7 3-15 4-22l-11-7c-6-3-8-1-9 5 0 4-1 6-5 6-2 0-5 1-6 3l-7 15");
			add_location(path16, file$a, 126, 6, 6716);
			attr_dev(path17, "fill", "var(--shirt)");
			attr_dev(path17, "d", "M179 111a5 5 0 0 1-1-3l-3-2c-8 2-13-5-20-8-4-2-7-4-9-8a14 14 0 0 1-10-6 5 5 0 0 0-2 1c-10 5-20 9-29 16a5 5 0 0 0-3 1l-6 5a5 5 0 0 1-2 3c-26 13-21 48-20 74l7 12a44 44 0 0 1 2 5 11 11 0 0 0 2 0 45 45 0 0 0 8-3 154 154 0 0 1-2 29c-3 17-9 34-6 52 2 10 13 33 27 26 4-1 6-4 9-7l10-10 1-1 25-13v-1l15-4a42 42 0 0 0 9-3 4 4 0 0 0 4-1 11 11 0 0 0-1-16 68 68 0 0 1-3-19c-1-21 5-41 8-61 4-20 5-41-10-58ZM93 186Z");
			add_location(path17, file$a, 130, 6, 7288);
			attr_dev(path18, "fill", "var(--flesh)");
			attr_dev(path18, "d", "m270 263-45 3a5 5 0 0 1-4-1l-2 1-6 1a5 5 0 0 0 3 0h2l-4 10-3 10a154 154 0 0 0-8 18 5 5 0 0 0 0 3 8 8 0 0 0 0 2c-5 0-7 8-1 10a66 66 0 0 0 35-1c-6 19-6 39-4 59l-1 14a5 5 0 0 0 3 5l1 6a4 4 0 0 0 5 4v1a5 5 0 0 0 3 3v2c2 4 8 5 10 0l1-3a4 4 0 0 0 5-5v-8l4-17 11-49c4-14 7-29 7-44 0-6 0-15-5-19a26 26 0 0 0-7-5Zm-24 64a5 5 0 0 0-1 2l-1 4a84 84 0 0 1 5-16l-3 10Zm22-7v-3a5 5 0 0 0 1 0l-1 3Zm1-45v-1a6 6 0 0 1 1 1 14 14 0 0 0-1 0ZM268 200l10-4c2-1 5-2 4-5-1-4-4-3-7-2l-21 7v-2l15-12c2-1 2-3 1-5s-3-2-5-1a57 57 0 0 0-6 4c-7 4-12 10-19 12h-7c-2-1 0-4 1-6a18 18 0 0 0 2-14 4 4 0 0 0-3-3 2 2 0 0 0-2 2c0 10-10 15-13 24-1 2-2-1-2-1 0 6-5 8-9 9l-4 1c-9 3-17 6-27 4-7 2-14-1-20-1h-6a18 18 0 0 0 3 2 18 18 0 0 1-3-2 5 5 0 0 0-5 0c-13-2-17-14-25-21l-1-1a85 85 0 0 1-19 9c-5 3-11 4-17 6h-1a31 31 0 0 1 2 4c4 7 8 14 14 20a1 1 0 0 0 0 1c1 3 4 5 6 7 6 6 11 14 21 14 13 0 25 1 37-2 14-4 26-9 38-15 8-3 15-6 24-3l15-1a40 40 0 0 1 19-2l13-3a3 3 0 0 0 2-4c0-2-2-2-4-2l-17 2c1-3 4-3 6-3l18-4c3 0 6-1 5-4-1-5-4-3-6-3a27 27 0 0 0-6 2l-3-1c-1-2 1-2 2-3Z");
			add_location(path18, file$a, 134, 6, 7750);
			attr_dev(path19, "fill", "var(--pants)");
			attr_dev(path19, "d", "M242 271c2-3 1-8-4-8l-50 2a4 4 0 0 0-3-1c-8 1-15 5-23 9l-22 9a282 282 0 0 1-44 12c-3-1-6 0-7 2a5 5 0 0 0 0 6v7a6 6 0 0 1 0 1 102 102 0 0 1 1 17v2a3 3 0 0 0 0 1v4a5 5 0 0 0 1 2l2 28c2 11 7 19 10 28 4 11 2 22 4 33 0 2 3 4 6 3 15-3 27-13 39-21 7-5 13-9 20-11s16-1 22-7c10-9 4-21-2-32a102 102 0 0 0-4-24 5 5 0 0 0-2-3 4 4 0 0 1 1 0 5 5 0 0 0 5 1c2-1 5 1 7 2a16 16 0 0 0 4 0 9 9 0 0 0 9 3 8 8 0 0 0 3-2 6 6 0 0 0 4-3l8-19a4 4 0 0 0 0-2c8-10 12-22 16-34a4 4 0 0 0-1-5Z");
			add_location(path19, file$a, 138, 6, 8835);
			attr_dev(path20, "fill", "var(--hair)");
			attr_dev(path20, "d", "M230 387c1 8 6 13 13 17 2 2 5 2 7 0 4-3 12-5 10-13 3-4 6-5 8 0 3 5 8 7 12 10 9 5 17 10 28 10 6 0 12 2 14 8 1 7-4 11-9 13-16 8-32 11-49 3l-30-12c-9-4-8-5-9-14 0-6 3-12 1-18-1-3 1-4 4-4Z");
			add_location(path20, file$a, 142, 6, 9359);
			attr_dev(g1, "id", "sprint-3");
			attr_dev(g1, "class", "svelte-rtx9m0");
			add_location(g1, file$a, 108, 4, 5403);
			attr_dev(path21, "fill", "var(--pants)");
			attr_dev(path21, "d", "m182 314 7-1c1 5 2 11 5 16a28 28 0 0 1 4 26c-3 9 5 13 5 20 0 1 3 2 4 1 3-5 3 1 5 1-3 11-1 23-3 34l-1 10c-2 11-2 11-13 13-18 0-36 3-53 3-12-2-12-2-12-13 0-24-2-48-11-71-4-10-4-22-3-33 6 5 12 5 20 3 9-3 19-5 29-6h8c4 2 7 0 9-3Z");
			add_location(path21, file$a, 148, 6, 9635);
			attr_dev(path22, "fill", "var(--shirt)");
			attr_dev(path22, "d", "M200 283Z");
			add_location(path22, file$a, 152, 6, 9922);
			attr_dev(path23, "d", "M143 81Z");
			attr_dev(path23, "fill", "var(--hair)");
			add_location(path23, file$a, 153, 6, 9971);
			attr_dev(path24, "fill", "var(--hair)");
			attr_dev(path24, "d", "M221 623c2-2 4-5 3-8s-4-5-7-5c-4 0-7-2-11-4a178 178 0 0 1-26-15c-4-2-7-4-7-9 0-2 0-6-4-3a3 3 0 0 1-1 0c-3 0-3 2-3 4 1 4 0 7-5 9l-1 8c-4 3-9 4-12 10-3 7-12 4-17-5l-3-6h-1c-1-1-3-1-3-3s1-3 3-3a1 1 0 0 1 1-1c-1-1-1-3-3-2a4 4 0 0 0-3 4c0 6-1 11 1 16v10a5 5 0 0 0 2-1 5 5 0 0 1-1 1c1 4-2 8 1 12a3 3 0 0 0 2 3c5 3 11 4 17 5a2 2 0 0 0 3 1h3l8 2 2 1a27 27 0 0 0 11 5l4 1c6 2 12 2 18 1 9-1 17-3 23-8 6-4 8-10 4-14-3-3-1-4 2-6Zm-97-7Zm0 3a2 2 0 0 0 0-1 2 2 0 0 1 0 1Z");
			add_location(path24, file$a, 154, 6, 10018);
			attr_dev(path25, "fill", "var(--shirt)");
			attr_dev(path25, "d", "M214 311ZM215 312Z");
			add_location(path25, file$a, 158, 6, 10536);
			attr_dev(path26, "fill", "var(--pants)");
			attr_dev(path26, "d", "M182 314c-2 3-5 5-9 3h-8c6-2 11-3 17-3Z");
			add_location(path26, file$a, 159, 6, 10594);
			attr_dev(path27, "fill", "var(--hair)");
			attr_dev(path27, "d", "M206 13c-2-4-6-3-10-3-3 1-6 1-9-2h-27c-3 5-8 3-11 4-14 3-22 13-22 27s4 28 8 42a4 4 0 0 0 2 5c3 0 5-1 6-5 7-6 2-13 1-19-1-5-1-9 3-12 6-1 10 2 12 8 2 7 5 7 11 2a15 15 0 0 0 2-3 14 14 0 0 1-1-1l1 1 2-3c1-6 2-11 8-13 3-1 4-5 3-8-1-8 1-10 9-8l7 4 1-2a24 24 0 0 0 3-3c2-4 4-7 1-11Z");
			add_location(path27, file$a, 163, 6, 10695);
			attr_dev(path28, "d", "M127 599c-2-1-4-1-4-3s1-3 3-3v2a6 6 0 0 0 0 1v1Z");
			attr_dev(path28, "fill", "var(--hair)");
			add_location(path28, file$a, 167, 6, 11031);
			attr_dev(path29, "fill", "var(--pants)");
			attr_dev(path29, "d", "M126 597v-1h1a8 8 0 0 0 0 1 2 2 0 0 0-1 0Z");
			add_location(path29, file$a, 171, 6, 11140);
			attr_dev(path30, "fill", "var(--pants)");
			attr_dev(path30, "d", "M126 596a6 6 0 0 1 0-1s0 0 0-1a1 1 0 0 1 0 2Z");
			add_location(path30, file$a, 175, 6, 11244);
			attr_dev(path31, "fill", "var(--shirt)");
			attr_dev(path31, "d", "M212 291c-5-33-6-67-5-101 1-9 0-18-4-26-2-9-6-16-11-23 0-4-3-8-5-11a36 36 0 0 0-8-12l-2-4c-3 1-3 4-3 6 0 5-2 7-7 4l-8-1c-5-6-12-8-19-11l-8-11c-7 5-9 14-12 22-4 6-5 14-11 19v26a170 170 0 0 1 12 82c-1 10-1 20-4 30-5 13-3 26-1 40 6 5 12 5 20 3 9-3 19-5 29-6 6-2 11-3 17-3l7-1a17 17 0 0 0-5-11c-9-7-14-17-23-25-6-5-10-14-13-23-1-3-4-6-2-10-1 0-2 3-2 0-1-5-2-10 0-15l1-2c-4-2-2-6-3-9-3-7-5-15-5-23-4-1-1-5-2-8a42 42 0 0 1 1-12c11 3 21 1 32 2 2 0 5-1 6 3a6 6 0 0 0 1 0 6 6 0 0 1-1 0v31c0 5 0 9 3 13l7 17c1 3 4 7 3 11 4 0 1 5 4 5l1 3v5c5 3 5 8 6 13 3 0 2 3 2 5 2 0 3 1 2 3l1 2c4 3 3 7 5 11 1 3 1 7 6 8 1-6-1-11-2-16Zm-34-104-1-1 1-1 1 1-1 1Zm9-10a3 3 0 0 0-1-2 3 3 0 0 1 1 2Zm-1 18a89 89 0 0 1 2 13 89 89 0 0 0-2-13Zm6 59a18 18 0 0 0 0-3 18 18 0 0 1 0 3Z");
			add_location(path31, file$a, 179, 6, 11351);
			attr_dev(path32, "d", "m178 185 1 1-1 1-1-1 1-1Z");
			attr_dev(path32, "fill", "var(--shirt)");
			add_location(path32, file$a, 183, 6, 12160);
			attr_dev(path33, "fill", "var(--flesh)");
			attr_dev(path33, "d", "m215 312-1-1v-4c-5-1-5-5-6-8-2-4-1-8-5-11l-1-2a2 2 0 0 1-2-2 2 2 0 0 0 2 2c1-2 0-3-2-3 0-2 1-5-2-5l-1 5a3 3 0 0 0-2 1 3 3 0 0 1 2-1l1-5c-1-5-1-10-6-13v-5l-1-3c-3 0 0-5-4-5 1-4-2-8-3-11l-7-17c-3-4-3-8-3-13v-31c-1-4-4-3-6-3-11-1-21 1-32-2a42 42 0 0 0-1 12c1 3-2 7 3 8-1 8 1 16 4 23 1 3-1 7 3 9l-1 2c-2 5-1 10-1 15 1 3 2 0 3 0-2 4 1 7 2 10 3 9 6 18 13 23 9 8 14 18 23 25a17 17 0 0 1 5 11c1 5 2 11 5 16a28 28 0 0 1 4 26c-3 9 5 13 5 20 0 1 3 2 4 1 3-5 3 1 5 1 6 0 5-6 8-9 1 2 0 6 3 6s3-3 3-6l3-12c1-9 2-19-3-27l-11-17ZM133 479a52 52 0 0 0-4 8c-4 8-8 16-8 25l5 46c0 12 3 23 1 35a1 1 0 0 0-1 0v1a1 1 0 0 1 0 2h1a8 8 0 0 0 0 1 2 2 0 0 0-1 0l1 2 3 6c5 9 14 12 17 5 3-6 8-7 12-10l1-8c5-2 6-5 5-9 0-2 0-4 3-4l-1-8v-4c1-13-2-27-1-40v-5c2-2 1-4 2-6 1-10 0-21 6-29 11-17 15-35 21-53-18 0-36 3-53 3 1 15-1 29-9 42Zm-3 126v-3 3Zm34-28a8 8 0 0 0 0 1v1-1a8 8 0 0 1 0-1 10 10 0 0 1 1-2 10 10 0 0 0-1 2Zm5-87-1-4 1 4Zm-2-4a5 5 0 0 0-2-1 5 5 0 0 1 2 1ZM126 596ZM137 86c-2 5-1 11-5 15l8 11c7 3 14 5 19 11l8 1c5 3 7 1 7-4 0-2 0-5 3-6-2-9 4-16 14-15 4 1 10 2 11-3 1-7 7-12 6-20a4 4 0 0 1 1-4c4-3 3-6 0-10-2-3-5-5-5-8 3-9-2-17-3-25l-7-4c-8-2-10 1-9 8 1 3 0 7-3 8-6 3-7 7-8 13l-2 3a14 14 0 0 1-2 3c-6 6-9 5-11-2-2-6-6-9-12-8-4 3-4 7-3 12 1 6 6 13-1 19-1 4-3 5-6 5Z");
			add_location(path33, file$a, 184, 6, 12225);
			attr_dev(g2, "id", "sprint-2");
			attr_dev(g2, "class", "svelte-rtx9m0");
			add_location(g2, file$a, 147, 4, 9611);
			attr_dev(g3, "class", "shapes svelte-rtx9m0");
			add_location(g3, file$a, 64, 2, 1146);
			attr_dev(g4, "class", "svelte-rtx9m0");
			toggle_class(g4, "paused", /*isPaused*/ ctx[1]);
			toggle_class(g4, "flip", /*flipsvg*/ ctx[2]);
			add_location(g4, file$a, 63, 0, 1095);
			attr_dev(svg, "xmlns", "http://www.w3.org/2000/svg");
			attr_dev(svg, "viewBox", "0 0 334.5 651.8");
			attr_dev(svg, "height", "100%");
			attr_dev(svg, "width", "100%");
			attr_dev(svg, "class", "svelte-rtx9m0");
			add_location(svg, file$a, 62, 0, 1000);
		},
		l: function claim(nodes) {
			throw new Error("options.hydrate only works if the component was compiled with the `hydratable: true` option");
		},
		m: function mount(target, anchor) {
			insert_dev(target, svg, anchor);
			append_dev(svg, t);
			append_dev(svg, g4);
			append_dev(g4, g3);
			append_dev(g3, g0);
			append_dev(g0, path0);
			append_dev(g0, path1);
			append_dev(g0, path2);
			append_dev(g0, path3);
			append_dev(g0, path4);
			append_dev(g0, path5);
			append_dev(g0, path6);
			append_dev(g0, path7);
			append_dev(g0, path8);
			append_dev(g0, path9);
			append_dev(g0, path10);
			append_dev(g3, g1);
			append_dev(g1, path11);
			append_dev(g1, path12);
			append_dev(g1, path13);
			append_dev(g1, path14);
			append_dev(g1, path15);
			append_dev(g1, path16);
			append_dev(g1, path17);
			append_dev(g1, path18);
			append_dev(g1, path19);
			append_dev(g1, path20);
			append_dev(g3, g2);
			append_dev(g2, path21);
			append_dev(g2, path22);
			append_dev(g2, path23);
			append_dev(g2, path24);
			append_dev(g2, path25);
			append_dev(g2, path26);
			append_dev(g2, path27);
			append_dev(g2, path28);
			append_dev(g2, path29);
			append_dev(g2, path30);
			append_dev(g2, path31);
			append_dev(g2, path32);
			append_dev(g2, path33);
			/*g3_binding*/ ctx[4](g3);
			if (if_block) if_block.m(g4, null);
		},
		p: function update(ctx, [dirty]) {
			if (/*isPaused*/ ctx[1]) {
				if (if_block) ; else {
					if_block = create_if_block$a(ctx);
					if_block.c();
					if_block.m(g4, null);
				}
			} else if (if_block) {
				if_block.d(1);
				if_block = null;
			}

			if (dirty & /*isPaused*/ 2) {
				toggle_class(g4, "paused", /*isPaused*/ ctx[1]);
			}

			if (dirty & /*flipsvg*/ 4) {
				toggle_class(g4, "flip", /*flipsvg*/ ctx[2]);
			}
		},
		i: noop,
		o: noop,
		d: function destroy(detaching) {
			if (detaching) detach_dev(svg);
			/*g3_binding*/ ctx[4](null);
			if (if_block) if_block.d();
		}
	};

	dispatch_dev("SvelteRegisterBlock", {
		block,
		id: create_fragment$a.name,
		type: "component",
		source: "",
		ctx
	});

	return block;
}

function instance$a($$self, $$props, $$invalidate) {
	let { $$slots: slots = {}, $$scope } = $$props;
	validate_slots('Workout_sprints', slots, []);
	let { direction = "right" } = $$props;
	let { isPaused = false } = $$props;
	let { rootElement } = $$props;
	let flipsvg = false;

	if (direction == "left") {
		flipsvg = true;
	}

	const writable_props = ['direction', 'isPaused', 'rootElement'];

	Object.keys($$props).forEach(key => {
		if (!~writable_props.indexOf(key) && key.slice(0, 2) !== '$$' && key !== 'slot') console.warn(`<Workout_sprints> was created with unknown prop '${key}'`);
	});

	function g3_binding($$value) {
		binding_callbacks[$$value ? 'unshift' : 'push'](() => {
			rootElement = $$value;
			$$invalidate(0, rootElement);
		});
	}

	$$self.$$set = $$props => {
		if ('direction' in $$props) $$invalidate(3, direction = $$props.direction);
		if ('isPaused' in $$props) $$invalidate(1, isPaused = $$props.isPaused);
		if ('rootElement' in $$props) $$invalidate(0, rootElement = $$props.rootElement);
	};

	$$self.$capture_state = () => ({
		direction,
		isPaused,
		rootElement,
		flipsvg
	});

	$$self.$inject_state = $$props => {
		if ('direction' in $$props) $$invalidate(3, direction = $$props.direction);
		if ('isPaused' in $$props) $$invalidate(1, isPaused = $$props.isPaused);
		if ('rootElement' in $$props) $$invalidate(0, rootElement = $$props.rootElement);
		if ('flipsvg' in $$props) $$invalidate(2, flipsvg = $$props.flipsvg);
	};

	if ($$props && "$$inject" in $$props) {
		$$self.$inject_state($$props.$$inject);
	}

	return [rootElement, isPaused, flipsvg, direction, g3_binding];
}

class Workout_sprints extends SvelteComponentDev {
	constructor(options) {
		super(options);

		init(this, options, instance$a, create_fragment$a, safe_not_equal, {
			direction: 3,
			isPaused: 1,
			rootElement: 0
		});

		dispatch_dev("SvelteRegisterComponent", {
			component: this,
			tagName: "Workout_sprints",
			options,
			id: create_fragment$a.name
		});

		const { ctx } = this.$$;
		const props = options.props || {};

		if (/*rootElement*/ ctx[0] === undefined && !('rootElement' in props)) {
			console.warn("<Workout_sprints> was created without expected prop 'rootElement'");
		}
	}

	get direction() {
		throw new Error("<Workout_sprints>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
	}

	set direction(value) {
		throw new Error("<Workout_sprints>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
	}

	get isPaused() {
		throw new Error("<Workout_sprints>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
	}

	set isPaused(value) {
		throw new Error("<Workout_sprints>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
	}

	get rootElement() {
		throw new Error("<Workout_sprints>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
	}

	set rootElement(value) {
		throw new Error("<Workout_sprints>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
	}
}

var workoutSprints = /*#__PURE__*/Object.freeze({
    __proto__: null,
    'default': Workout_sprints
});

/* src/workouts/workout-squats.svelte generated by Svelte v3.49.0 */

const file$9 = "src/workouts/workout-squats.svelte";

// (135:4) {#if isPaused}
function create_if_block$9(ctx) {
	let svg;
	let path;

	const block = {
		c: function create() {
			svg = svg_element("svg");
			path = svg_element("path");
			attr_dev(path, "d", "M10 24h-6v-24h6v24zm10 0h-6v-24h6v24zm-11-23h-4v22h4v-22zm10 0h-4v22h4v-22z");
			add_location(path, file$9, 135, 133, 9848);
			attr_dev(svg, "viewBox", "-6 -5 36 36");
			attr_dev(svg, "width", "100%");
			attr_dev(svg, "height", "100%");
			attr_dev(svg, "xmlns", "http://www.w3.org/2000/svg");
			attr_dev(svg, "fill-rule", "evenodd");
			attr_dev(svg, "clip-rule", "evenodd");
			add_location(svg, file$9, 135, 4, 9719);
		},
		m: function mount(target, anchor) {
			insert_dev(target, svg, anchor);
			append_dev(svg, path);
		},
		d: function destroy(detaching) {
			if (detaching) detach_dev(svg);
		}
	};

	dispatch_dev("SvelteRegisterBlock", {
		block,
		id: create_if_block$9.name,
		type: "if",
		source: "(135:4) {#if isPaused}",
		ctx
	});

	return block;
}

function create_fragment$9(ctx) {
	let svg;
	let t;
	let g3;
	let g2;
	let g0;
	let path0;
	let path1;
	let path2;
	let path3;
	let path4;
	let path5;
	let path6;
	let path7;
	let path8;
	let path9;
	let path10;
	let path11;
	let path12;
	let path13;
	let path14;
	let g1;
	let path15;
	let path16;
	let path17;
	let path18;
	let path19;
	let path20;
	let path21;
	let path22;
	let path23;
	let path24;
	let path25;
	let path26;
	let path27;
	let if_block = /*isPaused*/ ctx[1] && create_if_block$9(ctx);

	const block = {
		c: function create() {
			svg = svg_element("svg");
			t = text(">\n");
			g3 = svg_element("g");
			g2 = svg_element("g");
			g0 = svg_element("g");
			path0 = svg_element("path");
			path1 = svg_element("path");
			path2 = svg_element("path");
			path3 = svg_element("path");
			path4 = svg_element("path");
			path5 = svg_element("path");
			path6 = svg_element("path");
			path7 = svg_element("path");
			path8 = svg_element("path");
			path9 = svg_element("path");
			path10 = svg_element("path");
			path11 = svg_element("path");
			path12 = svg_element("path");
			path13 = svg_element("path");
			path14 = svg_element("path");
			g1 = svg_element("g");
			path15 = svg_element("path");
			path16 = svg_element("path");
			path17 = svg_element("path");
			path18 = svg_element("path");
			path19 = svg_element("path");
			path20 = svg_element("path");
			path21 = svg_element("path");
			path22 = svg_element("path");
			path23 = svg_element("path");
			path24 = svg_element("path");
			path25 = svg_element("path");
			path26 = svg_element("path");
			path27 = svg_element("path");
			if (if_block) if_block.c();
			attr_dev(path0, "fill", "var(--hair)");
			attr_dev(path0, "d", "m129 533-14-3-35-9a21 21 0 0 1-5-2c-3-1-4-3-3-6l2-8a30 30 0 0 1 4-12 11 11 0 0 0 2-5l1-3c1-1 2 1 3 2a15 15 0 0 1 1 2l-1 1a4 4 0 0 0 0 1c0 5 7 12 12 12h4c3-1 7-1 10-3 4-2 3-7 2-10 2-1 4-2 3 1 0 4 3 7 6 9a119 119 0 0 0 19 10l15 6a25 25 0 0 1 3 2c4 3 4 6 1 9s-8 4-13 5l-1 1h-3a8 8 0 0 0-8 0Z");
			add_location(path0, file$9, 51, 6, 999);
			attr_dev(path1, "fill", "var(--pants)");
			attr_dev(path1, "d", "M134 533a8 8 0 0 1 8 0Z");
			add_location(path1, file$9, 55, 6, 1348);
			attr_dev(path2, "fill", "var(--shirt)");
			attr_dev(path2, "d", "M18 322ZM136 236Z");
			add_location(path2, file$9, 56, 6, 1411);
			attr_dev(path3, "fill", "var(--hair)");
			attr_dev(path3, "d", "m113 215-8-12a12 12 0 0 1-2-6l-1-12c-1-11 6-20 17-23 10-2 20-2 30-1h13c4 0 5 2 4 6 0 4-3 6-4 9a20 20 0 0 0-8-2c-4 1-6 3-4 8 1 2 1 5-1 7-4 3-4 7-4 12 1 3-1 4-4 3-2 0-1-2-2-3a3 3 0 0 0 0-3 6 6 0 0 0-6-5c-3 0-5 2-6 4a23 23 0 0 0-2 10c0 3 0 6-2 8l-2 1h-7Z");
			add_location(path3, file$9, 57, 6, 1468);
			attr_dev(path4, "fill", "var(--hair)");
			attr_dev(path4, "d", "m134 443 5 1 1 2 1-1a29 29 0 0 1 10 2c2 1 4 3 4 5s-2 4-4 5c-6 3-13 3-20 3l-4-1a11 11 0 0 1 2-5c1-3 4-5 3-8 2 0 3 0 2-3Z");
			add_location(path4, file$9, 61, 6, 1780);
			attr_dev(path5, "fill", "var(--hair)");
			attr_dev(path5, "d", "m84 490 3 5c4 8 10 7 18 5 4-1 7-3 6-8l1-2c1 3 2 8-2 10-3 2-7 2-10 3h-4c-5 0-12-7-12-12a4 4 0 0 1 0-1ZM132 446c1 3-2 5-3 8a11 11 0 0 0-2 5h-2c1-1 0-1-1-1h-1a68 68 0 0 1 9-12ZM141 444l-1 1-1-1Z");
			add_location(path5, file$9, 65, 6, 1960);
			attr_dev(path6, "fill", "var(--hair)");
			attr_dev(path6, "d", "m122 460 1-2h1v1Z");
			add_location(path6, file$9, 69, 6, 2212);
			attr_dev(path7, "fill", "var(--hair)");
			attr_dev(path7, "d", "M124 459v-1c1 0 2 0 1 1Z");
			add_location(path7, file$9, 70, 6, 2268);
			attr_dev(path8, "fill", "var(--hair)");
			attr_dev(path8, "d", "m96 460-2 5c-9-1-11-3-8-12 2-5 5-11 11-13 0 2 2 2 3 3a1 1 0 0 0 0 1l-3 9-1 7Z");
			add_location(path8, file$9, 71, 6, 2331);
			attr_dev(path9, "d", "M172 274c0-3-3-4-3-7l-10-15c-3-4-7-8-12-10l-4-3c-2-1-4-3-7-3a19 19 0 0 0-7-6h-2l-7-7-8-1-1 1a15 15 0 0 1-6 4 181 181 0 0 0-33 33l-15 20v1a2 2 0 0 1-1 2 1 1 0 0 1-1 1 2 2 0 0 1 0 1 2 2 0 0 0 0-1 1 1 0 0 0-1 1l-1 1c0 2-2 3-3 4l-8 7a29 29 0 0 1-9 9 15 15 0 0 0-6 7 6 6 0 0 1 0 3 6 6 0 0 0 0-3l-3 1v3l-6 5-2 3-1 1c-2 1-4 3-5 6a8 8 0 0 0 2-1 8 8 0 0 1-2 1 4 4 0 0 0-3 3l9 6a25 25 0 0 0 6 4c2 2 5 2 6 4 11 2 21-2 30-5h1l1-1 4-2a3 3 0 0 1 3 1h1a9 9 0 0 0 2 0 13 13 0 0 1 12-1c3 1 5 0 7-3h1a5 5 0 0 1 0-1 5 5 0 0 0 0 1l13-8a6 6 0 0 1 1-1l13-14c8-5 13-13 17-21 2-2 3-3 5-1 5 3 5 3 10-1l14-8c2-1 3-3 5-3q-1-3 3-3l1-4ZM55 342a13 13 0 0 1-1 0 13 13 0 0 0 1 0Zm0-57Zm-2 57Zm1 0Zm0 0h-1 1Zm-1 0Zm-2 1a2 2 0 0 1-1 0 2 2 0 0 0 1 0h-1Zm-1 0a1 1 0 0 0-1 0 1 1 0 0 1 1 0Zm0 0Zm0 0a2 2 0 0 1 0 1 2 2 0 0 0 0-1Zm0 1Zm0 0h-1Zm-1-1Zm-4 2a1 1 0 0 1 1-1 1 1 0 0 0-1 1Zm5 0a9 9 0 0 0 4-1 9 9 0 0 1-4 1Zm10-3h-4 4l5-3-5 3Zm12-3a6 6 0 0 1 2-1 6 6 0 0 0-2 1Zm36-18 2-1a7 7 0 0 1-2 1Z");
			attr_dev(path9, "fill", "var(--shirt)");
			add_location(path9, file$9, 75, 6, 2469);
			attr_dev(path10, "fill", "var(--hair)");
			attr_dev(path10, "d", "M134 443c1 2 0 3-2 3l1-2Z");
			add_location(path10, file$9, 79, 6, 3485);
			attr_dev(path11, "d", "m103 330-13 8h-1c-1 3-4 4-7 3a13 13 0 0 0-12 1 9 9 0 0 1-2 0h-1a3 3 0 0 0-3-1l-4 2-1 1h2v1c-2 1-2 0-3-1-9 3-19 7-30 5a5 5 0 0 1 2 2 5 5 0 0 0-2-2 14 14 0 0 1-6 1 14 14 0 0 0 6-1c-1-2-4-2-6-4a25 25 0 0 1-6-4l-9-6c-4 4-5 8-7 13v15l1 2c1 11 8 16 17 21l48 22c1 1 2 0 3-1a42 42 0 0 0 7-9l8-23v-2l2-4c5-9 9-19 19-24l-3-1c-1 0-2-1-1-2 2-3 3-6 7-8l1-2c-1-2-4-1-6-2Zm-73 25Zm4 1Zm0 0h1Zm27-9v1h-1l1-1Zm6 0Zm0 0a3 3 0 0 0-1-2 2 2 0 0 1 0-1 2 2 0 0 0 0 1 3 3 0 0 1 1 2Z");
			attr_dev(path11, "fill", "var(--pants)");
			add_location(path11, file$9, 80, 6, 3549);
			attr_dev(path12, "fill", "var(--pants)");
			attr_dev(path12, "d", "M59 344h2l-1 1c-1 1-1 0-2-1h1Z");
			add_location(path12, file$9, 84, 6, 4069);
			attr_dev(path13, "fill", "var(--flesh)");
			attr_dev(path13, "d", "M221 231c-2-1-4-4-7-3-2 1-3-1-4-1-2-2-6-3-8-1-3 1-7 2-7 7a22 22 0 0 1-1-3l-2-2c-2 0-2 1-2 2-2 7-2 13 0 19 1 3 3 4 5 5l2 2c4 3 5 6 4 11l-2 11a13 13 0 0 0-3 6l-1 1a3 3 0 0 0-2 2c-1 2-2 2-5 0l-14-12-2-1-1 4q-3 0-3 3c-2 0-3 2-5 3l-14 8 15 14c7 6 14 12 22 15a15 15 0 0 0 6 4 7 7 0 0 0 4 2h11a5 5 0 0 0 5-3 2 2 0 0 0 1-3c2-1 2-3 2-5v-2a1 1 0 0 0 1 0v-12l1-12v-18l2-6v-3c0-3 0-5 2-7v-2l2-14a11 11 0 0 0 0-7l-2-2Zm-4 18v-1 1Zm0 4v-2 2Zm-15 37a2 2 0 0 0 0-1 2 2 0 0 1 0 1Zm0-3a2 2 0 0 1 0-1 2 2 0 0 0 0 1Zm-6-33Zm-14 33v1ZM159 363l-3-2a1 1 0 0 0-2-1 3 3 0 0 1-2 0 3 3 0 0 0 2 0c-3-1-5-3-4-7l2-3c3-6-5-14-12-15l-31-3-1 2c-4 2-5 5-7 8-1 1 0 1 1 2l3 1c-10 5-14 15-19 24l-2 4v2l-7 23c9 0 18-1 27-4 2-1 3 0 2 2a60 60 0 0 0-2 11l-1 3a19 19 0 0 0-1 7h1-1v2l-3 10c-1 4-4 7-2 11 0 2 3 2 3 3a6 6 0 0 0 1-1 6 6 0 0 1-1 1 1 1 0 0 0 0 1l-2 9-2 7-2 5-9 24v1l2 5c4 8 11 7 18 5 4-1 7-3 6-8l1-2a27 27 0 0 1 2-14 87 87 0 0 1 8-17l2-1a68 68 0 0 1 8-12l1-2h-1 1l1-1a16 16 0 0 1 1-3 126 126 0 0 0 11-21 55 55 0 0 1 8-13c3-3 5-6 6-10 3-2 3-6 3-10 2-2 2-5 2-7 1-6-1-12-6-16Zm-48-26Zm-9 99a4 4 0 0 1 0 1 3 3 0 0 1 0 1 3 3 0 0 0 0-1 4 4 0 0 0 0-1Zm2 2a3 3 0 0 0-1 0 3 3 0 0 1 1 0Zm7-101h-1ZM87 490a3 3 0 0 0 0-1 3 3 0 0 1 0 1Zm0 1v1-1ZM112 222h8c2 4 5 5 7 8h2a19 19 0 0 1 7 6c3 0 5 2 7 3l1-4a7 7 0 0 1 6-2h6c4 1 6-1 7-5v-4a10 10 0 0 0 3-10c0-2 1-2 2-3 2-1 3-3 2-5a19 19 0 0 0-3-4c-2-3-4-6-2-10l-1-5-2-11a20 20 0 0 0-8-1c-4 0-6 2-4 7 1 2 1 5-1 7-4 3-4 7-4 12 1 3-1 4-4 3-2 0-1-2-2-3a3 3 0 0 0 0-3 6 6 0 0 0-6-5c-3 0-5 2-6 4a23 23 0 0 0-3 10c0 3 1 6-1 8l-2 1h-7v5Zm11 0a7 7 0 0 0 1 3 7 7 0 0 1-1-3Z");
			add_location(path13, file$9, 85, 6, 4139);
			attr_dev(path14, "fill", "var(--pants)");
			attr_dev(path14, "d", "m60 348 1-1v1h-1Z");
			add_location(path14, file$9, 89, 6, 5763);
			attr_dev(g0, "id", "squat-2");
			attr_dev(g0, "class", "svelte-1a2c5ru");
			add_location(g0, file$9, 50, 4, 976);
			attr_dev(path15, "d", "m123 255 7-1c0 4 1 9 3 13a23 23 0 0 1 4 22c-3 7 4 11 4 16 0 2 3 2 3 1 3-4 3 1 4 1-2 9 0 19-2 29l-1 8c-1 9-1 9-11 10-15 1-29 3-44 3-10-1-10-1-10-11 0-20-2-40-9-59-3-9-3-18-2-28 4 5 10 5 16 3l24-5h7c3 2 5 0 7-2Z");
			attr_dev(path15, "fill", "var(--pants)");
			add_location(path15, file$9, 92, 6, 5850);
			attr_dev(path16, "fill", "var(--shirt)");
			attr_dev(path16, "d", "M139 229Z");
			add_location(path16, file$9, 96, 6, 6121);
			attr_dev(path17, "fill", "var(--hair)");
			attr_dev(path17, "d", "M91 61Z");
			add_location(path17, file$9, 97, 6, 6170);
			attr_dev(path18, "fill", "var(--hair)");
			attr_dev(path18, "d", "M156 512c2-2 3-4 2-7s-3-4-5-4c-4 0-7-1-9-3a149 149 0 0 1-22-13c-3-2-6-3-6-7 0-2 0-5-3-3a2 2 0 0 1-1 0c-2 0-2 2-3 3 1 4 0 7-4 8l-1 7c-3 2-7 3-9 8-3 6-11 4-15-4l-3-5c-1-1-2-1-2-3l2-2a1 1 0 0 1 1 0c-1-1-1-3-3-2a3 3 0 0 0-2 3c0 4-1 9 1 13v9a4 4 0 0 0 1-1 4 4 0 0 1-1 1c1 3-1 6 1 9a2 2 0 0 0 2 3l14 4a2 2 0 0 0 2 1h3l7 2 2 1a23 23 0 0 0 9 4l3 1c5 2 10 1 15 0 7-1 14-2 19-6 5-3 6-8 4-12-3-3-2-4 1-5Zm-81-5a6 6 0 0 0 0-1 6 6 0 0 1 0 1Zm0 1a2 2 0 0 0 1 0 2 2 0 0 1-1 0Z");
			add_location(path18, file$9, 98, 6, 6216);
			attr_dev(path19, "fill", "var(--shirt)");
			attr_dev(path19, "d", "M150 252ZM151 253Z");
			add_location(path19, file$9, 102, 6, 6738);
			attr_dev(path20, "fill", "var(--pants)");
			attr_dev(path20, "d", "M123 255c-2 2-4 4-7 2h-7c5-1 10-3 14-2Z");
			add_location(path20, file$9, 103, 6, 6796);
			attr_dev(path21, "fill", "var(--hair)");
			attr_dev(path21, "d", "M144 4c-2-4-5-3-8-2s-6 0-8-2h-23c-2 3-6 2-9 3-12 2-19 11-18 23s3 23 7 34a3 3 0 0 0 1 5l5-4c6-5 2-11 1-16s-1-8 3-10c5-1 8 1 9 6 2 6 5 6 10 2a12 12 0 0 0 1-2 11 11 0 0 1 0-1 11 11 0 0 0 0 1l2-3c1-5 2-9 7-11 2-1 3-4 2-7-1-6 1-8 7-6a45 45 0 0 1 6 3l2-2a20 20 0 0 0 2-2c1-3 3-6 1-9Z");
			add_location(path21, file$9, 107, 6, 6897);
			attr_dev(path22, "fill", "var(--hair)");
			attr_dev(path22, "d", "M77 492c-1-1-2-1-2-3l2-2v1a4 4 0 0 0 0 1v2Z");
			add_location(path22, file$9, 111, 6, 7235);
			attr_dev(path23, "fill", "var(--pants)");
			attr_dev(path23, "d", "M77 491v-2l1 1a8 8 0 0 0-1 0 1 1 0 0 0 0 1Z");
			add_location(path23, file$9, 115, 6, 7339);
			attr_dev(path24, "fill", "var(--pants)");
			attr_dev(path24, "d", "M77 489a4 4 0 0 1 0-1 1 1 0 0 1 0 1Z");
			add_location(path24, file$9, 119, 6, 7444);
			attr_dev(path25, "d", "M149 236c-5-28-6-56-4-85 0-7-1-15-4-21-1-8-5-14-9-20 0-3-2-6-4-8a30 30 0 0 0-7-10 5 5 0 0 0-2-4c-2 1-2 3-2 5 0 4-2 6-6 4-2-2-5-2-7-2-4-5-10-6-15-9l-7-9c-6 5-7 12-11 18-2 5-4 12-8 16v22a139 139 0 0 1 10 68c-2 8-1 17-4 25-4 11-2 22 0 33 4 5 10 5 16 3 8-2 16-5 24-5 5-1 10-3 14-2l7-1a14 14 0 0 0-5-9c-7-6-12-15-19-21-5-5-8-12-11-19 0-3-3-5-2-8h-2v-14l1-1c-3-2-1-5-2-7-2-7-4-13-4-19-3-2-1-5-1-7a35 35 0 0 1 0-10c9 2 18 1 27 1 2 0 4-1 5 3a5 5 0 0 0 1 0 5 5 0 0 1-1 0v26c0 4 0 7 2 11 3 4 3 9 6 14 1 2 3 5 3 9 3 0 1 4 3 4v-1 1l1 3v4c4 2 4 6 4 10 3 1 2 3 3 5 1 0 2 1 1 2l1 2c3 2 3 6 4 9s1 6 5 6c1-4-1-8-1-12Zm-29-87-1-1 1-1 1 1-1 1Zm8-8a2 2 0 0 0-1-2 2 2 0 0 1 1 2Zm-1 15a74 74 0 0 1 1 11 74 74 0 0 0-1-11Zm5 49a16 16 0 0 0 0-3 16 16 0 0 1 0 3Z");
			attr_dev(path25, "fill", "var(--shirt)");
			add_location(path25, file$9, 123, 6, 7542);
			attr_dev(path26, "d", "m120 147 1 1-1 1c-1 1 0-1-1-1Z");
			attr_dev(path26, "fill", "var(--shirt)");
			add_location(path26, file$9, 127, 6, 8340);
			attr_dev(path27, "fill", "var(--flesh)");
			attr_dev(path27, "d", "m151 253-1-1v-4c-4 0-4-3-5-6s-1-7-4-9l-1-2a2 2 0 0 1-1-1 2 2 0 0 0 1 1c1-1 0-2-1-2-1-2 0-4-3-5v5a3 3 0 0 0-1 1 3 3 0 0 1 1-1v-5c0-4 0-8-4-10v-4l-1-3c-2 0 0-4-3-4 0-4-2-7-3-9-3-5-3-10-6-14-2-4-2-7-2-11v-26c-1-4-3-3-5-3-9 0-18 2-27-1a35 35 0 0 0 0 10c0 2-2 5 1 7 0 6 2 12 4 19 1 2-1 5 3 7l-1 1v14h1c-1 3 2 5 3 8 2 7 5 14 10 19 7 6 12 15 19 21a14 14 0 0 1 5 9c0 4 1 9 4 13a23 23 0 0 1 3 22c-2 7 5 11 4 16 0 2 3 2 3 1 3-4 3 1 4 1 6 0 5-5 7-7 1 1 0 4 2 4 3 0 3-2 3-4l3-10c1-8 1-16-3-23l-9-14ZM82 392a44 44 0 0 0-3 7c-3 7-6 13-6 21l4 38c0 10 2 19 1 29a1 1 0 0 0-1 0v1a1 1 0 0 1 0 1l1 1a8 8 0 0 0-1 0 1 1 0 0 0 0 1v1l3 5c4 8 12 10 15 4 2-5 6-6 9-8l1-7c4-1 5-4 4-8 1-1 1-3 3-3l-1-6v-3c1-12-1-23-1-34l1-4 1-5c1-8 0-18 5-25 9-13 12-28 17-44-15 1-29 3-44 3 1 12 0 24-8 35Zm-2 105v-2 2Zm29-24a6 6 0 0 0-1 2 6 6 0 0 1 1-2 10 10 0 0 1 0-1 10 10 0 0 0 0 1Zm4-72a4 4 0 0 0-1-3 4 4 0 0 1 1 3Zm-2-3a4 4 0 0 0-2-1 4 4 0 0 1 2 1ZM77 489ZM86 65c-2 4-1 8-4 12l7 9c5 3 11 4 15 9 2 0 5 0 7 2 4 2 6 0 6-4 0-2 0-4 2-5-1-8 4-13 12-12 3 0 8 1 9-3 1-6 6-10 5-16a4 4 0 0 1 1-4c3-3 2-5 0-8-1-3-5-5-4-8 2-7-2-13-3-20a45 45 0 0 0-6-3c-6-2-8 0-7 6 1 3 0 6-2 7-5 2-6 6-7 11l-2 3a12 12 0 0 1-1 2c-5 4-8 4-10-2-1-5-4-7-9-6-4 2-4 5-3 10s5 11-1 16l-5 4Z");
			add_location(path27, file$9, 128, 6, 8410);
			attr_dev(g1, "id", "squat-1");
			attr_dev(g1, "class", "svelte-1a2c5ru");
			add_location(g1, file$9, 91, 4, 5827);
			attr_dev(g2, "class", "shapes svelte-1a2c5ru");
			add_location(g2, file$9, 49, 2, 929);
			attr_dev(g3, "class", "svelte-1a2c5ru");
			toggle_class(g3, "paused", /*isPaused*/ ctx[1]);
			toggle_class(g3, "flip", /*flipsvg*/ ctx[2]);
			add_location(g3, file$9, 48, 0, 878);
			attr_dev(svg, "xmlns", "http://www.w3.org/2000/svg");
			attr_dev(svg, "viewBox", "0 0 223.4 536");
			attr_dev(svg, "height", "100%");
			attr_dev(svg, "width", "100%");
			attr_dev(svg, "class", "svelte-1a2c5ru");
			add_location(svg, file$9, 47, 0, 785);
		},
		l: function claim(nodes) {
			throw new Error("options.hydrate only works if the component was compiled with the `hydratable: true` option");
		},
		m: function mount(target, anchor) {
			insert_dev(target, svg, anchor);
			append_dev(svg, t);
			append_dev(svg, g3);
			append_dev(g3, g2);
			append_dev(g2, g0);
			append_dev(g0, path0);
			append_dev(g0, path1);
			append_dev(g0, path2);
			append_dev(g0, path3);
			append_dev(g0, path4);
			append_dev(g0, path5);
			append_dev(g0, path6);
			append_dev(g0, path7);
			append_dev(g0, path8);
			append_dev(g0, path9);
			append_dev(g0, path10);
			append_dev(g0, path11);
			append_dev(g0, path12);
			append_dev(g0, path13);
			append_dev(g0, path14);
			append_dev(g2, g1);
			append_dev(g1, path15);
			append_dev(g1, path16);
			append_dev(g1, path17);
			append_dev(g1, path18);
			append_dev(g1, path19);
			append_dev(g1, path20);
			append_dev(g1, path21);
			append_dev(g1, path22);
			append_dev(g1, path23);
			append_dev(g1, path24);
			append_dev(g1, path25);
			append_dev(g1, path26);
			append_dev(g1, path27);
			/*g2_binding*/ ctx[4](g2);
			if (if_block) if_block.m(g3, null);
		},
		p: function update(ctx, [dirty]) {
			if (/*isPaused*/ ctx[1]) {
				if (if_block) ; else {
					if_block = create_if_block$9(ctx);
					if_block.c();
					if_block.m(g3, null);
				}
			} else if (if_block) {
				if_block.d(1);
				if_block = null;
			}

			if (dirty & /*isPaused*/ 2) {
				toggle_class(g3, "paused", /*isPaused*/ ctx[1]);
			}

			if (dirty & /*flipsvg*/ 4) {
				toggle_class(g3, "flip", /*flipsvg*/ ctx[2]);
			}
		},
		i: noop,
		o: noop,
		d: function destroy(detaching) {
			if (detaching) detach_dev(svg);
			/*g2_binding*/ ctx[4](null);
			if (if_block) if_block.d();
		}
	};

	dispatch_dev("SvelteRegisterBlock", {
		block,
		id: create_fragment$9.name,
		type: "component",
		source: "",
		ctx
	});

	return block;
}

function instance$9($$self, $$props, $$invalidate) {
	let { $$slots: slots = {}, $$scope } = $$props;
	validate_slots('Workout_squats', slots, []);
	let { direction = "right" } = $$props;
	let { isPaused = false } = $$props;
	let { rootElement } = $$props;
	let flipsvg = false;

	if (direction == "left") {
		flipsvg = true;
	}

	const writable_props = ['direction', 'isPaused', 'rootElement'];

	Object.keys($$props).forEach(key => {
		if (!~writable_props.indexOf(key) && key.slice(0, 2) !== '$$' && key !== 'slot') console.warn(`<Workout_squats> was created with unknown prop '${key}'`);
	});

	function g2_binding($$value) {
		binding_callbacks[$$value ? 'unshift' : 'push'](() => {
			rootElement = $$value;
			$$invalidate(0, rootElement);
		});
	}

	$$self.$$set = $$props => {
		if ('direction' in $$props) $$invalidate(3, direction = $$props.direction);
		if ('isPaused' in $$props) $$invalidate(1, isPaused = $$props.isPaused);
		if ('rootElement' in $$props) $$invalidate(0, rootElement = $$props.rootElement);
	};

	$$self.$capture_state = () => ({
		direction,
		isPaused,
		rootElement,
		flipsvg
	});

	$$self.$inject_state = $$props => {
		if ('direction' in $$props) $$invalidate(3, direction = $$props.direction);
		if ('isPaused' in $$props) $$invalidate(1, isPaused = $$props.isPaused);
		if ('rootElement' in $$props) $$invalidate(0, rootElement = $$props.rootElement);
		if ('flipsvg' in $$props) $$invalidate(2, flipsvg = $$props.flipsvg);
	};

	if ($$props && "$$inject" in $$props) {
		$$self.$inject_state($$props.$$inject);
	}

	return [rootElement, isPaused, flipsvg, direction, g2_binding];
}

class Workout_squats extends SvelteComponentDev {
	constructor(options) {
		super(options);

		init(this, options, instance$9, create_fragment$9, safe_not_equal, {
			direction: 3,
			isPaused: 1,
			rootElement: 0
		});

		dispatch_dev("SvelteRegisterComponent", {
			component: this,
			tagName: "Workout_squats",
			options,
			id: create_fragment$9.name
		});

		const { ctx } = this.$$;
		const props = options.props || {};

		if (/*rootElement*/ ctx[0] === undefined && !('rootElement' in props)) {
			console.warn("<Workout_squats> was created without expected prop 'rootElement'");
		}
	}

	get direction() {
		throw new Error("<Workout_squats>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
	}

	set direction(value) {
		throw new Error("<Workout_squats>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
	}

	get isPaused() {
		throw new Error("<Workout_squats>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
	}

	set isPaused(value) {
		throw new Error("<Workout_squats>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
	}

	get rootElement() {
		throw new Error("<Workout_squats>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
	}

	set rootElement(value) {
		throw new Error("<Workout_squats>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
	}
}

var workoutSquats = /*#__PURE__*/Object.freeze({
    __proto__: null,
    'default': Workout_squats
});

/* src/workouts/workout-stepupsquats.svelte generated by Svelte v3.49.0 */

const file$8 = "src/workouts/workout-stepupsquats.svelte";

// (253:4) {#if isPaused}
function create_if_block$8(ctx) {
	let svg;
	let path;

	const block = {
		c: function create() {
			svg = svg_element("svg");
			path = svg_element("path");
			attr_dev(path, "d", "M10 24h-6v-24h6v24zm10 0h-6v-24h6v24zm-11-23h-4v22h4v-22zm10 0h-4v22h4v-22z");
			add_location(path, file$8, 253, 133, 14440);
			attr_dev(svg, "viewBox", "-6 -5 36 36");
			attr_dev(svg, "width", "100%");
			attr_dev(svg, "height", "100%");
			attr_dev(svg, "xmlns", "http://www.w3.org/2000/svg");
			attr_dev(svg, "fill-rule", "evenodd");
			attr_dev(svg, "clip-rule", "evenodd");
			add_location(svg, file$8, 253, 4, 14311);
		},
		m: function mount(target, anchor) {
			insert_dev(target, svg, anchor);
			append_dev(svg, path);
		},
		d: function destroy(detaching) {
			if (detaching) detach_dev(svg);
		}
	};

	dispatch_dev("SvelteRegisterBlock", {
		block,
		id: create_if_block$8.name,
		type: "if",
		source: "(253:4) {#if isPaused}",
		ctx
	});

	return block;
}

function create_fragment$8(ctx) {
	let svg;
	let t;
	let g6;
	let g5;
	let g0;
	let path0;
	let path1;
	let path2;
	let path3;
	let path4;
	let path5;
	let path6;
	let path7;
	let g1;
	let path8;
	let path9;
	let path10;
	let path11;
	let path12;
	let path13;
	let path14;
	let path15;
	let path16;
	let path17;
	let g2;
	let path18;
	let path19;
	let path20;
	let path21;
	let path22;
	let path23;
	let path24;
	let path25;
	let path26;
	let path27;
	let g3;
	let path28;
	let path29;
	let path30;
	let path31;
	let path32;
	let path33;
	let g4;
	let path34;
	let path35;
	let path36;
	let path37;
	let path38;
	let path39;
	let if_block = /*isPaused*/ ctx[1] && create_if_block$8(ctx);

	const block = {
		c: function create() {
			svg = svg_element("svg");
			t = text(">\n");
			g6 = svg_element("g");
			g5 = svg_element("g");
			g0 = svg_element("g");
			path0 = svg_element("path");
			path1 = svg_element("path");
			path2 = svg_element("path");
			path3 = svg_element("path");
			path4 = svg_element("path");
			path5 = svg_element("path");
			path6 = svg_element("path");
			path7 = svg_element("path");
			g1 = svg_element("g");
			path8 = svg_element("path");
			path9 = svg_element("path");
			path10 = svg_element("path");
			path11 = svg_element("path");
			path12 = svg_element("path");
			path13 = svg_element("path");
			path14 = svg_element("path");
			path15 = svg_element("path");
			path16 = svg_element("path");
			path17 = svg_element("path");
			g2 = svg_element("g");
			path18 = svg_element("path");
			path19 = svg_element("path");
			path20 = svg_element("path");
			path21 = svg_element("path");
			path22 = svg_element("path");
			path23 = svg_element("path");
			path24 = svg_element("path");
			path25 = svg_element("path");
			path26 = svg_element("path");
			path27 = svg_element("path");
			g3 = svg_element("g");
			path28 = svg_element("path");
			path29 = svg_element("path");
			path30 = svg_element("path");
			path31 = svg_element("path");
			path32 = svg_element("path");
			path33 = svg_element("path");
			g4 = svg_element("g");
			path34 = svg_element("path");
			path35 = svg_element("path");
			path36 = svg_element("path");
			path37 = svg_element("path");
			path38 = svg_element("path");
			path39 = svg_element("path");
			if (if_block) if_block.c();
			attr_dev(path0, "fill", "var(--flesh)");
			attr_dev(path0, "d", "m288 40-20 23c-5 5-7 12-10 18-14 29-30 57-45 85l-2 4-15-17c0-2 2-6-2-7 20-26 36-54 54-82l7-12c2-3 1-6-1-9-4-6-1-14-5-21-1-1 2-1 3-1 4 2 5 5 6 9 0 2 0 4 2 4 3 0 2-3 2-4 0-4 2-7 3-10 0-2 1-3 3-2s2 2 1 3v10c3-2 4-6 6-9 1-1 2-4 4-3s1 3 1 5c-1 1-2 3-1 4h2c1-1 2-3 4-1v4c-1 3-6 4-4 7 2 2 4-3 7-2Z");
			add_location(path0, file$8, 94, 6, 1491);
			attr_dev(path1, "fill", "var(--hair)");
			attr_dev(path1, "d", "M234 532c5 2 5 5 7 10 1 7 6 13 8 21 4 13 3 15-9 20h-4c0-2-1-2-2-2-8-3-11-6-11-14 0-5 0-10-4-14a6 6 0 0 1-2-8c2-3 2-6 1-9 2 0 4 2 5 0 3-4 7-4 11-4Z");
			add_location(path1, file$8, 98, 6, 1843);
			attr_dev(path2, "fill", "var(--pants)");
			attr_dev(path2, "d", "M100 332c26 6 53 7 79 0a32 32 0 0 1 6 0c1 26 4 52 13 77 1 4 0 6-2 8-10 8-21 9-33 12l-13 2c-3 0-5-1-6-4-1-8-4-15-6-22a61 61 0 0 0-2-6c-3 2-4 5-5 7l-5 18c-1 6-4 9-10 11-7 1-14 3-21 2-10-4-17-12-26-17-2-4 0-7 1-11l11-75a23 23 0 0 1 1-3c1-2 3-2 4-1l14 2Z");
			add_location(path2, file$8, 102, 6, 2050);
			attr_dev(path3, "fill", "var(--flesh)");
			attr_dev(path3, "d", "M83 151a2 2 0 0 0-2 3c2 10-3 18-8 25 0-5-4-9-6-13l-16-28c-6-10-8-21-11-32L27 57C23 45 15 34 7 23a47 47 0 0 0-5-5c-1-1-3-3-2-4A19 19 0 0 0 5 3c0-2 3 1 4 2 1 4 3 8 6 11 2-3 0-4-1-6l-2-5c0-2-3-4 0-5 2-1 3 1 4 3l5 10a29 29 0 0 0 2 3 2 2 0 0 0 3 1v-2l-1-8c0-2 0-4 2-4s3 1 3 3l2 8a19 19 0 0 0 3 8c3 4 5 5 7 0 2-3 4-6 8-6 2 0 3 0 4 2l-2 3c-5 6-7 14-11 21-4 6 2 13 4 19 6 14 13 26 21 39 4 8 6 18 12 26l9 16c-1 3-4 5-4 9ZM8 14l-1-1-1 1a8 8 0 0 0 1 1ZM163 429c12-3 23-4 33-12 2 15 8 28 16 41 6 11 9 23 12 35a344 344 0 0 0 9 35 36 36 0 0 1 1 4c-4 0-8 0-11 4-1 2-3 0-5 0 0-15-9-27-16-39-5-8-10-16-11-25a31 31 0 0 0-9-18l-19-25ZM69 420c9 5 16 13 26 17-3 7-8 12-12 17-3 4-5 7-6 12-2 17-11 30-20 45-2 5-5 10-4 16l-1 1c-2 4-4 5-6 0-2-3-6-4-9-5 6-12 6-25 9-38 2-12 6-23 12-34 6-9 11-20 11-31ZM156 176c-2 2-3 4-7 2s-7 2-11 1c-4 0-9 2-12-3 1-7-4-13-7-19-2-4-5-7 0-11l1 2a1 1 0 0 0 1-1c-2-7 1-13 2-20 1-5 3-6 7-6a45 45 0 0 0 18 0c4-2 8 0 7 6a6 6 0 0 0 2 4l3 9v6h1v-2c5 0 4 3 4 5 0 7-6 11-8 17-2 3-2 6-1 10Z");
			add_location(path3, file$8, 106, 6, 2362);
			attr_dev(path4, "fill", "var(--hair)");
			attr_dev(path4, "d", "M37 523c3 1 7 2 9 5 2 5 4 4 6 0l1-1 1 6c4 9 4 9-4 16a6 6 0 0 0-3 6c0 4 1 8-2 12-4 6-14 9-21 5-5-3-7-11-3-18 5-8 10-15 11-24l5-7ZM161 144v2h-1v-6l-3-9a6 6 0 0 1-2-4c1-6-3-8-7-7a45 45 0 0 1-18 1c-4 0-6 1-7 6-1 7-4 13-2 20a1 1 0 0 1-1 1l-1-2c-2-9-1-19 0-29 0-4 1-7 6-7 6-1 13-4 19-2 5 0 10 1 12 6a2 2 0 0 0 1 1c3 2 8 3 7 8-1 4 1 8-2 12l-1 9Z");
			add_location(path4, file$8, 110, 6, 3410);
			attr_dev(path5, "fill", "var(--shirt)");
			attr_dev(path5, "d", "m100 332-14-2c-1-1-3-1-4 1-11-6-5-16-6-25-1 6 3 11 3 17 0 2 3 4 5 4 5 1 9 3 14 3 1-1 2 0 2 2ZM138 179c-4 0-9 2-12-3l-2-1");
			add_location(path5, file$8, 114, 6, 3809);
			attr_dev(path6, "fill", "var(--shirt)");
			attr_dev(path6, "d", "m211 170-15-17c-2 0-3-3-5-2a13 13 0 0 1-2 3c-8 11-20 17-33 22-2 2-3 4-7 2s-7 2-11 1l-14-4h-1c1-3 0-5-3-4a8 8 0 0 1-7-3c-8-8-18-14-23-25l-3-1c-1 3-4 5-4 9a2 2 0 0 0-2 3c2 10-3 18-8 25-1 7 3 12 7 17 2 4 6 7 6 12 0 17 0 33-3 50-3 16-8 32-6 48-2 6 2 11 2 17 0 2 3 4 5 4 5 1 9 3 14 3 1-1 2 0 2 2 26 6 53 7 79 0a32 32 0 0 1 6 0c5 0 4-3 4-7-3-25-5-50 0-76a64 64 0 0 0 1-21 28 28 0 0 1 3-18l18-34v-6Z");
			add_location(path6, file$8, 118, 6, 3991);
			attr_dev(path7, "fill", "var(--shirt)");
			attr_dev(path7, "d", "M196 153c0-2 2-6-2-7-2 1-2 3-3 5 2-1 3 2 5 2Z");
			add_location(path7, file$8, 122, 6, 4445);
			attr_dev(g0, "id", "ss-5");
			attr_dev(g0, "class", "svelte-c5q2f8");
			add_location(g0, file$8, 93, 4, 1471);
			attr_dev(path8, "fill", "var(--flesh)");
			attr_dev(path8, "d", "M110 452c-3 9-6 17-4 26l-1 11c-3 18-3 36-7 53a20 20 0 0 0 0 3c0 10 0 11 9 14 3 1 6 2 5 6 0 4-1 4-4 3-5-3-10-5-11 4l-3 1c-3 1-2-3-4-4-2 2-2 5-5 5s-1-3-3-4c-4 4-4 4-7 0 0-2-1-1-2-1l-5 1v-3l14-9c5-3 3-9 3-14 1-17-1-34-2-51 0-5-1-10 1-15a28 28 0 0 0 0-10l-3-26c11-1 21 2 29 10Z");
			add_location(path8, file$8, 128, 6, 4579);
			attr_dev(path9, "fill", "var(--shirt)");
			attr_dev(path9, "d", "M110 452c-8-8-18-11-29-10-4-13 0-25 4-37a64 64 0 0 1 12-21c3-3 5-5 9-5 3 2 3 6 5 9v4l16 30c4 6 9 7 15 6a9 9 0 0 0 8-8c1-8 6-16 7-24 0-5 3-10 3-16 0-8 0-9 9-7 16 2 22 14 26 27l6 21 1 2 1 7c1 7 0 11-6 14-7 3-13 7-20 5-3-1-4 1-5 2-8 4-15 9-23 12a13 13 0 0 1-10 1l-21-6c-4-1-5-4-8-6Z");
			add_location(path9, file$8, 132, 6, 4914);
			attr_dev(path10, "fill", "var(--flesh)");
			attr_dev(path10, "d", "M172 451c1-1 2-3 5-2 7 2 13-2 20-5 6-3 7-7 6-14l-1-7 7 2 15 7c7 3 9 8 10 15 1 25-5 48-14 70l-9 22c-3 1-7 0-8 5l-3 2c-3 0-3-2-3-3 1-11 4-23 2-34v-17l8-24v-4c-2-2-3 0-5 1-5 1-7 4-6 10 2 17 1 35-1 52 0 6-1 11 1 17-3 9-1 17 6 24a34 34 0 0 1 3 4c-3 2-4 2-6-1-1-1-3-2-4 1 0 1 1 4-2 4-4 1-2-3-3-5h-1c-3 0-2 5-6 5-2-1 0-4-2-5l-4 3c-2 1-5 1-4-3 2-6-2-5-5-4-2 0-5 3-7 0-1-3 2-5 4-7a19 19 0 0 1 7-2c8-1 9-2 9-10 0-13 0-25-2-38l-4-41a47 47 0 0 0-1-5 39 39 0 0 0-2-13ZM169 373c-9-2-9-1-9 7 0 6-3 11-3 16-1 8-6 16-7 24a9 9 0 0 1-8 8c-6 1-11 0-15-6l-16-30v-10c0-6 0-7 6-5 8 3 14 2 20-3l7-7c2-1 3-2 4 1 0 4 3 7 6 10 0 4-1 9 1 14l1-14v-9c4 4 9 1 13 4Z");
			add_location(path10, file$8, 136, 6, 5255);
			attr_dev(path11, "fill", "var(--hair)");
			attr_dev(path11, "d", "M154 379c-3-4-6-6-7-11 0-3-1-2-3-1l-7 7c-6 5-12 6-20 3-6-2-6-1-6 5v6c-2-3-2-7-5-9-2-11-1-21 0-31 0-3 1-4 3-5 7-3 14-5 22-5 12 0 26 8 25 24a54 54 0 0 0 0 7v9Z");
			add_location(path11, file$8, 140, 6, 5951);
			attr_dev(path12, "fill", "var(--pants)");
			attr_dev(path12, "d", "M172 451a39 39 0 0 1 2 13l-6-1c-8-1-8-1-10 7l-2 15c0 5-3 7-8 6h-5c-7-6-17-6-24-12 1-7-1-14-1-21l21 6a13 13 0 0 0 10-1c8-3 15-8 23-12Z");
			add_location(path12, file$8, 144, 6, 6169);
			attr_dev(path13, "fill", "var(--hair)");
			attr_dev(path13, "d", "M197 543c0 1 0 3 2 3l4-2c0-5 5-4 8-5 2 9 6 18 14 24 3 2 5 4 4 8s-4 5-7 5a17 17 0 0 1-17-4 34 34 0 0 0-3-5c-7-6-9-14-6-23Z");
			add_location(path13, file$8, 148, 6, 6364);
			attr_dev(path14, "fill", "var(--flesh)");
			attr_dev(path14, "d", "M119 479c7 6 17 6 24 12-4 4-7 9-14 9-5-2-10-4-13-10 0-4-2-8 3-11Z");
			add_location(path14, file$8, 152, 6, 6546);
			attr_dev(path15, "fill", "var(--hair)");
			attr_dev(path15, "d", "M116 490c3 6 8 8 13 10l5 10c2 3 1 4-3 5-12 0-15-1-15-13a65 65 0 0 1 0-12Z");
			add_location(path15, file$8, 156, 6, 6673);
			attr_dev(path16, "fill", "var(--flesh)");
			attr_dev(path16, "d", "m202 423-1-2Z");
			add_location(path16, file$8, 160, 6, 6807);
			attr_dev(path17, "fill", "var(--pants)");
			attr_dev(path17, "d", "m154 379 2-1-1 14c-2-5-1-9-1-13Z");
			add_location(path17, file$8, 161, 6, 6860);
			attr_dev(g1, "id", "ss-2");
			attr_dev(g1, "class", "svelte-c5q2f8");
			add_location(g1, file$8, 127, 4, 4559);
			attr_dev(path18, "fill", "var(--hair)");
			attr_dev(path18, "d", "M164 488c3 6 10-2 16 1l5 20c2 3 1 5-3 6-15 0-18-2-19-14a65 65 0 0 1 1-13Z");
			add_location(path18, file$8, 164, 6, 6959);
			attr_dev(path19, "fill", "var(--pants)");
			attr_dev(path19, "d", "M173 446c2 4 5 15 5 20-2 0 5 24 2 23-9-1-17 2-23 0-1 6-11-12-11-7-1 6 2 8-4 7a20 20 0 0 0-3 0c-8-6-20-7-28-13 1-7-1-15-2-22 9 2 17 3 25 6a16 16 0 0 0 12-1l27-13Z");
			add_location(path19, file$8, 168, 6, 7093);
			attr_dev(path20, "fill", "var(--flesh)");
			attr_dev(path20, "d", "M185 476c-8 6-20 6-28 13 5 4 8 10 16 10 6-3 12-5 16-11-1-4 2-9-4-12ZM106 452c-3 9-5 17-4 26 1 4 0 8-1 11-2 18-3 36-6 53a21 21 0 0 0 0 3c-1 10-1 11 9 14 3 1 5 2 5 6-1 4-2 4-5 3-5-3-9-5-11 4l-2 1c-4 1-3-3-4-4-2 2-2 5-5 5s-2-3-4-4c-4 4-4 4-6 0-1-2-2-1-3-1l-5 1v-3l14-9c5-3 3-9 3-14 1-17 0-34-1-51v-15a28 28 0 0 0 1-10l-4-26c11-1 21 2 29 10Z");
			add_location(path20, file$8, 172, 6, 7316);
			attr_dev(path21, "fill", "var(--shirt)");
			attr_dev(path21, "d", "M106 452c-8-8-18-11-29-10-3-13 0-25 5-37a64 64 0 0 1 12-21c2-3 5-5 9-5 2 2 2 6 4 9v4l17 30c3 6 9 7 15 6a9 9 0 0 0 7-8c1-8 6-16 7-24 1-5 3-10 3-16 0-8 1-9 9-7 16 2 22 14 26 27l6 21 1 2 1 7c2 7 0 11-6 14s-12 7-20 5c-2-1-3 1-5 2l-22 12a13 13 0 0 1-11 1c-7-3-14-3-21-5l-8-7Z");
			add_location(path21, file$8, 176, 6, 7715);
			attr_dev(path22, "fill", "var(--flesh)");
			attr_dev(path22, "d", "m191 548 1-21c1-17 2-34 0-51a10 10 0 0 1 0-4c1-8 2-16 1-23a19 19 0 0 1 0-5c-6 3-12 7-20 5-2-1-3 1-5 2a39 39 0 0 1 2 13 45 45 0 0 1 1 5l5 41c2 13 1 25 1 38 0 8-1 9-9 10a19 19 0 0 0-6 2c-3 2-6 4-4 7 1 3 4 0 6 0 4-1 7-2 5 4-1 4 2 4 5 3l4-3c1 1-1 4 2 5 3 0 2-5 5-5h1c1 2 0 6 3 6 3-1 2-3 2-5 1-3 3-2 4-1 2 3 4 3 6 1a34 34 0 0 0-3-4c-7-7-7-20-7-20ZM165 373c-8-2-9-1-9 7 0 6-2 11-3 16-1 8-6 16-7 24a9 9 0 0 1-8 8c-5 1-11 0-14-6l-17-30v-4l1-6c-1-6 0-7 6-5 7 3 13 2 19-3l7-7c2-1 4-2 4 1 0 4 4 7 6 10 1 4-1 9 1 14 2-5 1-9 1-14l1-9c3 4 9 1 12 4Z");
			add_location(path22, file$8, 180, 6, 8047);
			attr_dev(path23, "fill", "var(--hair)");
			attr_dev(path23, "d", "M150 379c-2-4-6-6-6-11 0-3-2-2-3-1l-8 7c-6 5-12 6-19 3-6-2-7-1-6 5l-1 6c-2-3-2-7-4-9-2-11-1-21-1-31 0-3 2-4 4-5 7-3 14-5 21-5 12 0 26 8 25 24a54 54 0 0 0 1 7l-1 9Z");
			add_location(path23, file$8, 184, 6, 8643);
			attr_dev(path24, "fill", "var(--flesh)");
			attr_dev(path24, "d", "M111 476c8 6 20 6 28 13-5 4-9 10-16 10-6-3-13-5-16-11 0-4-2-9 4-12Z");
			add_location(path24, file$8, 188, 6, 8867);
			attr_dev(path25, "fill", "var(--hair)");
			attr_dev(path25, "d", "M107 488c3 6 10 8 16 11l6 10c1 3 0 5-4 6-14 0-17-2-18-14a65 65 0 0 1 0-13Z");
			add_location(path25, file$8, 192, 6, 8996);
			attr_dev(path26, "fill", "var(--flesh)");
			attr_dev(path26, "d", "m198 423-1-2Z");
			add_location(path26, file$8, 196, 6, 9131);
			attr_dev(path27, "fill", "var(--pants)");
			attr_dev(path27, "d", "m150 379 2-1c0 5 1 9-1 14-2-5 0-9-1-13Z");
			add_location(path27, file$8, 197, 6, 9184);
			attr_dev(g2, "id", "ss-1");
			attr_dev(g2, "class", "svelte-c5q2f8");
			add_location(g2, file$8, 163, 4, 6939);
			attr_dev(path28, "fill", "var(--shirt)");
			attr_dev(path28, "d", "M162 381c22 12 37 29 40 54 0 3 0 5 2 8 3 6 0 9-7 11l-10 2c-3 1-5 2-8 0h-5c-4 1-6 4-10 6-4 4-10 8-16 6-14-3-29 1-42-7-4-3-8-4-13-1s-10 1-16 0c-2 0-2-1-2-3-3-6-2-12-2-19 2-3 2-6 2-10 4-21 14-37 35-46 4 4 5 8 7 13l10 26c1 4 3 7 8 7s10-1 12-6l8-21c3-7 1-15 7-20Z");
			add_location(path28, file$8, 203, 6, 9312);
			attr_dev(path29, "fill", "var(--flesh)");
			attr_dev(path29, "d", "M174 456h5c3 2 5 2 8 0s7-1 10-2c7-2 9-6 6-11l-1-8 23 7c6 1 8 5 9 10 2 17-1 34-8 50-5 13-11 26-12 41-2 0-5 1-5 4-1 3-4 4-6 4-3 1-3-3-4-4a1 1 0 0 0-1-2c-3 7-2 13 3 19 0 3 3 4 4 6 0 1 2 2 0 3h-3c-3-2-5-4-5 2l-2 2c-2 0-2-2-3-3l-1-3-2 3c-2 3-4 5-6 0-1-2-2-1-3 0-3 1-6 1-5-4s-2-4-4-3c-3 1-6 3-8 0-1-3 2-6 5-7a29 29 0 0 1 5-2c8-1 10-3 10-11 1-18-2-36-4-53l-1-9-4-29Zm23 87 2-2c1-10 4-20 1-30l-3 32Zm4-49 5-18v-4h-5c-2 0-1 2-1 3-1 7 2 13 1 19ZM73 438c0 7-1 13 2 19 0 1 0 3 2 3 6 1 11 4 16 0s9-2 13 1l7 13c3 5 0 5-4 5-7 0-8 0-9 8a214 214 0 0 0 2 55c0 5 2 9 6 12s4 7 4 10-2 4-4 3c-2-2-4-2-4 1-1 2-2 4-4 3-3 0-2-3-3-4-3-1-4 11-9 1-2 0-4 6-7 2-2-3-5-1-7-2s-1-3 0-3l6-4c1 0 2-1 1-3 4 0 4-4 5-7 2-1 2-3 2-5a175 175 0 0 0-3-27l-4-22-3 19c-1 8 2 15 2 23a9 9 0 0 1 0 2c-1 2 1 6-3 6-3 0-8 0-9-5-1-3-3-2-5-3 1-12-6-21-10-31-6-15-10-31-9-48 1-8 4-14 13-17l16-5Zm6 52v-12c0-2 0-4-2-4h-3v5l5 11ZM162 381c-6 5-4 13-7 20l-8 21c-2 5-7 6-12 6s-7-3-8-7l-10-26c-2-5-3-9-7-13 1-2 0-4-1-6s-1-3 2-3l3 12c1-5 3-9 2-14 0-2 0-4 3-3 11 6 21 2 31-5 4-2 4-1 5 3l3 17 3-17c3 5 2 10 1 15Z");
			add_location(path29, file$8, 207, 6, 9632);
			attr_dev(path30, "fill", "var(--hair)");
			attr_dev(path30, "d", "m161 366-3 17-3-17c-1-4-1-5-5-3-10 7-20 11-31 5-3-1-3 1-3 3 1 5-1 9-2 14l-3-12-2-20a27 27 0 0 1 1-10c1-3 2-5 6-6l20-5c7 0 13 3 19 8 9 8 6 17 6 26Z");
			add_location(path30, file$8, 211, 6, 10743);
			attr_dev(path31, "fill", "var(--pants)");
			attr_dev(path31, "d", "M109 479c4 0 6-1 4-5l-7-13c13 8 28 5 42 8 6 1 12-3 16-7 3-2 6-5 10-6l4 29-7 4c-5 3-9 4-14-1l-16-14c-3-2-6-2-10-1a89 89 0 0 0-15 9c-4 2-6 2-7-3Z");
			add_location(path31, file$8, 215, 6, 10950);
			attr_dev(path32, "fill", "var(--hair)");
			attr_dev(path32, "d", "M201 564c-5-6-6-12-3-19a1 1 0 0 1 1 2c1 1 1 5 4 4 2 0 5-1 6-4 0-3 3-4 5-4 1 0 2-1 2 1 1 8 7 11 14 14l11 6c3 3 3 6 0 9-5 4-13 5-21 1-6-3-12-9-19-10ZM63 539c2 1 4 0 5 3 1 5 6 5 9 5 4 0 2-4 3-6a9 9 0 0 0 0-2c3 3 5 7 6 12-1 3-1 7-5 7-5 1-9 3-13 6-7 4-15 8-24 7-2 0-5 0-6-2-1-3 0-5 2-7a24 24 0 0 1 5-4c8-5 15-10 18-19Z");
			add_location(path32, file$8, 219, 6, 11155);
			attr_dev(path33, "fill", "var(--flesh)");
			attr_dev(path33, "d", "M73 438Z");
			add_location(path33, file$8, 223, 6, 11529);
			attr_dev(g3, "id", "ss-3");
			attr_dev(g3, "class", "svelte-c5q2f8");
			add_location(g3, file$8, 202, 4, 9292);
			attr_dev(path34, "fill", "var(--hair)");
			attr_dev(path34, "d", "M213 534c1 0 3-1 4 1 1 8 8 12 15 15l7 3c2 1 5 3 4 6a7 7 0 0 1-4 6l-8 3h-3c-9-4-17-10-27-14-9-4-10-12-2-19 2 2 0 7 4 7 3-1 7-2 7-6 0-2 2-2 3-2Z");
			add_location(path34, file$8, 226, 6, 11604);
			attr_dev(path35, "fill", "var(--shirt)");
			attr_dev(path35, "d", "M90 427c5-10 1-21 2-31l1-31c2-13-2-24-12-33-2-2-4-4-5-8 6 1 9-2 13-6 5-5 4-12 4-18l7 4c7 7 16 11 24 16l6 15c4 5 11 8 17 5 8-4 10-12 13-20 9-4 19-5 26-13l10-7c3 1 3 2 3 4v10c0 7 2 10 9 13 2 0 2 2 2 3-1 3-2 6-5 7-12 5-17 15-20 27-3 15-7 29-6 45 1 5-3 8-3 13-11 4-22 6-31 13-15 12-16 11-30-1a28 28 0 0 0-25-7Z");
			add_location(path35, file$8, 230, 6, 11807);
			attr_dev(path36, "fill", "var(--flesh)");
			attr_dev(path36, "d", "M93 300c0 6 1 13-4 18-4 4-7 7-13 6-9-11-15-25-24-37-7-11-10-25-13-38l-7-34c-2-13-11-24-19-34-4-7-4-13-2-19 1-3 10-3 12-1 4 4 5 10 8 15v-11c-1-2-2-4 1-4s2 1 3 3c3 4 2 8 4 12 0 2 0 4 2 4v-7c0-2 0-3 2-3 1-1 2 1 2 2a22 22 0 0 0 5 9v7c-5 12-3 24 2 37l17 47a18 18 0 0 0 4 7l20 21ZM210 330c-1-1 0-3-2-3-7-3-9-6-9-13v-10c0-2 0-3-3-4l8-7a49 49 0 0 0 16-18c5-9 13-14 20-21l24-29c3-4 5-9 1-15-3-6 1-13-2-19l2-2a3 3 0 0 1 4 2 80 80 0 0 1 2 8c1 2 1 3 3 3 2 1 3-1 3-2l4-8c2-2 3-5 6-4s0 4-1 5l-1 6c4-1 4-5 6-7 1-1 2-3 4-1v4c-1 3-4 5-5 9 4-1 5-4 7-5 1-1 3-2 4-1a2 2 0 0 1 0 3v6a4 4 0 0 1-1 5c-4 4-7 10-12 14a25 25 0 0 0-9 9l-26 38c-12 18-28 32-41 50l-2 7ZM213 534c-1 0-3 0-3 2 0 4-4 5-7 6-4 0-2-5-4-7 2-11 1-23-1-34a52 52 0 0 1 3-25c1-4 0-5-4-7-7-2-13 1-19 2-3-2-7-1-11-2s-5-2-4-6c3-15 12-25 23-35 7 1 13 4 18 6l18 9c5 2 7 7 8 13a113 113 0 0 1-10 51c-4 9-9 17-7 27ZM67 535c0-8-2-16-6-23a93 93 0 0 1-8-49c1-5 3-9 7-13 7-7 16-12 24-17 5 1 11 0 15 4 6 6 11 13 13 22 2 12 3 12-11 14-3 0-7-2-10 1-8 0-10 3-8 10s3 15 0 23c-3 9-1 18-2 27l-1 4c0 4-2 5-6 4s-6-3-7-7Z");
			add_location(path36, file$8, 234, 6, 12175);
			attr_dev(path37, "fill", "var(--pants)");
			attr_dev(path37, "d", "M91 474c3-3 7-1 10-1 14-2 13-2 11-14-2-9-7-16-13-22-4-4-10-3-15-4l6-6a28 28 0 0 1 25 7c14 12 15 13 29 1 10-7 21-10 32-13 3 3 7 3 10 6-11 10-20 20-23 35-1 4 1 5 4 6s8 0 11 2c-4 10-9 12-18 7a66 66 0 0 1-14-11 21 21 0 0 0-12-7c-5 0-7 1-9 5-2 8-7 14-12 20-3 3-6 3-9 1-5-3-9-7-13-12Z");
			add_location(path37, file$8, 238, 6, 13278);
			attr_dev(path38, "fill", "var(--flesh)");
			attr_dev(path38, "d", "M160 320c-3 8-5 16-13 20-6 3-14 0-17-5l-6-15c1-3-1-5-3-8-2-4-5-8-1-13 2 1 0 3 3 4-3-9 1-16 3-23 0-3 2-5 5-4a42 42 0 0 0 19-1c2-1 6 0 7 3 0 7 6 12 4 20a4 4 0 0 0 1 4l1-4c4 1 4 2 3 6 0 6-5 10-6 16Z");
			add_location(path38, file$8, 242, 6, 13618);
			attr_dev(path39, "fill", "var(--hair)");
			attr_dev(path39, "d", "M67 535c1 4 3 6 7 7s6 0 6-4l1-4a93 93 0 0 1 5 13c2 3 0 6-3 6-7 1-13 5-19 9a43 43 0 0 1-19 5c-2 0-5 0-6-3s0-5 2-7a38 38 0 0 1 5-4c6-4 13-8 16-16 1-3 3-2 5-2ZM163 298l-1 4a4 4 0 0 1-1-4c2-8-4-13-4-20-1-3-5-4-7-3a42 42 0 0 1-19 1c-3-1-5 0-5 3-2 8-6 15-3 24-3-1-1-3-3-4-1-9 0-19 1-28 0-3 0-5 3-6 8-2 16-5 24-3 4 1 8 2 9 6l1 1c12 4 7 13 6 21l-1 8Z");
			add_location(path39, file$8, 246, 6, 13875);
			attr_dev(g4, "id", "ss-4");
			attr_dev(g4, "class", "svelte-c5q2f8");
			add_location(g4, file$8, 225, 4, 11584);
			attr_dev(g5, "class", "shapes svelte-c5q2f8");
			add_location(g5, file$8, 92, 2, 1424);
			attr_dev(g6, "class", "svelte-c5q2f8");
			toggle_class(g6, "paused", /*isPaused*/ ctx[1]);
			toggle_class(g6, "flip", /*flipsvg*/ ctx[2]);
			add_location(g6, file$8, 91, 0, 1373);
			attr_dev(svg, "xmlns", "http://www.w3.org/2000/svg");
			attr_dev(svg, "viewBox", "0 0 301.8 582.8");
			attr_dev(svg, "height", "100%");
			attr_dev(svg, "width", "100%");
			attr_dev(svg, "class", "svelte-c5q2f8");
			add_location(svg, file$8, 90, 0, 1278);
		},
		l: function claim(nodes) {
			throw new Error("options.hydrate only works if the component was compiled with the `hydratable: true` option");
		},
		m: function mount(target, anchor) {
			insert_dev(target, svg, anchor);
			append_dev(svg, t);
			append_dev(svg, g6);
			append_dev(g6, g5);
			append_dev(g5, g0);
			append_dev(g0, path0);
			append_dev(g0, path1);
			append_dev(g0, path2);
			append_dev(g0, path3);
			append_dev(g0, path4);
			append_dev(g0, path5);
			append_dev(g0, path6);
			append_dev(g0, path7);
			append_dev(g5, g1);
			append_dev(g1, path8);
			append_dev(g1, path9);
			append_dev(g1, path10);
			append_dev(g1, path11);
			append_dev(g1, path12);
			append_dev(g1, path13);
			append_dev(g1, path14);
			append_dev(g1, path15);
			append_dev(g1, path16);
			append_dev(g1, path17);
			append_dev(g5, g2);
			append_dev(g2, path18);
			append_dev(g2, path19);
			append_dev(g2, path20);
			append_dev(g2, path21);
			append_dev(g2, path22);
			append_dev(g2, path23);
			append_dev(g2, path24);
			append_dev(g2, path25);
			append_dev(g2, path26);
			append_dev(g2, path27);
			append_dev(g5, g3);
			append_dev(g3, path28);
			append_dev(g3, path29);
			append_dev(g3, path30);
			append_dev(g3, path31);
			append_dev(g3, path32);
			append_dev(g3, path33);
			append_dev(g5, g4);
			append_dev(g4, path34);
			append_dev(g4, path35);
			append_dev(g4, path36);
			append_dev(g4, path37);
			append_dev(g4, path38);
			append_dev(g4, path39);
			/*g5_binding*/ ctx[4](g5);
			if (if_block) if_block.m(g6, null);
		},
		p: function update(ctx, [dirty]) {
			if (/*isPaused*/ ctx[1]) {
				if (if_block) ; else {
					if_block = create_if_block$8(ctx);
					if_block.c();
					if_block.m(g6, null);
				}
			} else if (if_block) {
				if_block.d(1);
				if_block = null;
			}

			if (dirty & /*isPaused*/ 2) {
				toggle_class(g6, "paused", /*isPaused*/ ctx[1]);
			}

			if (dirty & /*flipsvg*/ 4) {
				toggle_class(g6, "flip", /*flipsvg*/ ctx[2]);
			}
		},
		i: noop,
		o: noop,
		d: function destroy(detaching) {
			if (detaching) detach_dev(svg);
			/*g5_binding*/ ctx[4](null);
			if (if_block) if_block.d();
		}
	};

	dispatch_dev("SvelteRegisterBlock", {
		block,
		id: create_fragment$8.name,
		type: "component",
		source: "",
		ctx
	});

	return block;
}

function instance$8($$self, $$props, $$invalidate) {
	let { $$slots: slots = {}, $$scope } = $$props;
	validate_slots('Workout_stepupsquats', slots, []);
	let { direction = "right" } = $$props;
	let { isPaused = false } = $$props;
	let { rootElement } = $$props;
	let flipsvg = false;

	if (direction == "left") {
		flipsvg = true;
	}

	const writable_props = ['direction', 'isPaused', 'rootElement'];

	Object.keys($$props).forEach(key => {
		if (!~writable_props.indexOf(key) && key.slice(0, 2) !== '$$' && key !== 'slot') console.warn(`<Workout_stepupsquats> was created with unknown prop '${key}'`);
	});

	function g5_binding($$value) {
		binding_callbacks[$$value ? 'unshift' : 'push'](() => {
			rootElement = $$value;
			$$invalidate(0, rootElement);
		});
	}

	$$self.$$set = $$props => {
		if ('direction' in $$props) $$invalidate(3, direction = $$props.direction);
		if ('isPaused' in $$props) $$invalidate(1, isPaused = $$props.isPaused);
		if ('rootElement' in $$props) $$invalidate(0, rootElement = $$props.rootElement);
	};

	$$self.$capture_state = () => ({
		direction,
		isPaused,
		rootElement,
		flipsvg
	});

	$$self.$inject_state = $$props => {
		if ('direction' in $$props) $$invalidate(3, direction = $$props.direction);
		if ('isPaused' in $$props) $$invalidate(1, isPaused = $$props.isPaused);
		if ('rootElement' in $$props) $$invalidate(0, rootElement = $$props.rootElement);
		if ('flipsvg' in $$props) $$invalidate(2, flipsvg = $$props.flipsvg);
	};

	if ($$props && "$$inject" in $$props) {
		$$self.$inject_state($$props.$$inject);
	}

	return [rootElement, isPaused, flipsvg, direction, g5_binding];
}

class Workout_stepupsquats extends SvelteComponentDev {
	constructor(options) {
		super(options);

		init(this, options, instance$8, create_fragment$8, safe_not_equal, {
			direction: 3,
			isPaused: 1,
			rootElement: 0
		});

		dispatch_dev("SvelteRegisterComponent", {
			component: this,
			tagName: "Workout_stepupsquats",
			options,
			id: create_fragment$8.name
		});

		const { ctx } = this.$$;
		const props = options.props || {};

		if (/*rootElement*/ ctx[0] === undefined && !('rootElement' in props)) {
			console.warn("<Workout_stepupsquats> was created without expected prop 'rootElement'");
		}
	}

	get direction() {
		throw new Error("<Workout_stepupsquats>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
	}

	set direction(value) {
		throw new Error("<Workout_stepupsquats>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
	}

	get isPaused() {
		throw new Error("<Workout_stepupsquats>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
	}

	set isPaused(value) {
		throw new Error("<Workout_stepupsquats>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
	}

	get rootElement() {
		throw new Error("<Workout_stepupsquats>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
	}

	set rootElement(value) {
		throw new Error("<Workout_stepupsquats>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
	}
}

var workoutStepupsquats = /*#__PURE__*/Object.freeze({
    __proto__: null,
    'default': Workout_stepupsquats
});

/* src/workouts/workout-surfers.svelte generated by Svelte v3.49.0 */

const file$7 = "src/workouts/workout-surfers.svelte";

// (170:4) {#if isPaused}
function create_if_block$7(ctx) {
	let svg;
	let path;

	const block = {
		c: function create() {
			svg = svg_element("svg");
			path = svg_element("path");
			attr_dev(path, "d", "M10 24h-6v-24h6v24zm10 0h-6v-24h6v24zm-11-23h-4v22h4v-22zm10 0h-4v22h4v-22z");
			add_location(path, file$7, 170, 133, 10652);
			attr_dev(svg, "viewBox", "-6 -5 36 36");
			attr_dev(svg, "width", "100%");
			attr_dev(svg, "height", "100%");
			attr_dev(svg, "xmlns", "http://www.w3.org/2000/svg");
			attr_dev(svg, "fill-rule", "evenodd");
			attr_dev(svg, "clip-rule", "evenodd");
			add_location(svg, file$7, 170, 4, 10523);
		},
		m: function mount(target, anchor) {
			insert_dev(target, svg, anchor);
			append_dev(svg, path);
		},
		d: function destroy(detaching) {
			if (detaching) detach_dev(svg);
		}
	};

	dispatch_dev("SvelteRegisterBlock", {
		block,
		id: create_if_block$7.name,
		type: "if",
		source: "(170:4) {#if isPaused}",
		ctx
	});

	return block;
}

function create_fragment$7(ctx) {
	let svg;
	let t;
	let g4;
	let g3;
	let g0;
	let path0;
	let path1;
	let path2;
	let path3;
	let path4;
	let path5;
	let g1;
	let path6;
	let path7;
	let path8;
	let path9;
	let path10;
	let path11;
	let path12;
	let path13;
	let path14;
	let g2;
	let path15;
	let path16;
	let path17;
	let path18;
	let path19;
	let path20;
	let path21;
	let path22;
	let if_block = /*isPaused*/ ctx[1] && create_if_block$7(ctx);

	const block = {
		c: function create() {
			svg = svg_element("svg");
			t = text(">\n");
			g4 = svg_element("g");
			g3 = svg_element("g");
			g0 = svg_element("g");
			path0 = svg_element("path");
			path1 = svg_element("path");
			path2 = svg_element("path");
			path3 = svg_element("path");
			path4 = svg_element("path");
			path5 = svg_element("path");
			g1 = svg_element("g");
			path6 = svg_element("path");
			path7 = svg_element("path");
			path8 = svg_element("path");
			path9 = svg_element("path");
			path10 = svg_element("path");
			path11 = svg_element("path");
			path12 = svg_element("path");
			path13 = svg_element("path");
			path14 = svg_element("path");
			g2 = svg_element("g");
			path15 = svg_element("path");
			path16 = svg_element("path");
			path17 = svg_element("path");
			path18 = svg_element("path");
			path19 = svg_element("path");
			path20 = svg_element("path");
			path21 = svg_element("path");
			path22 = svg_element("path");
			if (if_block) if_block.c();
			attr_dev(path0, "fill", "var(--hair)");
			attr_dev(path0, "d", "M372 339c2 0 2 2 2 3a7 7 0 0 0 3 6c8 9 17 17 28 21l7 5v2c-8 7-17 7-26 4l-36-12c-4 0-5-2-4-6 1-8 5-15 7-22 2 1 2 2 2 4a44 44 0 0 0 1 5c1 3 2 4 5 3 4-1 6-4 6-6-1-4 0-6 5-7Z");
			add_location(path0, file$7, 71, 6, 1251);
			attr_dev(path1, "fill", "var(--flesh)");
			attr_dev(path1, "d", "M372 339c-5 1-6 3-5 7 0 2-2 5-6 6-3 1-4 0-5-3a44 44 0 0 1-1-5c0-2 0-3-2-4 2-10 3-20 2-30-1-11-2-21 3-32l2-8c3-4 2-7-2-10-7-5-13-12-21-16a20 20 0 0 0-4-3 2 2 0 0 0-1-1c-4-1-4-3-1-5l10-10 2-3c-2-1-2 0-3 1-4 5-9 6-14 3a12 12 0 0 0-6-1c-8 0-15 0-23-2l-14-2a15 15 0 0 0-5-1l-3-2-19-7c-13-4-17-13-18-25-1-4 0-8-2-11 1-4 0-9-1-13l-4-22a46 46 0 0 0 5-2c5-1 10-2 14 0a57 57 0 0 0 11 5c5 2 5 4 5 8v24l1 4c4 4 7 9 12 12a86 86 0 0 0 16 7v1l20 4c9 2 18 4 25-5a10 10 0 0 1 10-4 3 3 0 0 0 3-1c3 3 6 1 9 1 5-1 7-3 5-8l-4-8a180 180 0 0 1-13-28c3-3 6-6 10-7l4-3 10-10c5 9 9 19 10 30a17 17 0 0 0 4 9 56 56 0 0 1 7 13 43 43 0 0 1 3 14 10 10 0 0 0 0 5c2 3 1 7 2 11 1 5-6 12-12 12l-8 1c-1 0-2 1-1 2 1 5 3 8 8 11 6 4 7 11 6 18-3 11-4 23-6 34a154 154 0 0 1-10 34 86 86 0 0 0-5 15Z");
			add_location(path1, file$7, 75, 6, 1482);
			attr_dev(path2, "fill", "var(--shirt)");
			attr_dev(path2, "d", "m374 130-10 10-4 3c-4 1-7 4-10 7-6-1-4-7-7-9 0 4 1 8-1 13l-2 16-1 13c0 9-7 16-17 16l-27-1a86 86 0 0 1-16-7c-5-3-8-8-12-12l-1-3v-24c0-5 0-7-5-9a57 57 0 0 1-11-4c-4-2-9-2-14 0a46 46 0 0 1-5 1v-26c1-10 6-18 13-26 12-13 28-19 46-23a3 3 0 0 1 0 3c-4 7-1 14 1 21 2 8 6 14 10 21 2 2 3 4 6 4h6c3 0 4-1 4-4l3-8c1-3 3-3 5-3 4 1 6-1 8-4 3-6 5-11 9-16l14 13c8 10 15 20 20 32 1 2-2 4-2 6Z");
			add_location(path2, file$7, 79, 6, 2300);
			attr_dev(path3, "fill", "var(--flesh)");
			attr_dev(path3, "d", "M195 354c3-15 0-30-2-44-2-11-4-23-2-34l6-24a16 16 0 0 1 2-8c6-8 9-18 14-27l7-10 2-1c7-4 11-3 16 2 8 8 14 17 20 26 2 1 1 2-1 3-3 2-6 3-8 6a30 30 0 0 0-12 9l-14 16a5 5 0 0 0-1 5c3 19-1 36-8 54a47 47 0 0 0-2 23v6a16 16 0 0 1-2 3c-1 1-2 3-4 3s-2-2-2-4c0-3-2-4-4-4h-5ZM342 79c-4 5-6 10-9 16-2 3-4 5-8 4-2 0-4 1-5 3l-2 8c-1 3-2 4-5 4h-6c-3 0-4-2-6-4-4-7-8-13-10-21-2-7-5-14-1-21a3 3 0 0 0 0-3c3 0 3-2 3-5 3 0 2-2 2-4 0-4 0-8 2-12 1-2 2-4 5-3s6 3 6 7a26 26 0 0 1 0 9l1 2c1 1 1 0 2-1l4-7c2-3 4-7 8-8 3-1 4-2 4-5a24 24 0 0 1 0-4c1-6 4-9 10-7l11 6c3 2 6 3 9 0 0 7-2 14-3 20a5 5 0 0 1-3 4c-5 3-5 7-4 12a29 29 0 0 1 0 5c0 4-2 5-5 5Z");
			add_location(path3, file$7, 83, 6, 2737);
			attr_dev(path4, "fill", "var(--hair)");
			attr_dev(path4, "d", "M357 33c-3 3-6 2-9 0l-11-6c-6-2-9 1-10 7a24 24 0 0 0 0 4c0 3-1 4-4 5-4 1-6 5-8 8l-4 7c-1 1-1 2-2 1l-1-2a26 26 0 0 0 0-9c0-4-3-5-6-7s-4 1-5 3c-2 4-2 8-2 12 0 2 1 4-2 4-2-10-4-20-4-30 0-8 4-15 8-21a7 7 0 0 1 4-3c7-2 12-7 20-6 9 1 16 4 24 9 5 3 10 7 15 8 4 1 4 4 4 7-1 4-4 7-7 9ZM195 354h5c2 0 4 1 4 4 0 2 0 3 2 4s3-2 4-3a16 16 0 0 0 2-3l2 11c1 2-1 4-2 6a45 45 0 0 0-11 15c-4 7-17 11-25 8a7 7 0 0 1-4-7c0-5 2-10 5-13l18-22Z");
			add_location(path4, file$7, 87, 6, 3419);
			attr_dev(path5, "fill", "var(--pants)");
			attr_dev(path5, "d", "M249 243c2-3 5-4 8-6 2-1 3-2 1-3-6-9-12-18-20-26-5-5-9-6-16-2l-2 1a5 5 0 0 1 1-3c4-3 6-7 7-11 0-3 1-5 4-7 1-1 2-2 1-4-3-4 0-5 3-7 2 3 1 7 2 11 1 12 5 21 18 25l19 7 2 2a92 92 0 0 0-9 28c-1 5-1 4-6 2a93 93 0 0 1-13-7ZM297 223c8 2 15 2 23 2a12 12 0 0 1 6 1c5 3 10 2 14-3 1-1 1-2 3-1l-2 3-10 10c-3 2-3 4 1 5a2 2 0 0 1 1 1c-6 5-13 5-19 6a2 2 0 0 1-2-1l-15-22v-1ZM340 170a13 13 0 0 1 6 4c3 2 3 5 0 7-2 2-2 7 1 8 2 1 5 2 6 4a3 3 0 0 1-3 1 10 10 0 0 0-10 4c-7 9-16 8-25 6l-20-5h27c10 0 17-7 17-16l1-13Z");
			add_location(path5, file$7, 91, 6, 3900);
			attr_dev(g0, "id", "surfer-3");
			attr_dev(g0, "class", "svelte-1dfjxif");
			add_location(g0, file$7, 70, 4, 1227);
			attr_dev(path6, "fill", "var(--flesh)");
			attr_dev(path6, "d", "M393 227c-1-4 0-8-2-11a10 10 0 0 1 0-5 43 43 0 0 0-3-14 57 57 0 0 0-7-13 17 17 0 0 1-4-9c-1-11-5-21-10-30l-10 10-4 3c-4 1-7 4-10 7a180 180 0 0 0 13 28l4 8c2 5 1 5-4 5l-22-5 3 6c2 2-1 0-2 0 0 6 7 13 7 19l18 6c9 1 23 4 32 0a8 8 0 0 0 1-5ZM388 269c-6-10-19-21-25-22-12-1-15 14-25 10a106 106 0 0 1-5 13 2 2 0 0 1 0 1 19 19 0 0 1 4 2c8 5 10 10 6 18-5 9 14 8 17 8s-1 6-2 9c-5 10-4 20-3 31 1 10 0 20-2 30 2 1 2 3 2 4a44 44 0 0 0 1 5c1 3 2 4 5 4 4-1 6-4 6-7-1-4 0 3 4 2l6-23a154 154 0 0 0 10-35l6-34c1-6 0-12-5-16Z");
			add_location(path6, file$7, 97, 6, 4487);
			attr_dev(path7, "fill", "var(--hair)");
			attr_dev(path7, "d", "M419 362c-3-1-13-9-16-8-12 3-15 13-27 10a9 9 0 0 1-2-1 35 35 0 0 1-3 6 10 10 0 0 1-5 5 9 9 0 0 1-1 1c-2 2-4 2-6 0l-2-2a9 9 0 0 1-4-4 3 3 0 0 0-1 0c1 4-4 11-3 16 0 3 2 4 3 7 2 4 8 4 11 3 12-4 25-6 37-8 9-2 18-7 21-17l-2-8Z");
			add_location(path7, file$7, 101, 6, 5055);
			attr_dev(path8, "fill", "var(--flesh)");
			attr_dev(path8, "d", "M199 372c4-15-4-18-6-33-2-11-4-22-2-34l6-24a16 16 0 0 1 2-8c6-8 9-18 14-27l7-10 2-1c7-3 11-3 16 2 8 8 14 17 20 26 2 2 1 3-1 4-3 1 7 6 4 9l-13 10c-4 6-20 6-25 12a5 5 0 0 0-1 4c3 19-1 37-8 54-3 7 2 5 3 13v5a16 16 0 0 1-2 3c-1 1-2 4-4 3s-1 2-2 3c-5 10-5 1-6-4-2 0-2-7-4-7Z");
			add_location(path8, file$7, 105, 6, 5337);
			attr_dev(path9, "fill", "var(--hair)");
			attr_dev(path9, "d", "M194 381c2 9 9 15 17 17a45 45 0 0 1 6-7c1-1 2 1 2-6l-2-16-2 8c-1 1-2 4-4 3l-3-1c-2-1-2-4-5-4-1 0-2-3-4-3l2-10c-2-1-7 4-7 10v9Z");
			add_location(path9, file$7, 109, 6, 5668);
			attr_dev(path10, "fill", "var(--flesh)");
			attr_dev(path10, "d", "M342 108c-4 5-6 11-9 16-2 3-4 5-8 5-2-1-4 0-5 2l-2 9c-1 2-2 3-5 3h-6c-3 0-4-1-6-4-4-6-8-13-10-21-2-6-5-14-1-21a3 3 0 0 0 0-3c3 0 3-2 3-5 3 0 2-2 2-4 0-4 0-8 2-11 1-3 2-5 5-4s6 3 6 7a26 26 0 0 1 0 9l1 2c1 1 1 0 2-1l4-7c2-3 4-7 8-8 3-1 4-2 4-5a25 25 0 0 1 0-4c1-6 4-9 10-6 4 1 7 3 11 6 3 1 6 2 9 0 0 7-2 13-3 20-1 1-9 25-12 25Z");
			add_location(path10, file$7, 113, 6, 5855);
			attr_dev(path11, "fill", "var(--hair)");
			attr_dev(path11, "d", "M357 63c-3 2-6 1-9-1l-4-2c-6-2-11-3-12 3v6c1 3 0 6-3 7-4 1 1 10-1 13-1 3 1 5 1 8 0 21-33-2-36-8-2-10-4-20-4-30 0-8 4-15 8-21a7 7 0 0 1 4-3c7-1 12-6 20-6 8 1 16 5 24 9l15 9c4 1 4 3 4 6-1 4-4 7-7 10Z");
			add_location(path11, file$7, 117, 6, 6242);
			attr_dev(path12, "fill", "var(--pants)");
			attr_dev(path12, "d", "M298 252c7 2 14 2 22 2a12 12 0 0 1 6 1c5 3 10 2 14-2l3-2c0 2-1 2-2 3l-10 10c-3 2-3 4 0 5a2 2 0 0 1 2 2c-6 4-13 4-19 5a2 2 0 0 1-3-1l-13-22v-1ZM248 272h1a1 1 0 0 0-1 0Z");
			add_location(path12, file$7, 121, 6, 6500);
			attr_dev(path13, "fill", "var(--pants)");
			attr_dev(path13, "d", "M363 240a4 4 0 0 1-4-2c-6-6-13-10-20-15a24 24 0 0 0 0 3c0 10-7 17-17 17l-27-1c-2-1-13-7-16-6 2 1 6 4 3 3-13-4-43 3-44-9-1-4 0-8-2-11-4-2-9 5-11 7l-6 7c-1 1-10 5-8 13s6 11 8 14a42 42 0 0 0 8 12c8 8 10 4 16 13l5 1h1v1c4 3-1 4 4 6 4 2 29-16 36-12 6 3 18-2 26-2 10 10 35 35 35 17 0-4 26-43 30-42l-17-14Z");
			add_location(path13, file$7, 125, 6, 6729);
			attr_dev(path14, "fill", "var(--shirt)");
			attr_dev(path14, "d", "m374 159-10 10c-1 1-2 3-4 3-4 1-7 4-10 7-6-1-2 0-4-3l-3 7c-2 5-2 11-3 17l1 6c0 10 4 34-6 34-9 0-17 11-26 11-5-2-24 0-31 0s-29-4-41-17c-6-6-2-19-2-29-2 1-2-36-4-36 0-9 8-17 9-26 1-10 15-32 22-39 12-13 10-6 28-10 1 1 8 9 19 13s29 6 33 1l14 13c8 10 15 20 20 32 1 3-2 4-2 6Z");
			add_location(path14, file$7, 129, 6, 7090);
			attr_dev(g1, "id", "surfer-2");
			attr_dev(g1, "class", "svelte-1dfjxif");
			add_location(g1, file$7, 96, 4, 4463);
			attr_dev(path15, "fill", "var(--flesh)");
			attr_dev(path15, "d", "M509 400c-2-2-4-2-7-2h-27a91 91 0 0 1-14-1c-3-1-4-2-4-5a106 106 0 0 0-6-18c-1-7-4-13-3-20a1 1 0 0 0-1 0c-2-8-4-15-4-23a30 30 0 0 0-1-4 94 94 0 0 1-2-15l2-8c-1-3 1-7 1-10a8 8 0 0 1 5-6c5-2 10-4 15-4a101 101 0 0 1 20 3 78 78 0 0 1 19 7c5 2 8 5 7 10 0 7-3 14-6 20-4 8-11 14-18 19a2 2 0 0 1-3 0c-2-2-5-3-6-7-1 4-4 7-4 10l-2 14c-1 5 0 9 2 14 0 6 1 6 6 6 8 0 15 2 23 3 9 1 17 4 26 6 2 0 4 1 3 3s-1 4-4 5a20 20 0 0 1-4 0c-2-1-5 0-6 3Z");
			add_location(path15, file$7, 135, 6, 7453);
			attr_dev(path16, "fill", "var(--hair)");
			attr_dev(path16, "d", "M46 345a77 77 0 0 0-7 16c-3 8-3 8 5 12a36 36 0 0 1 5 3c4 3 4 7 0 10l-10 4c-9 1-17-1-25-5a9 9 0 0 1-4-6c-2-6-4-12-3-19v-12c0-10-4-18-7-26v-8a57 57 0 0 1 16-3h25c1 0 2-1 1 1l-8 4a4 4 0 0 0-2 3c-2 4-3 9-1 14 3 6 8 11 15 12Z");
			add_location(path16, file$7, 139, 6, 7942);
			attr_dev(path17, "fill", "var(--pants)");
			attr_dev(path17, "d", "M367 356a14 14 0 0 0-7 4c-5 4-11 6-17 7-17 1-33 3-49 2-15-1-29 1-43 2a31 31 0 0 0-3 1c-6 1-8 0-11-5l-3-12c1-16-2-32-2-48l12-4c3 0 4-1 5-3s2-4 5-4l47-9c7-1 13-4 19-6 10-5 20-8 31-9 9 0 18 1 25 6a7 7 0 0 1 3 3 2 2 0 0 0-2 1c-3 8-4 15-2 23 1 7 2 13-1 20a89 89 0 0 0-4 15c-1 6-1 11-3 16Z");
			add_location(path17, file$7, 143, 6, 8223);
			attr_dev(path18, "fill", "var(--shirt)");
			attr_dev(path18, "d", "M367 356c2-5 2-10 3-16a89 89 0 0 1 4-15c3-7 2-13 1-20-2-8 0-15 2-23a2 2 0 0 1 2-1c5 0 8 3 13 4 2 5 6 2 9 2a15 15 0 0 1 9 1c3 2 5 2 7 1h8c5 1 10-1 15-2 9-3 19-5 29-5h13a94 94 0 0 1 36 9 78 78 0 0 1 24 18c1 1 4 2 4 5-2 12-4 23-8 35l-15 15c-11 12-25 13-40 11l-11-1c-2-5-3-9-2-14l2-14c0-3 3-6 4-10 1 4 4 5 6 7a2 2 0 0 0 3 0c7-5 14-11 18-19 3-6 6-13 6-20 1-5-3-8-7-10a78 78 0 0 0-19-7 101 101 0 0 0-20-3c-5 0-10 2-15 4a8 8 0 0 0-5 6l-2 10c1 3-1 5-1 8a94 94 0 0 0 2 15 30 30 0 0 1 1 4c0 8 2 15 4 23a1 1 0 0 1 1 0c-1 7 2 13 3 20-12 0-24 0-36 2l-10 1a14 14 0 0 1-9-3c-3-2-7-1-11-1l-16-2c-2 0-2-2-2-3v-12Z");
			add_location(path18, file$7, 147, 6, 8568);
			attr_dev(path19, "fill", "var(--flesh)");
			attr_dev(path19, "d", "M232 307c0 16 3 32 2 48-13-3-27-2-40-2a98 98 0 0 1-30-5 46 46 0 0 0-19-3c-15 1-28-2-42-4l-18-1h-4c-9 0-19 0-28 3-3 0-5 0-7 2-7-1-12-6-15-13-2-4-1-9 1-14a4 4 0 0 1 2-2l8-4h10l20-1c6-1 13 0 19-2l25-2 33-4h28l21 5a186 186 0 0 0 23 2c4 0 7-3 11-3Z");
			add_location(path19, file$7, 151, 6, 9226);
			attr_dev(path20, "fill", "var(--hair)");
			attr_dev(path20, "d", "M557 315c4-4 8-5 13-7 10-3 20-4 31-4 11-1 19 9 19 21 1 11-1 22-3 32l-4 16c0 4-4 6-8 4l-7-5 2-3c2-3 4-6 3-9s-2-5-4-4c-3 2-5 1-6-2-1-2-3-3-5-2l-4 1a14 14 0 0 1-10-1c-3-1-3-3-3-6s3-1 5-1l7-1c4 0 5-2 5-6a9 9 0 0 0-7-8l-9-2c-5 0-8-3-11-7l-4-6Z");
			add_location(path20, file$7, 155, 6, 9531);
			attr_dev(path21, "fill", "var(--flesh)");
			attr_dev(path21, "d", "m557 315 4 6c3 4 6 7 11 7l9 2a9 9 0 0 1 7 8c0 4-1 6-5 6l-7 1c-2 0-4-2-5 1s0 5 3 6a14 14 0 0 0 10 1l4-1c2-1 4 0 5 2 1 3 3 4 6 2 2-1 4 1 4 4s-1 6-3 9l-2 3-9 1c-4 1-7 2-11 1s-7 2-10 4c-5 3-5 3-8-2a2 2 0 0 0-2 0c-5 0-9 0-11-4l-3-1c-4 0-6-1-6-5a30 30 0 0 1 2-10c1-3 0-5-2-7l8-35 11 1ZM482 282h-13c-10 0-20 2-29 5-5 1-10 3-15 2v-6c1-5 6-9 10-8 9 0 19-1 28 3l4 1c5 3 10 3 15 3Z");
			add_location(path21, file$7, 159, 6, 9830);
			attr_dev(path22, "fill", "var(--hair)");
			attr_dev(path22, "d", "M91 309c-6 2-13 1-19 2l-20 1-1-1c0-7 0-7 7-8 11-1 20 2 30 4l3 2ZM53 343c9-3 19-3 28-3h4l-7 11c-4 6-3 8 3 11 3 2 7 3 6 8-1 4-5 5-8 5a44 44 0 0 1-24-2c-4-2-6-4-5-9l3-21Z");
			add_location(path22, file$7, 163, 6, 10262);
			attr_dev(g2, "id", "surfer-1");
			attr_dev(g2, "class", "svelte-1dfjxif");
			add_location(g2, file$7, 134, 4, 7429);
			attr_dev(g3, "class", "shapes svelte-1dfjxif");
			add_location(g3, file$7, 69, 2, 1180);
			attr_dev(g4, "class", "svelte-1dfjxif");
			toggle_class(g4, "paused", /*isPaused*/ ctx[1]);
			toggle_class(g4, "flip", /*flipsvg*/ ctx[2]);
			add_location(g4, file$7, 68, 0, 1129);
			attr_dev(svg, "xmlns", "http://www.w3.org/2000/svg");
			attr_dev(svg, "viewBox", "0 0 620.3 399.7");
			attr_dev(svg, "height", "100%");
			attr_dev(svg, "width", "100%");
			attr_dev(svg, "class", "svelte-1dfjxif");
			add_location(svg, file$7, 67, 0, 1034);
		},
		l: function claim(nodes) {
			throw new Error("options.hydrate only works if the component was compiled with the `hydratable: true` option");
		},
		m: function mount(target, anchor) {
			insert_dev(target, svg, anchor);
			append_dev(svg, t);
			append_dev(svg, g4);
			append_dev(g4, g3);
			append_dev(g3, g0);
			append_dev(g0, path0);
			append_dev(g0, path1);
			append_dev(g0, path2);
			append_dev(g0, path3);
			append_dev(g0, path4);
			append_dev(g0, path5);
			append_dev(g3, g1);
			append_dev(g1, path6);
			append_dev(g1, path7);
			append_dev(g1, path8);
			append_dev(g1, path9);
			append_dev(g1, path10);
			append_dev(g1, path11);
			append_dev(g1, path12);
			append_dev(g1, path13);
			append_dev(g1, path14);
			append_dev(g3, g2);
			append_dev(g2, path15);
			append_dev(g2, path16);
			append_dev(g2, path17);
			append_dev(g2, path18);
			append_dev(g2, path19);
			append_dev(g2, path20);
			append_dev(g2, path21);
			append_dev(g2, path22);
			/*g3_binding*/ ctx[4](g3);
			if (if_block) if_block.m(g4, null);
		},
		p: function update(ctx, [dirty]) {
			if (/*isPaused*/ ctx[1]) {
				if (if_block) ; else {
					if_block = create_if_block$7(ctx);
					if_block.c();
					if_block.m(g4, null);
				}
			} else if (if_block) {
				if_block.d(1);
				if_block = null;
			}

			if (dirty & /*isPaused*/ 2) {
				toggle_class(g4, "paused", /*isPaused*/ ctx[1]);
			}

			if (dirty & /*flipsvg*/ 4) {
				toggle_class(g4, "flip", /*flipsvg*/ ctx[2]);
			}
		},
		i: noop,
		o: noop,
		d: function destroy(detaching) {
			if (detaching) detach_dev(svg);
			/*g3_binding*/ ctx[4](null);
			if (if_block) if_block.d();
		}
	};

	dispatch_dev("SvelteRegisterBlock", {
		block,
		id: create_fragment$7.name,
		type: "component",
		source: "",
		ctx
	});

	return block;
}

function instance$7($$self, $$props, $$invalidate) {
	let { $$slots: slots = {}, $$scope } = $$props;
	validate_slots('Workout_surfers', slots, []);
	let { direction = "right" } = $$props;
	let { isPaused = false } = $$props;
	let { rootElement } = $$props;
	let flipsvg = false;

	if (direction == "left") {
		flipsvg = true;
	}

	const writable_props = ['direction', 'isPaused', 'rootElement'];

	Object.keys($$props).forEach(key => {
		if (!~writable_props.indexOf(key) && key.slice(0, 2) !== '$$' && key !== 'slot') console.warn(`<Workout_surfers> was created with unknown prop '${key}'`);
	});

	function g3_binding($$value) {
		binding_callbacks[$$value ? 'unshift' : 'push'](() => {
			rootElement = $$value;
			$$invalidate(0, rootElement);
		});
	}

	$$self.$$set = $$props => {
		if ('direction' in $$props) $$invalidate(3, direction = $$props.direction);
		if ('isPaused' in $$props) $$invalidate(1, isPaused = $$props.isPaused);
		if ('rootElement' in $$props) $$invalidate(0, rootElement = $$props.rootElement);
	};

	$$self.$capture_state = () => ({
		direction,
		isPaused,
		rootElement,
		flipsvg
	});

	$$self.$inject_state = $$props => {
		if ('direction' in $$props) $$invalidate(3, direction = $$props.direction);
		if ('isPaused' in $$props) $$invalidate(1, isPaused = $$props.isPaused);
		if ('rootElement' in $$props) $$invalidate(0, rootElement = $$props.rootElement);
		if ('flipsvg' in $$props) $$invalidate(2, flipsvg = $$props.flipsvg);
	};

	if ($$props && "$$inject" in $$props) {
		$$self.$inject_state($$props.$$inject);
	}

	return [rootElement, isPaused, flipsvg, direction, g3_binding];
}

class Workout_surfers extends SvelteComponentDev {
	constructor(options) {
		super(options);

		init(this, options, instance$7, create_fragment$7, safe_not_equal, {
			direction: 3,
			isPaused: 1,
			rootElement: 0
		});

		dispatch_dev("SvelteRegisterComponent", {
			component: this,
			tagName: "Workout_surfers",
			options,
			id: create_fragment$7.name
		});

		const { ctx } = this.$$;
		const props = options.props || {};

		if (/*rootElement*/ ctx[0] === undefined && !('rootElement' in props)) {
			console.warn("<Workout_surfers> was created without expected prop 'rootElement'");
		}
	}

	get direction() {
		throw new Error("<Workout_surfers>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
	}

	set direction(value) {
		throw new Error("<Workout_surfers>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
	}

	get isPaused() {
		throw new Error("<Workout_surfers>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
	}

	set isPaused(value) {
		throw new Error("<Workout_surfers>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
	}

	get rootElement() {
		throw new Error("<Workout_surfers>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
	}

	set rootElement(value) {
		throw new Error("<Workout_surfers>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
	}
}

var workoutSurfers = /*#__PURE__*/Object.freeze({
    __proto__: null,
    'default': Workout_surfers
});

/* src/workouts/workout-swimmers.svelte generated by Svelte v3.49.0 */

const file$6 = "src/workouts/workout-swimmers.svelte";

// (195:4) {#if isPaused}
function create_if_block$6(ctx) {
	let svg;
	let path;

	const block = {
		c: function create() {
			svg = svg_element("svg");
			path = svg_element("path");
			attr_dev(path, "d", "M10 24h-6v-24h6v24zm10 0h-6v-24h6v24zm-11-23h-4v22h4v-22zm10 0h-4v22h4v-22z");
			add_location(path, file$6, 195, 133, 13809);
			attr_dev(svg, "viewBox", "-6 -5 36 36");
			attr_dev(svg, "width", "100%");
			attr_dev(svg, "height", "100%");
			attr_dev(svg, "xmlns", "http://www.w3.org/2000/svg");
			attr_dev(svg, "fill-rule", "evenodd");
			attr_dev(svg, "clip-rule", "evenodd");
			add_location(svg, file$6, 195, 4, 13680);
		},
		m: function mount(target, anchor) {
			insert_dev(target, svg, anchor);
			append_dev(svg, path);
		},
		d: function destroy(detaching) {
			if (detaching) detach_dev(svg);
		}
	};

	dispatch_dev("SvelteRegisterBlock", {
		block,
		id: create_if_block$6.name,
		type: "if",
		source: "(195:4) {#if isPaused}",
		ctx
	});

	return block;
}

function create_fragment$6(ctx) {
	let svg;
	let t;
	let g4;
	let g3;
	let g0;
	let path0;
	let path1;
	let path2;
	let path3;
	let path4;
	let path5;
	let g1;
	let path6;
	let path7;
	let path8;
	let path9;
	let path10;
	let path11;
	let g2;
	let path12;
	let path13;
	let path14;
	let path15;
	let path16;
	let path17;
	let path18;
	let path19;
	let path20;
	let path21;
	let path22;
	let path23;
	let path24;
	let path25;
	let path26;
	let path27;
	let path28;
	let path29;
	let path30;
	let path31;
	let if_block = /*isPaused*/ ctx[1] && create_if_block$6(ctx);

	const block = {
		c: function create() {
			svg = svg_element("svg");
			t = text(">\n");
			g4 = svg_element("g");
			g3 = svg_element("g");
			g0 = svg_element("g");
			path0 = svg_element("path");
			path1 = svg_element("path");
			path2 = svg_element("path");
			path3 = svg_element("path");
			path4 = svg_element("path");
			path5 = svg_element("path");
			g1 = svg_element("g");
			path6 = svg_element("path");
			path7 = svg_element("path");
			path8 = svg_element("path");
			path9 = svg_element("path");
			path10 = svg_element("path");
			path11 = svg_element("path");
			g2 = svg_element("g");
			path12 = svg_element("path");
			path13 = svg_element("path");
			path14 = svg_element("path");
			path15 = svg_element("path");
			path16 = svg_element("path");
			path17 = svg_element("path");
			path18 = svg_element("path");
			path19 = svg_element("path");
			path20 = svg_element("path");
			path21 = svg_element("path");
			path22 = svg_element("path");
			path23 = svg_element("path");
			path24 = svg_element("path");
			path25 = svg_element("path");
			path26 = svg_element("path");
			path27 = svg_element("path");
			path28 = svg_element("path");
			path29 = svg_element("path");
			path30 = svg_element("path");
			path31 = svg_element("path");
			if (if_block) if_block.c();
			attr_dev(path0, "fill", "var(--flesh)");
			attr_dev(path0, "d", "M395 173a56 56 0 0 1 2 8c1 9 5 17 8 25 5 12 8 26 10 39l8 31c2 6 3 13 6 18a12 12 0 0 0 7 6c8 2 16 2 24 2h7c8 0 9 1 9 9 0 4-2 6-5 6-6 0-12 2-18 4l-3 1c0 2 2 2 2 2 5 4 6 5 5 9-2 3-9 6-12 4l-10-5a4 4 0 0 0-6 0c-2 2-1 4-1 6 2 5 2 6-4 8h-4l-8-7c-1-2-2-2-4-1a27 27 0 0 1-15 3 3 3 0 0 0-3 1c-5 4-15 4-20 0-4-2-4-5-4-9 1-3 3-3 6-3a24 24 0 0 0 18-28 182 182 0 0 0-15-42l-7-25c-2-9-6-18-11-26a60 60 0 0 1-11-26 19 19 0 0 0 6-5c6-9 15-11 25-11 3 0 6 2 9 1 4 0 7 2 9 5Z");
			add_location(path0, file$6, 66, 6, 1227);
			attr_dev(path1, "fill", "var(--shirt)");
			attr_dev(path1, "d", "M395 173c-2-3-5-5-9-5-3 1-6-1-9-1-10 1-19 2-25 11a19 19 0 0 1-6 5c-3 1-4-1-6-2a44 44 0 0 0-4-5l6-6c14-14 20-31 18-50-1-13-13-29-25-32-11-3-22-5-33-2-10 0-19 0-28 7-2 2-4 5-8 6-4 2-7 5-9 9a78 78 0 0 0-11 25 80 80 0 0 0-1 21 27 27 0 0 0 2 9l3 5c2 1 4 4 2 8-1 2 2 8 4 8 3 0 5 1 8-1s5-2 9 0a16 16 0 0 0 11 4c5 6 9 12 17 14-4 4-9 4-14 4-11 0-21-4-31-7-15-5-28-14-41-21-8-5-17-9-24-15-6-5-10-12-12-19-1-3 1-5 2-6 4-6 4-12 2-19l-7-17c-2-6-8-9-14-12s-11-7-15-13c-2-4-1-8 0-13 2-3 3-6 6-8a13 13 0 0 0 4-11v-8c3-6 6-11 13-14 2-1 5 0 7-2 3-1 5 0 8 1v1l17 10c1 1 1 0 2-1a4 4 0 0 0 2 3c6 3 13 7 20 8a16 16 0 0 1 11 6c3 4 7 6 12 5a15 15 0 0 1 11 1 5 5 0 0 0 2 0l4 3 19 6c3 1 7 3 11 3 5 3 12 4 18 6 14 4 28 9 39 21a16 16 0 0 0 3 3c10 6 14 16 19 25 2 4 3 8 3 13 0 1 0 2 2 3 3 0 5 2 4 6-1 2 0 3 3 4a3 3 0 0 1 2 2 73 73 0 0 0 7 12c3 4 2 9-1 12Z");
			add_location(path1, file$6, 70, 6, 1745);
			attr_dev(path2, "fill", "var(--hair)");
			attr_dev(path2, "d", "M302 86c11-3 22-1 33 2 12 4 24 19 25 32 2 19-4 36-18 50l-6 6-14 15a45 45 0 0 1-10 8 17 17 0 0 1-11 2c-8-2-12-8-17-14l-6-9c-4-7-8-14-7-22 0-5 0-7-5-8s-5-4-4-8a6 6 0 0 0-3-7 15 15 0 0 1-6-8v-2h3c1 2 3 1 4 0 6-6 12-12 14-21 0-4 3-7 7-8l21-8Z");
			add_location(path2, file$6, 74, 6, 2633);
			attr_dev(path3, "fill", "var(--flesh)");
			attr_dev(path3, "d", "M177 20c-2 2-5 1-7 2-7 3-11 8-13 14l-1 8a13 13 0 0 1-4 11l-5 8c-4-2-5-6-9-9 0-1 0-2-2-2v63c0 7 3 11 8 15 7 5 12 10 14 18a38 38 0 0 0 3 5c2 3 4 5 8 5 1 0 2 0 3 2s-1 2-1 2c-5 5-11 4-15-1-2-2-5-4-6-7 0-2-1-3-3-2s-3 2-3 4l3 21c1 7 2 13 1 19 0 3-1 5-4 5-4 0-4-2-4-5l-4-22-2-3a1 1 0 0 0-1-1l-1 2a104 104 0 0 1 3 19v13a7 7 0 0 1-1 3c-1 2-2 3-4 3s-3-2-3-4l-1-16a33 33 0 0 0-2-10c-2 6-2 12-2 18a15 15 0 0 1 0 5 4 4 0 0 1-4 3 3 3 0 0 1-4-3v-16l-1-16c-1 5-3 11-2 17a11 11 0 0 1 0 4c0 2-1 4-3 4s-3-2-4-4v-15l1-27c1-7 4-13 4-19 1-16 2-31 0-46-2-16-2-32-2-48V17c1-15 12-18 22-17a134 134 0 0 1 47 19 6 6 0 0 1 1 1ZM296 66c-4 0-8-2-11-3l-19-6-4-2c0-5 2-8 4-11s3-7 2-10l1-1 1-7c6 3 8 3 12-1 2 0 2 4 5 2 0 4 2 7 3 10 5 8 8 16 7 26l-1 3Z");
			add_location(path3, file$6, 78, 6, 2932);
			attr_dev(path4, "fill", "var(--hair)");
			attr_dev(path4, "d", "M287 28c-3 1-3-3-5-3-4 4-6 4-12 1l-2 7a16 16 0 0 1-1-15c2-4 6-5 10-4s8 2 9 6a16 16 0 0 1 1 8ZM204 31c-1 1-1 2-2 1l-17-10v-1a17 17 0 0 1 7-5c6-2 11 1 12 8a21 21 0 0 1 0 7Z");
			add_location(path4, file$6, 82, 6, 3712);
			attr_dev(path5, "fill", "var(--flesh)");
			attr_dev(path5, "d", "m302 86-21 8c-4 1-7 4-7 8-2 9-8 15-14 21-1 1-3 2-4 0h-3v2a15 15 0 0 0 6 8 6 6 0 0 1 3 7c-1 4-1 6 4 8 5 1 5 3 5 8-1 8 3 15 7 22l6 9a16 16 0 0 1-11-4c-4-2-7-1-9 0l-8 1c-2 0-5-6-4-8 2-4 0-7-2-8l-3-5a27 27 0 0 1-2-9 80 80 0 0 1 1-21 78 78 0 0 1 10-25c3-4 6-7 10-9l8-6c9-7 18-7 28-7Z");
			add_location(path5, file$6, 86, 6, 3943);
			attr_dev(g0, "id", "swimmer-3");
			attr_dev(g0, "class", "svelte-14bpjd9");
			add_location(g0, file$6, 65, 4, 1202);
			attr_dev(path6, "fill", "var(--flesh)");
			attr_dev(path6, "d", "M82 173a55 55 0 0 0-2 8c-2 9-5 17-9 25-5 12-7 26-10 39l-8 31c-1 6-2 13-6 18a12 12 0 0 1-7 6c-8 2-16 2-24 2H9c-8 0-9 1-9 9 0 4 2 6 6 6 6 0 11 2 17 4l3 1c0 2-1 2-2 2-5 4-6 5-4 9 2 3 8 6 12 4l9-5a4 4 0 0 1 6 0c2 2 2 4 1 6-2 5-1 6 4 8h4l9-7c0-2 2-2 3-1a27 27 0 0 0 16 3 3 3 0 0 1 2 1c5 4 15 4 21 0 3-2 4-5 3-9 0-3-3-3-5-3a24 24 0 0 1-18-28 181 181 0 0 1 14-42c4-8 5-17 7-25 2-9 6-18 12-26a60 60 0 0 0 10-26 19 19 0 0 1-5-5c-7-9-16-11-25-11-4 0-6 2-10 1-4 0-7 2-8 5Z");
			add_location(path6, file$6, 92, 6, 4315);
			attr_dev(path7, "fill", "var(--shirt)");
			attr_dev(path7, "d", "M82 173c1-3 4-5 8-5 4 1 6-1 10-1 9 1 18 2 25 11a19 19 0 0 0 5 5c3 1 5-1 6-2a44 44 0 0 1 4-5l-6-6a60 60 0 0 1-18-50c1-13 14-29 26-32 10-3 21-5 32-2 10 0 20 0 28 7l8 6c4 2 7 5 10 9a77 77 0 0 1 12 46 27 27 0 0 1-3 9c0 2-1 3-3 5-2 1-4 4-2 8 1 2-2 8-4 8s-5 1-8-1-5-2-8 0a16 16 0 0 1-12 4c-4 6-9 12-17 14 4 4 9 4 14 4 11 0 21-4 32-7 14-5 27-14 40-21 9-5 17-9 24-15 7-5 10-12 12-19 1-3-1-5-2-6-4-6-4-12-1-19l6-17c3-6 8-9 14-12s11-7 15-13c2-4 1-8 0-13l-5-8a13 13 0 0 1-4-11l-1-8c-2-6-6-11-13-14-2-1-5 0-7-2-2-1-5 0-7 1l-1 1-17 10c-1 1-1 0-1-1a4 4 0 0 1-2 3c-7 3-13 7-21 8a16 16 0 0 0-10 6c-3 4-7 6-12 5a15 15 0 0 0-12 1 5 5 0 0 1-2 0c0 2-3 2-4 3l-18 6c-4 1-7 3-11 3-6 3-13 4-19 6-14 4-28 9-38 21a16 16 0 0 1-4 3c-10 6-14 16-19 25-1 4-3 8-2 13l-2 3c-4 0-5 2-4 6 0 2-1 3-3 4a3 3 0 0 0-3 2 73 73 0 0 1-7 12c-3 4-2 9 2 12Z");
			add_location(path7, file$6, 96, 6, 4838);
			attr_dev(path8, "fill", "var(--hair)");
			attr_dev(path8, "d", "M174 86c-11-3-22-1-32 2-12 4-25 19-26 32-2 19 4 36 18 50l6 6 14 15a45 45 0 0 0 10 8 17 17 0 0 0 11 2c8-2 13-8 17-14l6-9c4-7 8-14 7-22 0-5 1-7 5-8 5-1 5-4 5-8a6 6 0 0 1 2-7 15 15 0 0 0 6-8v-2h-2c-2 2-3 1-5 0-6-6-12-12-13-21-1-4-4-7-8-8l-21-8Z");
			add_location(path8, file$6, 100, 6, 5710);
			attr_dev(path9, "fill", "var(--flesh)");
			attr_dev(path9, "d", "M299 20c2 2 5 1 7 2 7 3 11 8 13 14l1 8a13 13 0 0 0 4 11l5 8c4-2 6-6 9-9l2-2v63c1 7-3 11-8 15-6 5-11 10-14 18a40 40 0 0 1-3 5c-1 3-4 5-8 5-1 0-2 0-3 2s1 2 2 2c4 5 10 4 14-1 2-2 5-4 6-7 1-2 2-3 4-2a3 3 0 0 1 2 4c0 7 0 14-2 21s-2 13-2 19c0 3 1 5 4 5 4 0 4-2 5-5a102 102 0 0 1 5-25 1 1 0 0 1 2-1v2a104 104 0 0 0-3 19v13a7 7 0 0 0 1 3c1 2 3 3 5 3s2-2 2-4l1-16a33 33 0 0 1 3-10l1 18a15 15 0 0 0 1 5 4 4 0 0 0 4 3 3 3 0 0 0 3-3l1-16c1-5-1-11 1-16 0 5 2 11 1 17a11 11 0 0 0 0 4c0 2 1 4 3 4s4-2 4-4l1-15-2-27c0-7-3-13-4-19-1-16-2-31 0-46 3-16 3-32 2-48V17c-1-15-12-18-22-16a134 134 0 0 0-47 18 6 6 0 0 0-1 1ZM181 66c4 0 7-2 11-3l18-6c1-1 4-1 4-3 0-4-2-7-3-11s-4-6-3-10l-2-7c-6 3-8 3-12-1-2 0-1 4-4 2 0 4-2 7-4 10-4 8-8 16-6 26 0 1-1 2 1 3Z");
			add_location(path9, file$6, 104, 6, 6012);
			attr_dev(path10, "fill", "var(--hair)");
			attr_dev(path10, "d", "M190 28c3 1 2-3 4-3 4 4 6 4 12 1l2 7a16 16 0 0 0 1-15c-2-4-6-5-10-4s-7 2-9 6a16 16 0 0 0 0 8ZM273 31c0 1 0 2 1 1l17-10 1-1a17 17 0 0 0-8-5c-6-2-11 1-12 8a21 21 0 0 0 1 7Z");
			add_location(path10, file$6, 108, 6, 6804);
			attr_dev(path11, "fill", "var(--flesh)");
			attr_dev(path11, "d", "m174 86 21 8c4 1 7 4 8 8 1 9 7 15 13 21 2 1 3 2 5 0h2v2a15 15 0 0 1-6 8 6 6 0 0 0-2 7c0 4 0 6-5 8-4 1-5 3-5 8 1 8-3 15-7 22l-6 9a16 16 0 0 0 12-4c3-2 6-1 8 0l8 1c2 0 5-6 4-8-2-4 0-7 2-8l4-5a27 27 0 0 0 2-9 77 77 0 0 0-12-46c-3-4-6-7-10-9l-8-6c-8-7-18-7-28-7Z");
			add_location(path11, file$6, 112, 6, 7035);
			attr_dev(g1, "id", "swimmer-2");
			attr_dev(g1, "class", "svelte-14bpjd9");
			add_location(g1, file$6, 91, 4, 4290);
			attr_dev(path12, "fill", "var(--flesh)");
			attr_dev(path12, "d", "m99 290 10-14 11-15a15 15 0 0 0 2-13c-4-17-7-33-7-51l-1-10c0-5 4-9 7-12 5-6 9-11 12-18a82 82 0 0 1 9-15l3-1c1-3 3-2 5-2l12 3c3 1 5 1 7 3l10 10c3 3 7 7 5 12l-5 6c-3 4-7 8-13 10-5 1-7 5-8 10-1 12-3 24-3 37a44 44 0 0 0 2 12c2 4 5 6 9 7a43 43 0 0 1 10 3c4 2 7 3 9-1l4-3c5-1 7 1 7 6 0 6-6 15-14 14l-6 3a28 28 0 0 1-11 2c-3 0-4 1-4 4-1 4-2 8-6 10s-8 0-8-4v-4c0-1 0-3-2-3s-3 0-4 2l-8 14c-2 3-5 5-8 5-3-1-4-3-3-6l1-5c-3 2-6 4-7 7a16 16 0 0 1-5 6c-2 2-6 1-9-1-1-2-1-4-3-4Z");
			add_location(path12, file$6, 118, 6, 7387);
			attr_dev(path13, "fill", "var(--shirt)");
			attr_dev(path13, "d", "M184 167c2-5-2-9-5-12l-10-10c-2-2-4-2-7-3l-12-3c-2 0-4-1-5 2l-3 1c-4-3-4-4 0-7l6-4 2-2c2-6 8-8 11-13a4 4 0 0 0 0-2l1-2c2-1 2-3 2-5l2-2c3-1 5-4 7-6 5-7 10-15 16-21l6-4 1-1h2c6-4 14-5 21-6a403 403 0 0 1 71-2h3l18 3a12 12 0 0 1 6 4l20 16a30 30 0 0 1 11 14c3 6 7 11 12 15l1 1c4 1 6 3 6 7 0 2 1 2 2 2 3 2 5 3 5 6a6 6 0 0 0 3 4c3 2 2 4 0 7-4-4-9-4-13-4-5 0-10-1-14 3l-6 5c-4 4-11 6-8 14a2 2 0 0 1 0 1c-3 3-4 3-6-1l-3-8a4 4 0 0 0-2-2c-4-3-5-3-8 1l-9 18c-3 3-4 6-9 7 2-8 4-15 4-23 1-12-2-23-9-33a54 54 0 0 0-16-14l1-1-7-15c-1-2-3-4-6-5-6-1-13 2-16 8l-1 4c-3 3-4 7-5 10l-2 1c-18 9-28 27-25 47 0 6 3 10 4 16-7 0-13-1-18-6h-3c-5 4-11 2-16 0Z");
			add_location(path13, file$6, 122, 6, 7912);
			attr_dev(path14, "fill", "var(--flesh)");
			attr_dev(path14, "d", "M336 163a2 2 0 0 0 0-1c-3-8 4-10 8-14l6-5c4-4 9-3 14-3 4 0 9 0 13 4a32 32 0 0 0 9 11 47 47 0 0 1 15 25l10 39 9 32c2 7 7 11 12 14 13 7 27 11 40 17l4 2 2 2c-2 4 1 3 3 4s3 2 3 4a5 5 0 0 1-4 5c-4 1-7-1-11-2a75 75 0 0 0-12-5h-3l7 5c2 2 3 4 1 7-1 2-4 3-7 2a38 38 0 0 1-14-8c-3-3-7-4-10-6a1 1 0 0 0 0 2c0 2 2 4 0 5a7 7 0 0 1-8 2 15 15 0 0 1-6-4l-10-8h-5a14 14 0 0 1-7 2 61 61 0 0 0-12 2c-6 2-11-2-13-7-1-3 0-5 1-7l7-7c7-4 7-10 7-16-2-19-10-35-19-51-3-7-8-13-9-21a10 10 0 0 0-3-5l-18-16Zm93 129Z");
			add_location(path14, file$6, 126, 6, 8604);
			attr_dev(path15, "fill", "var(--hair)");
			attr_dev(path15, "d", "M278 108a54 54 0 0 1 16 14c7 10 10 20 9 32 0 9-2 16-4 24a1 1 0 0 0 0 1c-4 9-9 18-16 25-10 10-33 13-45-1-6-8-10-17-15-25l-2-5c-1-6-4-10-4-16a44 44 0 0 1 27-48c8-3 17-5 26-3l8 2Z");
			add_location(path15, file$6, 130, 6, 9153);
			attr_dev(path16, "fill", "var(--pants)");
			attr_dev(path16, "d", "M290 65a403 403 0 0 0-71 2c-7 1-15 2-21 6h-2l2-3c6-8 12-16 21-20 7-1 13 0 19 1a5 5 0 0 0 3 0c7-2 13-2 20-2 8 2 16 5 23 10 2 2 5 3 6 6Z");
			add_location(path16, file$6, 134, 6, 9390);
			attr_dev(path17, "fill", "var(--flesh)");
			attr_dev(path17, "d", "M219 50c-9 4-15 13-21 20l-2 3-1 1c-3-7-7-15-6-23a96 96 0 0 1 4-17l1-6 1-1c1-2 3-4 5-1a3 3 0 0 0 4 0 4 4 0 0 1 6 0c1 3-2 6 0 8l5 6c2 3 4 6 4 10ZM290 65c-1-3-4-4-6-6-7-5-15-8-23-10 1-5 3-11 3-17l1-6 1-1c0-3 2-3 4-1h5c3-2 4-1 5 1 1 8 5 16 9 24a30 30 0 0 1 4 16Z");
			add_location(path17, file$6, 138, 6, 9586);
			attr_dev(path18, "fill", "var(--hair)");
			attr_dev(path18, "d", "M210 26a4 4 0 0 0-6 0 3 3 0 0 1-4 0c-2-3-4-1-5 1l-1 1a1 1 0 0 0 0-1l2-9c2-3 5-4 8-3s5 3 6 6a41 41 0 0 1 0 5ZM280 25c-1-1-2-3-5-1h-5c-2-2-4-2-4 1l-1 1a1 1 0 0 0 0-1 53 53 0 0 1 0-5c1-5 3-7 7-7 5 0 7 2 8 7a42 42 0 0 1 0 5Z");
			add_location(path18, file$6, 142, 6, 9906);
			attr_dev(path19, "fill", "var(--flesh)");
			attr_dev(path19, "d", "M265 25a1 1 0 0 1 0 1v-1ZM194 27a1 1 0 0 1 0 1 4 4 0 0 1 0-1Z");
			add_location(path19, file$6, 146, 6, 10187);
			attr_dev(path20, "fill", "var(--shirt)");
			attr_dev(path20, "d", "M299 179a1 1 0 0 1 0-1v1Z");
			add_location(path20, file$6, 150, 6, 10310);
			attr_dev(path21, "fill", "var(--flesh)");
			attr_dev(path21, "d", "m278 108-8-2c-9-2-18 0-26 3 1-3 2-7 5-10l1-4c3-6 10-9 16-8 3 1 5 3 6 5l7 15-1 1Z");
			add_location(path21, file$6, 151, 6, 10375);
			attr_dev(path22, "fill", "var(--flesh)");
			attr_dev(path22, "d", "m99 290 10-14 11-15a15 15 0 0 0 2-13c-4-17-7-33-7-51l-1-10c0-5 4-9 7-12 5-6 9-11 12-18a82 82 0 0 1 9-15l3-1c1-3 3-2 5-2l12 3c3 1 5 1 7 3l10 10c3 3 7 7 5 12l-5 6c-3 4-7 8-13 10-5 1-7 5-8 10-1 12-3 24-3 37a44 44 0 0 0 2 12c2 4 5 6 9 7a43 43 0 0 1 10 3c4 2 7 3 9-1l4-3c5-1 7 1 7 6 0 6-6 15-14 14l-6 3a28 28 0 0 1-11 2c-3 0-4 1-4 4-1 4-2 8-6 10s-8 0-8-4v-4c0-1 0-3-2-3s-3 0-4 2l-8 14c-2 3-5 5-8 5-3-1-4-3-3-6l1-5c-3 2-6 4-7 7a16 16 0 0 1-5 6c-2 2-6 1-9-1-1-2-1-4-3-4Z");
			add_location(path22, file$6, 155, 6, 10517);
			attr_dev(path23, "fill", "var(--shirt)");
			attr_dev(path23, "d", "M184 167c2-5-2-9-5-12l-10-10c-2-2-4-2-7-3l-12-3c-2 0-4-1-5 2l-3 1c-4-3-4-4 0-7l6-4 2-2c2-6 8-8 11-13a4 4 0 0 0 0-2l1-2c2-1 2-3 2-5l2-2c3-1 5-4 7-6 5-7 10-15 16-21l6-4 1-1h2c6-4 14-5 21-6a403 403 0 0 1 71-2h3l18 3a12 12 0 0 1 6 4l20 16a30 30 0 0 1 11 14c3 6 7 11 12 15l1 1c4 1 6 3 6 7 0 2 1 2 2 2 3 2 5 3 5 6a6 6 0 0 0 3 4c3 2 2 4 0 7-4-4-9-4-13-4-5 0-10-1-14 3l-6 5c-4 4-11 6-8 14a2 2 0 0 1 0 1c-3 3-4 3-6-1l-3-8a4 4 0 0 0-2-2c-4-3-5-3-8 1l-9 18c-3 3-4 6-9 7 2-8 4-15 4-23 1-12-2-23-9-33a54 54 0 0 0-16-14l1-1-7-15c-1-2-3-4-6-5-6-1-13 2-16 8l-1 4c-3 3-4 7-5 10l-2 1c-18 9-28 27-25 47 0 6 3 10 4 16-7 0-13-1-18-6h-3c-5 4-11 2-16 0Z");
			add_location(path23, file$6, 159, 6, 11042);
			attr_dev(path24, "fill", "var(--flesh)");
			attr_dev(path24, "d", "M336 163a2 2 0 0 0 0-1c-3-8 4-10 8-14l6-5c4-4 9-3 14-3 4 0 9 0 13 4a32 32 0 0 0 9 11 47 47 0 0 1 15 25l10 39 9 32c2 7 7 11 12 14 13 7 27 11 40 17l4 2 2 2c-2 4 1 3 3 4s3 2 3 4a5 5 0 0 1-4 5c-4 1-7-1-11-2a75 75 0 0 0-12-5h-3l7 5c2 2 3 4 1 7-1 2-4 3-7 2a38 38 0 0 1-14-8c-3-3-7-4-10-6a1 1 0 0 0 0 2c0 2 2 4 0 5a7 7 0 0 1-8 2 15 15 0 0 1-6-4l-10-8h-5a14 14 0 0 1-7 2 61 61 0 0 0-12 2c-6 2-11-2-13-7-1-3 0-5 1-7l7-7c7-4 7-10 7-16-2-19-10-35-19-51-3-7-8-13-9-21a10 10 0 0 0-3-5l-18-16Zm93 129Z");
			add_location(path24, file$6, 163, 6, 11734);
			attr_dev(path25, "fill", "var(--hair)");
			attr_dev(path25, "d", "M278 108a54 54 0 0 1 16 14c7 10 10 20 9 32 0 9-2 16-4 24a1 1 0 0 0 0 1c-4 9-9 18-16 25-10 10-33 13-45-1-6-8-10-17-15-25l-2-5c-1-6-4-10-4-16a44 44 0 0 1 27-48c8-3 17-5 26-3l8 2Z");
			add_location(path25, file$6, 167, 6, 12283);
			attr_dev(path26, "fill", "var(--pants)");
			attr_dev(path26, "d", "M290 65a403 403 0 0 0-71 2c-7 1-15 2-21 6h-2l2-3c6-8 12-16 21-20 7-1 13 0 19 1a5 5 0 0 0 3 0c7-2 13-2 20-2 8 2 16 5 23 10 2 2 5 3 6 6Z");
			add_location(path26, file$6, 171, 6, 12520);
			attr_dev(path27, "fill", "var(--flesh)");
			attr_dev(path27, "d", "M219 50c-9 4-15 13-21 20l-2 3-1 1c-3-7-7-15-6-23a96 96 0 0 1 4-17l1-6 1-1c1-2 3-4 5-1a3 3 0 0 0 4 0 4 4 0 0 1 6 0c1 3-2 6 0 8l5 6c2 3 4 6 4 10ZM290 65c-1-3-4-4-6-6-7-5-15-8-23-10 1-5 3-11 3-17l1-6 1-1c0-3 2-3 4-1h5c3-2 4-1 5 1 1 8 5 16 9 24a30 30 0 0 1 4 16Z");
			add_location(path27, file$6, 175, 6, 12716);
			attr_dev(path28, "fill", "var(--hair)");
			attr_dev(path28, "d", "M210 26a4 4 0 0 0-6 0 3 3 0 0 1-4 0c-2-3-4-1-5 1l-1 1a1 1 0 0 0 0-1l2-9c2-3 5-4 8-3s5 3 6 6a41 41 0 0 1 0 5ZM280 25c-1-1-2-3-5-1h-5c-2-2-4-2-4 1l-1 1a1 1 0 0 0 0-1 53 53 0 0 1 0-5c1-5 3-7 7-7 5 0 7 2 8 7a42 42 0 0 1 0 5Z");
			add_location(path28, file$6, 179, 6, 13036);
			attr_dev(path29, "fill", "var(--flesh)");
			attr_dev(path29, "d", "M265 25a1 1 0 0 1 0 1v-1ZM194 27a1 1 0 0 1 0 1 4 4 0 0 1 0-1Z");
			add_location(path29, file$6, 183, 6, 13317);
			attr_dev(path30, "fill", "var(--shirt)");
			attr_dev(path30, "d", "M299 179a1 1 0 0 1 0-1v1Z");
			add_location(path30, file$6, 187, 6, 13440);
			attr_dev(path31, "fill", "var(--flesh)");
			attr_dev(path31, "d", "m278 108-8-2c-9-2-18 0-26 3 1-3 2-7 5-10l1-4c3-6 10-9 16-8 3 1 5 3 6 5l7 15-1 1Z");
			add_location(path31, file$6, 188, 6, 13505);
			attr_dev(g2, "id", "swimmer-1");
			attr_dev(g2, "class", "svelte-14bpjd9");
			add_location(g2, file$6, 117, 4, 7362);
			attr_dev(g3, "class", "shapes svelte-14bpjd9");
			add_location(g3, file$6, 64, 2, 1155);
			attr_dev(g4, "class", "svelte-14bpjd9");
			toggle_class(g4, "paused", /*isPaused*/ ctx[1]);
			toggle_class(g4, "flip", /*flipsvg*/ ctx[2]);
			add_location(g4, file$6, 63, 0, 1104);
			attr_dev(svg, "xmlns", "http://www.w3.org/2000/svg");
			attr_dev(svg, "viewBox", "0 0 483.7 346");
			attr_dev(svg, "height", "100%");
			attr_dev(svg, "width", "100%");
			attr_dev(svg, "class", "svelte-14bpjd9");
			add_location(svg, file$6, 62, 0, 1011);
		},
		l: function claim(nodes) {
			throw new Error("options.hydrate only works if the component was compiled with the `hydratable: true` option");
		},
		m: function mount(target, anchor) {
			insert_dev(target, svg, anchor);
			append_dev(svg, t);
			append_dev(svg, g4);
			append_dev(g4, g3);
			append_dev(g3, g0);
			append_dev(g0, path0);
			append_dev(g0, path1);
			append_dev(g0, path2);
			append_dev(g0, path3);
			append_dev(g0, path4);
			append_dev(g0, path5);
			append_dev(g3, g1);
			append_dev(g1, path6);
			append_dev(g1, path7);
			append_dev(g1, path8);
			append_dev(g1, path9);
			append_dev(g1, path10);
			append_dev(g1, path11);
			append_dev(g3, g2);
			append_dev(g2, path12);
			append_dev(g2, path13);
			append_dev(g2, path14);
			append_dev(g2, path15);
			append_dev(g2, path16);
			append_dev(g2, path17);
			append_dev(g2, path18);
			append_dev(g2, path19);
			append_dev(g2, path20);
			append_dev(g2, path21);
			append_dev(g2, path22);
			append_dev(g2, path23);
			append_dev(g2, path24);
			append_dev(g2, path25);
			append_dev(g2, path26);
			append_dev(g2, path27);
			append_dev(g2, path28);
			append_dev(g2, path29);
			append_dev(g2, path30);
			append_dev(g2, path31);
			/*g3_binding*/ ctx[4](g3);
			if (if_block) if_block.m(g4, null);
		},
		p: function update(ctx, [dirty]) {
			if (/*isPaused*/ ctx[1]) {
				if (if_block) ; else {
					if_block = create_if_block$6(ctx);
					if_block.c();
					if_block.m(g4, null);
				}
			} else if (if_block) {
				if_block.d(1);
				if_block = null;
			}

			if (dirty & /*isPaused*/ 2) {
				toggle_class(g4, "paused", /*isPaused*/ ctx[1]);
			}

			if (dirty & /*flipsvg*/ 4) {
				toggle_class(g4, "flip", /*flipsvg*/ ctx[2]);
			}
		},
		i: noop,
		o: noop,
		d: function destroy(detaching) {
			if (detaching) detach_dev(svg);
			/*g3_binding*/ ctx[4](null);
			if (if_block) if_block.d();
		}
	};

	dispatch_dev("SvelteRegisterBlock", {
		block,
		id: create_fragment$6.name,
		type: "component",
		source: "",
		ctx
	});

	return block;
}

function instance$6($$self, $$props, $$invalidate) {
	let { $$slots: slots = {}, $$scope } = $$props;
	validate_slots('Workout_swimmers', slots, []);
	let { direction = "right" } = $$props;
	let { isPaused = false } = $$props;
	let { rootElement } = $$props;
	let flipsvg = false;

	if (direction == "left") {
		flipsvg = true;
	}

	const writable_props = ['direction', 'isPaused', 'rootElement'];

	Object.keys($$props).forEach(key => {
		if (!~writable_props.indexOf(key) && key.slice(0, 2) !== '$$' && key !== 'slot') console.warn(`<Workout_swimmers> was created with unknown prop '${key}'`);
	});

	function g3_binding($$value) {
		binding_callbacks[$$value ? 'unshift' : 'push'](() => {
			rootElement = $$value;
			$$invalidate(0, rootElement);
		});
	}

	$$self.$$set = $$props => {
		if ('direction' in $$props) $$invalidate(3, direction = $$props.direction);
		if ('isPaused' in $$props) $$invalidate(1, isPaused = $$props.isPaused);
		if ('rootElement' in $$props) $$invalidate(0, rootElement = $$props.rootElement);
	};

	$$self.$capture_state = () => ({
		direction,
		isPaused,
		rootElement,
		flipsvg
	});

	$$self.$inject_state = $$props => {
		if ('direction' in $$props) $$invalidate(3, direction = $$props.direction);
		if ('isPaused' in $$props) $$invalidate(1, isPaused = $$props.isPaused);
		if ('rootElement' in $$props) $$invalidate(0, rootElement = $$props.rootElement);
		if ('flipsvg' in $$props) $$invalidate(2, flipsvg = $$props.flipsvg);
	};

	if ($$props && "$$inject" in $$props) {
		$$self.$inject_state($$props.$$inject);
	}

	return [rootElement, isPaused, flipsvg, direction, g3_binding];
}

class Workout_swimmers extends SvelteComponentDev {
	constructor(options) {
		super(options);

		init(this, options, instance$6, create_fragment$6, safe_not_equal, {
			direction: 3,
			isPaused: 1,
			rootElement: 0
		});

		dispatch_dev("SvelteRegisterComponent", {
			component: this,
			tagName: "Workout_swimmers",
			options,
			id: create_fragment$6.name
		});

		const { ctx } = this.$$;
		const props = options.props || {};

		if (/*rootElement*/ ctx[0] === undefined && !('rootElement' in props)) {
			console.warn("<Workout_swimmers> was created without expected prop 'rootElement'");
		}
	}

	get direction() {
		throw new Error("<Workout_swimmers>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
	}

	set direction(value) {
		throw new Error("<Workout_swimmers>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
	}

	get isPaused() {
		throw new Error("<Workout_swimmers>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
	}

	set isPaused(value) {
		throw new Error("<Workout_swimmers>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
	}

	get rootElement() {
		throw new Error("<Workout_swimmers>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
	}

	set rootElement(value) {
		throw new Error("<Workout_swimmers>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
	}
}

var workoutSwimmers = /*#__PURE__*/Object.freeze({
    __proto__: null,
    'default': Workout_swimmers
});

/* src/workouts/workout-tensandtwos.svelte generated by Svelte v3.49.0 */

const file$5 = "src/workouts/workout-tensandtwos.svelte";

// (65:0) {#if isPaused}
function create_if_block$5(ctx) {
	let svg;
	let path;

	const block = {
		c: function create() {
			svg = svg_element("svg");
			path = svg_element("path");
			attr_dev(path, "d", "M10 24h-6v-24h6v24zm10 0h-6v-24h6v24zm-11-23h-4v22h4v-22zm10 0h-4v22h4v-22z");
			add_location(path, file$5, 65, 129, 3597);
			attr_dev(svg, "viewBox", "-6 -5 36 36");
			attr_dev(svg, "width", "100%");
			attr_dev(svg, "height", "100%");
			attr_dev(svg, "xmlns", "http://www.w3.org/2000/svg");
			attr_dev(svg, "fill-rule", "evenodd");
			attr_dev(svg, "clip-rule", "evenodd");
			add_location(svg, file$5, 65, 0, 3468);
		},
		m: function mount(target, anchor) {
			insert_dev(target, svg, anchor);
			append_dev(svg, path);
		},
		d: function destroy(detaching) {
			if (detaching) detach_dev(svg);
		}
	};

	dispatch_dev("SvelteRegisterBlock", {
		block,
		id: create_if_block$5.name,
		type: "if",
		source: "(65:0) {#if isPaused}",
		ctx
	});

	return block;
}

function create_fragment$5(ctx) {
	let svg;
	let g2;
	let g1;
	let g0;
	let path0;
	let path1;
	let path2;
	let path3;
	let path4;
	let path5;
	let if_block = /*isPaused*/ ctx[1] && create_if_block$5(ctx);

	const block = {
		c: function create() {
			svg = svg_element("svg");
			g2 = svg_element("g");
			g1 = svg_element("g");
			g0 = svg_element("g");
			path0 = svg_element("path");
			path1 = svg_element("path");
			path2 = svg_element("path");
			path3 = svg_element("path");
			path4 = svg_element("path");
			path5 = svg_element("path");
			if (if_block) if_block.c();
			attr_dev(path0, "d", "m281 240-14 11c-5 3-9 6-15 7l-18 4h-9c-13-2-23-11-33-19-4-3-6-8-8-12a76 76 0 0 0-22-31 29 29 0 0 1-7-8c-1-2-2-4-1-6a10 10 0 0 1 4 3c5 5 12 7 19 7 4-1 8-2 10-6 1-2 2-3 0-5l-3-4v-2l11-4c8-3 17-5 24-10 4-2 7-5 7-11l-2-6c4-1 6 2 9 4l25 20a4 4 0 0 0 2 1l16 5a13 13 0 0 1 5 2c4 3 7 7 8 12 3 6 6 12 4 19a78 78 0 0 1-7 19l-5 10Z");
			attr_dev(path0, "fill", "var(--pants)");
			add_location(path0, file$5, 37, 8, 886);
			attr_dev(path1, "fill", "var(--hair)");
			attr_dev(path1, "d", "M29 78 5 71a3 3 0 0 1-2-3 17 17 0 0 1 0-5c2-7 1-13-1-20l-2-9a19 19 0 0 1 2-12C7 13 13 5 22 0h1c5 2 6 7 8 12l4-5 4-2c3-3 6-1 6 3a116 116 0 0 0 4 22c3 9 6 17 12 24a2 2 0 0 1 1 1 6 6 0 0 1-3 0c-7-1-12 3-14 9l2 10c2 7 1 6-5 5l-13-1Z");
			add_location(path1, file$5, 41, 8, 1276);
			attr_dev(path2, "fill", "var(--flesh)");
			attr_dev(path2, "d", "m29 78 14 1c5 1 6 2 4-5l-2-10c1-6 7-10 14-9a6 6 0 0 0 3 0s0 1 0 0l36 20 42 20 13 6a34 34 0 0 0 17 2c4 0 7 2 10 4 13 10 24 22 36 33a21 21 0 0 0 2 2l6 6 2 6c0 6-3 9-7 11-7 5-16 7-24 10l-11 4c-1 0-2 1-1 2l4 4c2 2 1 3 0 5-2 4-6 5-10 6-8 0-14-2-19-7a10 10 0 0 0-4-3l-5-9-2-1a101 101 0 0 0-25 2 5 5 0 0 0-4 2 13 13 0 0 1-6 5l-8 4a8 8 0 0 1-4 2c-3 0-4-1-3-3a6 6 0 0 1 3-3l5-3c-3-1-7 2-9 4l-3 4h-2l-1-2 1-4-3 1h-2a2 2 0 0 1 0-2c2-3 3-7 7-9a13 13 0 0 0 4-2 24 24 0 0 1 14-4 37 37 0 0 0 15-3 32 32 0 0 1 12-2c3 0 3 0 2-3a8 8 0 0 0-7-5 103 103 0 0 1-21-5 32 32 0 0 1-16-13c-6-8-13-16-21-23L50 93c-6-6-12-10-19-13l-2-2Z");
			add_location(path2, file$5, 45, 8, 1573);
			attr_dev(path3, "d", "m224 148-6-6 23-12a13 13 0 0 1 7-2h15c3 0 5 0 7-2h39c9 0 17 4 26 6l1 1c1 3 3 3 5 3a2 2 0 0 1 3 2 2 2 0 0 0 2 1c4 0 7 2 10 3l15 5v2l-10 17a4 4 0 0 0 2 6c-2 3-3 3-7 2l-12-6a7 7 0 0 0-5 0l-8 2-2 2c-2 6-2 12-5 18l-6 17-7 11-2 2c-5 6-8 14-15 18a65 65 0 0 1-10 2 5 5 0 0 1-3 0l5-10a78 78 0 0 0 7-19c2-7-1-13-4-19-2-5-4-9-8-12a13 13 0 0 0-5-2l-17-5a4 4 0 0 1-1-1l-25-20c-3-2-6-5-9-4Z");
			attr_dev(path3, "fill", "var(--shirt)");
			add_location(path3, file$5, 49, 8, 2250);
			attr_dev(path4, "fill", "var(--flesh)");
			attr_dev(path4, "d", "M363 172a4 4 0 0 1-2-6l10-17v-2l31 4 18 5c9 4 18 6 27 8l16 3 21 3c6 0 11 2 17 3l6 2a2 2 0 0 1 1 3c-1 1 0 2 1 2a7 7 0 0 1 1 1l1 2-3 1-6-2 3 6v2h-2a17 17 0 0 1-8-4 33 33 0 0 0-8-5 6 6 0 0 0-3 0 3 3 0 0 0-2 5 14 14 0 0 0 4 2c2 0 5 4 5 6s-1 3-4 2l-6-4-13-5a14 14 0 0 1-6-5c-3-4-6-5-11-4l-16 1c-15 2-29-2-43-5a63 63 0 0 0-10-2h-19ZM309 126h-39a10 10 0 0 1 2-3 9 9 0 0 0 2-6c-1-5 0-10 2-15l9-10c4-2 8-5 13-2 8 4 13 11 11 21l-1 4c1 2 3 0 4 1 1 4-1 7-3 10Z");
			add_location(path4, file$5, 53, 8, 2696);
			attr_dev(path5, "fill", "var(--hair)");
			attr_dev(path5, "d", "M312 116c-1-1-3 1-4-1l1-4c2-10-3-17-11-21-5-3-9 0-13 2l-9 10a40 40 0 0 1 4-10c5-10 18-9 24-3a19 19 0 0 1 6 9c2 5 4 9 3 14a11 11 0 0 1-1 4ZM62 55c0 1 0 0 0 0Z");
			add_location(path5, file$5, 57, 8, 3214);
			attr_dev(g0, "id", "flip");
			attr_dev(g0, "class", "svelte-6799o5");
			add_location(g0, file$5, 36, 6, 864);
			attr_dev(g1, "class", "shapes svelte-6799o5");
			add_location(g1, file$5, 35, 4, 815);
			attr_dev(g2, "class", "svelte-6799o5");
			toggle_class(g2, "paused", /*isPaused*/ ctx[1]);
			add_location(g2, file$5, 34, 2, 783);
			attr_dev(svg, "xmlns", "http://www.w3.org/2000/svg");
			attr_dev(svg, "viewBox", "0 0 511 262.4");
			attr_dev(svg, "height", "100%");
			attr_dev(svg, "width", "100%");
			attr_dev(svg, "class", "svelte-6799o5");
			add_location(svg, file$5, 33, 0, 689);
		},
		l: function claim(nodes) {
			throw new Error("options.hydrate only works if the component was compiled with the `hydratable: true` option");
		},
		m: function mount(target, anchor) {
			insert_dev(target, svg, anchor);
			append_dev(svg, g2);
			append_dev(g2, g1);
			append_dev(g1, g0);
			append_dev(g0, path0);
			append_dev(g0, path1);
			append_dev(g0, path2);
			append_dev(g0, path3);
			append_dev(g0, path4);
			append_dev(g0, path5);
			/*g1_binding*/ ctx[2](g1);
			if (if_block) if_block.m(svg, null);
		},
		p: function update(ctx, [dirty]) {
			if (dirty & /*isPaused*/ 2) {
				toggle_class(g2, "paused", /*isPaused*/ ctx[1]);
			}

			if (/*isPaused*/ ctx[1]) {
				if (if_block) ; else {
					if_block = create_if_block$5(ctx);
					if_block.c();
					if_block.m(svg, null);
				}
			} else if (if_block) {
				if_block.d(1);
				if_block = null;
			}
		},
		i: noop,
		o: noop,
		d: function destroy(detaching) {
			if (detaching) detach_dev(svg);
			/*g1_binding*/ ctx[2](null);
			if (if_block) if_block.d();
		}
	};

	dispatch_dev("SvelteRegisterBlock", {
		block,
		id: create_fragment$5.name,
		type: "component",
		source: "",
		ctx
	});

	return block;
}

function instance$5($$self, $$props, $$invalidate) {
	let { $$slots: slots = {}, $$scope } = $$props;
	validate_slots('Workout_tensandtwos', slots, []);
	let { isPaused = false } = $$props;
	let { rootElement } = $$props;
	const writable_props = ['isPaused', 'rootElement'];

	Object.keys($$props).forEach(key => {
		if (!~writable_props.indexOf(key) && key.slice(0, 2) !== '$$' && key !== 'slot') console.warn(`<Workout_tensandtwos> was created with unknown prop '${key}'`);
	});

	function g1_binding($$value) {
		binding_callbacks[$$value ? 'unshift' : 'push'](() => {
			rootElement = $$value;
			$$invalidate(0, rootElement);
		});
	}

	$$self.$$set = $$props => {
		if ('isPaused' in $$props) $$invalidate(1, isPaused = $$props.isPaused);
		if ('rootElement' in $$props) $$invalidate(0, rootElement = $$props.rootElement);
	};

	$$self.$capture_state = () => ({ isPaused, rootElement });

	$$self.$inject_state = $$props => {
		if ('isPaused' in $$props) $$invalidate(1, isPaused = $$props.isPaused);
		if ('rootElement' in $$props) $$invalidate(0, rootElement = $$props.rootElement);
	};

	if ($$props && "$$inject" in $$props) {
		$$self.$inject_state($$props.$$inject);
	}

	return [rootElement, isPaused, g1_binding];
}

class Workout_tensandtwos extends SvelteComponentDev {
	constructor(options) {
		super(options);
		init(this, options, instance$5, create_fragment$5, safe_not_equal, { isPaused: 1, rootElement: 0 });

		dispatch_dev("SvelteRegisterComponent", {
			component: this,
			tagName: "Workout_tensandtwos",
			options,
			id: create_fragment$5.name
		});

		const { ctx } = this.$$;
		const props = options.props || {};

		if (/*rootElement*/ ctx[0] === undefined && !('rootElement' in props)) {
			console.warn("<Workout_tensandtwos> was created without expected prop 'rootElement'");
		}
	}

	get isPaused() {
		throw new Error("<Workout_tensandtwos>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
	}

	set isPaused(value) {
		throw new Error("<Workout_tensandtwos>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
	}

	get rootElement() {
		throw new Error("<Workout_tensandtwos>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
	}

	set rootElement(value) {
		throw new Error("<Workout_tensandtwos>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
	}
}

var workoutTensandtwos = /*#__PURE__*/Object.freeze({
    __proto__: null,
    'default': Workout_tensandtwos
});

/* src/workouts/workout-toetouches.svelte generated by Svelte v3.49.0 */

const file$4 = "src/workouts/workout-toetouches.svelte";

// (108:4) {#if isPaused}
function create_if_block$4(ctx) {
	let svg;
	let path;

	const block = {
		c: function create() {
			svg = svg_element("svg");
			path = svg_element("path");
			attr_dev(path, "d", "M10 24h-6v-24h6v24zm10 0h-6v-24h6v24zm-11-23h-4v22h4v-22zm10 0h-4v22h4v-22z");
			add_location(path, file$4, 108, 133, 7070);
			attr_dev(svg, "viewBox", "-6 -5 36 36");
			attr_dev(svg, "width", "100%");
			attr_dev(svg, "height", "100%");
			attr_dev(svg, "xmlns", "http://www.w3.org/2000/svg");
			attr_dev(svg, "fill-rule", "evenodd");
			attr_dev(svg, "clip-rule", "evenodd");
			add_location(svg, file$4, 108, 4, 6941);
		},
		m: function mount(target, anchor) {
			insert_dev(target, svg, anchor);
			append_dev(svg, path);
		},
		d: function destroy(detaching) {
			if (detaching) detach_dev(svg);
		}
	};

	dispatch_dev("SvelteRegisterBlock", {
		block,
		id: create_if_block$4.name,
		type: "if",
		source: "(108:4) {#if isPaused}",
		ctx
	});

	return block;
}

function create_fragment$4(ctx) {
	let svg;
	let t;
	let g3;
	let g2;
	let g0;
	let path0;
	let path1;
	let path2;
	let path3;
	let path4;
	let path5;
	let g1;
	let path6;
	let path7;
	let path8;
	let path9;
	let path10;
	let path11;
	let path12;
	let if_block = /*isPaused*/ ctx[1] && create_if_block$4(ctx);

	const block = {
		c: function create() {
			svg = svg_element("svg");
			t = text(">\n");
			g3 = svg_element("g");
			g2 = svg_element("g");
			g0 = svg_element("g");
			path0 = svg_element("path");
			path1 = svg_element("path");
			path2 = svg_element("path");
			path3 = svg_element("path");
			path4 = svg_element("path");
			path5 = svg_element("path");
			g1 = svg_element("g");
			path6 = svg_element("path");
			path7 = svg_element("path");
			path8 = svg_element("path");
			path9 = svg_element("path");
			path10 = svg_element("path");
			path11 = svg_element("path");
			path12 = svg_element("path");
			if (if_block) if_block.c();
			attr_dev(path0, "fill", "var(--shirt)");
			attr_dev(path0, "d", "M212 334a17 17 0 0 1 0 3c-3 11 0 16 10 19a33 33 0 0 1 21 15c2 3 5 4 9 3s9-1 13 1c2 2 3 0 5-1 4-3 9-4 14-1 3 2 6 0 10 1l-7 24c-5 9-4 19-3 30a28 28 0 0 0 9 18c9 8 15 19 21 30a19 19 0 0 0 11 10c2 0 5 0 7 3-8 1-15 3-22 1a31 31 0 0 0-13 0c-1 1-3 1-3 3h-16c-1-4-5-4-7-4-7-1-14-2-21-1-16 1-33 2-50-2-9-2-17-7-26-10l-9-4a39 39 0 0 1-13-9c-8-9-19-14-28-20-7-5-14-12-15-22a26 26 0 0 1 2-13c4-7 9-13 11-20 12-9 16-22 22-34 1-3 1-6 4-9 3-2 7-4 7-9-1-2 2-4 5-3 5 2 10 1 16 1 5 0 9 1 13 5l4 1c0 3 3 4 5 5 1 0 2 2 2 0 2-5 9-6 12-11Z");
			add_location(path0, file$4, 51, 6, 1045);
			attr_dev(path1, "fill", "var(--pants)");
			attr_dev(path1, "d", "M308 321a6 6 0 0 0 4 6c20 6 35 18 48 32 7 7 15 8 24 10 6 3 10 8 15 12 5 7 5 13 2 20l-7 12c-3 9-4 18-4 27-1 13-3 25-14 35a53 53 0 0 1-44 14c-2-3-5-3-7-3a19 19 0 0 1-11-10c-6-11-12-22-21-30a28 28 0 0 1-9-18c-1-11-2-21 2-30 4-8 5-16 7-24a19 19 0 0 0 4-11c1-11 5-21 7-32a74 74 0 0 0 2-9l2-1Z");
			add_location(path1, file$4, 55, 6, 1624);
			attr_dev(path2, "fill", "var(--hair)");
			attr_dev(path2, "d", "M104 289c-5 0-15 9-16 14 0 3 1 5 4 5 4 0 5 2 5 5-1 5 1 9 5 11l13 8c3 2 3 4 2 5-1 2-2 4-5 3a90 90 0 0 0-10-5c-7-2-14 0-16 6s3 12 9 15c14 5 17 8 16 24-7 2-13-1-20-1-15-1-29-7-42-15-10-6-15-22-8-32 7-12 14-23 24-32 8-7 17-14 22-23 3-7 10-6 14 1a28 28 0 0 1 3 11ZM401 74c-3-4-2-8-1-12 2-8-2-13-9-16-6-1-12-1-17 3l-5 3c-6 0-5 4-4 7l1 4c1 2 2 4 0 5a4 4 0 0 1-6-3l-3-6-2-2v3c1 4 2 8 0 12-3 1-3-1-3-3-4-11-11-21-20-29a39 39 0 0 0-13-8 71 71 0 0 1-14-8c-3-1-5-3-4-6s3-4 5-4c2-1 4-1 3-4-2-4 0-8 5-8h20l10 1c8 1 15 4 23 7 17 7 34 15 52 21 2 0 2 1 2 4 0 13-6 23-16 31a5 5 0 0 0-1 4c0 2 0 4-3 4Z");
			add_location(path2, file$4, 59, 6, 1973);
			attr_dev(path3, "fill", "var(--flesh)");
			attr_dev(path3, "d", "M400 62c2-8-2-13-9-16-6-1-12-1-17 3l-5 3c-6 0-5 4-4 7l1 4c1 2 2 4 0 5a4 4 0 0 1-6-3l-3-6-2-2v3c1 4 2 8 0 12 5 21 2 40-4 60l-12 40c-5 21-11 41-21 60-3 5-6 11-5 18 2 8 1 16 0 24l-5 47a6 6 0 0 0 4 6c20 6 35 18 48 32 7 7 15 8 24 10a179 179 0 0 0-6-52l-13-47c-3-11-3-23 2-33l8-18c2-3 4-6 4-9l3-4c8-20 7-41 9-61 1-16 2-32 5-47l5-24c-3-4-2-8-1-12Z");
			add_location(path3, file$4, 63, 6, 2616);
			attr_dev(path4, "fill", "var(--flesh)");
			attr_dev(path4, "d", "M180 309v1h-1l1-1c1 0 0 0 0 0ZM193 333h1v1h-1Z");
			add_location(path4, file$4, 67, 6, 3018);
			attr_dev(path5, "fill", "var(--flesh)");
			attr_dev(path5, "d", "M288 128c-4-1-5 3-7 6-2 2-2 5-6 7l3-15c2-6 5-12 6-19 2-4 1-8 0-13-1-6-4-7-9-7h-1c-3-2-4 0-4 2s-1 6-3 7c-3 2-3 5-3 8-1 11-2 23-7 34-3 7-6 16-13 21-3 1-3 4-3 6l-3 9c-2 5-5 9-6 14l-16 31-2 4-19 27c-3 5-5 11-5 18a32 32 0 0 1-4 16 126 126 0 0 1-8 13c-6 8-10 17-18 25 0-4-3-4-5-5s-3-2-3-5c1-3 0-5-4-5a63 63 0 0 0-12-1 9 9 0 0 1-8-4l-9-6-15-7c-5 0-15 9-16 14 0 3 1 5 4 5 4 0 5 2 5 5-1 5 1 9 5 11l13 8c3 2 3 4 2 5-1 2-2 4-5 3a90 90 0 0 0-10-5c-7-2-14 0-16 6s3 12 9 15c14 5 17 8 16 24l11 8c12-9 16-22 22-34 1-3 1-6 4-9 3-2 7-4 7-9-1-2 2-4 5-3 5 2 10 1 16 1 5 0 9 1 13 5l4 2c0 2 3 3 5 4l2 1c2-6 9-7 12-12l11-25c4-8 7-17 9-26l3-4c10-29 17-60 22-91 2-9 3-18 13-22 4-1 8-4 9-8 2-7 6-13 10-19 3-5 2-10-1-11Zm-95 205h1v1h-1Zm-13-24v1h-1l1-1Z");
			add_location(path5, file$4, 71, 6, 3126);
			attr_dev(g0, "id", "toe-touches-2");
			attr_dev(g0, "class", "svelte-jjm4tt");
			add_location(g0, file$4, 50, 4, 1016);
			attr_dev(path6, "fill", "var(--hair)");
			attr_dev(path6, "d", "M0 441c2-5 2-9 2-14v-3c2-9 1-17 0-26-1-6 3-9 9-7a20 20 0 0 1 11 6c-4 6-3 13-3 19 0 4 4 6 7 4 4-3 6-2 8 2 2 2 5 4 8 3l18-3c3-1 4 0 5 3s0 4-3 5a44 44 0 0 0-7 2c-3 1-7 2-9 5s-3 7-1 11c3 5 9 7 14 5l10-3c8-2 17 3 20 11-13 10-26 22-44 25a89 89 0 0 0-9 3c-10 3-18-1-26-7-5-4-5-10-6-16s-1-12-4-17Z");
			add_location(path6, file$4, 77, 6, 3950);
			attr_dev(path7, "fill", "var(--shirt)");
			attr_dev(path7, "d", "M190 370c3 1 6 3 8 6 5 6 12 8 20 8a112 112 0 0 1 21 3c8 2 16-1 23-1 4-1 6-4 7-6 2-3 4-4 7-3 4 2 7 1 10 0a68 68 0 0 1-1 23 140 140 0 0 0-5 40c1 8 2 16 8 22 6 7 12 14 15 22 1 4 0 5-4 5-8 0-17 1-25-2-5-2-11-2-17-2a94 94 0 0 1-17 0l-25 2-47 3c-15 0-32 1-47-3-10-3-18-8-20-19v-5c0-10 2-19 4-29 1-3 4-5 4-8l1-15c2-10 9-18 16-25 2-3 2-8 3-11 1-4 2-9 8-8l-1 3c-1 1-2 3-1 4a5 5 0 0 0 6 2c7-3 13-1 20-2a6 6 0 0 1 4 2 80 80 0 0 0 10 6c2 1 5 1 6-3l1-3c5 1 6-3 8-6Z");
			add_location(path7, file$4, 81, 6, 4300);
			attr_dev(path8, "fill", "var(--flesh)");
			attr_dev(path8, "d", "m402 73-3 12c-4 18-6 36-7 55-2 17-2 34-5 51-3 12-10 23-16 35-3 7-6 13-7 20-2 11 1 21 3 31l13 47c3 14 5 29 4 44l-5-2c-7 0-13-3-17-8l-9-7a88 88 0 0 0-35-23c-5-2-9-4-11-9 2-2 1-5 2-8 1-19 6-39 5-58 0-8 0-15 3-21l4-8c7-15 13-31 17-48l14-48c4-13 7-26 6-40l-2-17c2-5-1-10-1-15 3 2 4 5 5 8a5 5 0 0 0 6 2c3-1 1-3 1-4l-2-8 1-3c4 0 7-3 10-5 6-3 15-3 20 1 6 4 6 10 4 16a10 10 0 0 0 2 10Z");
			add_location(path8, file$4, 85, 6, 4814);
			attr_dev(path9, "fill", "var(--pants)");
			attr_dev(path9, "d", "M307 319c2 5 6 7 11 9 14 4 25 12 35 23l9 7c4 5 10 8 17 8l5 2c6 3 10 7 15 12 6 6 7 13 2 19-8 13-10 27-10 41-1 23-14 37-34 45-12 5-24 3-36 2-6-1-11-4-18-3-3-8-9-15-15-22-6-6-7-14-8-22a140 140 0 0 1 5-40 68 68 0 0 0 1-23c8-1 10-7 11-12 2-16 8-31 10-46Z");
			add_location(path9, file$4, 89, 6, 5252);
			attr_dev(path10, "fill", "var(--flesh)");
			attr_dev(path10, "d", "m110 411-1 15c0 3-3 5-4 8-2 10-4 19-4 29v5c-2-10-2-10-11-7-4-8-13-13-21-11l-10 3c-5 2-11 0-14-5-2-4-1-7 1-11s6-4 9-5a44 44 0 0 1 7-2c3-1 4-2 3-5s-2-4-5-3l-18 3c-3 1-6-1-8-3-2-4-4-5-8-2-3 2-7 0-7-4 0-6-1-13 3-19 5 0 9-2 14-3a39 39 0 0 1 15-3 10 10 0 0 0 7-3 86 86 0 0 1 8-6c4-3 7-4 9 1 1 3 2 2 4 1 5-2 10-2 14 2 1 2 3 1 5 1 7 0 8 1 8 8 0 4 1 8-1 12l1 5a2 2 0 0 0 2 2c2-1 1-2 2-3Z");
			add_location(path10, file$4, 93, 6, 5563);
			attr_dev(path11, "fill", "var(--hair)");
			attr_dev(path11, "d", "M402 73a10 10 0 0 1-2-10c2-6 2-12-4-16-5-4-14-4-20-1-3 2-6 5-10 5l-1 3 2 8c0 1 2 3-1 4a5 5 0 0 1-6-2c-1-3-2-6-5-8 0 5 3 10 1 15-3 1-3-1-4-3a73 73 0 0 0-18-28 44 44 0 0 0-15-10 73 73 0 0 1-14-7c-3-2-4-4-4-7 1-3 3-3 6-4 2 0 3 0 2-4-2-4 2-8 7-8 16-1 32 1 47 7 18 8 37 16 56 22 2 1 3 2 3 5-1 12-7 22-16 31a5 5 0 0 0-2 3 4 4 0 0 1-2 5Z");
			add_location(path11, file$4, 97, 6, 6003);
			attr_dev(path12, "fill", "var(--flesh)");
			attr_dev(path12, "d", "M237 155c-2 0-4 2-5 4s-2 6-5 7c-1-12 3-22 4-34 1-5-3-10-4-14-2-4-5-2-7-1l-1-1c-4-2-5 1-6 4v5c-4 4-3 8-3 12v16c-1 14-3 28-13 39-1 1-2 2-1 3 0 9-4 17-5 25a18 18 0 0 0-2 2c-5 19-12 38-22 55-6 12-10 24-8 37a18 18 0 0 1-2 10l-20 43-1 3c-1 1-2 3-1 4a5 5 0 0 0 6 2c7-3 13-1 20-2a6 6 0 0 1 4 2 80 80 0 0 0 10 6c2 1 5 1 6-3l1-3c5 1 6-3 8-6a5 5 0 0 1 0-3l9-33c3-11 7-23 7-36 2-2 1-4 1-6 4-14 4-28 6-41 2-14 1-29 3-43 1-5 2-8 6-11 4-2 7-5 8-9l11-27a5 5 0 0 0-4-6Z");
			add_location(path12, file$4, 101, 6, 6394);
			attr_dev(g1, "id", "toe-touches-1");
			attr_dev(g1, "class", "svelte-jjm4tt");
			add_location(g1, file$4, 76, 4, 3921);
			attr_dev(g2, "class", "shapes svelte-jjm4tt");
			add_location(g2, file$4, 49, 2, 969);
			attr_dev(g3, "class", "svelte-jjm4tt");
			toggle_class(g3, "paused", /*isPaused*/ ctx[1]);
			toggle_class(g3, "flip", /*flipsvg*/ ctx[2]);
			add_location(g3, file$4, 48, 0, 918);
			attr_dev(svg, "xmlns", "http://www.w3.org/2000/svg");
			attr_dev(svg, "viewBox", "0 0 421.6 492.7");
			attr_dev(svg, "height", "100%");
			attr_dev(svg, "width", "100%");
			attr_dev(svg, "class", "svelte-jjm4tt");
			add_location(svg, file$4, 47, 0, 823);
		},
		l: function claim(nodes) {
			throw new Error("options.hydrate only works if the component was compiled with the `hydratable: true` option");
		},
		m: function mount(target, anchor) {
			insert_dev(target, svg, anchor);
			append_dev(svg, t);
			append_dev(svg, g3);
			append_dev(g3, g2);
			append_dev(g2, g0);
			append_dev(g0, path0);
			append_dev(g0, path1);
			append_dev(g0, path2);
			append_dev(g0, path3);
			append_dev(g0, path4);
			append_dev(g0, path5);
			append_dev(g2, g1);
			append_dev(g1, path6);
			append_dev(g1, path7);
			append_dev(g1, path8);
			append_dev(g1, path9);
			append_dev(g1, path10);
			append_dev(g1, path11);
			append_dev(g1, path12);
			/*g2_binding*/ ctx[4](g2);
			if (if_block) if_block.m(g3, null);
		},
		p: function update(ctx, [dirty]) {
			if (/*isPaused*/ ctx[1]) {
				if (if_block) ; else {
					if_block = create_if_block$4(ctx);
					if_block.c();
					if_block.m(g3, null);
				}
			} else if (if_block) {
				if_block.d(1);
				if_block = null;
			}

			if (dirty & /*isPaused*/ 2) {
				toggle_class(g3, "paused", /*isPaused*/ ctx[1]);
			}

			if (dirty & /*flipsvg*/ 4) {
				toggle_class(g3, "flip", /*flipsvg*/ ctx[2]);
			}
		},
		i: noop,
		o: noop,
		d: function destroy(detaching) {
			if (detaching) detach_dev(svg);
			/*g2_binding*/ ctx[4](null);
			if (if_block) if_block.d();
		}
	};

	dispatch_dev("SvelteRegisterBlock", {
		block,
		id: create_fragment$4.name,
		type: "component",
		source: "",
		ctx
	});

	return block;
}

function instance$4($$self, $$props, $$invalidate) {
	let { $$slots: slots = {}, $$scope } = $$props;
	validate_slots('Workout_toetouches', slots, []);
	let { direction = "right" } = $$props;
	let { isPaused = false } = $$props;
	let { rootElement } = $$props;
	let flipsvg = false;

	if (direction == "left") {
		flipsvg = true;
	}

	const writable_props = ['direction', 'isPaused', 'rootElement'];

	Object.keys($$props).forEach(key => {
		if (!~writable_props.indexOf(key) && key.slice(0, 2) !== '$$' && key !== 'slot') console.warn(`<Workout_toetouches> was created with unknown prop '${key}'`);
	});

	function g2_binding($$value) {
		binding_callbacks[$$value ? 'unshift' : 'push'](() => {
			rootElement = $$value;
			$$invalidate(0, rootElement);
		});
	}

	$$self.$$set = $$props => {
		if ('direction' in $$props) $$invalidate(3, direction = $$props.direction);
		if ('isPaused' in $$props) $$invalidate(1, isPaused = $$props.isPaused);
		if ('rootElement' in $$props) $$invalidate(0, rootElement = $$props.rootElement);
	};

	$$self.$capture_state = () => ({
		direction,
		isPaused,
		rootElement,
		flipsvg
	});

	$$self.$inject_state = $$props => {
		if ('direction' in $$props) $$invalidate(3, direction = $$props.direction);
		if ('isPaused' in $$props) $$invalidate(1, isPaused = $$props.isPaused);
		if ('rootElement' in $$props) $$invalidate(0, rootElement = $$props.rootElement);
		if ('flipsvg' in $$props) $$invalidate(2, flipsvg = $$props.flipsvg);
	};

	if ($$props && "$$inject" in $$props) {
		$$self.$inject_state($$props.$$inject);
	}

	return [rootElement, isPaused, flipsvg, direction, g2_binding];
}

class Workout_toetouches extends SvelteComponentDev {
	constructor(options) {
		super(options);

		init(this, options, instance$4, create_fragment$4, safe_not_equal, {
			direction: 3,
			isPaused: 1,
			rootElement: 0
		});

		dispatch_dev("SvelteRegisterComponent", {
			component: this,
			tagName: "Workout_toetouches",
			options,
			id: create_fragment$4.name
		});

		const { ctx } = this.$$;
		const props = options.props || {};

		if (/*rootElement*/ ctx[0] === undefined && !('rootElement' in props)) {
			console.warn("<Workout_toetouches> was created without expected prop 'rootElement'");
		}
	}

	get direction() {
		throw new Error("<Workout_toetouches>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
	}

	set direction(value) {
		throw new Error("<Workout_toetouches>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
	}

	get isPaused() {
		throw new Error("<Workout_toetouches>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
	}

	set isPaused(value) {
		throw new Error("<Workout_toetouches>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
	}

	get rootElement() {
		throw new Error("<Workout_toetouches>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
	}

	set rootElement(value) {
		throw new Error("<Workout_toetouches>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
	}
}

var workoutToetouches = /*#__PURE__*/Object.freeze({
    __proto__: null,
    'default': Workout_toetouches
});

/* src/workouts/workout-tricepsdipandreach.svelte generated by Svelte v3.49.0 */

const file$3 = "src/workouts/workout-tricepsdipandreach.svelte";

// (256:4) {#if isPaused}
function create_if_block$3(ctx) {
	let svg;
	let path;

	const block = {
		c: function create() {
			svg = svg_element("svg");
			path = svg_element("path");
			attr_dev(path, "d", "M10 24h-6v-24h6v24zm10 0h-6v-24h6v24zm-11-23h-4v22h4v-22zm10 0h-4v22h4v-22z");
			add_location(path, file$3, 256, 133, 14202);
			attr_dev(svg, "viewBox", "-6 -5 36 36");
			attr_dev(svg, "width", "100%");
			attr_dev(svg, "height", "100%");
			attr_dev(svg, "xmlns", "http://www.w3.org/2000/svg");
			attr_dev(svg, "fill-rule", "evenodd");
			attr_dev(svg, "clip-rule", "evenodd");
			add_location(svg, file$3, 256, 4, 14073);
		},
		m: function mount(target, anchor) {
			insert_dev(target, svg, anchor);
			append_dev(svg, path);
		},
		d: function destroy(detaching) {
			if (detaching) detach_dev(svg);
		}
	};

	dispatch_dev("SvelteRegisterBlock", {
		block,
		id: create_if_block$3.name,
		type: "if",
		source: "(256:4) {#if isPaused}",
		ctx
	});

	return block;
}

function create_fragment$3(ctx) {
	let svg;
	let t;
	let g5;
	let g4;
	let g0;
	let path0;
	let path1;
	let path2;
	let path3;
	let path4;
	let path5;
	let path6;
	let path7;
	let path8;
	let g1;
	let path9;
	let path10;
	let path11;
	let path12;
	let path13;
	let path14;
	let path15;
	let path16;
	let path17;
	let path18;
	let path19;
	let g2;
	let path20;
	let path21;
	let path22;
	let path23;
	let path24;
	let path25;
	let path26;
	let path27;
	let g3;
	let path28;
	let path29;
	let path30;
	let path31;
	let path32;
	let path33;
	let path34;
	let path35;
	let if_block = /*isPaused*/ ctx[1] && create_if_block$3(ctx);

	const block = {
		c: function create() {
			svg = svg_element("svg");
			t = text(">\n");
			g5 = svg_element("g");
			g4 = svg_element("g");
			g0 = svg_element("g");
			path0 = svg_element("path");
			path1 = svg_element("path");
			path2 = svg_element("path");
			path3 = svg_element("path");
			path4 = svg_element("path");
			path5 = svg_element("path");
			path6 = svg_element("path");
			path7 = svg_element("path");
			path8 = svg_element("path");
			g1 = svg_element("g");
			path9 = svg_element("path");
			path10 = svg_element("path");
			path11 = svg_element("path");
			path12 = svg_element("path");
			path13 = svg_element("path");
			path14 = svg_element("path");
			path15 = svg_element("path");
			path16 = svg_element("path");
			path17 = svg_element("path");
			path18 = svg_element("path");
			path19 = svg_element("path");
			g2 = svg_element("g");
			path20 = svg_element("path");
			path21 = svg_element("path");
			path22 = svg_element("path");
			path23 = svg_element("path");
			path24 = svg_element("path");
			path25 = svg_element("path");
			path26 = svg_element("path");
			path27 = svg_element("path");
			g3 = svg_element("g");
			path28 = svg_element("path");
			path29 = svg_element("path");
			path30 = svg_element("path");
			path31 = svg_element("path");
			path32 = svg_element("path");
			path33 = svg_element("path");
			path34 = svg_element("path");
			path35 = svg_element("path");
			if (if_block) if_block.c();
			attr_dev(path0, "fill", "var(--cool500)");
			attr_dev(path0, "d", "m121 198-8 2c-2 0-2 1-1 3l6 13 3 2 4-1a2 2 0 0 0 1-2l-3-15c0-1 0-2-2-2Zm36 45-7 5c-2 1-3 4-2 6l7 30c2 4 0 6-5 5l-2-2-10-26c-1-4-3-5-7-5l-34-4-43-4c-3-1-3 1-3 3l-2 20c0 3-5 5-7 4l-1-3 2-34 2-22-2-7c-1-1-2-2 0-3s1-2 0-3l-16-34-25-50c-1-3-1-3 2-3l59 4c3 1 4 2 5 4 6 7 10 16 15 25l20 38c1 1 2 2 3 1l18-3a2 2 0 0 1 2 1l3 10c4 10 11 20 14 31l2 2c5 2 8 4 8 10 0 2 1 3 4 4Zm-93-1-9-20-2 16c0 1-1 2 1 2l10 2Zm48 4h1l16 2c4 1 4 1 3-3 0-1 0-3-2-3l-18 4Z");
			add_location(path0, file$3, 103, 6, 1728);
			attr_dev(path1, "fill", "var(--shirt)");
			attr_dev(path1, "d", "m176 239-4-9-4-13-3-9a3 3 0 0 0 0-1l-4-22c0-1 0-2-2-1h-2a6 6 0 0 0 0-2l-6-20c5-5 12-8 18-10l14-6c5 2 9 4 11 8 1 3 2 5 5 7 2-5 2-5 5-5 6 11 5 22 4 33-1 4 2 6 2 9 1 5 4 9 6 14l2 2c3 1 3 3 3 5 1 3 0 5-3 5-6 0-11 2-16 6l-16 15-3 2c-1 1-1 2-3-1l-4-7Z");
			add_location(path1, file$3, 107, 6, 2234);
			attr_dev(path2, "fill", "var(--flesh)");
			attr_dev(path2, "d", "M359 304c-3-3-7-3-10-4l-27-2c-10-1-20-3-29-7l-20-11c-7-4-14-8-23-7l-1-1 3-3c4-5 7-10 9-16 0-2 1-4-2-5-2-1-1-2-1-3a28 28 0 0 1 6-6c1 2 3 2 5 3l13 2a19 19 0 0 1 10 5c6 5 12 8 20 8l35 5a45 45 0 0 0 6 0 17 17 0 0 0 2 1c5 1 6 4 2 8a16 16 0 0 1-14 6l-22-1a15 15 0 0 0 2 2 155 155 0 0 0 24 8c3 0 6 2 10 0a2 2 0 0 0 2 0l3 1 1 6c1 3 2 4 6 2h2c2 1 3 3 3 5s-2 4-4 4a13 13 0 0 1-7 0 16 16 0 0 0-4 0Z");
			add_location(path2, file$3, 111, 6, 2541);
			attr_dev(path3, "fill", "var(--pants)");
			attr_dev(path3, "d", "M264 239a28 28 0 0 0-6 6c0 1-1 2 1 3 3 1 2 3 2 5-2 6-5 11-9 16l-3 3a52 52 0 0 1-9 8c-3 2-6 2-8-1-5-7-13-9-21-10-11-1-19-6-24-15 0-3-2-6-1-9l16-15c5-4 10-5 16-6 3 0 4-2 3-5h5c2 0 4 0 5 2 2 4 7 5 11 6a147 147 0 0 1 21 10l1 2Z");
			add_location(path3, file$3, 115, 6, 2990);
			attr_dev(path4, "fill", "var(--flesh)");
			attr_dev(path4, "d", "m151 162 6 20a6 6 0 0 1 0 2c-5 1-9 3-14 3-2 0-4 1-3 4l8 20c1 7 3 9 9 11 3 2 6 3 6 8 1 3 0 5-1 8-2 2-3 4-6 4-2 0-3-1-3-3 0-6-3-8-8-10l-2-2c-3-11-10-21-14-31l-3-10a2 2 0 0 0-2-1c0-5 2-8 5-10a174 174 0 0 1 22-13Z");
			add_location(path4, file$3, 119, 6, 3275);
			attr_dev(path5, "fill", "var(--hair)");
			attr_dev(path5, "d", "M359 304a16 16 0 0 1 4 0 13 13 0 0 0 7 0c2 0 3-1 4-4s-1-4-3-5h-2c-4 2-5 1-6-2l-1-6c0-1 0-2 2-2 6 0 11-3 16-6l15-12c2-2 4-5 7-3s4 4 4 7c1 13-4 22-14 29l-11 8c-7 5-15 2-21-2a2 2 0 0 1-1-2Z");
			add_location(path5, file$3, 123, 6, 3546);
			attr_dev(path6, "fill", "var(--flesh)");
			attr_dev(path6, "d", "M204 156c-3 0-3 0-5 5-3-2-4-4-5-7-3-4-6-6-11-8v-2c2-1 3-3 3-5l1-6a4 4 0 0 1 4-3c2 0 3 1 3 3a43 43 0 0 1 1 5l1 2a2 2 0 0 0 2-2v-3c0-2 1-5 3-6 2-2 2-4 1-6-1-3 0-4 3-4a10 10 0 0 1 7 2c0 4 2 7 1 12-1 1 1 2 2 3 1 2 2 4-1 5v2c0 2 0 4-2 6 0 5-4 5-8 7Z");
			add_location(path6, file$3, 127, 6, 3793);
			attr_dev(path7, "fill", "var(--hair)");
			attr_dev(path7, "d", "M212 121a10 10 0 0 0-7-2c-3 0-4 2-3 4s1 4-1 6c-2 1-3 4-3 6v4a2 2 0 0 1-2 1l-1-2a43 43 0 0 0-1-5c0-2-1-3-3-3a4 4 0 0 0-4 3l-1 6c0 2-1 4-3 5a40 40 0 0 1-6-23c0-5 5-10 10-11 7-1 14 1 21 2h4c4 1 5 3 3 5a30 30 0 0 1-3 4ZM359 286a2 2 0 0 1-2 0l-16-9h2a16 16 0 0 0 14-6c4-4 3-7-2-8a17 17 0 0 1-2-1c-1-1 0-1 1-1 9 1 16-3 22-10 2-2 3-4 6-4s5 0 4 3c0 6-1 12-6 16l-21 20Z");
			add_location(path7, file$3, 131, 6, 4099);
			attr_dev(path8, "fill", "var(--cool500)");
			attr_dev(path8, "d", "m162 238 2-8c-1-5-4-6-7-8-6-2-8-4-9-11l17-3 3 9 4 13ZM186 245c-1 3 1 6 1 9-6 0-6 0-7-5l-4-10 4 7c1 3 2 2 3 1s1-2 3-2Z");
			add_location(path8, file$3, 135, 6, 4520);
			attr_dev(g0, "id", "tri-dipreach-1");
			attr_dev(g0, "class", "svelte-1cdhk8z");
			add_location(g0, file$3, 102, 4, 1698);
			attr_dev(path9, "fill", "var(--cool500)");
			attr_dev(path9, "d", "m157 242-8 7a4 4 0 0 0-2 5l8 30c1 3-1 4-2 5s-5 0-6-2l-11-28a4 4 0 0 0-4-3l-59-6-19-2c-2 0-3 0-3 3l-2 21a3 3 0 0 1-2 2l-6 1v-2l2-30 2-27-2-7-1-2c3-1 1-3 1-4L3 121l-2-3v-1l29 2 30 2c4 1 7 2 9 6 10 15 18 31 27 47l7 14c1 1 1 2 3 1l41-8-1 6-13 2c-2 0-3 1-2 3l5 18c1 4 1 4 5 4l4-1v9c-1 3 1 5 3 7 5 2 8 5 7 11l2 2Zm-31-26-3-16c0-2-1-1-2-1l-9 2c-2 0-1 1-1 2l7 13c1 2 7 2 8 1a3 3 0 0 0 0-1Zm-71 7h-1l-1 16v2l11 1-9-19Zm57 23v1l19 2 1-1a17 17 0 0 0-1-5h-3l-16 3Z");
			add_location(path9, file$3, 141, 6, 4738);
			attr_dev(path10, "d", "M190 111c5 3 9 5 13 9 6 5 9 12 11 19 2 5 6 8 9 12l5 4c3 3 7 5 9 9a5 5 0 0 0 3 3 5 5 0 0 1 4 4 9 9 0 0 1-5 2 37 37 0 0 0-17 10c-6 5-10 12-14 19v3c-3 2-3 2-6-1l-15-17h-1c-3-4-5-8-9-11l-8-13c1-2 1-3-1-4a68 68 0 0 0-12-8c-2-1-4 0-6-2 1-8 0-17 3-25a17 17 0 0 1 5-7l11-9c8-3 14 0 21 3Z");
			attr_dev(path10, "fill", "var(--shirt)");
			add_location(path10, file$3, 145, 6, 5254);
			attr_dev(path11, "fill", "var(--flesh)");
			attr_dev(path11, "d", "M289 209c4 4 8 8 14 11 3 1 5 4 7 7a26 26 0 0 0 7 6l19 11a108 108 0 0 0 22 10 14 14 0 0 0 3 1c0 2 2 2 3 2 1 1 3 0 3 2a7 7 0 0 1-6 8h-7l-9-4h-4a117 117 0 0 0 13 9c1 1 2 2 3 1a28 28 0 0 0 11 6c3 2 6 2 9 2v5c0 5 1 5 6 4h2v6c-1 2-2 3-4 3a12 12 0 0 1-5-1l-6-2c-10-7-23-9-34-14-10-4-20-7-28-15l-14-12c-7-7-16-13-27-15a3 3 0 0 1 1-3c5-9 10-18 17-26 1-1 2-3 4-2Z");
			add_location(path11, file$3, 149, 6, 5595);
			attr_dev(path12, "d", "M289 209c-2-1-3 1-4 2-7 8-12 17-17 26a3 3 0 0 0-1 3h-4a8 8 0 0 1-7-2 68 68 0 0 0-23-15c-9-4-18-10-25-18v-3c4-7 8-14 14-19a37 37 0 0 1 17-10 9 9 0 0 0 5-2l8 4a7 7 0 0 1 4 4 10 10 0 0 0 5 5c10 7 19 16 28 25Z");
			attr_dev(path12, "fill", "var(--pants)");
			add_location(path12, file$3, 153, 6, 6010);
			attr_dev(path13, "fill", "var(--flesh)");
			attr_dev(path13, "d", "M150 149c2 2 4 1 6 2a68 68 0 0 1 12 8c2 1 2 2 1 4l-6 15-2 6v2l-6 24v6c0 2 1 3 3 4 5 2 9 4 9 11l-1 4a44 44 0 0 1-9 7l-2-2c1-6-2-9-7-11-2-2-4-4-3-7v-9a5 5 0 0 0 0-3l1-13v-10l1-6a13 13 0 0 1 1-4c3-7 1-15 1-22l1-6Z");
			add_location(path13, file$3, 157, 6, 6277);
			attr_dev(path14, "fill", "var(--hair)");
			attr_dev(path14, "d", "m370 296 6 2a12 12 0 0 0 5 1c2 0 4-1 4-3v-6h-2c-5 1-6 0-6-5v-4c1-1 1-3 2-2 3 2 6 0 8 0 7 0 13-2 18-5l8-4 2-2c6-3 10 0 9 6-1 11-6 20-17 25l-17 6c-7 3-16-1-19-7a3 3 0 0 1-1-2Z");
			add_location(path14, file$3, 161, 6, 6549);
			attr_dev(path15, "fill", "var(--flesh)");
			attr_dev(path15, "d", "M190 111c-7-3-13-6-21-3l-1-4c2-2 3-4 2-7a11 11 0 0 1-1-6c0-2 0-4 3-4a5 5 0 0 1 5 2 43 43 0 0 1 2 5l1 1 1-2-1-7a4 4 0 0 1 1-4c3-3 3-3 0-5a3 3 0 0 1-2-4l3-2h3c3-1 5 1 8 1l2 8v2c0 3 1 5 3 6 2 2 3 3 1 5l-1 2v10c1 2-1 3-3 4l-5 2Z");
			add_location(path15, file$3, 165, 6, 6783);
			attr_dev(path16, "fill", "var(--hair)");
			attr_dev(path16, "d", "M193 72c-3 0-5-2-8-1h-3l-3 2a3 3 0 0 0 2 4c3 2 3 2 0 5a4 4 0 0 0-1 4l1 7-1 2-1-1a43 43 0 0 0-2-5 5 5 0 0 0-5-2c-3 0-3 2-3 4a11 11 0 0 0 0 6c2 3 1 5-1 7l-3-3a48 48 0 0 1-7-13c-4-9 0-18 10-23a28 28 0 0 1 9-2 68 68 0 0 0 10-2c7-1 9 1 7 7l-1 4Z");
			add_location(path16, file$3, 169, 6, 7069);
			attr_dev(path17, "fill", "var(--cool500)");
			attr_dev(path17, "d", "m166 235 1-4c0-7-4-9-9-11-2-1-3-2-3-4v-6l10-2 1-2-4-21-1-1 2-6c3-1 4 0 5 3l5 16-1 10c0 3 1 5 4 7 1 1 3 2 2 4-2 3-1 4 1 5l7 27c0 2 0 4-2 4s-3 0-4-2l-7-19c-1-2-2-2-3-1a35 35 0 0 1-4 3Z");
			add_location(path17, file$3, 173, 6, 7370);
			attr_dev(path18, "fill", "var(--hair)");
			attr_dev(path18, "d", "M354 267h7a7 7 0 0 0 6-8c0-2-2-1-3-2-1 0-3 0-3-2 10 1 17-3 24-9 2-2 3-4 6-4 2-1 4 0 4 3-1 6-2 12-7 17l-19 16a6 6 0 0 1-1 1 28 28 0 0 1-11-6l-3-6Z");
			add_location(path18, file$3, 177, 6, 7616);
			attr_dev(path19, "fill", "var(--flesh)");
			attr_dev(path19, "d", "M179 223c-2-1-3-2-1-5 1-2-1-3-2-4-3-2-4-4-4-7l1-10 4-21c4 3 6 7 9 11l-5 13c-2 4-1 6 3 8a7 7 0 0 1 0 12c-1 1-3 3-5 3Z");
			add_location(path19, file$3, 181, 6, 7822);
			attr_dev(g1, "id", "tri-dipreach-2");
			attr_dev(g1, "class", "svelte-1cdhk8z");
			add_location(g1, file$3, 140, 4, 4708);
			attr_dev(path20, "fill", "var(--cool500)");
			attr_dev(path20, "d", "m185 224 6 26c1 1 1 3-1 4-2 0-4 0-5-3l-7-19a1043 1043 0 0 1-25 17 3 3 0 0 0-2 5l8 30c1 4-1 7-5 6l-2-2-11-28c-1-2-3-4-6-4l-27-3-48-4-7-1c-1 0-2 0-2 2l-2 21c0 3-5 6-7 4-2 0-1-1-1-2l3-50c1-5 2-11-2-16l1-1c2-1 1-3 0-4L1 117c-2-3-1-3 1-3l29 2 32 2a7 7 0 0 1 6 4l22 38 14 26a3 3 0 0 0 4 2l58-12h4v1l-1 6c0 4 1 7-1 10l-1-9c-1-2-2-2-4-2l-28 5c-2 1-2 2-2 4l5 16c1 7 1 7 8 5l21-4 1 4c1 4 4 5 9 6 3 0 5 1 5 5l-1 2c2 1 2-1 3-1Zm-60-27-10 2c-2 1-2 2-1 3l6 11c2 5 2 5 7 3h1a2 2 0 0 0 1-2l-3-16-1-1Zm-60 45-10-20a4882 4882 0 0 0-1 19Zm49 4a6 6 0 0 0 3 1l16 1h2a15 15 0 0 0 0-5l-3-1-18 4Z");
			add_location(path20, file$3, 187, 6, 8037);
			attr_dev(path21, "fill", "var(--shirt)");
			attr_dev(path21, "d", "M238 76c2 1 3 2 2 4-5 11-1 20 3 30l14 22 9 12a28 28 0 0 0 4 3v3h-3a71 71 0 0 0-11 8c-4 3-5 7-4 11a5 5 0 0 1-2 5 23 23 0 0 0-3 4l-3 6c-3 4-3 4-7 0a7 7 0 0 1-1-1 22 22 0 0 0-9-10c-6-4-10-9-15-14-2-4-6-6-9-9-2-2-5-1-7 1a6 6 0 0 0-1 3c0 3-1 5-5 4-5 0-10-2-15-1-2-3-1-6 0-9a20 20 0 0 0 1-11 12 12 0 0 1 2-10c4-5 7-10 7-17 0-3 3-1 4-2 3 0 5-1 6-4l3-6c4-2 6-7 10-9a2 2 0 0 0 1-2v-1a145 145 0 0 0 12-13l6-9c2 0 3 1 3 2l4 9c1 1 2 3 4 1Z");
			add_location(path21, file$3, 191, 6, 8673);
			attr_dev(path22, "fill", "var(--pants)");
			attr_dev(path22, "d", "m244 184 3-6a23 23 0 0 1 3-4 5 5 0 0 0 2-5c-1-4 0-8 4-11a71 71 0 0 1 11-8h3a75 75 0 0 1 11 11 4 4 0 0 0 3 2 6 6 0 0 1 5 3l28 34c1 1 2 2 1 3-4-6-6-6-11-2-5 3-8 7-12 11-2 3-4 5 0 8l-5 3c-3 2-4 1-5-2l-1-2-1 7a7 7 0 0 1-2 4h-3l-28-34a86 86 0 0 1-6-12Z");
			add_location(path22, file$3, 195, 6, 9162);
			attr_dev(path23, "fill", "var(--flesh)");
			attr_dev(path23, "d", "M295 220c-4-3-2-5 0-8 4-4 7-8 12-11 5-4 7-4 11 2l5 5 13 12 1 1c4 8 11 14 18 19l10 10c6 8 13 16 23 19l3 2c1 3 0 6 5 7l1 2c-1 3-4 5-8 4-4 0-8-2-12-1-1-3-3-4-5-5l-30-21a76 76 0 0 1-12-11 18 18 0 0 0-7-5 46 46 0 0 1-15-10l-13-11Z");
			add_location(path23, file$3, 199, 6, 9471);
			attr_dev(path24, "fill", "var(--hair)");
			attr_dev(path24, "d", "M377 283c4-1 8 1 12 1 4 1 7-1 8-5l-1-1c-5-1-4-4-5-7h3a23 23 0 0 0 20-2 70 70 0 0 1 8-4c2-1 4-1 6 1s2 4 1 6c-5 9-9 17-19 20l-12 6a16 16 0 0 1-8 1c-3 0-7-2-7-6l-5-8c0-1-2-1-1-2Z");
			add_location(path24, file$3, 203, 6, 9758);
			attr_dev(path25, "fill", "var(--flesh)");
			attr_dev(path25, "d", "M238 76c-2 2-3 0-4-1l-4-9c0-1-1-2-3-2 3-4 5-7 5-12-1-3 2-6 3-8l8-14v-9c-1-4-3-8-3-13l1-2 2 1 1-4c0-2 3-4 6-3a2 2 0 0 1 1 3 26 26 0 0 0 3 12v8l-6 28a25 25 0 0 1-3 10l-4 8-3 7ZM175 157c5-1 10 1 15 1a13 13 0 0 1-1 4c-3 7-5 13-6 20l-5 24c0 2 1 2 2 2h1c2 0 6 0 7 4 1 3 1 7-2 10l-1 2c-1 0-1 2-3 1l1-2c0-4-2-5-5-5-5-1-8-2-9-6l-1-4 1-15c2-3 1-6 1-10l1-6v-1c0-6 3-10 3-15a21 21 0 0 1 1-4Z");
			add_location(path25, file$3, 207, 6, 9994);
			attr_dev(path26, "fill", "var(--hair)");
			attr_dev(path26, "d", "M209 86v1c-1 2-2 1-2 0l-3-3-2-2-3 2a13 13 0 0 0 0 6c0 2-1 3-3 3a8 8 0 0 0-7 10h-1l-2-1c-6-4-8-10-7-17 0-6 10-12 16-10a30 30 0 0 1 14 11ZM365 250l-10-10c5 0 9-1 11-5a2 2 0 0 1 1-1c2-1 5-3 7-1s2 5 1 8c-2 4-5 7-10 9Z");
			add_location(path26, file$3, 211, 6, 10435);
			attr_dev(path27, "fill", "var(--flesh)");
			attr_dev(path27, "d", "M188 103s2 1 1-1a8 8 0 0 1 7-9c2 0 3-1 2-3a13 13 0 0 1 1-6l3-2 2 2 3 3c0 1 1 2 2 0a2 2 0 0 1-1 2c-4 2-6 7-10 9l-3 6c-1 3-3 4-6 4 0-2-2-3-1-5Z");
			add_location(path27, file$3, 215, 6, 10709);
			attr_dev(g2, "id", "tri-dipreach-3");
			attr_dev(g2, "class", "svelte-1cdhk8z");
			add_location(g2, file$3, 186, 4, 8007);
			attr_dev(path28, "fill", "var(--cool500)");
			attr_dev(path28, "d", "M193 250v-1l-7-27c-2-1-3-2-1-5 1-1-1-3-2-4-3-2-4-4-4-7l1-10-5-16a5 5 0 0 0-2-3 2 2 0 0 0-1-1l-3 1-59 11a3 3 0 0 1-3-2l-14-25-22-39a7 7 0 0 0-7-3l-31-2-29-2c-2-1-3 0-2 2l43 86c0 1 2 2-1 3v2c3 5 2 10 2 15l-3 50v3c3 1 8-1 8-4l2-22 2-2 7 1 48 5 27 3c3 0 4 1 5 4l11 28c1 1 1 2 3 2 4 0 6-2 5-6l-8-31a3 3 0 0 1 1-4l22-18c2-1 3-1 3 1l8 19c1 3 2 3 4 2 3 0 2-2 2-4Zm-137-9-2-2 2-17 10 21Zm61-41 9-2 2 1 3 16a2 2 0 0 1-1 2h-2c-4 1-4 1-7-3l-5-11c-1-2-1-3 1-3Zm20 49h-2l-16-1a6 6 0 0 1-3-1l18-4h2a14 14 0 0 1 1 6Zm12-36c-7 1-7 1-9-6l-4-15c-1-3 0-4 2-4l28-5c2-1 3 0 3 2l2 8 2 13c1 1 1 1-1 1l-10 2v1l-13 3Z");
			add_location(path28, file$3, 221, 6, 10949);
			attr_dev(path29, "fill", "var(--flesh)");
			attr_dev(path29, "d", "M203 131c-2 3-3 0-4-1l-4-8-3-3c2-3 27-52 27-57-1-3 2-6 3-8l8-14c2-3 1-5 1-8l-4-14 1-1c1-1 1 0 2 1l1-5c1-2 4-3 6-2a2 2 0 0 1 2 2 26 26 0 0 0 2 13v7l-5 28a25 25 0 0 1-4 10c-2 2-2 5-3 8l-26 52ZM153 172c5-1 10 1 15 1a13 13 0 0 1-1 5c-3 6-5 13-6 20l-5 23c0 2 1 3 2 3h1c3 0 6 0 7 3 2 4 1 7-2 10l-1 3h-2v-2c0-3-2-5-5-5-5 0-8-2-9-5 0-2 1-4-1-5l1-15c2-3 1-6 1-9l1-7v-1l3-15a21 21 0 0 1 1-4Z");
			add_location(path29, file$3, 225, 6, 11604);
			attr_dev(path30, "fill", "var(--shirt)");
			attr_dev(path30, "d", "M216 100c2 1 3 2 2 5-5 10-1 20 3 29l14 22c3 5 33 16 37 20 12 9-1 19-12 8-4 2-29 6-28 11 1 2-3 2-4 3a23 23 0 0 0-3 5c-1 2-4 3-3 6-3 3-3 3-7 0a6 6 0 0 1-1-2 22 22 0 0 0-9-9c-6-4-10-9-15-15l-9-9c-2-2-6-1-7 2a6 6 0 0 0-1 2c0 3-1 5-5 4-5 0-10-2-16-1v-8a20 20 0 0 0 2-12 12 12 0 0 1 2-9c4-5 7-11 7-17 0-3 3-2 4-3 3 1 5 0 6-3 1-2 1-5 3-6 4-2 6-7 10-9a2 2 0 0 0 0-2l1-2a146 146 0 0 0 11-13l7-9 3 3 4 8c1 1 2 4 4 1Z");
			add_location(path30, file$3, 229, 6, 12047);
			attr_dev(path31, "fill", "var(--flesh)");
			attr_dev(path31, "d", "M375 301c-2-4-6-5-9-6l-25-11c-9-4-18-8-26-14l-16-17c-5-5-11-11-19-13l-2-1 4-2c5-4 10-7 13-13 1-2 2-3 0-5v-3a28 28 0 0 1 7-5l4 5 12 6a19 19 0 0 1 8 7c4 7 10 11 17 14l33 14a46 46 0 0 0 5 2 16 16 0 0 0 2 2c4 2 4 5 0 8a16 16 0 0 1-15 1l-22-7a16 16 0 0 0 2 3 156 156 0 0 0 20 14c3 2 6 4 10 3a2 2 0 0 0 2 1l3 1-1 6c0 4 1 5 4 4l3 1c1 2 2 4 1 6s-3 2-5 2a13 13 0 0 1-6-2 16 16 0 0 0-4-1Z");
			add_location(path31, file$3, 233, 6, 12515);
			attr_dev(path32, "fill", "var(--pants)");
			attr_dev(path32, "d", "M302 211a28 28 0 0 0-7 5v3c2 2 1 3 0 5-3 6-8 9-13 13l-3 2a52 52 0 0 1-12 5c-3 1-5 0-7-3-3-8-9-13-17-16-10-4-17-11-19-22l1-8 20-9c6-3 12-3 17-2 4 1 5-1 5-3a46 46 0 0 0 4 1c2 0 4 1 5 3 1 5 5 7 9 9a145 145 0 0 1 17 15v2Z");
			add_location(path32, file$3, 237, 6, 12955);
			attr_dev(path33, "fill", "var(--hair)");
			attr_dev(path33, "d", "M375 301a16 16 0 0 1 4 1 13 13 0 0 0 6 2c2 0 4 0 5-2s0-4-1-6c0-2-2-1-2-1-4 1-5 0-5-4l1-6 2-1c5 2 11 1 17-1 6-1 12-4 17-7 3-2 6-3 9-1s2 5 1 8c-3 12-10 20-22 24l-12 4c-9 3-16-2-20-8a2 2 0 0 1 0-2ZM380 284a2 2 0 0 1-2-1l-12-13h2a16 16 0 0 0 15-1c4-3 4-6 0-8a16 16 0 0 1-2-2l1-1c9 3 17 2 24-3l7-2c2 0 5 1 4 4-3 5-5 11-11 14l-26 13Z");
			add_location(path33, file$3, 241, 6, 13234);
			attr_dev(path34, "fill", "var(--flesh)");
			attr_dev(path34, "d", "M185 127c-2 3-2 3-1 7-3 1-5 0-8-1-5-2-9-1-13 1l-2-2c1-2-2-3-4-5l-8-5c-1-2 1-16-1-17-3-1 10-4 12-6a10 10 0 0 1 7-3c3 3 7 5 9 9 1 1 10 9 10 12 4 4 0 7-1 10Z");
			add_location(path34, file$3, 245, 6, 13622);
			attr_dev(path35, "fill", "var(--hair)");
			attr_dev(path35, "d", "m159 102 1-3a10 10 0 0 1 7-3 29 29 0 0 0 0-5c-1-3-3-4-5-2l-4 3c-6 4-12 7-17 13-2 4-3 11 0 14a40 40 0 0 0 20 13 4 4 0 0 0 0-4c-9-4-11-20-2-26Z");
			add_location(path35, file$3, 249, 6, 13838);
			attr_dev(g3, "id", "tri-dipreach-4");
			attr_dev(g3, "class", "svelte-1cdhk8z");
			add_location(g3, file$3, 220, 4, 10919);
			attr_dev(g4, "class", "shapes svelte-1cdhk8z");
			add_location(g4, file$3, 101, 2, 1651);
			attr_dev(g5, "class", "svelte-1cdhk8z");
			toggle_class(g5, "paused", /*isPaused*/ ctx[1]);
			toggle_class(g5, "flip", /*flipsvg*/ ctx[2]);
			add_location(g5, file$3, 100, 0, 1600);
			attr_dev(svg, "xmlns", "http://www.w3.org/2000/svg");
			attr_dev(svg, "viewBox", "0 0 429.8 311.6");
			attr_dev(svg, "height", "100%");
			attr_dev(svg, "width", "100%");
			attr_dev(svg, "class", "svelte-1cdhk8z");
			add_location(svg, file$3, 99, 0, 1505);
		},
		l: function claim(nodes) {
			throw new Error("options.hydrate only works if the component was compiled with the `hydratable: true` option");
		},
		m: function mount(target, anchor) {
			insert_dev(target, svg, anchor);
			append_dev(svg, t);
			append_dev(svg, g5);
			append_dev(g5, g4);
			append_dev(g4, g0);
			append_dev(g0, path0);
			append_dev(g0, path1);
			append_dev(g0, path2);
			append_dev(g0, path3);
			append_dev(g0, path4);
			append_dev(g0, path5);
			append_dev(g0, path6);
			append_dev(g0, path7);
			append_dev(g0, path8);
			append_dev(g4, g1);
			append_dev(g1, path9);
			append_dev(g1, path10);
			append_dev(g1, path11);
			append_dev(g1, path12);
			append_dev(g1, path13);
			append_dev(g1, path14);
			append_dev(g1, path15);
			append_dev(g1, path16);
			append_dev(g1, path17);
			append_dev(g1, path18);
			append_dev(g1, path19);
			append_dev(g4, g2);
			append_dev(g2, path20);
			append_dev(g2, path21);
			append_dev(g2, path22);
			append_dev(g2, path23);
			append_dev(g2, path24);
			append_dev(g2, path25);
			append_dev(g2, path26);
			append_dev(g2, path27);
			append_dev(g4, g3);
			append_dev(g3, path28);
			append_dev(g3, path29);
			append_dev(g3, path30);
			append_dev(g3, path31);
			append_dev(g3, path32);
			append_dev(g3, path33);
			append_dev(g3, path34);
			append_dev(g3, path35);
			/*g4_binding*/ ctx[4](g4);
			if (if_block) if_block.m(g5, null);
		},
		p: function update(ctx, [dirty]) {
			if (/*isPaused*/ ctx[1]) {
				if (if_block) ; else {
					if_block = create_if_block$3(ctx);
					if_block.c();
					if_block.m(g5, null);
				}
			} else if (if_block) {
				if_block.d(1);
				if_block = null;
			}

			if (dirty & /*isPaused*/ 2) {
				toggle_class(g5, "paused", /*isPaused*/ ctx[1]);
			}

			if (dirty & /*flipsvg*/ 4) {
				toggle_class(g5, "flip", /*flipsvg*/ ctx[2]);
			}
		},
		i: noop,
		o: noop,
		d: function destroy(detaching) {
			if (detaching) detach_dev(svg);
			/*g4_binding*/ ctx[4](null);
			if (if_block) if_block.d();
		}
	};

	dispatch_dev("SvelteRegisterBlock", {
		block,
		id: create_fragment$3.name,
		type: "component",
		source: "",
		ctx
	});

	return block;
}

function instance$3($$self, $$props, $$invalidate) {
	let { $$slots: slots = {}, $$scope } = $$props;
	validate_slots('Workout_tricepsdipandreach', slots, []);
	let { direction = "right" } = $$props;
	let { isPaused = false } = $$props;
	let { rootElement } = $$props;
	let flipsvg = false;

	if (direction == "left") {
		flipsvg = true;
	}

	const writable_props = ['direction', 'isPaused', 'rootElement'];

	Object.keys($$props).forEach(key => {
		if (!~writable_props.indexOf(key) && key.slice(0, 2) !== '$$' && key !== 'slot') console.warn(`<Workout_tricepsdipandreach> was created with unknown prop '${key}'`);
	});

	function g4_binding($$value) {
		binding_callbacks[$$value ? 'unshift' : 'push'](() => {
			rootElement = $$value;
			$$invalidate(0, rootElement);
		});
	}

	$$self.$$set = $$props => {
		if ('direction' in $$props) $$invalidate(3, direction = $$props.direction);
		if ('isPaused' in $$props) $$invalidate(1, isPaused = $$props.isPaused);
		if ('rootElement' in $$props) $$invalidate(0, rootElement = $$props.rootElement);
	};

	$$self.$capture_state = () => ({
		direction,
		isPaused,
		rootElement,
		flipsvg
	});

	$$self.$inject_state = $$props => {
		if ('direction' in $$props) $$invalidate(3, direction = $$props.direction);
		if ('isPaused' in $$props) $$invalidate(1, isPaused = $$props.isPaused);
		if ('rootElement' in $$props) $$invalidate(0, rootElement = $$props.rootElement);
		if ('flipsvg' in $$props) $$invalidate(2, flipsvg = $$props.flipsvg);
	};

	if ($$props && "$$inject" in $$props) {
		$$self.$inject_state($$props.$$inject);
	}

	return [rootElement, isPaused, flipsvg, direction, g4_binding];
}

class Workout_tricepsdipandreach extends SvelteComponentDev {
	constructor(options) {
		super(options);

		init(this, options, instance$3, create_fragment$3, safe_not_equal, {
			direction: 3,
			isPaused: 1,
			rootElement: 0
		});

		dispatch_dev("SvelteRegisterComponent", {
			component: this,
			tagName: "Workout_tricepsdipandreach",
			options,
			id: create_fragment$3.name
		});

		const { ctx } = this.$$;
		const props = options.props || {};

		if (/*rootElement*/ ctx[0] === undefined && !('rootElement' in props)) {
			console.warn("<Workout_tricepsdipandreach> was created without expected prop 'rootElement'");
		}
	}

	get direction() {
		throw new Error("<Workout_tricepsdipandreach>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
	}

	set direction(value) {
		throw new Error("<Workout_tricepsdipandreach>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
	}

	get isPaused() {
		throw new Error("<Workout_tricepsdipandreach>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
	}

	set isPaused(value) {
		throw new Error("<Workout_tricepsdipandreach>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
	}

	get rootElement() {
		throw new Error("<Workout_tricepsdipandreach>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
	}

	set rootElement(value) {
		throw new Error("<Workout_tricepsdipandreach>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
	}
}

var workoutTricepsdipandreach = /*#__PURE__*/Object.freeze({
    __proto__: null,
    'default': Workout_tricepsdipandreach
});

/* src/workouts/workout-tricepsdips.svelte generated by Svelte v3.49.0 */

const file$2 = "src/workouts/workout-tricepsdips.svelte";

// (136:4) {#if isPaused}
function create_if_block$2(ctx) {
	let svg;
	let path;

	const block = {
		c: function create() {
			svg = svg_element("svg");
			path = svg_element("path");
			attr_dev(path, "d", "M10 24h-6v-24h6v24zm10 0h-6v-24h6v24zm-11-23h-4v22h4v-22zm10 0h-4v22h4v-22z");
			add_location(path, file$2, 136, 133, 7741);
			attr_dev(svg, "viewBox", "-6 -5 36 36");
			attr_dev(svg, "width", "100%");
			attr_dev(svg, "height", "100%");
			attr_dev(svg, "xmlns", "http://www.w3.org/2000/svg");
			attr_dev(svg, "fill-rule", "evenodd");
			attr_dev(svg, "clip-rule", "evenodd");
			add_location(svg, file$2, 136, 4, 7612);
		},
		m: function mount(target, anchor) {
			insert_dev(target, svg, anchor);
			append_dev(svg, path);
		},
		d: function destroy(detaching) {
			if (detaching) detach_dev(svg);
		}
	};

	dispatch_dev("SvelteRegisterBlock", {
		block,
		id: create_if_block$2.name,
		type: "if",
		source: "(136:4) {#if isPaused}",
		ctx
	});

	return block;
}

function create_fragment$2(ctx) {
	let svg;
	let t;
	let g3;
	let g2;
	let g0;
	let path0;
	let path1;
	let path2;
	let path3;
	let path4;
	let path5;
	let path6;
	let path7;
	let path8;
	let path9;
	let path10;
	let g1;
	let path11;
	let path12;
	let path13;
	let path14;
	let path15;
	let path16;
	let path17;
	let path18;
	let path19;
	let if_block = /*isPaused*/ ctx[1] && create_if_block$2(ctx);

	const block = {
		c: function create() {
			svg = svg_element("svg");
			t = text(">\n");
			g3 = svg_element("g");
			g2 = svg_element("g");
			g0 = svg_element("g");
			path0 = svg_element("path");
			path1 = svg_element("path");
			path2 = svg_element("path");
			path3 = svg_element("path");
			path4 = svg_element("path");
			path5 = svg_element("path");
			path6 = svg_element("path");
			path7 = svg_element("path");
			path8 = svg_element("path");
			path9 = svg_element("path");
			path10 = svg_element("path");
			g1 = svg_element("g");
			path11 = svg_element("path");
			path12 = svg_element("path");
			path13 = svg_element("path");
			path14 = svg_element("path");
			path15 = svg_element("path");
			path16 = svg_element("path");
			path17 = svg_element("path");
			path18 = svg_element("path");
			path19 = svg_element("path");
			if (if_block) if_block.c();
			attr_dev(path0, "fill", "var(--cool500)");
			attr_dev(path0, "d", "m156 181-8 7a4 4 0 0 0-2 5l8 30c1 3-1 5-2 6s-5-1-6-3l-11-28a4 4 0 0 0-4-3l-59-6-19-2c-2 0-3 0-3 3l-2 21a3 3 0 0 1-2 2c-2 1-4 2-6 1v-2l2-30 2-27-2-7-1-2c3-1 1-3 1-4L2 60l-2-3v-1l29 2 30 3c4 0 7 1 9 5 10 15 18 31 27 47l7 14c0 1 1 2 3 1l41-8-1 6-13 2c-2 1-3 1-2 3l4 19c2 4 2 4 6 3l4-1v9c-1 3 1 5 3 7 5 2 8 5 7 11l2 2Zm-31-26-3-16-2-1-9 2c-2 1-2 1-1 3l7 13h8a3 3 0 0 0 0-1Zm-71 7h-1l-1 16v2c4 0 7 2 11 1l-9-19Zm57 23v1l19 2 1-1a17 17 0 0 0-1-5h-3l-16 3Z");
			add_location(path0, file$2, 51, 6, 1015);
			attr_dev(path1, "fill", "var(--shirt)");
			attr_dev(path1, "d", "m189 50 13 9c6 5 9 12 11 19 2 5 5 8 9 12l5 4c3 4 7 6 9 10a5 5 0 0 0 3 2 5 5 0 0 1 4 4 9 9 0 0 1-5 2 37 37 0 0 0-17 10c-6 6-10 12-14 19v3c-3 2-3 2-6-1l-15-17h-1c-3-4-5-8-9-11l-8-13c1-2 1-3-1-4a68 68 0 0 0-12-8c-2-1-4 0-6-2 1-8 0-16 3-24a17 17 0 0 1 5-8l11-9c8-3 14 0 21 3Z");
			add_location(path1, file$2, 55, 6, 1528);
			attr_dev(path2, "fill", "var(--flesh)");
			attr_dev(path2, "d", "M288 148c4 4 8 9 14 11l7 7a26 26 0 0 0 7 7l19 10a108 108 0 0 0 22 10 13 13 0 0 0 3 1c0 2 2 2 3 2 1 1 3 0 3 2a7 7 0 0 1-6 8h-8l-8-4h-4a116 116 0 0 0 13 9c1 1 2 2 3 1a28 28 0 0 0 11 6c3 2 6 2 9 2v5c0 5 1 5 6 4h2v6c-1 2-2 3-4 3a12 12 0 0 1-5-1l-6-2c-10-7-23-9-34-13-10-5-20-8-28-16l-14-12c-7-7-16-13-27-15a3 3 0 0 1 1-2c5-9 10-18 17-27l4-2Z");
			add_location(path2, file$2, 59, 6, 1861);
			attr_dev(path3, "fill", "var(--pants)");
			attr_dev(path3, "d", "m288 148-4 2c-7 8-12 18-17 27a3 3 0 0 0-1 2l-4 1a8 8 0 0 1-7-3 68 68 0 0 0-23-15c-9-4-18-10-25-18v-3c4-7 8-13 14-19a37 37 0 0 1 17-10 9 9 0 0 0 5-2l8 4a7 7 0 0 1 4 4 10 10 0 0 0 5 5c10 7 19 16 28 25Z");
			add_location(path3, file$2, 63, 6, 2260);
			attr_dev(path4, "fill", "var(--flesh)");
			attr_dev(path4, "d", "M149 88c2 2 4 1 6 2a68 68 0 0 1 12 8c2 1 2 2 1 4l-6 15-2 6v2l-6 24v6c0 2 1 4 3 4 5 2 9 5 9 11l-1 4a43 43 0 0 1-9 7c-1 0-2 0-2-2 1-6-2-9-7-11-2-2-4-4-3-7v-9a5 5 0 0 0 0-2l1-14v-10l1-6a12 12 0 0 1 1-4c3-7 1-15 1-22l1-6Z");
			add_location(path4, file$2, 67, 6, 2521);
			attr_dev(path5, "fill", "var(--hair)");
			attr_dev(path5, "d", "m369 235 6 2a12 12 0 0 0 5 1c2 0 4-1 4-3v-6h-2c-5 1-6 1-6-4v-5c1-1 1-3 2-2 3 2 6 0 8 0 7 0 13-2 18-5l8-4 2-2c6-3 10 0 9 6-1 11-7 20-17 25l-17 6c-7 3-16-1-19-7a3 3 0 0 1-1-2Z");
			add_location(path5, file$2, 71, 6, 2800);
			attr_dev(path6, "fill", "var(--flesh)");
			attr_dev(path6, "d", "M189 50c-7-3-13-6-21-3l-1-4c2-2 3-4 1-7a11 11 0 0 1 0-6c0-2 0-4 3-4a5 5 0 0 1 5 2 46 46 0 0 1 2 5l1 1 1-2-1-7a4 4 0 0 1 1-4c3-3 3-3 0-5a3 3 0 0 1-2-4l3-2h3c3-1 5 1 8 1l2 8v2c0 3 1 5 3 6 2 2 3 3 1 5l-1 2v10c1 2-1 3-3 4l-5 2Z");
			add_location(path6, file$2, 75, 6, 3034);
			attr_dev(path7, "fill", "var(--hair)");
			attr_dev(path7, "d", "M192 11c-3 0-5-2-8-1h-3l-3 2a3 3 0 0 0 2 4c3 2 3 2 0 5a4 4 0 0 0-1 4l1 7-1 2-1-1a46 46 0 0 0-2-5 5 5 0 0 0-5-2c-3 0-3 2-3 4a11 11 0 0 0 0 6c2 3 1 5-1 7l-3-2a48 48 0 0 1-7-14c-3-9 0-18 10-23a28 28 0 0 1 9-2 67 67 0 0 0 10-2c7-1 9 1 7 8l-1 3Z");
			add_location(path7, file$2, 79, 6, 3319);
			attr_dev(path8, "fill", "var(--cool500)");
			attr_dev(path8, "d", "m165 174 1-4c0-7-4-9-9-11-2-1-3-2-3-4v-6l10-2 1-1-4-22-1-1 2-6c3-1 4 0 5 3l5 16-1 10c0 3 1 5 4 7 1 1 3 2 2 4-2 3-1 4 1 5l7 27c0 2 0 4-2 4s-3 0-4-2l-7-19c-1-2-2-2-4-1a38 38 0 0 1-3 3Z");
			add_location(path8, file$2, 83, 6, 3620);
			attr_dev(path9, "fill", "var(--hair)");
			attr_dev(path9, "d", "M352 206h8a7 7 0 0 0 6-8c0-2-2-1-3-2-1 0-3 0-3-2 10 1 17-3 24-9 2-2 3-4 6-4 2-1 4 0 4 3-1 6-2 12-8 17l-18 16a6 6 0 0 1-1 1 28 28 0 0 1-11-6l-4-6Z");
			add_location(path9, file$2, 87, 6, 3866);
			attr_dev(path10, "fill", "var(--flesh)");
			attr_dev(path10, "d", "M178 162c-2-1-3-2-1-5 1-2-1-3-2-4-3-2-4-4-4-7l1-10 4-21c4 3 6 7 9 11l-5 13c-2 4-1 6 3 8a7 7 0 0 1 0 12c-1 2-3 3-5 3Z");
			add_location(path10, file$2, 91, 6, 4072);
			attr_dev(g0, "id", "tri-dip-1");
			attr_dev(g0, "class", "svelte-1832iey");
			add_location(g0, file$2, 50, 4, 990);
			attr_dev(path11, "fill", "var(--hair)");
			attr_dev(path11, "d", "m367 250-8-4c-1-1-3-1-2-3h11c3-2 4-4 3-7-1-2-3-3-6-2-2 2-3 1-4-2l-1-6 1-2c7 0 12-3 17-6a61 61 0 0 0 13-11 20 20 0 0 1 2-2c5-4 9-3 10 3v10a26 26 0 0 1-11 19c-6 5-12 10-21 13Z");
			add_location(path11, file$2, 97, 6, 4282);
			attr_dev(path12, "fill", "var(--cool500)");
			attr_dev(path12, "d", "M404 217h-1v-9h1ZM156 182l-9 7a3 3 0 0 0-1 4l8 30c1 3 0 5-2 5-3 1-5 0-6-2l-11-29a3 3 0 0 0-3-2l-63-6-17-2c-2 0-2 1-2 2l-1 17-1 3c0 4-3 6-7 5l-1-2 2-30 2-27-2-7c0-1-1-2 1-3l-1-2-20-42L1 59v-2l2-1 44 4 16 1c2 0 3 1 4 3 7 10 13 22 19 33l15 28c2 3 3 4 6 3l16-3c2 2 2 4 3 7a100 100 0 0 0 6 13c2 3 3 8 6 11a20 20 0 0 1 3 9 5 5 0 0 0 3 4c4 1 7 3 8 8 0 4 0 4 4 5Zm-31-27-3-16c0-2-1-1-2-1l-8 2c-3 0-2 1-2 3l6 10c2 5 2 5 8 3l1-1Zm-71 7h-1l-1 16 1 2 8 1c2 1 2 0 1-1l-8-18Zm57 23v1l19 2 1-1v-4c0-1-1-2-2-1l-18 3Z");
			add_location(path12, file$2, 101, 6, 4516);
			attr_dev(path13, "fill", "var(--shirt)");
			attr_dev(path13, "d", "M150 101a72 72 0 0 1 19-10l10-3a22 22 0 0 1 9 1l6 8 1 1c0 2 1 4 3 4l1-4a3 3 0 0 1 4-2c4 5 4 10 4 16s1 12-1 18l1 3c2 7 4 13 8 18l2 3c2 1 3 3 3 5 0 4-1 5-5 5-3 0-7 1-10 3-8 5-15 12-21 18a11 11 0 0 1-2 2h-3l-2-5c-2-4-4-7-4-11a16 16 0 0 0-3-6 14 14 0 0 1-3-8 36 36 0 0 0-2-7l-1-4-4-18c0-2 1-5-3-3l-2-1a27 27 0 0 0-1-6c-1-5-4-11-4-17Z");
			add_location(path13, file$2, 105, 6, 5080);
			attr_dev(path14, "fill", "var(--flesh)");
			attr_dev(path14, "d", "m360 226 1 6c1 3 2 4 4 2 3-1 5 0 6 2 1 3 0 5-3 7h-11c-4-3-7-4-11-4a211 211 0 0 1-43-5 54 54 0 0 1-14-5c-9-5-18-11-27-14a34 34 0 0 0-15-3l1-1c5-6 10-12 11-20 0-2 0-3-2-4s-1-1-1-3a25 25 0 0 1 6-6c3 4 8 4 12 5 7 1 13 3 18 7s10 6 15 6l35 5h8l3 1c4 1 5 4 3 7a14 14 0 0 1-12 7l-26-1a4 4 0 0 0 3 2l25 8c3 0 6 2 9 1l1-1 4 1Z");
			add_location(path14, file$2, 109, 6, 5471);
			attr_dev(path15, "fill", "var(--pants)");
			attr_dev(path15, "d", "M262 178a25 25 0 0 0-6 6l1 3 2 4c-1 8-6 14-11 20l-1 1a53 53 0 0 1-9 7c-3 2-5 2-7 0l-6-6a13 13 0 0 0-9-4 63 63 0 0 1-16-3c-6-3-11-7-15-13a27 27 0 0 0-1-8c6-7 13-13 21-18 3-2 6-3 10-3 4-1 4-1 5-5 5-1 8 0 12 4 1 3 5 3 8 4a140 140 0 0 1 20 9l2 2Z");
			add_location(path15, file$2, 113, 6, 5849);
			attr_dev(path16, "fill", "var(--flesh)");
			attr_dev(path16, "d", "M150 101c0 6 3 12 4 17a27 27 0 0 1 1 6l-12 3c-4 0-5 2-3 6a145 145 0 0 1 6 16l1 2c1 3 0 6 3 9l5 2c5 2 7 3 7 10l-2 6-4 4c-4-1-4-1-4-5-1-5-4-7-8-8a5 5 0 0 1-3-4 20 20 0 0 0-3-9c-3-3-4-8-6-11a100 100 0 0 1-6-13c-1-3-1-5-3-7-1-6 3-9 7-11a222 222 0 0 1 20-13Z");
			add_location(path16, file$2, 117, 6, 6153);
			attr_dev(path17, "fill", "var(--hair)");
			attr_dev(path17, "d", "M210 61a18 18 0 0 0-6-2c-3 0-5 2-4 5 1 2 2 4-1 5-3 2-2 5-3 8a10 10 0 0 1 0 2 2 2 0 0 1-2 2l-1-2a51 51 0 0 0 0-5c0-2-1-4-4-4-2 0-3 1-3 3l-1 6a5 5 0 0 1-3 5h-1c-3-7-6-14-6-21 0-6 6-11 11-12 7-1 14 1 21 2h3c1 0 3 0 4 2s0 2-1 4a30 30 0 0 1-3 2ZM357 225l-2 1a131 131 0 0 0-14-9s-2 0 0-1a1 1 0 0 0 1 0h2a14 14 0 0 0 12-7c2-3 1-6-3-7h-3l1-2c10 1 17-3 23-10a13 13 0 0 1 5-4c3-1 5 0 5 3-1 7-2 13-7 17l-20 19Z");
			add_location(path17, file$2, 121, 6, 6468);
			attr_dev(path18, "fill", "var(--cool500)");
			attr_dev(path18, "d", "m160 178 2-6c0-7-2-8-7-10l-5-2c-3-3-2-6-3-9l14-3c2 0 3-1 3-3l1 5a36 36 0 0 1 2 7 14 14 0 0 0 3 8 16 16 0 0 1 3 6c0 4 2 7 4 11l2 5h3a11 11 0 0 0 2-2 27 27 0 0 1 1 8c-5 1-6-2-7-6l-6-16h-3Z");
			add_location(path18, file$2, 125, 6, 6928);
			attr_dev(path19, "fill", "var(--flesh)");
			attr_dev(path19, "d", "M212 75c-1-1-2-2-1-3v-6a21 21 0 0 1-1-5 18 18 0 0 0-6-2c-3 0-5 2-4 5 1 2 2 4-1 5-3 2-3 5-3 8a10 10 0 0 1 0 2 2 2 0 0 1-2 2l-1-2a51 51 0 0 0 0-5c-1-2-1-4-4-4-2 0-3 1-3 3l-1 6a5 5 0 0 1-3 5h-1c1 2 0 3-2 4a22 22 0 0 1 9 1l6 8 1 1c0 2 1 4 3 4l1-4a3 3 0 0 1 4-2c3-1 7-1 7-6l1-1a6 6 0 0 0 1-5v-2c4-2 2-4 0-7ZM341 216a1 1 0 0 1 1 0 1 1 0 0 1-1 0Z");
			add_location(path19, file$2, 129, 6, 7178);
			attr_dev(g1, "id", "tri-dip-2");
			attr_dev(g1, "class", "svelte-1832iey");
			add_location(g1, file$2, 96, 4, 4257);
			attr_dev(g2, "class", "shapes svelte-1832iey");
			add_location(g2, file$2, 49, 2, 943);
			attr_dev(g3, "class", "svelte-1832iey");
			toggle_class(g3, "paused", /*isPaused*/ ctx[1]);
			toggle_class(g3, "flip", /*flipsvg*/ ctx[2]);
			add_location(g3, file$2, 48, 0, 892);
			attr_dev(svg, "xmlns", "http://www.w3.org/2000/svg");
			attr_dev(svg, "viewBox", "0 0 423 249.7");
			attr_dev(svg, "height", "100%");
			attr_dev(svg, "width", "100%");
			attr_dev(svg, "class", "svelte-1832iey");
			add_location(svg, file$2, 47, 0, 799);
		},
		l: function claim(nodes) {
			throw new Error("options.hydrate only works if the component was compiled with the `hydratable: true` option");
		},
		m: function mount(target, anchor) {
			insert_dev(target, svg, anchor);
			append_dev(svg, t);
			append_dev(svg, g3);
			append_dev(g3, g2);
			append_dev(g2, g0);
			append_dev(g0, path0);
			append_dev(g0, path1);
			append_dev(g0, path2);
			append_dev(g0, path3);
			append_dev(g0, path4);
			append_dev(g0, path5);
			append_dev(g0, path6);
			append_dev(g0, path7);
			append_dev(g0, path8);
			append_dev(g0, path9);
			append_dev(g0, path10);
			append_dev(g2, g1);
			append_dev(g1, path11);
			append_dev(g1, path12);
			append_dev(g1, path13);
			append_dev(g1, path14);
			append_dev(g1, path15);
			append_dev(g1, path16);
			append_dev(g1, path17);
			append_dev(g1, path18);
			append_dev(g1, path19);
			/*g2_binding*/ ctx[4](g2);
			if (if_block) if_block.m(g3, null);
		},
		p: function update(ctx, [dirty]) {
			if (/*isPaused*/ ctx[1]) {
				if (if_block) ; else {
					if_block = create_if_block$2(ctx);
					if_block.c();
					if_block.m(g3, null);
				}
			} else if (if_block) {
				if_block.d(1);
				if_block = null;
			}

			if (dirty & /*isPaused*/ 2) {
				toggle_class(g3, "paused", /*isPaused*/ ctx[1]);
			}

			if (dirty & /*flipsvg*/ 4) {
				toggle_class(g3, "flip", /*flipsvg*/ ctx[2]);
			}
		},
		i: noop,
		o: noop,
		d: function destroy(detaching) {
			if (detaching) detach_dev(svg);
			/*g2_binding*/ ctx[4](null);
			if (if_block) if_block.d();
		}
	};

	dispatch_dev("SvelteRegisterBlock", {
		block,
		id: create_fragment$2.name,
		type: "component",
		source: "",
		ctx
	});

	return block;
}

function instance$2($$self, $$props, $$invalidate) {
	let { $$slots: slots = {}, $$scope } = $$props;
	validate_slots('Workout_tricepsdips', slots, []);
	let { direction = "right" } = $$props;
	let { isPaused = false } = $$props;
	let { rootElement } = $$props;
	let flipsvg = false;

	if (direction == "left") {
		flipsvg = true;
	}

	const writable_props = ['direction', 'isPaused', 'rootElement'];

	Object.keys($$props).forEach(key => {
		if (!~writable_props.indexOf(key) && key.slice(0, 2) !== '$$' && key !== 'slot') console.warn(`<Workout_tricepsdips> was created with unknown prop '${key}'`);
	});

	function g2_binding($$value) {
		binding_callbacks[$$value ? 'unshift' : 'push'](() => {
			rootElement = $$value;
			$$invalidate(0, rootElement);
		});
	}

	$$self.$$set = $$props => {
		if ('direction' in $$props) $$invalidate(3, direction = $$props.direction);
		if ('isPaused' in $$props) $$invalidate(1, isPaused = $$props.isPaused);
		if ('rootElement' in $$props) $$invalidate(0, rootElement = $$props.rootElement);
	};

	$$self.$capture_state = () => ({
		direction,
		isPaused,
		rootElement,
		flipsvg
	});

	$$self.$inject_state = $$props => {
		if ('direction' in $$props) $$invalidate(3, direction = $$props.direction);
		if ('isPaused' in $$props) $$invalidate(1, isPaused = $$props.isPaused);
		if ('rootElement' in $$props) $$invalidate(0, rootElement = $$props.rootElement);
		if ('flipsvg' in $$props) $$invalidate(2, flipsvg = $$props.flipsvg);
	};

	if ($$props && "$$inject" in $$props) {
		$$self.$inject_state($$props.$$inject);
	}

	return [rootElement, isPaused, flipsvg, direction, g2_binding];
}

class Workout_tricepsdips extends SvelteComponentDev {
	constructor(options) {
		super(options);

		init(this, options, instance$2, create_fragment$2, safe_not_equal, {
			direction: 3,
			isPaused: 1,
			rootElement: 0
		});

		dispatch_dev("SvelteRegisterComponent", {
			component: this,
			tagName: "Workout_tricepsdips",
			options,
			id: create_fragment$2.name
		});

		const { ctx } = this.$$;
		const props = options.props || {};

		if (/*rootElement*/ ctx[0] === undefined && !('rootElement' in props)) {
			console.warn("<Workout_tricepsdips> was created without expected prop 'rootElement'");
		}
	}

	get direction() {
		throw new Error("<Workout_tricepsdips>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
	}

	set direction(value) {
		throw new Error("<Workout_tricepsdips>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
	}

	get isPaused() {
		throw new Error("<Workout_tricepsdips>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
	}

	set isPaused(value) {
		throw new Error("<Workout_tricepsdips>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
	}

	get rootElement() {
		throw new Error("<Workout_tricepsdips>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
	}

	set rootElement(value) {
		throw new Error("<Workout_tricepsdips>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
	}
}

var workoutTricepsdips = /*#__PURE__*/Object.freeze({
    __proto__: null,
    'default': Workout_tricepsdips
});

/* src/workouts/workout-wormwalkouts.svelte generated by Svelte v3.49.0 */

const file$1 = "src/workouts/workout-wormwalkouts.svelte";

// (260:4) {#if isPaused}
function create_if_block$1(ctx) {
	let svg;
	let path;

	const block = {
		c: function create() {
			svg = svg_element("svg");
			path = svg_element("path");
			attr_dev(path, "d", "M10 24h-6v-24h6v24zm10 0h-6v-24h6v24zm-11-23h-4v22h4v-22zm10 0h-4v22h4v-22z");
			add_location(path, file$1, 260, 133, 18174);
			attr_dev(svg, "viewBox", "-6 -5 36 36");
			attr_dev(svg, "width", "100%");
			attr_dev(svg, "height", "100%");
			attr_dev(svg, "xmlns", "http://www.w3.org/2000/svg");
			attr_dev(svg, "fill-rule", "evenodd");
			attr_dev(svg, "clip-rule", "evenodd");
			add_location(svg, file$1, 260, 4, 18045);
		},
		m: function mount(target, anchor) {
			insert_dev(target, svg, anchor);
			append_dev(svg, path);
		},
		d: function destroy(detaching) {
			if (detaching) detach_dev(svg);
		}
	};

	dispatch_dev("SvelteRegisterBlock", {
		block,
		id: create_if_block$1.name,
		type: "if",
		source: "(260:4) {#if isPaused}",
		ctx
	});

	return block;
}

function create_fragment$1(ctx) {
	let svg;
	let t;
	let g6;
	let g5;
	let g0;
	let path0;
	let path1;
	let path2;
	let path3;
	let path4;
	let path5;
	let path6;
	let path7;
	let path8;
	let path9;
	let path10;
	let path11;
	let path12;
	let g1;
	let path13;
	let path14;
	let path15;
	let path16;
	let path17;
	let path18;
	let path19;
	let g2;
	let path20;
	let path21;
	let path22;
	let path23;
	let path24;
	let path25;
	let g3;
	let path26;
	let path27;
	let path28;
	let path29;
	let path30;
	let path31;
	let path32;
	let path33;
	let path34;
	let path35;
	let path36;
	let path37;
	let path38;
	let path39;
	let g4;
	let path40;
	let path41;
	let path42;
	let path43;
	let path44;
	let path45;
	let path46;
	let if_block = /*isPaused*/ ctx[1] && create_if_block$1(ctx);

	const block = {
		c: function create() {
			svg = svg_element("svg");
			t = text(">\n");
			g6 = svg_element("g");
			g5 = svg_element("g");
			g0 = svg_element("g");
			path0 = svg_element("path");
			path1 = svg_element("path");
			path2 = svg_element("path");
			path3 = svg_element("path");
			path4 = svg_element("path");
			path5 = svg_element("path");
			path6 = svg_element("path");
			path7 = svg_element("path");
			path8 = svg_element("path");
			path9 = svg_element("path");
			path10 = svg_element("path");
			path11 = svg_element("path");
			path12 = svg_element("path");
			g1 = svg_element("g");
			path13 = svg_element("path");
			path14 = svg_element("path");
			path15 = svg_element("path");
			path16 = svg_element("path");
			path17 = svg_element("path");
			path18 = svg_element("path");
			path19 = svg_element("path");
			g2 = svg_element("g");
			path20 = svg_element("path");
			path21 = svg_element("path");
			path22 = svg_element("path");
			path23 = svg_element("path");
			path24 = svg_element("path");
			path25 = svg_element("path");
			g3 = svg_element("g");
			path26 = svg_element("path");
			path27 = svg_element("path");
			path28 = svg_element("path");
			path29 = svg_element("path");
			path30 = svg_element("path");
			path31 = svg_element("path");
			path32 = svg_element("path");
			path33 = svg_element("path");
			path34 = svg_element("path");
			path35 = svg_element("path");
			path36 = svg_element("path");
			path37 = svg_element("path");
			path38 = svg_element("path");
			path39 = svg_element("path");
			g4 = svg_element("g");
			path40 = svg_element("path");
			path41 = svg_element("path");
			path42 = svg_element("path");
			path43 = svg_element("path");
			path44 = svg_element("path");
			path45 = svg_element("path");
			path46 = svg_element("path");
			if (if_block) if_block.c();
			attr_dev(path0, "fill", "var(--pants)");
			attr_dev(path0, "d", "m157 338 8-2c1 6 2 13 5 18a31 31 0 0 1 5 29c-3 9 6 14 6 22 0 1 3 2 4 0 3-5 3 2 5 1-3 13-1 26-3 39l-1 10c-2 13-2 13-15 15l-58 3c-13-2-13-2-13-14 0-27-3-53-12-78-4-12-5-25-4-37 7 6 14 5 22 3 11-3 21-6 32-6h9c5 2 7 0 10-3Z");
			add_location(path0, file$1, 94, 6, 1489);
			attr_dev(path1, "fill", "var(--shirt)");
			attr_dev(path1, "d", "M177 303Z");
			add_location(path1, file$1, 98, 6, 1770);
			attr_dev(path2, "fill", "var(--hair)");
			attr_dev(path2, "d", "M114 80Z");
			add_location(path2, file$1, 99, 6, 1819);
			attr_dev(path3, "fill", "var(--hair)");
			attr_dev(path3, "d", "M200 678c3-2 5-5 3-8-1-4-3-6-7-6s-8-2-12-4a197 197 0 0 1-29-17c-4-3-7-5-7-10 0-2-1-7-5-3a3 3 0 0 1-2-1c-2 1-2 3-3 5 2 5 0 8-5 10 0 3 0 6-2 9-4 3-9 4-12 11-4 8-14 5-19-6l-4-7v1c-2-1-4-1-3-4 0-2 1-3 3-3a1 1 0 0 1 1 0c-1-1-1-4-4-3-2 1-3 3-3 5 0 5-1 11 1 17v3l1 8a6 6 0 0 0 1-1 6 6 0 0 1-1 2c1 4-2 8 1 12a3 3 0 0 0 2 3c6 4 12 5 19 6a3 3 0 0 0 3 1h4l9 3 2 1 12 6 4 1c7 2 14 1 21 0 9-1 17-3 25-8 6-4 8-11 4-16-3-4-1-5 2-7Zm-107-7a6 6 0 0 0 0-1 6 6 0 0 1 0 1Zm0 3a3 3 0 0 0 1-1 3 3 0 0 1 0 1Z");
			add_location(path3, file$1, 100, 6, 1866);
			attr_dev(path4, "fill", "var(--shirt)");
			attr_dev(path4, "d", "M192 334ZM194 335Z");
			add_location(path4, file$1, 104, 6, 2412);
			attr_dev(path5, "fill", "var(--pants)");
			attr_dev(path5, "d", "M157 338c-3 3-5 5-10 3h-9c7-2 13-4 19-3Z");
			add_location(path5, file$1, 105, 6, 2470);
			attr_dev(path6, "fill", "var(--hair)");
			attr_dev(path6, "d", "M184 5c-2-5-7-3-11-3-3 0-7 1-10-2h-30c-3 4-8 3-13 4-15 3-24 14-23 30s4 31 9 46a5 5 0 0 0 1 6c4-1 6-2 7-5 8-7 2-15 1-22-1-6 0-9 4-13 7-1 11 2 13 8 2 8 6 9 12 3a17 17 0 0 0 2-3 15 15 0 0 1-1-2l1 2 2-4c1-6 3-11 9-14 4-2 4-6 4-9-2-8 1-11 9-8l8 4 2-3a28 28 0 0 0 2-3c2-4 5-8 2-12Z");
			add_location(path6, file$1, 109, 6, 2572);
			attr_dev(path7, "fill", "var(--hair)");
			attr_dev(path7, "d", "M96 652c-2-1-3-1-3-4 0-2 1-3 3-3v2h-1a7 7 0 0 0 1 1v2Z");
			add_location(path7, file$1, 113, 6, 2908);
			attr_dev(path8, "fill", "var(--pants)");
			attr_dev(path8, "d", "M96 650v-2l1 1a8 8 0 0 0-1 1Z");
			add_location(path8, file$1, 117, 6, 3023);
			attr_dev(path9, "fill", "var(--pants)");
			attr_dev(path9, "d", "M96 648a7 7 0 0 1-1-1h1a1 1 0 0 1 0 1Z");
			add_location(path9, file$1, 118, 6, 3092);
			attr_dev(path10, "fill", "var(--shirt)");
			attr_dev(path10, "d", "M191 312c-7-37-8-74-6-111 1-10 0-20-5-29-2-10-6-18-11-26-1-5-4-8-6-11a40 40 0 0 0-9-14c0-2-1-3-3-4-3 1-2 3-2 6-1 6-3 8-8 5-3-2-6-2-10-2-5-7-12-9-20-11l-9-13c-8 6-9 16-14 24-4 7-5 15-11 21v29a192 192 0 0 1 13 90c-2 11-1 23-5 33-6 15-3 30-1 45 7 6 14 5 22 3 11-3 21-6 32-6 7-2 13-4 19-3l8-2a18 18 0 0 0-6-11c-9-9-15-20-25-28-7-6-11-16-14-26-1-3-4-6-3-11-1 0-2 3-2 0v-17l1-1c-4-3-2-7-3-11-3-8-6-16-5-25-5-2-1-6-2-9a46 46 0 0 1 0-13c12 4 24 1 36 2 2 0 6-1 7 3a7 7 0 0 0 1 0 7 7 0 0 1-1 0l-1 35c0 5 1 10 4 14l7 19c2 3 5 7 4 12 4 0 1 5 4 6l1 3 1 5c4 4 5 9 5 14 4 1 3 4 3 6 2 0 3 1 3 3v3c5 2 4 8 6 12 1 3 1 7 6 8 2-6 0-11-1-17Zm-38-115-1-1v-1l2 1-1 1Zm10-11a3 3 0 0 0-1-2 3 3 0 0 1 1 2Zm-1 20a99 99 0 0 1 2 15 99 99 0 0 0-2-15Zm6 65a21 21 0 0 0 1-3 21 21 0 0 1-1 3Z");
			add_location(path10, file$1, 122, 6, 3192);
			attr_dev(path11, "d", "m152 195 2 1-1 1-1-1Z");
			attr_dev(path11, "fill", "var(--shirt)");
			add_location(path11, file$1, 126, 6, 4012);
			attr_dev(path12, "fill", "var(--flesh)");
			attr_dev(path12, "d", "m194 335-2-1v-5c-5-1-5-5-6-8-2-4-1-9-6-12v-3a2 2 0 0 1-3-2 2 2 0 0 0 3 2c0-2-1-3-3-3 0-2 1-5-3-6v6a4 4 0 0 0-2 2 4 4 0 0 1 2-2v-6c0-5-1-10-5-14l-1-5-1-3c-3-1 0-6-4-6 1-5-2-9-4-12l-7-19c-3-4-4-9-4-14l1-35c-1-4-5-3-7-3-12-1-24 2-36-2a46 46 0 0 0 0 14c1 2-3 6 2 8-1 9 2 17 5 25 1 4-1 8 3 11l-1 1v18c0 2 1-1 2 0-1 4 2 7 3 10 3 10 7 20 14 26 10 8 16 19 25 28a18 18 0 0 1 6 11c1 6 2 13 5 18a31 31 0 0 1 5 29c-3 9 6 14 6 22 0 1 3 2 4 0 3-5 3 2 5 2 7 0 6-7 9-10 2 2 0 6 3 6s3-3 4-6l4-13c1-10 1-21-5-30l-11-19ZM103 520a58 58 0 0 0-5 9c-4 8-8 17-8 27l5 51c1 13 3 25 2 38a1 1 0 0 0-1 0v2a1 1 0 0 1 0 1l1 1a10 10 0 0 0-1 1v2l3 7c6 10 16 13 20 5 3-7 8-8 12-11 2-3 2-6 2-9 5-2 7-5 5-10 1-2 1-4 3-4v-9l-1-4c2-15-1-30 0-44v-6c2-2 1-4 1-7 2-11 1-23 7-32 12-18 17-38 23-58-19 0-39 3-59 3 3 16 0 32-9 47Zm-3 138v-2 2Zm37-31a9 9 0 0 0 0 2 5 5 0 0 0 0 1 5 5 0 0 1 0-1 9 9 0 0 1 0-2 12 12 0 0 1 1-1 12 12 0 0 0-1 1Zm6-95-2-5 2 5Zm-2-5a6 6 0 0 0-3 0 6 6 0 0 1 3 0ZM96 648ZM107 86c-2 5-1 11-5 16l9 13c7 2 15 4 20 11 4 0 7 0 10 2 5 3 7 1 8-5 0-2-1-5 2-6-2-11 5-18 16-16 4 0 11 1 12-4 1-8 8-14 7-22a5 5 0 0 1 1-4c4-4 3-8 0-12-2-3-6-6-5-9 2-10-3-18-4-27l-8-4c-8-3-11 0-9 8 0 3 0 8-4 9-6 3-8 8-9 14l-2 4a16 16 0 0 1-2 3c-6 6-10 5-12-3-2-6-6-9-13-8-5 4-5 8-4 13 1 7 7 15-1 22-1 3-3 4-7 5Z");
			add_location(path12, file$1, 127, 6, 4073);
			attr_dev(g0, "id", "ww-1");
			attr_dev(g0, "class", "svelte-113wbwi");
			add_location(g0, file$1, 93, 4, 1469);
			attr_dev(path13, "fill", "var(--flesh)");
			attr_dev(path13, "d", "M722 576c2 6 6 11 12 13 10 4 15 11 21 18l14 16 8 4a15 15 0 0 1 6 3c1 2 2 3-1 4-2 0-1 1 0 2 5 6 10 9 18 9 7 0 14-1 21 1l26 8c3 0 3 4 6 4v2c-8 8-17 4-26 3a35 35 0 0 0-9 0 77 77 0 0 1-27-2c-6-1-11-4-16-8l-23-16c-3-3-7-3-11-2-6 1-10 0-14-5-3-4-8-6-13-9l-47-28c-3-3-7-5-11-6 4 2 6-2 9-4 1-1 0-2-1-2l-4-3c-1-2-2-5-6-5l-6-5c-1-2 0-4 3-5 6-2 10-2 14 4l8 9c2 3 6 5 9 2 7-7 15-12 20-21a5 5 0 0 1 3-3l10 13c2 3 3 7 7 9Zm-13 23-12-8c3 8 6 10 12 8Z");
			add_location(path13, file$1, 133, 6, 5421);
			attr_dev(path14, "fill", "var(--shirt)");
			attr_dev(path14, "d", "M705 554a5 5 0 0 0-3 3c-5 9-13 14-20 21-3 3-7 1-9-2l-8-9c-4-6-8-6-14-4-3 1-4 3-3 5 2 2 3 4 6 5 4 0 5 3 6 5s2 3 4 3 2 1 1 2c-3 2-5 6-9 4-3-1-5-4-7-6l-14-12-5-1c-20 3-39 7-59 9-16 2-31 6-47 9a83 83 0 0 0-12 4c-5 2-8 1-10-4l-2-6a12 12 0 0 0 0-3l-13-52c-2-8-5-15-5-23a28 28 0 0 1 12 1c5 2 10-1 14-2 6-2 12-4 18-4 3 0 5 0 7-2h7c14-4 28-5 42-7h39a77 77 0 0 1 19 3 54 54 0 0 0 12 3c7 0 13 3 17 9l6 8c2 3 6 5 9 5l-1 1 7 11c5 3 8 8 10 13a15 15 0 0 0 3 6c2 2 3 4 2 7Z");
			add_location(path14, file$1, 137, 6, 5918);
			attr_dev(path15, "fill", "var(--flesh)");
			attr_dev(path15, "d", "M180 619c12-1 23-5 35-9a3 3 0 0 0 3-2c5 0 10-3 15-4 6-2 6-3 2-7-6-6-7-12-3-20a8 8 0 0 0 2-4c16 0 31-4 46-8l26-5c9-1 17-1 25 1 16 5 29 1 43-5a22 22 0 0 1 8-3c1 2 1 5 3 7s1 4-1 4c-2 1-2 3-2 5l2 21c1 9 1 17 5 25l-14 3a96 96 0 0 0-13 3c-6 3-12 2-19 3-10 3-19 2-29 1-8-1-14 2-21 4-10 3-21 4-32 6-13 2-26 1-39 4-8 2-15 5-22 9l-4 2c-3-2-6-1-8 2-1 1-2 2-3 1-3-4-8-4-12-7-6-6-7-13-2-19l9-8Zm84-27a29 29 0 0 0-16 3s-2 0-1 2a2 2 0 0 0 3 1l14-6Z");
			add_location(path15, file$1, 141, 6, 6437);
			attr_dev(path16, "fill", "var(--pants)");
			attr_dev(path16, "d", "M389 615c-4-8-4-16-5-25l-2-21c0-2 0-4 2-5 2 0 3-2 1-4s-2-5-3-7c0-3 1-4 4-5 13-3 25-9 38-14a8 8 0 0 0 4-4c4-7 11-12 18-16l27-12a13 13 0 0 1 9 0c0 8 3 15 5 23l13 52a12 12 0 0 1 0 3l-13 10c-9 8-19 13-31 14l-27 4c-11 2-21 7-31 12-5 3-5 3-7-2l-2-3Z");
			add_location(path16, file$1, 145, 6, 6932);
			attr_dev(path17, "fill", "var(--hair)");
			attr_dev(path17, "d", "m180 619-9 8c-5 6-4 13 2 19 4 3 9 3 12 7 1 1 2 0 3-1 2-3 5-4 8-2 1 1 2 3 0 5-5 5-6 11-6 18a19 19 0 0 1 0 4c0 11 5 12 14 13 8 0 11 5 9 11a6 6 0 0 1-4 4c-13 3-25 4-38 1-9-2-14-9-17-17l-17-47a29 29 0 0 1-1-13c1-1 1-3 3-3 2 1 4-1 6-2a24 24 0 0 1 8-3l25-4c1 0 3 0 2 2ZM705 554c1-3 0-5-2-7a15 15 0 0 1-3-6c-2-5-4-10-10-13l-7-11 1-1a6 6 0 0 0 2 1c12-1 22 5 32 10 8 4 14 15 12 23-2 9-3 18-8 26-4-2-5-6-7-9l-10-13ZM234 573a8 8 0 0 1-2 4c-4 8-3 14 3 20 4 4 4 5-2 7-5 1-10 4-15 4-5-8-10-17-13-27l-1-4c0-2 0-4 3-3l3 1c8-5 16-3 24-2Z");
			add_location(path17, file$1, 149, 6, 7237);
			attr_dev(path18, "fill", "var(--flesh)");
			attr_dev(path18, "d", "m699 568 5-8a1 1 0 0 1 1-1l2 1 4 7c-4-1-8 0-12 1Z");
			add_location(path18, file$1, 153, 6, 7818);
			attr_dev(path19, "fill", "var(--hair)");
			attr_dev(path19, "d", "M709 599c-6 2-9 0-12-8Z");
			add_location(path19, file$1, 157, 6, 7929);
			attr_dev(g1, "id", "ww-5");
			attr_dev(g1, "class", "svelte-113wbwi");
			add_location(g1, file$1, 132, 4, 5401);
			attr_dev(path20, "fill", "var(--pants)");
			attr_dev(path20, "d", "m29 517 5-16 12 3c9 0 18-3 26-7s16-5 24-2c5 2 9 4 14 4l26 5-8 8c-9 11-14 25-18 39-1 6-4 12-8 18-3 5-8 5-14 3l-22-6c-19-6-31-18-36-37a5 5 0 0 0-1-1Z");
			add_location(path20, file$1, 160, 6, 8018);
			attr_dev(path21, "fill", "var(--shirt)");
			attr_dev(path21, "d", "m136 504-26-5c-5 0-9-2-14-4-8-3-16-2-24 2s-17 7-26 7c-5 0-8-2-12-3a38 38 0 0 1 13-18l51-38c10-8 21-15 33-20 9-4 18-7 28-9 11-3 23-7 35-9l19-3 3 2 4 3a125 125 0 0 0 8 19c3 5 5 10 10 14 0 4 2 6 3 10s2 9 0 14l-13 31a21 21 0 0 0-1 5c-1 7-3 10-11 10h-3c-2-1-1-3-1-4 0-3-1-6-4-6l-7-4c-5-3-5-3-5 3-2 0-1 1-1 2l-1 8-3 1c-6 1-11-2-16-2-4 1-8-1-11-2-9-2-19-4-28-4Z");
			add_location(path21, file$1, 164, 6, 8227);
			attr_dev(path22, "fill", "var(--hair)");
			attr_dev(path22, "d", "M217 400c-2-1-3-3-2-5a20 20 0 0 0 1-7c0-12 6-22 11-32s17-15 28-13l16 4a17 17 0 0 1 6 3l12 6 16 8c3 2 3 5 2 8-3 5-7 6-11 8l-7-5c-6-3-9-1-9 6-1 4-2 7-6 8-5 1-7 4-8 9a27 27 0 0 1-1 2c-1 3-3 3-5 2s-3-2-2-4a14 14 0 0 0 1-5c0-4-1-7-4-8s-6-1-9 1c-4 3-6 7-8 12s-5 6-10 6l-11-4Z");
			add_location(path22, file$1, 168, 6, 8643);
			attr_dev(path23, "fill", "var(--flesh)");
			attr_dev(path23, "d", "m217 400 11 4c5 0 8-1 10-6s4-9 8-12c3-2 6-3 9-1s4 4 4 8a14 14 0 0 1-1 5c-1 2 0 3 2 4s4 1 5-2a27 27 0 0 0 1-2c1-5 3-8 8-9 4-1 5-4 6-8 0-7 3-9 9-6l7 6-2 8c-1 5-2 10-5 13-2 3-2 5-1 8l1 6c1 4-1 6-5 7l-3 1c0 4-3 6-4 9-5 1-7 6-10 9-2 2-5 0-8 0a13 13 0 0 1-4-2c-7-4-7-4-14 1a7 7 0 0 1-3 1l-10-14a125 125 0 0 1-8-19l-4-3-2-2c0-2 1-3 3-4Z");
			add_location(path23, file$1, 172, 6, 8973);
			attr_dev(path24, "fill", "var(--hair)");
			attr_dev(path24, "d", "m118 661 2 7c5 10 18 12 27 5 1-1 2-2 1-4a23 23 0 0 1 1-3 3 3 0 0 1 3-2c2 0 1 1 1 2 0 4 2 7 5 9a128 128 0 0 0 23 12l17 8c3 1 6 2 6 6s-3 5-5 6c-6 4-13 5-21 5-14 0-28-3-42-7l-22-5a28 28 0 0 1-7-3c-2-2-4-3-2-6 1-4 0-8 2-12l4-11a10 10 0 0 0 3-6v-2c2-1 3 0 4 1ZM212 639c-9-1-18-2-25-9-2-2-2-3 0-5l13 3 10 4c3 2 4 4 2 7ZM150 649c3-7 9-13 15-19l-2 16c0 2-1 2-2 2Z");
			add_location(path24, file$1, 176, 6, 9364);
			attr_dev(path25, "fill", "var(--flesh)");
			attr_dev(path25, "d", "M228 681c-3-3-5-7-9-8a129 129 0 0 1-19-8c-2-1-5-3-5-5a15 15 0 0 0-3-8v-2h2c5 1 9 3 14 3 6 1 12 4 17-2 2-3 3-4 0-5l-7-2c-1-1-4-1-1-3 1-1 0-2-1-2h-4c-9-1-18-2-25-9-1-2-2-3 0-5-1-6 1-12 2-18 0-5 3-10 5-15 5-11 9-21 16-31 7-8 10-19 4-30-3-6-1-11-2-17l1-2c-2-1-1-3-1-4 0-3-1-6-4-7l-7-3c-5-3-5-3-5 3l-1 2-1 8-3 1c-6 1-11-2-16-2-4 1-8-1-11-2-9-2-19-4-28-4l-8 8c-9 11-14 25-18 39-1 6-4 12-8 18 12 1 24 0 35-4l22-8h1-1l-1 2c-6 6-10 13-13 22l-10 36c-1 6-4 11-4 17-2 1-2 2-2 3l-4 12c-2 4-4 9-7 12l2 7c5 10 18 12 27 5 1-1 2-2 1-4l-1-1c-4-5-2-15 3-19 3-7 9-13 15-19l-2 16c0 2-1 2-2 2a6 6 0 0 1 1 5 17 17 0 0 0 4 12c3 4 8 6 14 8s10 3 13 8a20 20 0 0 0 11 7c4 2 5 1 6-4l5 4h4c2-4 5-3 8-4 2 0 2-2 1-3Z");
			add_location(path25, file$1, 180, 6, 9780);
			attr_dev(g2, "id", "ww-3");
			attr_dev(g2, "class", "svelte-113wbwi");
			add_location(g2, file$1, 159, 4, 7998);
			attr_dev(path26, "fill", "var(--hair)");
			attr_dev(path26, "d", "M173 719c-6-3-12-2-19-4l-47-11a28 28 0 0 1-7-3c-3-2-4-5-3-9l2-11a41 41 0 0 1 6-15 14 14 0 0 0 3-8c0-1-1-2 1-3l3 2a19 19 0 0 1 2 4l-1 1a5 5 0 0 0 0 1c0 7 9 16 15 16h7l12-4c6-3 5-9 4-14 2-1 4-2 4 2-1 6 3 9 8 12a160 160 0 0 0 26 14l19 8a32 32 0 0 1 5 3c5 3 5 7 1 11s-11 6-17 7l-3 1h-4a10 10 0 0 0-10 0Z");
			add_location(path26, file$1, 186, 6, 10553);
			attr_dev(path27, "fill", "var(--pants)");
			attr_dev(path27, "d", "M180 719a10 10 0 0 1 10 0Z");
			add_location(path27, file$1, 190, 6, 10913);
			attr_dev(path28, "fill", "var(--shirt)");
			attr_dev(path28, "d", "M24 436ZM183 320Z");
			add_location(path28, file$1, 191, 6, 10979);
			attr_dev(path29, "fill", "var(--hair)");
			attr_dev(path29, "d", "M151 293c-2-7-6-12-10-18a16 16 0 0 1-2-7l-2-16c-1-15 8-27 23-31 13-3 27-3 40-2l17 1c5 0 7 3 6 8 0 5-3 8-6 12a27 27 0 0 0-10-2c-6 0-9 4-6 9 1 4 2 8-1 10-5 5-5 10-5 16 1 4-2 6-5 5s-1-4-3-5a5 5 0 0 0-1-4 8 8 0 0 0-8-6c-4-1-6 2-8 5a30 30 0 0 0-3 14c0 4 1 8-2 11h-12Z");
			add_location(path29, file$1, 192, 6, 11036);
			attr_dev(path30, "fill", "var(--hair)");
			attr_dev(path30, "d", "m180 598 7 2 1 2 1-2 14 4c3 2 5 3 5 7s-2 4-5 6c-9 4-18 4-27 4l-5-1a14 14 0 0 1 2-7c2-3 5-6 4-11 3 1 4 0 3-3v-1Z");
			add_location(path30, file$1, 196, 6, 11359);
			attr_dev(path31, "fill", "var(--hair)");
			attr_dev(path31, "d", "m113 662 3 6c6 11 15 10 25 7 5-2 9-4 8-11l1-3a1 1 0 0 1 1 0c1 5 2 11-4 14l-12 4h-7c-6 0-15-9-15-16a5 5 0 0 1 0-1ZM177 602c1 5-2 8-4 11a14 14 0 0 0-2 7h-3c1-2 0-2-2-2a91 91 0 0 1 11-16ZM189 600l-1 2-1-2ZM164 620l2-2 1 2Z");
			add_location(path31, file$1, 200, 6, 11531);
			attr_dev(path32, "fill", "var(--hair)");
			attr_dev(path32, "d", "m167 620-1-2c2 0 3 0 2 2Z");
			add_location(path32, file$1, 204, 6, 11811);
			attr_dev(path33, "fill", "var(--hair)");
			attr_dev(path33, "d", "m128 622-2 5c-12 0-15-4-10-15 2-7 6-15 14-18 0 3 4 2 5 4a1 1 0 0 0 0 1l-4 13Z");
			add_location(path33, file$1, 205, 6, 11875);
			attr_dev(path34, "fill", "var(--shirt)");
			attr_dev(path34, "d", "M232 371c0-3-5-5-5-9l-14-20c-4-6-8-11-16-14l-5-4c-3-2-5-4-9-4a26 26 0 0 0-10-8h-2c-3-4-8-6-10-10h-12a20 20 0 0 1-8 6 244 244 0 0 0-45 44l-19 28a1 1 0 0 1-1 1 3 3 0 0 1-1 3 1 1 0 0 1-1 1 2 2 0 0 1 0 1 2 2 0 0 0 0-1 2 2 0 0 0-2 2l-1 1c0 2-2 3-4 5l-10 9a39 39 0 0 1-13 13 20 20 0 0 0-8 8 8 8 0 0 1 0 5 8 8 0 0 0 0-5l-3 2-1 4c-2 3-4 5-8 7l-2 4h-2l-7 9a11 11 0 0 0 3-1 11 11 0 0 1-3 1 5 5 0 0 0-4 5l13 7a34 34 0 0 0 7 6c3 2 7 2 9 5 14 2 27-3 40-7a1 1 0 0 1 1 0l2-2 5-2a3 3 0 0 1 5 2l4-1a17 17 0 0 1 15-1c4 2 8 0 10-4a1 1 0 0 0 1 0 7 7 0 0 1 0-2 7 7 0 0 0 0 2l18-11a9 9 0 0 1 1-1l17-18c10-7 17-18 23-29 2-3 3-3 7-1 7 4 7 4 13-2l19-10c2-1 4-4 6-4 0-3 1-5 4-5 0-2 1-3 3-5ZM74 463h-1 1Zm-1-77a1 1 0 0 0 1 0 1 1 0 0 1-1 0Zm-2 76Zm2 1a4 4 0 0 1-1 0 4 4 0 0 0 1 0Zm-1 0Zm0 0a3 3 0 0 1-1 0 3 3 0 0 0 1 0Zm-4 1h-1 1Zm-1-1a4 4 0 0 0-1 0 4 4 0 0 1 1 0Zm0 1v-1 1Zm1 1a2 2 0 0 1-1 0 2 2 0 0 0 1 0Zm-1 0Zm0 0h-1Zm-1-2Zm-6 3a2 2 0 0 1 2-1 2 2 0 0 0-2 1Zm7 1a12 12 0 0 0 6-2 12 12 0 0 1-6 2Zm13-4h-5 5l7-4-7 4Zm16-5a8 8 0 0 1 4-1 8 8 0 0 0-4 1Zm49-23 3-2a9 9 0 0 1-3 2Z");
			add_location(path34, file$1, 209, 6, 12013);
			attr_dev(path35, "fill", "var(--hair)");
			attr_dev(path35, "d", "M180 599c1 3 0 4-3 3l1-3Z");
			add_location(path35, file$1, 213, 6, 13123);
			attr_dev(path36, "d", "m139 446-18 11a1 1 0 0 1-1 0c-2 4-6 6-10 4a17 17 0 0 0-15 1l-4 1a3 3 0 0 0-5-2l-5 2-2 2 3 1-1 1c-1 0-2 0-3-2-13 4-26 9-40 7a6 6 0 0 1 2 3 6 6 0 0 0-2-3 19 19 0 0 1-8 1 19 19 0 0 0 8-1c-2-3-6-3-9-5a34 34 0 0 1-7-6l-13-7c-5 4-6 11-9 16v21l1 3c2 14 11 21 23 27a5 5 0 0 0 1 1c20 11 42 19 63 29 2 1 3 1 5-1a57 57 0 0 0 10-12l10-31v-2l3-6c6-13 12-25 24-32-1-2-2-2-4-2s-2-1-1-3c3-3 5-8 10-10 0-2 1-2 2-3-2-3-6-2-8-3Zm-98 34Zm4 1Zm1 0Zm36-11-2 1 2-1Zm8 0a3 3 0 0 0 0-1 3 3 0 0 1 0 1Zm0-1a4 4 0 0 0-1-2 3 3 0 0 1 0-2 3 3 0 0 0 0 2 4 4 0 0 1 1 2Z");
			attr_dev(path36, "fill", "var(--pants)");
			add_location(path36, file$1, 214, 6, 13187);
			attr_dev(path37, "fill", "var(--pants)");
			attr_dev(path37, "d", "m79 465 3 1-1 1c-1 0-2 0-3-2a1 1 0 0 1 1 0Z");
			add_location(path37, file$1, 218, 6, 13785);
			attr_dev(path38, "fill", "var(--flesh)");
			attr_dev(path38, "d", "M297 314c-3-2-5-7-10-4l-4-2c-4-3-9-4-11-2-4 3-10 3-10 10a28 28 0 0 1-2-4c-1-1-1-3-3-2l-2 2c-2 9-3 17 1 26 1 3 3 6 6 6l3 3c6 3 6 8 5 15-1 5-3 9-2 14a18 18 0 0 0-5 9v1a4 4 0 0 0-3 2c-2 4-4 4-7 1-7-5-14-10-19-17l-2-1c-2 2-3 3-3 6-2-1-4 1-4 4-2 0-4 3-6 4l-19 10 21 20c9 7 18 15 29 20l8 5a10 10 0 0 0 6 2c3 2 6 1 10 1l5-1a7 7 0 0 0 6-4 3 3 0 0 0 2-3c2-2 2-4 2-7v-3a1 1 0 0 0 1 0v-14l1-2 1-16v-24l2-8 1-4c0-4 0-8 2-10v-3c1-6 1-13 3-19a14 14 0 0 0-1-9l-2-2Zm-5 24v-1 1Zm0 5v-3 3Zm-20 50a3 3 0 0 0 0-1 3 3 0 0 1 0 1Zm0-5Zm-9-44Zm-19 45v1ZM213 491l-4-3a2 2 0 0 0-2-2 5 5 0 0 1-3 1 5 5 0 0 0 3-1c-5-1-6-4-5-9l2-4c4-8-7-19-15-20l-42-4c-1 1-2 1-2 3-5 2-7 7-10 10-1 2 0 3 2 3l4 2c-13 7-19 19-25 32l-3 6v2l-10 31c12-1 25-1 37-6 3-1 4 0 3 3a80 80 0 0 0-3 15l-1 4a26 26 0 0 0-2 10h1-1v3l-4 13c-1 5-5 9-3 14 0 3 4 2 5 4a1 1 0 0 0 0 1l-4 13-2 10-3 5c-2 12-8 22-12 34l-1 1 3 6c6 11 15 10 25 7 5-2 9-4 8-11l1-3a37 37 0 0 1 2-18 116 116 0 0 1 12-23l2-2a91 91 0 0 1 11-16l1-3h-1 3v-1a20 20 0 0 1 2-4l14-27a74 74 0 0 1 11-19c3-4 7-7 7-12 4-4 5-9 6-14 2-3 2-7 2-10 0-8-1-16-9-21Zm-64-35Zm-12 133a6 6 0 0 1 0 1 5 5 0 0 1 0 1 5 5 0 0 0 0-1 6 6 0 0 0 0-1Zm2 2a4 4 0 0 0-1 0 4 4 0 0 1 1 0Zm9-135Zm-31 205Zm0 2v1-1ZM151 302h10c2 4 7 6 10 10h2a26 26 0 0 1 10 8c4 0 6 2 9 4l1-5c2-2 5-3 8-3h8c6 1 9-1 9-7 1-1 0-3 2-5 4-4 5-8 3-14 0-2 1-3 3-3 3-2 3-5 2-8a26 26 0 0 0-3-4c-3-4-6-8-4-14 1-2 0-4-1-6-1-5-3-10-3-16a27 27 0 0 0-10-1c-6 0-9 4-6 9 1 4 2 8-1 10-5 5-5 10-5 16 1 4-2 6-5 5s-1-4-3-5a5 5 0 0 0-1-4 8 8 0 0 0-8-6c-4-1-6 2-8 5a30 30 0 0 0-3 14c0 4 1 8-2 11h-12v7Zm14 0a10 10 0 0 0 2 3 10 10 0 0 1-2-3Z");
			add_location(path38, file$1, 222, 6, 13890);
			attr_dev(path39, "fill", "var(--pants)");
			attr_dev(path39, "d", "m81 471 1-1-2 1Z");
			add_location(path39, file$1, 226, 6, 15523);
			attr_dev(g3, "id", "ww-2");
			attr_dev(g3, "class", "svelte-113wbwi");
			add_location(g3, file$1, 185, 4, 10533);
			attr_dev(path40, "d", "M549 561c-18 5-36 11-53 19-5 2-10-1-15 0-7 2-13 4-19 4-5 0-7-1-7-6a13 13 0 0 0-2-6l-3-40a13 13 0 0 0-2-7c-5-9-7-19-6-30a100 100 0 0 0 24-5 7 7 0 0 1 2 0c20-1 38-11 56-17a38 38 0 0 1 11-2c2 0 4 0 5-2h39c3 5 8 2 12 3 11 3 20 11 32 14l2 6c-3 7-3 15-5 22l-3 30c-4 9-3 19-5 28-1 5 0 10-5 14-2-4-8-4-9-4-8 4-16 0-24 2-2-1-4-2-6 0-4-1-3-4-3-6v-15c1-6-3-7-7-5l-9 3Z");
			attr_dev(path40, "fill", "var(--shirt)");
			add_location(path40, file$1, 229, 6, 15606);
			attr_dev(path41, "fill", "var(--hair)");
			attr_dev(path41, "d", "m625 492-2-6c13-5 26-13 41-16v-1h11c19 4 21 21 24 36l3 24c1 8-1 11-8 9l-9-3 3-7c1-7-2-9-8-7-3 1-5 0-7-2-2-4-6-5-11-5a22 22 0 0 1-8-1c-4-1-6-2-7-6s3-4 5-5c4-3 8-6 5-11s-7-3-11-2c-7 3-13 8-21 3Z");
			add_location(path41, file$1, 233, 6, 16025);
			attr_dev(path42, "fill", "var(--pants)");
			attr_dev(path42, "d", "M442 495c-1 11 1 21 6 30a13 13 0 0 1 2 7l3 39a7 7 0 0 0-4 4c-5 8-13 12-21 15l-34 12a228 228 0 0 0-51 19c-4 2-6 0-8-2l-8-12c0-2 6-2 3-7-8-11-13-24-19-36a4 4 0 0 1 3-4c14-7 25-17 38-25a481 481 0 0 0 46-30c13-10 28-15 44-10Z");
			add_location(path42, file$1, 237, 6, 16278);
			attr_dev(path43, "fill", "var(--flesh)");
			attr_dev(path43, "d", "M311 564c6 12 11 25 19 36 3 5-3 5-3 7-7 1-14 5-21 7-11 3-23 3-35 7l-18 9-27 10c-9 2-18 3-25 9-6 4-13 7-17 14-4-1-7 4-10 4-5-1-11-2-15-5-6-4-7-9-3-15 2-2 4-5 3-8 12-2 21-9 30-15l2-3c11-4 22-9 28-20a7 7 0 0 0 6-2c10-6 22-9 31-16 17-13 35-18 55-19ZM574 584c8-2 16 2 24-2 1 0 7 0 9 4-3 31-8 62-13 93l-2 16c-1 6 0 7 6 6 3 0 9-5 7 4-1 2 2 2 4 1l21 2c7 1 10 6 14 9 3 2 0 5 0 7s-2 2-4 2c-3 0-7-4-9 2h-7c-9-2-18-2-27-2a41 41 0 0 1-11-1c-9-2-12-6-12-15v-42c0-6-1-9-8-9a36 36 0 0 1-7-1c-9-2-13-7-14-17 0-20 2-40 4-60 0-7 2-13 0-20l9-3c4-2 8-1 7 5v15c0 2-1 5 3 6l-8 42c0 4-1 8 1 11 1 5 6 5 9 5s3-4 2-6c0-18 3-35 2-52Z");
			add_location(path43, file$1, 241, 6, 16561);
			attr_dev(path44, "fill", "var(--hair)");
			attr_dev(path44, "d", "M159 638c1 4-1 7-3 9-4 6-3 11 3 15 4 3 10 4 15 5 3 0 6-5 10-4 2 1 1 3 0 4-6 7-2 14 0 21l3 1 18 6c6 2 6 9 1 12-12 7-25 11-39 7-10-2-16-7-20-17-3-12-10-22-15-32a51 51 0 0 1-4-9c-1-5 0-8 4-11 8-7 18-4 27-7Z");
			add_location(path44, file$1, 245, 6, 17228);
			attr_dev(path45, "fill", "var(--flesh)");
			attr_dev(path45, "d", "M625 492c8 5 14 0 21-3 4-1 8-3 11 2s-1 8-5 11c-2 1-6 1-5 5s3 5 7 6a22 22 0 0 0 8 1c5 0 9 1 12 5 1 2 3 3 6 2 6-2 9 0 8 7l-3 7c-7 2-13 7-22 8-3 0-6 4-9 7s-5 3-8 1l-2-2c-6 4-12-1-17 0-5 0-7-1-10-5-1-10 1-20 3-30 2-7 2-15 5-22Z");
			add_location(path45, file$1, 249, 6, 17492);
			attr_dev(path46, "fill", "var(--hair)");
			attr_dev(path46, "d", "M201 649c7-6 16-7 25-9-2 6 0 10 6 12a20 20 0 0 1 5 2c5 4 5 9-1 12a41 41 0 0 1-23 3 10 10 0 0 1-8-8l-4-12ZM219 601c-6 11-17 16-28 20-4-13-3-15 10-18 6-1 11-1 16-5 2-1 2 1 2 3Z");
			add_location(path46, file$1, 253, 6, 17777);
			attr_dev(g4, "id", "ww-4");
			attr_dev(g4, "class", "svelte-113wbwi");
			add_location(g4, file$1, 228, 4, 15586);
			attr_dev(g5, "class", "shapes svelte-113wbwi");
			add_location(g5, file$1, 92, 2, 1422);
			attr_dev(g6, "class", "svelte-113wbwi");
			toggle_class(g6, "paused", /*isPaused*/ ctx[1]);
			toggle_class(g6, "flip", /*flipsvg*/ ctx[2]);
			add_location(g6, file$1, 91, 0, 1371);
			attr_dev(svg, "xmlns", "http://www.w3.org/2000/svg");
			attr_dev(svg, "viewBox", "0 0 853.2 728.8");
			attr_dev(svg, "height", "100%");
			attr_dev(svg, "width", "100%");
			attr_dev(svg, "class", "svelte-113wbwi");
			add_location(svg, file$1, 90, 0, 1276);
		},
		l: function claim(nodes) {
			throw new Error("options.hydrate only works if the component was compiled with the `hydratable: true` option");
		},
		m: function mount(target, anchor) {
			insert_dev(target, svg, anchor);
			append_dev(svg, t);
			append_dev(svg, g6);
			append_dev(g6, g5);
			append_dev(g5, g0);
			append_dev(g0, path0);
			append_dev(g0, path1);
			append_dev(g0, path2);
			append_dev(g0, path3);
			append_dev(g0, path4);
			append_dev(g0, path5);
			append_dev(g0, path6);
			append_dev(g0, path7);
			append_dev(g0, path8);
			append_dev(g0, path9);
			append_dev(g0, path10);
			append_dev(g0, path11);
			append_dev(g0, path12);
			append_dev(g5, g1);
			append_dev(g1, path13);
			append_dev(g1, path14);
			append_dev(g1, path15);
			append_dev(g1, path16);
			append_dev(g1, path17);
			append_dev(g1, path18);
			append_dev(g1, path19);
			append_dev(g5, g2);
			append_dev(g2, path20);
			append_dev(g2, path21);
			append_dev(g2, path22);
			append_dev(g2, path23);
			append_dev(g2, path24);
			append_dev(g2, path25);
			append_dev(g5, g3);
			append_dev(g3, path26);
			append_dev(g3, path27);
			append_dev(g3, path28);
			append_dev(g3, path29);
			append_dev(g3, path30);
			append_dev(g3, path31);
			append_dev(g3, path32);
			append_dev(g3, path33);
			append_dev(g3, path34);
			append_dev(g3, path35);
			append_dev(g3, path36);
			append_dev(g3, path37);
			append_dev(g3, path38);
			append_dev(g3, path39);
			append_dev(g5, g4);
			append_dev(g4, path40);
			append_dev(g4, path41);
			append_dev(g4, path42);
			append_dev(g4, path43);
			append_dev(g4, path44);
			append_dev(g4, path45);
			append_dev(g4, path46);
			/*g5_binding*/ ctx[4](g5);
			if (if_block) if_block.m(g6, null);
		},
		p: function update(ctx, [dirty]) {
			if (/*isPaused*/ ctx[1]) {
				if (if_block) ; else {
					if_block = create_if_block$1(ctx);
					if_block.c();
					if_block.m(g6, null);
				}
			} else if (if_block) {
				if_block.d(1);
				if_block = null;
			}

			if (dirty & /*isPaused*/ 2) {
				toggle_class(g6, "paused", /*isPaused*/ ctx[1]);
			}

			if (dirty & /*flipsvg*/ 4) {
				toggle_class(g6, "flip", /*flipsvg*/ ctx[2]);
			}
		},
		i: noop,
		o: noop,
		d: function destroy(detaching) {
			if (detaching) detach_dev(svg);
			/*g5_binding*/ ctx[4](null);
			if (if_block) if_block.d();
		}
	};

	dispatch_dev("SvelteRegisterBlock", {
		block,
		id: create_fragment$1.name,
		type: "component",
		source: "",
		ctx
	});

	return block;
}

function instance$1($$self, $$props, $$invalidate) {
	let { $$slots: slots = {}, $$scope } = $$props;
	validate_slots('Workout_wormwalkouts', slots, []);
	let { direction = "right" } = $$props;
	let { isPaused = false } = $$props;
	let { rootElement } = $$props;
	let flipsvg = false;

	if (direction == "left") {
		flipsvg = true;
	}

	const writable_props = ['direction', 'isPaused', 'rootElement'];

	Object.keys($$props).forEach(key => {
		if (!~writable_props.indexOf(key) && key.slice(0, 2) !== '$$' && key !== 'slot') console.warn(`<Workout_wormwalkouts> was created with unknown prop '${key}'`);
	});

	function g5_binding($$value) {
		binding_callbacks[$$value ? 'unshift' : 'push'](() => {
			rootElement = $$value;
			$$invalidate(0, rootElement);
		});
	}

	$$self.$$set = $$props => {
		if ('direction' in $$props) $$invalidate(3, direction = $$props.direction);
		if ('isPaused' in $$props) $$invalidate(1, isPaused = $$props.isPaused);
		if ('rootElement' in $$props) $$invalidate(0, rootElement = $$props.rootElement);
	};

	$$self.$capture_state = () => ({
		direction,
		isPaused,
		rootElement,
		flipsvg
	});

	$$self.$inject_state = $$props => {
		if ('direction' in $$props) $$invalidate(3, direction = $$props.direction);
		if ('isPaused' in $$props) $$invalidate(1, isPaused = $$props.isPaused);
		if ('rootElement' in $$props) $$invalidate(0, rootElement = $$props.rootElement);
		if ('flipsvg' in $$props) $$invalidate(2, flipsvg = $$props.flipsvg);
	};

	if ($$props && "$$inject" in $$props) {
		$$self.$inject_state($$props.$$inject);
	}

	return [rootElement, isPaused, flipsvg, direction, g5_binding];
}

class Workout_wormwalkouts extends SvelteComponentDev {
	constructor(options) {
		super(options);

		init(this, options, instance$1, create_fragment$1, safe_not_equal, {
			direction: 3,
			isPaused: 1,
			rootElement: 0
		});

		dispatch_dev("SvelteRegisterComponent", {
			component: this,
			tagName: "Workout_wormwalkouts",
			options,
			id: create_fragment$1.name
		});

		const { ctx } = this.$$;
		const props = options.props || {};

		if (/*rootElement*/ ctx[0] === undefined && !('rootElement' in props)) {
			console.warn("<Workout_wormwalkouts> was created without expected prop 'rootElement'");
		}
	}

	get direction() {
		throw new Error("<Workout_wormwalkouts>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
	}

	set direction(value) {
		throw new Error("<Workout_wormwalkouts>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
	}

	get isPaused() {
		throw new Error("<Workout_wormwalkouts>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
	}

	set isPaused(value) {
		throw new Error("<Workout_wormwalkouts>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
	}

	get rootElement() {
		throw new Error("<Workout_wormwalkouts>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
	}

	set rootElement(value) {
		throw new Error("<Workout_wormwalkouts>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
	}
}

var workoutWormwalkouts = /*#__PURE__*/Object.freeze({
    __proto__: null,
    'default': Workout_wormwalkouts
});

/* src/workouts/workout-plank.svelte generated by Svelte v3.49.0 */

const file = "src/workouts/workout-plank.svelte";

// (40:0) {#if isPaused}
function create_if_block(ctx) {
	let svg;
	let path;

	const block = {
		c: function create() {
			svg = svg_element("svg");
			path = svg_element("path");
			attr_dev(path, "d", "M10 24h-6v-24h6v24zm10 0h-6v-24h6v24zm-11-23h-4v22h4v-22zm10 0h-4v22h4v-22z");
			add_location(path, file, 40, 129, 3823);
			attr_dev(svg, "viewBox", "-6 -5 36 36");
			attr_dev(svg, "width", "100%");
			attr_dev(svg, "height", "100%");
			attr_dev(svg, "xmlns", "http://www.w3.org/2000/svg");
			attr_dev(svg, "fill-rule", "evenodd");
			attr_dev(svg, "clip-rule", "evenodd");
			add_location(svg, file, 40, 0, 3694);
		},
		m: function mount(target, anchor) {
			insert_dev(target, svg, anchor);
			append_dev(svg, path);
		},
		d: function destroy(detaching) {
			if (detaching) detach_dev(svg);
		}
	};

	dispatch_dev("SvelteRegisterBlock", {
		block,
		id: create_if_block.name,
		type: "if",
		source: "(40:0) {#if isPaused}",
		ctx
	});

	return block;
}

function create_fragment(ctx) {
	let svg;
	let g2;
	let g1;
	let g0;
	let path0;
	let path1;
	let path2;
	let path3;
	let path4;
	let if_block = /*isPaused*/ ctx[1] && create_if_block(ctx);

	const block = {
		c: function create() {
			svg = svg_element("svg");
			g2 = svg_element("g");
			g1 = svg_element("g");
			g0 = svg_element("g");
			path0 = svg_element("path");
			path1 = svg_element("path");
			path2 = svg_element("path");
			path3 = svg_element("path");
			path4 = svg_element("path");
			if (if_block) if_block.c();
			attr_dev(path0, "fill", "var(--hair)");
			attr_dev(path0, "d", "m0 144 3-7 5-2a12 12 0 0 0 7-2 16 16 0 0 1 12-2 72 72 0 0 0 11 2 31 31 0 0 0 6 0c3 0 4 0 4-4 1-3 2-4 5-5 8-3 16-3 24-2 5 1 9-1 14-2 1 0 3-1 3 2a8 8 0 0 1-1 0c-14 6-28 12-43 12l-2 2a13 13 0 0 1-7 8c-7 5-8 15-1 21a48 48 0 0 0 15 9c2 1 5 2 6 5 3-4 7-6 12-6h1l8-5c6-3 11-6 17-7 3 0 1 2 1 2l-9 16-4 7c-1 2 0 4 2 6a98 98 0 0 0 10 9 10 10 0 0 1 4 5c2 6 0 9-7 11a45 45 0 0 1-7 1h-7l9 7a10 10 0 0 1 3 12 6 6 0 0 1-4 3c-13 4-27 6-42 3-12-2-22-7-29-18a27 27 0 0 1-5-15c0-7-3-14-4-21l-9-39-1-1ZM708 46c-1-1 0-1 1-1a22 22 0 0 0 12-4c10-6 21-9 32-10a34 34 0 0 0 4-1c12-3 21 2 31 8 3 2 5 7 6 11l6 21v14a33 33 0 0 0 1 13v4c-3 4-1 9 0 13v6c-3 5-6 6-13 4a42 42 0 0 1-11-6c4-4 6-9 5-15 0-3-2-5-4-6l-5 1c-1 2-3 2-5 1-2 0-3-2-4-4-3-5-7-8-14-7a13 13 0 0 1-1 0 24 24 0 0 1-16-7 8 8 0 0 1-2-6c0-2 0-3 3-4a20 20 0 0 0 7-2c4-2 7-7 6-11-1-6-8-10-14-6a15 15 0 0 1-7 2 21 21 0 0 0-10 3c-1 1-3 0-4-1a18 18 0 0 1-4-10Z");
			add_location(path0, file, 16, 4, 403);
			attr_dev(path1, "d", "M516 3h4c5-4 10-4 15-1a14 14 0 0 0 7 1l28 1c12 0 23 1 35 4 14 3 28 7 41 12 9 4 17 8 24 14a11 11 0 0 1 3 3c2 3 5 3 9 4l13 2a7 7 0 0 1 3 2c1 2 3 3 4 2h1l1 17c0 7-2 12-4 18-2 7-7 13-9 21a69 69 0 0 1-2 7l-1 13a20 20 0 0 0-1 4c0 3-2 5-5 6-4 1-5 4-6 7l-10 32a59 59 0 0 0-2 8c0 2-2 3-3 3a13 13 0 0 0-2 0l-7-2c-3 0-6-1-7-4s-2-3-4-1c-2 1-4 2-7 1l-4-2-18-6-8-2a4 4 0 0 0-4 0c-2 0-3-1-3-3a24 24 0 0 1 0-6 183 183 0 0 1 4-21c1-2 0-2-2-2-11 1-22-1-34-3h-25l-33 4-30 5-33 4c-6 0-6 0-6-6 1-3 2-7 1-10l2-17 5-34a275 275 0 0 1 5-27c3-10 1-21 0-31l-2-15a2 2 0 0 1 1-1c8 0 16 0 24 3l7 2a22 22 0 0 0 3-1c5-2 10-3 16-3a4 4 0 0 0 2-1c5-4 9-4 14-1Z");
			attr_dev(path1, "fill", "var(--shirt)");
			add_location(path1, file, 20, 4, 1343);
			attr_dev(path2, "fill", "var(--flesh)");
			attr_dev(path2, "d", "M99 161c-6 1-11 4-17 7l-8 5h-1c-5 0-9 2-12 6-1-3-4-4-6-5a48 48 0 0 1-15-9c-7-6-6-16 1-21a13 13 0 0 0 7-8l2-2c15 0 29-6 43-12a8 8 0 0 0 1 0l10-4 35-16a88 88 0 0 1 29-6q28-3 57-3l10-2 39-13 38-14a5 5 0 0 1 3-1c-1 5 0 9 3 13l3 6a47 47 0 0 1 7 13c5 14 8 28 15 41-3 2-5 2-8 2l-15 3-26 4-26 2a82 82 0 0 1-17 0 45 45 0 0 0-10 0 45 45 0 0 1-15-1 58 58 0 0 0-29 1 252 252 0 0 1-43 8l-30 1a71 71 0 0 0-25 5Z");
			add_location(path2, file, 24, 4, 2022);
			attr_dev(path3, "d", "M343 136c-7-13-10-27-15-41a47 47 0 0 0-7-13l-3-6c-3-4-4-8-3-13l5-3c1-1 3-2 2-4l1-1c18-7 35-16 51-25l30-18c9-5 18-6 27-7a132 132 0 0 1 18 0l2 15c1 10 3 21 0 31a275 275 0 0 0-5 27l-5 35-2 16c-18 10-38 14-59 17l-27 3c-2 0-3 0-2-2v-8l-1-2c-3 0-5 1-7-1Z");
			attr_dev(path3, "fill", "var(--pants)");
			add_location(path3, file, 28, 4, 2473);
			attr_dev(path4, "fill", "var(--flesh)");
			attr_dev(path4, "d", "m604 167 8 2 18 6 4 2c3 1 5 0 7-1s3-2 4 1 4 4 7 4l7 2-2 7c0 2 0 3 2 3l24 4c5 0 9 2 13 3 6 2 10 1 14-4l6-7a11 11 0 0 1 8-4 49 49 0 0 1 13 0 4 4 0 0 1 4 2 9 9 0 0 0 9 5c2 0 2 1 2 3l-5 4v3a7 7 0 0 1 2 7 3 3 0 0 0 0 3c2 2 2 4 0 6a8 8 0 0 0-2 6 4 4 0 0 1-3 5 2 2 0 0 0-2 2l-2 4a18 18 0 0 1-7 1c-8 0-16 0-24-2a12 12 0 0 0-7 1l-26 9a230 230 0 0 1-34 8c-10 2-21 3-32 3-7-6-11-13-11-23v-27c1-13 2-25 5-38ZM688 123l1-13a69 69 0 0 0 2-7c2-8 7-14 9-21 2-6 4-11 4-18l-1-17 5-1a18 18 0 0 0 4 10c1 1 2 2 4 1a21 21 0 0 1 9-3 15 15 0 0 0 8-2c6-3 13 0 14 7 1 3-2 8-6 10a20 20 0 0 1-8 2l-3 4a8 8 0 0 0 3 6 24 24 0 0 0 16 7 13 13 0 0 0 1 0c7-1 11 2 14 7 1 2 2 4 4 4 2 1 4 1 5-1l5-1c2 1 4 3 4 6 1 6-1 11-5 15l-14 5c-5 2-10 3-15 2-2-1-4 1-6 2l-8 7a11 11 0 0 1-3 1c-4 2-7 0-8-3 0-2-1-2-3-2l-4 2c-2 1-3 1-5-1a1 1 0 0 0-2 0c-2 2-3 0-5-1-1-3-3-3-6-2-5 1-8-1-10-5Z");
			add_location(path4, file, 32, 4, 2775);
			attr_dev(g0, "id", "plank");
			attr_dev(g0, "class", "svelte-bcjzd5");
			add_location(g0, file, 15, 2, 384);
			attr_dev(g1, "class", "shapes svelte-bcjzd5");
			add_location(g1, file, 14, 4, 339);
			attr_dev(g2, "class", "svelte-bcjzd5");
			toggle_class(g2, "paused", /*isPaused*/ ctx[1]);
			add_location(g2, file, 13, 2, 307);
			attr_dev(svg, "xmlns", "http://www.w3.org/2000/svg");
			attr_dev(svg, "viewBox", "0 0 801.3 254.8");
			attr_dev(svg, "height", "100%");
			attr_dev(svg, "width", "100%");
			attr_dev(svg, "class", "svelte-bcjzd5");
			add_location(svg, file, 12, 0, 211);
		},
		l: function claim(nodes) {
			throw new Error("options.hydrate only works if the component was compiled with the `hydratable: true` option");
		},
		m: function mount(target, anchor) {
			insert_dev(target, svg, anchor);
			append_dev(svg, g2);
			append_dev(g2, g1);
			append_dev(g1, g0);
			append_dev(g0, path0);
			append_dev(g0, path1);
			append_dev(g0, path2);
			append_dev(g0, path3);
			append_dev(g0, path4);
			/*g1_binding*/ ctx[2](g1);
			if (if_block) if_block.m(svg, null);
		},
		p: function update(ctx, [dirty]) {
			if (dirty & /*isPaused*/ 2) {
				toggle_class(g2, "paused", /*isPaused*/ ctx[1]);
			}

			if (/*isPaused*/ ctx[1]) {
				if (if_block) ; else {
					if_block = create_if_block(ctx);
					if_block.c();
					if_block.m(svg, null);
				}
			} else if (if_block) {
				if_block.d(1);
				if_block = null;
			}
		},
		i: noop,
		o: noop,
		d: function destroy(detaching) {
			if (detaching) detach_dev(svg);
			/*g1_binding*/ ctx[2](null);
			if (if_block) if_block.d();
		}
	};

	dispatch_dev("SvelteRegisterBlock", {
		block,
		id: create_fragment.name,
		type: "component",
		source: "",
		ctx
	});

	return block;
}

function instance($$self, $$props, $$invalidate) {
	let { $$slots: slots = {}, $$scope } = $$props;
	validate_slots('Workout_plank', slots, []);
	let { isPaused = false } = $$props;
	let { rootElement } = $$props;
	const writable_props = ['isPaused', 'rootElement'];

	Object.keys($$props).forEach(key => {
		if (!~writable_props.indexOf(key) && key.slice(0, 2) !== '$$' && key !== 'slot') console.warn(`<Workout_plank> was created with unknown prop '${key}'`);
	});

	function g1_binding($$value) {
		binding_callbacks[$$value ? 'unshift' : 'push'](() => {
			rootElement = $$value;
			$$invalidate(0, rootElement);
		});
	}

	$$self.$$set = $$props => {
		if ('isPaused' in $$props) $$invalidate(1, isPaused = $$props.isPaused);
		if ('rootElement' in $$props) $$invalidate(0, rootElement = $$props.rootElement);
	};

	$$self.$capture_state = () => ({ isPaused, rootElement });

	$$self.$inject_state = $$props => {
		if ('isPaused' in $$props) $$invalidate(1, isPaused = $$props.isPaused);
		if ('rootElement' in $$props) $$invalidate(0, rootElement = $$props.rootElement);
	};

	if ($$props && "$$inject" in $$props) {
		$$self.$inject_state($$props.$$inject);
	}

	return [rootElement, isPaused, g1_binding];
}

class Workout_plank extends SvelteComponentDev {
	constructor(options) {
		super(options);
		init(this, options, instance, create_fragment, safe_not_equal, { isPaused: 1, rootElement: 0 });

		dispatch_dev("SvelteRegisterComponent", {
			component: this,
			tagName: "Workout_plank",
			options,
			id: create_fragment.name
		});

		const { ctx } = this.$$;
		const props = options.props || {};

		if (/*rootElement*/ ctx[0] === undefined && !('rootElement' in props)) {
			console.warn("<Workout_plank> was created without expected prop 'rootElement'");
		}
	}

	get isPaused() {
		throw new Error("<Workout_plank>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
	}

	set isPaused(value) {
		throw new Error("<Workout_plank>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
	}

	get rootElement() {
		throw new Error("<Workout_plank>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
	}

	set rootElement(value) {
		throw new Error("<Workout_plank>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
	}
}

var workoutPlank = /*#__PURE__*/Object.freeze({
    __proto__: null,
    'default': Workout_plank
});

export default app;
//# sourceMappingURL=main.js.map
